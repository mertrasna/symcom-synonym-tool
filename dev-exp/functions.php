<?php
	$globalVariablesArray = array(
		'rownum' => 1,
		'Symptomnummer' => 1,
		'SeiteOriginalVon' => '',
		'SeiteOriginalBis' => '',
		'prueferFromParray' => array(),
		'Beschreibung' => '',
		'Fussnote' => '',
		'Graduierung' => '',
		'BereichID' => '',
		'isKDCommandChapter' => 0, 
		'aLiteraturquellen' => array(),
		'EntnommenAus' => '',
		'Verweiss' => '',
		'Unklarheiten' => '',
		'Kommentar' => '',
		'bracketedString' => '',
		'timeString' => '',
		// 'parenthesesStringArray' => array(),
		// 'timeStringArray' => array(),
		// 'bracketedStringArray' => array(),
		// 'strongRedStringArray' => array(),
		// 'strongBlueStringArray' => array(),
		'needApproval' => 0,
		'remedyArray' => array(),
		'prueferArray' => array(),
		'referenceArray' => array(),
		'prueferPriority' => 0,
		'remedyPriority' => 0,
		'partOfSymptomPriority' => 0,
		'referenceWithNoAuthorPriority' => 0,
		'referencePriority' => 0,
		'remedyWithSymptomPriority' => 0,
		'moreThanOneTagStringPriority' => 0,
		'aaoHyphenPriority' => 0,
		'hyphenPrueferPriority' => 0,
		'hyphenReferencePriority' => 0,
		'hyphenApprovalString' => "",
		'directOrderPriority' => 0,
		'tagsApprovalString' => "",
		'isPreDefinedTagsApproval' => 0,
		'symptomOfDifferentRemedy' => "",
		'allBrackets' => array(),
		'endingBracketsArray' => array(),
		'middleBracketArray' => array(),
		'approvalFor' => 0, // (0 = end bracket, 1 = middle bracket)
		'middleBracketApprovalString' => "", 
		'isCodingWithSymptomNumber' => 1, 
		'isSymptomNumberMismatch' => 0, 
		'searchableText' => "", 
		'isPreDefinedReferenceSection' => 0, 
		'preDefinedReferenceArray' => array(), 
		'preDefinedReferenceNumberArray' => array(), 
		'preDefinedSymptomReferenceLinkingArray' => array(), 
		'preDefinedSymptomPrueferLinkingArray' => array(), 
		'preDefinedaLiteraturquellen' => array(), 
		'chapterInformation' => "", 
		'modality' => "",
		'isExcludedInComparison' => 0,
		'excludingSymptomsChaptersArray' => array(),
		'sourceComment' => "",
		'importComment' => "",
		'BeschreibungPlain' => "",
		'thetaDiagnosisSymptomWithoutTag' => "",
		'BeschreibungOriginal' => "",
		'middleBracketString' => "",
		'lastBracketedString' => "",
		'approvableString' => "",
		'masterId' => "",
		'bonningMasterId' => "",
		'bonninghausenHeading' => "",
		'bonninghausenCleanHeading' => "",
		'rawLineForBonninghausen' => ""
	);

	$timeStringEndTagArray = array(
		' St)',
		' St).',
		' St.)',
		' St. )',
		' St.).',
		'Tagen.)',
		'Tagen.).',
		'Tagen)',
		'Tagen).',
		'Nacht)',
		'Tag)',
		'Tag).',
		'Tag.)',
		'Tag.).',
		' T)',
		' T).',
		' T.)',
		' T.).',
		'Uhr.).',
		'Uhr).',
		'Uhr)',
		'Uhr.)',
		'Uhr),',
		'Uhr.),',
		'hour.).',
		'hour).',
		'hour)',
		'hour.)',
		'hour),',
		'hour.),',
		'hours)',
		'hours).',
		'hours.)',
		'hours.).',
		'hours),',
		'hours.),',
		'Hour.).',
		'Hour).',
		'Hour)',
		'Hour.)',
		'Hour),',
		'Hour.),',
		'Hours)',
		'Hours).',
		'Hours.)',
		'Hours.).',
		'Hours),',
		'Hours.),',
		'minute.).',
		'minute).',
		'minute.)',
		'minute)',
		'minute),',
		'minute.),',
		'minutes)',
		'minutes).',
		'minutes.)',
		'minutes.).',
		'minutes),',
		'minutes.),',
		'Minute.).',
		'Minute).',
		'Minute.)',
		'Minute)',
		'Minute),',
		'Minute.),',
		'Minutes)',
		'Minutes).',
		'Minutes.)',
		'Minutes.).',
		'Minutes),',
		'Minutes.),',
		'Noon)',
		'Noon).',
		'Noon.)',
		'Noon.).',
		'Noon),',
		'Noon.),',
		'noon)',
		'noon).',
		'noon.)',
		'noon.).',
		'noon),',
		'noon.),',
		'Afternoon)',
		'Afternoon).',
		'Afternoon.)',
		'Afternoon.).',
		'Afternoon),',
		'Afternoon.),',
		'afternoon)',
		'afternoon).',
		'afternoon.)',
		'afternoon.).',
		'afternoon),',
		'afternoon.),',
		'days)',
		'days).',
		'days.)',
		'days. )',
		'days.).',
		'days),',
		'days.),',
		'day)',
		'day).',
		'day.)',
		'day. )',
		'day.).',
		'day),',
		'day.),',
		'Wochen)',
		'Wochen).',
		'Wochen.)',
		'Wochen. )',
		'Wochen.).',
		'Wochen),',
		'Wochen.),',
		'wochen)',
		'wochen).',
		'wochen.)',
		'wochen. )',
		'wochen.).',
		'wochen),',
		'wochen.),',
		'Woche)',
		'Woche).',
		'Woche.)',
		'Woche. )',
		'Woche.).',
		'Woche),',
		'Woche.),',
		'woche)',
		'woche).',
		'woche.)',
		'woche. )',
		'woche.).',
		'woche),',
		'woche.),',
		'Woch)',
		'Woch).',
		'Woch.)',
		'Woch. )',
		'Woch.).',
		'Woch),',
		'Woch.),',
		'woch)',
		'woch).',
		'woch.)',
		'woch. )',
		'woch.).',
		'woch),',
		'woch.),',
		'Abends)',
		'Abends).',
		'Abends.)',
		'Abends. )',
		'Abends.).',
		'Abends),',
		'Abends.),',
		'abends)',
		'abends).',
		'abends.)',
		'abends. )',
		'abends.).',
		'abends),',
		'abends.),',
		'Tage)',
		'Tage).',
		'Tage.)',
		'Tage. )',
		'Tage.).',
		'Tage),',
		'Tage.),',
		'tage)',
		'tage).',
		'tage.)',
		'tage. )',
		'tage.).',
		'tage),',
		'tage.),',
		'Min)',
		'Min).',
		'Min.)',
		'Min. )',
		'Min.).',
		'Min),',
		'Min.),',
		'min)',
		'min).',
		'min.)',
		'min. )',
		'min.).',
		'min),',
		'min.),',
		'Sogleich)',
		'Sogleich).',
		'Sogleich.)',
		'Sogleich. )',
		'Sogleich.).',
		'Sogleich),',
		'Sogleich.),',
		'sogleich)',
		'sogleich).',
		'sogleich.)',
		'sogleich. )',
		'sogleich.).',
		'sogleich),',
		'sogleich.),',
		'Stunden)',
		'Stunden).',
		'Stunden.)',
		'Stunden. )',
		'Stunden.).',
		'Stunden),',
		'Stunden.),',
		'stunden)',
		'stunden).',
		'stunden.)',
		'stunden. )',
		'stunden.).',
		'stunden),',
		'stunden.),',
		'Stunde lang)',
		'Stunde lang).',
		'Stunde lang.)',
		'Stunde lang. )',
		'Stunde lang.).',
		'Stunde lang),',
		'Stunde lang.),',
		'Stunde Lang)',
		'Stunde Lang).',
		'Stunde Lang.)',
		'Stunde Lang. )',
		'Stunde Lang.).',
		'Stunde Lang),',
		'Stunde Lang.),',
		'stunde Lang)',
		'stunde Lang).',
		'stunde Lang.)',
		'stunde Lang. )',
		'stunde Lang.).',
		'stunde Lang),',
		'stunde Lang.),',
		'stunde lang)',
		'stunde lang).',
		'stunde lang.)',
		'stunde lang. )',
		'stunde lang.).',
		'stunde lang),',
		'stunde lang.),',
		'Einn)',
		'Einn).',
		'Einn.)',
		'Einn. )',
		'Einn.).',
		'Einn),',
		'Einn.),',
		'einn)',
		'einn).',
		'einn.)',
		'einn. )',
		'einn.).',
		'einn),',
		'einn.),'
	);

	for ($i=0; $i < 10; $i++) { 
		$hr = $i." h)";
		$hrWdot = $i." h).";
		$hrEndingDot = $i." h.)";
		$hrEndingDotWdot = $i." h.).";
		// $amBothDot = $i." a.m.)";
		// $amBothDotWdot = $i." a.m.).";
		$hrNoSpace = $i."h)";
		$hrNoSpaceWdot = $i."h).";
		$hrNoSpaceEndingDot = $i."h.)";
		$hrNoSpaceEndingDotWdot = $i."h.).";
		// $amNoSpaceBothDot = $i."a.m.)";
		// $amNoSpaceBothDotWdot = $i."a.m.).";
		
		$am = $i." am)";
		$amWdot = $i." am).";
		$amEndingDot = $i." am.)";
		$amEndingDotWdot = $i." am.).";
		$amBothDot = $i." a.m.)";
		$amBothDotWdot = $i." a.m.).";
		$amNoSpace = $i."am)";
		$amNoSpaceWdot = $i."am).";
		$amNoSpaceEndingDot = $i."am.)";
		$amNoSpaceEndingDotWdot = $i."am.).";
		$amNoSpaceBothDot = $i."a.m.)";
		$amNoSpaceBothDotWdot = $i."a.m.).";

		$AM = $i." AM)";
		$AMWdot = $i." AM).";
		$AMEndingDot = $i." AM.)";
		$AMEndingDotWdot = $i." AM.).";
		$AMBothDot = $i." A.M.)";
		$AMBothDotWdot = $i." A.M.).";
		$AMNoSpace = $i."AM)";
		$AMNoSpaceWdot = $i."AM).";
		$AMNoSpaceEndingDot = $i."AM.)";
		$AMNoSpaceEndingDotWdot = $i."AM.).";
		$AMNoSpaceBothDot = $i."A.M.)";
		$AMNoSpaceBothDotWdot = $i."A.M.).";

		$pm = $i." pm)";
		$pmWdot = $i." pm).";
		$pmEndingDot = $i." pm.)";
		$pmEndingDotWdot = $i." pm.).";
		$pmBothDot = $i." p.m.)";
		$pmBothDotWdot = $i." p.m.).";
		$pmNoSpace = $i."pm)";
		$pmNoSpaceWdot = $i."pm).";
		$pmNoSpaceEndingDot = $i."pm.)";
		$pmNoSpaceEndingDotWdot = $i."pm.).";
		$pmNoSpaceBothDot = $i."p.m.)";
		$pmNoSpaceBothDotWdot = $i."p.m.).";

		$PM = $i." PM)";
		$PMWdot = $i." PM).";
		$PMEndingDot = $i." PM.)";
		$PMEndingDotWdot = $i." PM.).";
		$PMBothDot = $i." P.M.)";
		$PMBothDotWdot = $i." P.M.).";
		$PMNoSpace = $i."PM)";
		$PMNoSpaceWdot = $i."PM).";
		$PMNoSpaceEndingDot = $i."PM.)";
		$PMNoSpaceEndingDotWdot = $i."PM.).";
		$PMNoSpaceBothDot = $i."P.M.)";
		$PMNoSpaceBothDotWdot = $i."P.M.).";


		array_push($timeStringEndTagArray, $am, $amWdot, $amEndingDot, $amEndingDotWdot, $amBothDot, $amBothDotWdot, $amNoSpace, $amNoSpaceWdot, $amNoSpaceEndingDot, $amNoSpaceEndingDotWdot, $amNoSpaceBothDot, $amNoSpaceBothDotWdot, $AM, $AMWdot, $AMEndingDot, $AMEndingDotWdot, $AMBothDot, $AMBothDotWdot, $AMNoSpace, $AMNoSpaceWdot, $AMNoSpaceEndingDot, $AMNoSpaceEndingDotWdot, $AMNoSpaceBothDot, $AMNoSpaceBothDotWdot, $pm, $pmWdot, $pmEndingDot, $pmEndingDotWdot, $pmBothDot, $pmBothDotWdot, $pmNoSpace, $pmNoSpaceWdot, $pmNoSpaceEndingDot, $pmNoSpaceEndingDotWdot, $pmNoSpaceBothDot, $pmNoSpaceBothDotWdot, $PM, $PMWdot, $PMEndingDot, $PMEndingDotWdot, $PMBothDot, $PMBothDotWdot, $PMNoSpace, $PMNoSpaceWdot, $PMNoSpaceEndingDot, $PMNoSpaceEndingDotWdot, $PMNoSpaceBothDot, $PMNoSpaceBothDotWdot, $hr, $hrWdot, $hrEndingDot, $hrEndingDotWdot, $hrNoSpace, $hrNoSpaceWdot, $hrNoSpaceEndingDot, $hrNoSpaceEndingDotWdot);
	}

	// 27-06-2023

	function getSelectboxSourceTitles(){
		global $db;
		global $date;
		$html = "";
		$htmlBucher = '<optgroup label="BÃ¼cher/Quelle">';
        $htmlZeitschriften = '<optgroup label="Zeitschriften">';
        $htmlBInner = '';
        $htmlZInner = '';
		$quelleResult = mysqli_query($db,"SELECT quelle.quelle_id, quelle.code, quelle.titel, quelle.jahr, quelle.band, quelle.nummer, quelle.auflage, quelle.quelle_type_id, quelle.autor_or_herausgeber as bucher_autor_or_herausgeber FROM quelle ORDER BY quelle.quelle_type_id ASC");
		if(mysqli_num_rows($quelleResult) > 0){
			while($quelleRow = mysqli_fetch_array($quelleResult)){
				$quellen_value = "";
				$quellen_value = getQuelleAbbreviationForMainSection($quelleRow['quelle_id']);
				$quellen_value .= ($quellen_value != "") ? ', '.$quelleRow['titel'] : $quelleRow['titel'];

				if($quelleRow['quelle_type_id'] == 1)
                    $htmlBInner .= '<option value="'.$quelleRow['quelle_id'].'">'.$quellen_value.'</option>';
                else if($quelleRow['quelle_type_id'] == 2)
                    $htmlZInner .= '<option value="'.$quelleRow['quelle_id'].'">'.$quellen_value.'</option>';
			}
		}
		if($htmlBInner == '')
            $htmlBucher .= '<option value="" disabled="disabled">None</option>';
        else
            $htmlBucher .= $htmlBInner;
        if($htmlZInner == '')
            $htmlZeitschriften .= '<option value="" disabled="disabled">None</option>';
        else
            $htmlZeitschriften .= $htmlZInner;
        $htmlBucher .= '</optgroup>';
        $htmlZeitschriften .= '</optgroup>';

        $html .= $htmlBucher;
        $html .= $htmlZeitschriften;
        return $html;
	}

	// 04-04-2023
	// function getMainDynamicSourceCode($sourceId){
	function getQuelleAbbreviationForMainSection($quelleId){
		global $db;
		global $date;
		$returnData = "";
		if($quelleId != ""){
			$quelleResult = mysqli_query($db,"SELECT quelle.quelle_id, quelle.title_abbreviation_1, quelle.title_abbreviation_2, quelle.title_abbreviation_3, quelle.title_abbreviation_4, quelle.code, quelle.titel, quelle.jahr, quelle.band, quelle.nummer, quelle.auflage, quelle.quelle_type_id, autor.code as autor_abbreviation FROM quelle LEFT JOIN quelle_autor ON quelle.quelle_id = quelle_autor.quelle_id LEFT JOIN autor ON quelle_autor.autor_id = autor.autor_id WHERE quelle.quelle_id = '".$quelleId."'");
			
			if(mysqli_num_rows($quelleResult) > 0){
				$quelleData = mysqli_fetch_assoc($quelleResult);
				$quelleAbbreviation = "";
				$authorCode = "";
				$authorResult = mysqli_query($db,"SELECT autor.code as autor_abbreviation FROM autor LEFT JOIN quelle_autor ON autor.autor_id = quelle_autor.autor_id WHERE quelle_autor.quelle_id = '".$quelleId."' ORDER BY quelle_autor.insert_order ASC");
				if(mysqli_num_rows($authorResult) > 0){
					while($authorData = mysqli_fetch_array($authorResult)){
						$authorCode .= $authorData['autor_abbreviation'];
					}
				}
				if($quelleData['quelle_type_id'] == 3){
					if($quelleData['code'] != "")
						$quelleAbbreviation = $quelleData['code'];
					else
						$quelleAbbreviation = $quelleData['titel'];
				}else if($quelleData['quelle_type_id'] == 2){
					if($authorCode != "")
						$quelleAbbreviation .= $authorCode;
					if($quelleData['title_abbreviation_3'] != "")
						$quelleAbbreviation .= " ".$quelleData['title_abbreviation_3'];
					if($quelleData['band'] != "")
						$quelleAbbreviation .= $quelleData['band'];
					if($quelleData['nummer'] != "")
						$quelleAbbreviation .= $quelleData['nummer'];
					if($quelleData['jahr'] != "")
						$quelleAbbreviation .= ($quelleData['jahr'] != "") ? " ".$quelleData['jahr'] : "";
				}else{
					if($authorCode != "")
						$quelleAbbreviation .= $authorCode;
					if($quelleData['title_abbreviation_3'] != "")
						$quelleAbbreviation .= " ".$quelleData['title_abbreviation_3'];
					// if($quelleData['auflage'] != "")
					// 	$quelleAbbreviation .= $quelleData['auflage'];
					if($quelleData['band'] != "")
						$quelleAbbreviation .= $quelleData['band'];
					if($quelleData['jahr'] != "")
						$quelleAbbreviation .= ($quelleData['jahr'] != "") ? " ".$quelleData['jahr'] : "";
				}
				if($quelleAbbreviation != "")
					$quelleAbbreviation = rtrim($quelleAbbreviation);
				$returnData = $quelleAbbreviation;
			}
		}
		return $returnData;
	}

	/*
	1st param = Displaying symptom's quelle_id
	2nd param = Comparing symptom's quelle_id when it has CE and SWAP CE
				$dataArray['ce_swapce_symptoms_quelle_id'] = "";
	3rd param = Displaying options of quelle abbreviation (0, 1, 2, 3)
	Function used for abbreviation in user view page.
	*/
	function getQuelleAbbreviation($quelleId, $dataArray, $options= null){
		global $db;
		$returnString = "";
		if($quelleId != ""){
			$quelleResult = mysqli_query($db,"SELECT quelle.quelle_id, quelle.title_abbreviation_1, quelle.title_abbreviation_2, quelle.title_abbreviation_3, quelle.title_abbreviation_4, quelle.code, quelle.titel, quelle.jahr, quelle.band, quelle.nummer, quelle.auflage, quelle.quelle_type_id, autor.code as autor_abbreviation FROM quelle LEFT JOIN quelle_autor ON quelle.quelle_id = quelle_autor.quelle_id LEFT JOIN autor ON quelle_autor.autor_id = autor.autor_id WHERE quelle.quelle_id = '".$quelleId."'");
			if(mysqli_num_rows($quelleResult) > 0){
				$quelleData = mysqli_fetch_assoc($quelleResult);
				$quelleAbbreviation = "";
				$autorAbbreviation = "";
				$autorAbbreviationOfConnected = "";
				$checkIfConnectEditedSymptom = 0;
				//fetching info title abbreviation 1, 2 and jahr of the source
				$quelleTitleAbbrOne = $quelleData['title_abbreviation_1'];
				$quelleTitleAbbrOTwo = $quelleData['title_abbreviation_2'];
				$quelleJahr = $quelleData['jahr'];
				$quelleBand = $quelleData['band'];

				//fetching all related author abbreviation of the source
				$authorResult = mysqli_query($db,"SELECT autor.code as autor_abbreviation FROM autor LEFT JOIN quelle_autor ON autor.autor_id = quelle_autor.autor_id WHERE quelle_autor.quelle_id = '".$quelleId."' ORDER BY quelle_autor.insert_order ASC");
				if(mysqli_num_rows($authorResult) > 0){
					while($authorData = mysqli_fetch_array($authorResult)){
						$autorAbbreviation .= $authorData['autor_abbreviation'];
					}
				}

				//fetching all info if the symptom has connect edit connection; info of latest connected symptom is fetched 
				if(isset($dataArray['ce_swapce_symptoms_quelle_id']) AND $dataArray['ce_swapce_symptoms_quelle_id'] != ""){
					$quelleInfoOfConnectedResult = mysqli_query($db,"SELECT quelle.quelle_id, quelle.title_abbreviation_1, quelle.title_abbreviation_2, quelle.title_abbreviation_3, quelle.title_abbreviation_4, quelle.code, quelle.titel, quelle.jahr, quelle.band, quelle.nummer, quelle.auflage, quelle.quelle_type_id, autor.code as autor_abbreviation FROM quelle LEFT JOIN quelle_autor ON quelle.quelle_id = quelle_autor.quelle_id LEFT JOIN autor ON quelle_autor.autor_id = autor.autor_id WHERE quelle.quelle_id = '".$dataArray['ce_swapce_symptoms_quelle_id']."'");
					if(mysqli_num_rows($quelleInfoOfConnectedResult) > 0){
						$checkIfConnectEditedSymptom = 1;
						$quelleDataOfConnected = mysqli_fetch_assoc($quelleInfoOfConnectedResult);
						//fetching info title abbreviation 1, 2 and jahr of the connected symptom source
						$quelleTitleAbbrOneConnected = $quelleDataOfConnected['title_abbreviation_1'];
						$quelleTitleAbbrOTwoConnected = $quelleDataOfConnected['title_abbreviation_2'];
						$quelleJahrConnected = $quelleDataOfConnected['jahr'];
						$quelleBandConnected = $quelleDataOfConnected['band'];

						//fetching all related author abbreviation of the connected symptom source
						$authorOfConnectedResult = mysqli_query($db,"SELECT autor.code as autor_abbreviation FROM autor LEFT JOIN quelle_autor ON autor.autor_id = quelle_autor.autor_id WHERE quelle_autor.quelle_id = '".$dataArray['ce_swapce_symptoms_quelle_id']."' ORDER BY quelle_autor.insert_order ASC");
						if(mysqli_num_rows($authorOfConnectedResult) > 0){
							while($authorDataOfConnected = mysqli_fetch_array($authorOfConnectedResult)){
								$autorAbbreviationOfConnected .= $authorDataOfConnected['autor_abbreviation'];
							}
						}
					}
				}
				if($options != ""){
					switch ($options) {
					  	case "0":
					  		// No abbreviation(default)
					  		// e.g. Pressure in the eyes.  = none citation  = default
					    	$quelleAbbreviation = "";
					    	break;
					  	case "1":
					  		// e.g. Pressure in the eyes. Hr2  				= author + abbreviation 1
					    	if($autorAbbreviation != "")
								$quelleAbbreviation .= $autorAbbreviation;
							if($quelleTitleAbbrOne != "")
								$quelleAbbreviation .= $quelleTitleAbbrOne;
							//For connect edited symptom
							// e.g. Pressure in the eyes. Hr2  				= author + abbreviation 1 / connected author + connected abbreviation 1
							if($checkIfConnectEditedSymptom){
								$quelleAbbreviation .= "/";
								if($autorAbbreviationOfConnected != "")
									$quelleAbbreviation .= $autorAbbreviationOfConnected;
								if($quelleTitleAbbrOneConnected != "")
									$quelleAbbreviation .= $quelleTitleAbbrOneConnected;
							}
					    	break;
					  	case "2":
					  		// 	e.g. Pressure in the eyes. Hr2 1884 		= author + abbreviation 1 + year 
					   		if($autorAbbreviation != "")
								$quelleAbbreviation .= $autorAbbreviation;
							if($quelleTitleAbbrOne != "")
								$quelleAbbreviation .= $quelleTitleAbbrOne." ";
							if($quelleJahr != "")
								$quelleAbbreviation .= $quelleJahr;
							//For connect edited symptom
							// e.g. Pressure in the eyes. Hr2  				= author + abbreviation 1 + year / connected author + connected abbreviation 1 + connected year
 							if($checkIfConnectEditedSymptom){
								$quelleAbbreviation .= "/";
								if($autorAbbreviationOfConnected != "")
									$quelleAbbreviation .= $autorAbbreviationOfConnected;
								if($quelleTitleAbbrOneConnected != "")
									$quelleAbbreviation .= $quelleTitleAbbrOneConnected;
								if($quelleJahrConnected != "")
									$quelleAbbreviation .= $quelleJahrConnected;
							}
					    	break;
					  	case "3":
					  		// e.g. Pressure in the eyes. Hr Condensed 1884  	= author + abbreviation 2 + year
					    	if($autorAbbreviation != "")
								$quelleAbbreviation .= $autorAbbreviation." ";
							if($quelleTitleAbbrOTwo != "")
								$quelleAbbreviation .= $quelleTitleAbbrOTwo;
							if($quelleBand != "")
								$quelleAbbreviation .= $quelleBand." ";
							if($quelleJahr!= "")
								$quelleAbbreviation .= $quelleJahr;
							//For connect edited symptom
							// e.g. Pressure in the eyes. Hr2  				= author + abbreviation 2 + year / connected author + connected abbreviation 2 + connected year
							if($checkIfConnectEditedSymptom){
								$quelleAbbreviation .= "/";
								if($autorAbbreviationOfConnected != "")
									$quelleAbbreviation .= $autorAbbreviationOfConnected;
								if($quelleTitleAbbrOTwoConnected != "")
									$quelleAbbreviation .= $quelleTitleAbbrOTwoConnected;
								if($quelleBandConnected != "")
									$quelleAbbreviation .= $quelleBandConnected;
								if($quelleJahrConnected != "")
									$quelleAbbreviation .= $quelleJahrConnected;
							}
					    	break;
					  	default:
					    	$quelleAbbreviation = "";
					}
				}
				if($quelleAbbreviation != "")
					$quelleAbbreviation = rtrim($quelleAbbreviation);
				$returnString = $quelleAbbreviation;
			}
		}

		return $returnString;
	}

	function removeBlankParenthesesFormSearchableText($string, $modifiedStringPart = NULL){
		if($string != ""){
			$lastOpenedOccurred = mb_strripos ( $string, '(' );
			if($lastOpenedOccurred !== false){
				$remainingOccurrenceToEndingString = mb_substr($string, $lastOpenedOccurred);
				$remainingBeginingToOccurrenceString = mb_substr($string, 0, $lastOpenedOccurred);
				$modifiedStringPart = $remainingOccurrenceToEndingString.$modifiedStringPart;
				if($remainingOccurrenceToEndingString != "") {
					// echo htmlentities($remainingOccurrenceToEndingString)."----<br>";
					$lastEndOccurred = mb_strripos ( $remainingOccurrenceToEndingString, ')' );
					if($lastEndOccurred !== false) {
						$tagString = mb_substr($remainingOccurrenceToEndingString, 0, $lastEndOccurred+1);
						$cleanTagString = strip_tags($tagString);
						$cleanTagString = preg_replace('#\(\s*\)#', '', $cleanTagString);
						if($cleanTagString == ""){
							$modifiedStringPart = str_replace ( array (
									'(',
									')' 
								), array (
									"",
									"" 
								), $remainingOccurrenceToEndingString );
						}
						// echo htmlentities($modifiedStringPart)."----<br>"; exit;

						if($remainingBeginingToOccurrenceString != "")
							return removeBlankParenthesesFormSearchableText($remainingBeginingToOccurrenceString, $modifiedStringPart);
						else
							$string = ($string == $modifiedStringPart) ? $string : $string.$modifiedStringPart;
					} else {
						if($remainingBeginingToOccurrenceString != "")
							return removeBlankParenthesesFormSearchableText($remainingBeginingToOccurrenceString, $modifiedStringPart);
						else
							$string = ($string == $modifiedStringPart) ? $string : $string.$modifiedStringPart;
					}
				} else {
					if($remainingBeginingToOccurrenceString != "")
						return removeBlankParenthesesFormSearchableText($remainingBeginingToOccurrenceString, $modifiedStringPart);
					else
						$string = ($string == $modifiedStringPart) ? $string : $string.$modifiedStringPart;
				}
			} else {
				$string = ($string == $modifiedStringPart) ? $string : $string.$modifiedStringPart;
			}
		}
		return $string;
	}

	function removeBlankBracketsFormSearchableText($string, $modifiedStringPart = NULL){
		if($string != ""){
			$lastOpenedOccurred = mb_strripos ( $string, '[' );
			if($lastOpenedOccurred !== false){
				$remainingOccurrenceToEndingString = mb_substr($string, $lastOpenedOccurred);
				$remainingBeginingToOccurrenceString = mb_substr($string, 0, $lastOpenedOccurred);
				$modifiedStringPart = $remainingOccurrenceToEndingString.$modifiedStringPart;
				if($remainingOccurrenceToEndingString != "") {
					$lastEndOccurred = mb_strripos ( $remainingOccurrenceToEndingString, ']' );
					if($lastEndOccurred !== false) {
						$tagString = mb_substr($remainingOccurrenceToEndingString, 0, $lastEndOccurred+1);
						$cleanTagString = strip_tags($tagString);
						$cleanTagString = preg_replace('#\[\s*\]#', '', $cleanTagString);
						if($cleanTagString == ""){
							$modifiedStringPart = str_replace ( array (
									'[',
									']' 
								), array (
									"",
									"" 
								), $remainingOccurrenceToEndingString );
						}
						if($remainingBeginingToOccurrenceString != "")
							return removeBlankParenthesesFormSearchableText($remainingBeginingToOccurrenceString, $modifiedStringPart);
						else
							$string = ($string == $modifiedStringPart) ? $string : $string.$modifiedStringPart;
					} else {
						if($remainingBeginingToOccurrenceString != "")
							return removeBlankParenthesesFormSearchableText($remainingBeginingToOccurrenceString, $modifiedStringPart);
						else
							$string = ($string == $modifiedStringPart) ? $string : $string.$modifiedStringPart;
					}
				} else {
					if($remainingBeginingToOccurrenceString != "")
						return removeBlankParenthesesFormSearchableText($remainingBeginingToOccurrenceString, $modifiedStringPart);
					else
						$string = ($string == $modifiedStringPart) ? $string : $string.$modifiedStringPart;
				}
			} else {
				$string = ($string == $modifiedStringPart) ? $string : $string.$modifiedStringPart;
			}
		}
		return $string;
	}

	// Custom multibyte preg_match_all function
	// Written by: Chuckie 
	function mb_preg_match_all($ps_pattern, $ps_subject, &$pa_matches, $pn_flags = PREG_PATTERN_ORDER, $pn_offset = 0, $ps_encoding = NULL) {
		// WARNING! - All this function does is to correct offsets, nothing else:
	  	//
	  	if (is_null($ps_encoding))
	    	$ps_encoding = mb_internal_encoding();

	  	$pn_offset = strlen(mb_substr($ps_subject, 0, $pn_offset, $ps_encoding));
	  	$ret = preg_match_all($ps_pattern, $ps_subject, $pa_matches, $pn_flags, $pn_offset);

	  	if ($ret && ($pn_flags & PREG_OFFSET_CAPTURE))
	    	foreach($pa_matches as &$ha_match)
	      		foreach($ha_match as &$ha_match)
	        		$ha_match[1] = mb_strlen(substr($ps_subject, 0, $ha_match[1]), $ps_encoding);
	    	//
	    	// (code is independent of PREG_PATTER_ORDER / PREG_SET_ORDER)

	  	return $ret;
	}

	// Converting the symptom to the original format(means the book format as it was found in the book)
	function convertSymptomToOriginal($symptomId, $symptom, $originalQuelleId, $arzneiId, $includeGrade = null){
		global $db;
		if($symptom != "" AND $originalQuelleId != ""){
			$conversionArr = array(
				'parentheses-normal' => '',
				'bar-one-normal' => '| ',
				'bar-two-normal' => '|| ',
				'bar-three-normal' => 'â ',
				'bar-three-and-half-normal' => 'â| ',
				'bar-four-normal' => 'ââ ',
				'bar-four-and-half-normal' => 'â| â ',
				'bar-five-normal' => '>> ',
				'pi-normal' => 'Ï ',
				'endwithdegree-ssbold' => 'ss', // bold is converting to spaced characters(here it is "ss")
				'endwithdegree-embold' => 'em,ss', // bold is converting to spaced characters(here it is "ss")
				'endwithdegree-ssem' => 'ss,em',
				'endwithdegree-ss' => 'ss',
				'endwithdegree-em' => 'em',
				'endwithdegree-normalgross' => '',
				'endwithdegree-normal' => '',
				'endwithdegree-bold' => 'ss', // bold is converting to spaced characters(here it is "ss")
				'endwithdegree-grossbold' => 'ss', // bold is converting to spaced characters(here it is "ss")
				'endwithsinglet-ssbold' => 'ss, strong', // bold is converting to spaced characters(here it is "ss")
				'endwithsinglet-embold' => 'em,ss, strong', // bold is converting to spaced characters(here it is "ss")
				'endwithsinglet-ssem' => 'ss,em',
				'endwithsinglet-ss' => 'ss',
				'endwithsinglet-em' => 'em',
				'endwithsinglet-normalgross' => '',
				'endwithsinglet-normal' => '',
				'endwithsinglet-bold' => 'ss,strong', // bold is converting to spaced characters(here it is "ss")
				'endwithsinglet-grossbold' => 'ss, strong', // bold is converting to spaced characters(here it is "ss")
				'endwithdoublet-ssbold' => 'ss, strong', // bold is converting to spaced characters(here it is "ss")
				'endwithdoublet-embold' => 'em,ss, strong', // bold is converting to spaced characters(here it is "ss")
				'endwithdoublet-ssem' => 'ss,em',
				'endwithdoublet-ss' => 'ss',
				'endwithdoublet-em' => 'em',
				'endwithdoublet-normalgross' => '',
				'endwithdoublet-normal' => '',
				'endwithdoublet-bold' => 'ss,strong', // bold is converting to spaced characters(here it is "ss")
				'endwithdoublet-grossbold' => 'ss, strong', // bold is converting to spaced characters(here it is "ss")
				'asterisk-ssbold' => 'ss', // bold is converting to spaced characters(here it is "ss")
				'asterisk-embold' => 'em,ss', // bold is converting to spaced characters(here it is "ss")
				'asterisk-ssem' => 'ss,em',
				'asterisk-ss' => 'ss',
				'asterisk-em' => 'em',
				'asterisk-normalgross' => '',
				'asterisk-normal' => '',
				'asterisk-bold' => 'ss', // bold is converting to spaced characters(here it is "ss")
				'asterisk-grossbold' => 'ss', // bold is converting to spaced characters(here it is "ss")
				'degree-ssbold' => 'ss', // bold is converting to spaced characters(here it is "ss")
				'degree-embold' => 'em,ss', // bold is converting to spaced characters(here it is "ss")
				'degree-ssem' => 'ss,em',
				'degree-ss' => 'ss',
				'degree-em' => 'em',
				'degree-normalgross' => '',
				'degree-normal' => '',
				'degree-bold' => 'ss', // bold is converting to spaced characters(here it is "ss")
				'degree-grossbold' => 'ss', // bold is converting to spaced characters(here it is "ss")
				'non-asterisk-degree-ssbold' => 'ss', // bold is converting to spaced characters(here it is "ss")
				'non-asterisk-degree-embold' => 'em,ss', // bold is converting to spaced characters(here it is "ss")
				'non-asterisk-degree-ssem' => 'ss,em',
				'non-asterisk-degree-ss' => 'ss',
				'non-asterisk-degree-em' => 'em',
				'non-asterisk-degree-normalgross' => '',
				'non-asterisk-degree-normal' => '',
				'non-asterisk-degree-bold' => 'ss', // bold is converting to spaced characters(here it is "ss")
				'non-asterisk-degree-grossbold' => 'ss', // bold is converting to spaced characters(here it is "ss")
				'asterisk-degree-ssbold' => 'ss', // bold is converting to spaced characters(here it is "ss")
				'asterisk-degree-embold' => 'em,ss', // bold is converting to spaced characters(here it is "ss")
				'asterisk-degree-ssem' => 'ss,em',
				'asterisk-degree-ss' => 'ss',
				'asterisk-degree-em' => 'em',
				'asterisk-degree-normalgross' => '',
				'asterisk-degree-normal' => '',
				'asterisk-degree-bold' => 'ss', // bold is converting to spaced characters(here it is "ss")
				'asterisk-degree-grossbold' => 'ss', // bold is converting to spaced characters(here it is "ss")
			);
			//check for imported source setting
			$fetchImportedRuleResult = $db->prepare("SELECT import_rule FROM quelle_import_master  WHERE quelle_id = ? AND arznei_id = ?");
			$fetchImportedRuleResult->bind_param("ii",$originalQuelleId, $arzneiId);
			$fetchImportedRuleResult->execute();
			$fetchImportedRuleResult->store_result();
			$fetchImportedRuleResult->bind_result($originalImportedRule);
			$fetchImportedRuleResult->fetch();
			if($fetchImportedRuleResult->num_rows != 0){
				if($originalImportedRule == "setting_3"){
					//here bold words are not converted to sperrschrift
					$conversionArr = array(
						'parentheses-normal' => '',
						'bar-one-normal' => '| ',
						'bar-two-normal' => '|| ',
						'bar-three-normal' => 'â ',
						'bar-three-and-half-normal' => 'â| ',
						'bar-four-normal' => 'ââ ',
						'bar-four-and-half-normal' => 'â| â ',
						'bar-five-normal' => '>> ',
						'pi-normal' => 'Ï ',
						'endwithdegree-ssbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'endwithdegree-embold' => 'em,strong', // bold is converting to spaced characters(here it is "ss")
						'endwithdegree-ssem' => 'strong,em',
						'endwithdegree-ss' => 'strong',
						'endwithdegree-em' => 'em',
						'endwithdegree-normalgross' => '',
						'endwithdegree-normal' => '',
						'endwithdegree-bold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'endwithdegree-grossbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'endwithsinglet-ssbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'endwithsinglet-embold' => 'em,strong', // bold is converting to spaced characters(here it is "ss")
						'endwithsinglet-ssem' => 'strong,em',
						'endwithsinglet-ss' => 'strong',
						'endwithsinglet-em' => 'em',
						'endwithsinglet-normalgross' => '',
						'endwithsinglet-normal' => '',
						'endwithsinglet-bold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'endwithsinglet-grossbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'endwithdoublet-ssbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'endwithdoublet-embold' => 'em,strong', // bold is converting to spaced characters(here it is "ss")
						'endwithdoublet-ssem' => 'strong,em',
						'endwithdoublet-ss' => 'strong',
						'endwithdoublet-em' => 'em',
						'endwithdoublet-normalgross' => '',
						'endwithdoublet-normal' => '',
						'endwithdoublet-bold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'endwithdoublet-grossbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'asterisk-ssbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'asterisk-embold' => 'em,strong', // bold is converting to spaced characters(here it is "ss")
						'asterisk-ssem' => 'strong,em',
						'asterisk-ss' => 'strong',
						'asterisk-em' => 'em',
						'asterisk-normalgross' => '',
						'asterisk-normal' => '',
						'asterisk-bold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'asterisk-grossbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'degree-ssbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'degree-embold' => 'em,strong', // bold is converting to spaced characters(here it is "ss")
						'degree-ssem' => 'strong,em',
						'degree-ss' => 'strong',
						'degree-em' => 'em',
						'degree-normalgross' => '',
						'degree-normal' => '',
						'degree-bold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'degree-grossbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'non-asterisk-degree-ssbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'non-asterisk-degree-embold' => 'em,strong', // bold is converting to spaced characters(here it is "ss")
						'non-asterisk-degree-ssem' => 'strong,em',
						'non-asterisk-degree-ss' => 'strong',
						'non-asterisk-degree-em' => 'em',
						'non-asterisk-degree-normalgross' => '',
						'non-asterisk-degree-normal' => '',
						'non-asterisk-degree-bold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'non-asterisk-degree-grossbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'asterisk-degree-ssbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'asterisk-degree-embold' => 'em,strong', // bold is converting to spaced characters(here it is "ss")
						'asterisk-degree-ssem' => 'strong,em',
						'asterisk-degree-ss' => 'strong',
						'asterisk-degree-em' => 'em',
						'asterisk-degree-normalgross' => '',
						'asterisk-degree-normal' => '',
						'asterisk-degree-bold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'asterisk-degree-grossbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
					);
				}
			}

			/*$symptomGradingTypeResult = mysqli_query($db, "SELECT symptom_grading_setting_type_for_de, symptom_grading_setting_type_for_en FROM symptom_grading_setting_type WHERE symptom_id = '".$symptomId."'");
			if(mysqli_num_rows($symptomGradingTypeResult) > 0){
				$symGradingRow = mysqli_fetch_assoc($symptomGradingTypeResult);
				if($symGradingRow['symptom_grading_setting_type_for_de'] == 2 OR $symGradingRow['symptom_grading_setting_type_for_en'] == 2){
					$conversionArr = array(
						'parentheses-normal' => '',
						'bar-one-normal' => '| ',
						'bar-two-normal' => '|| ',
						'bar-three-normal' => 'â ',
						'bar-three-and-half-normal' => 'â| ',
						'bar-four-normal' => 'ââ ',
						'bar-four-and-half-normal' => 'â| â ',
						'bar-five-normal' => '>> ',
						'pi-normal' => 'Ï ',
						'endwithdegree-ssbold' => 'ss,strong', // bold is converting to spaced characters(here it is "ss")
						'endwithdegree-embold' => 'em,strong', // bold is converting to spaced characters(here it is "ss")
						'endwithdegree-ssem' => 'ss,em',
						'endwithdegree-ss' => 'ss',
						'endwithdegree-em' => 'em',
						'endwithdegree-normalgross' => '',
						'endwithdegree-normal' => '',
						'endwithdegree-bold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'endwithdegree-grossbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'endwithsinglet-ssbold' => 'ss,strong', // bold is converting to spaced characters(here it is "ss")
						'endwithsinglet-embold' => 'em,strong', // bold is converting to spaced characters(here it is "ss")
						'endwithsinglet-ssem' => 'ss,em',
						'endwithsinglet-ss' => 'ss',
						'endwithsinglet-em' => 'em',
						'endwithsinglet-normalgross' => '',
						'endwithsinglet-normal' => '',
						'endwithsinglet-bold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'endwithsinglet-grossbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'endwithdoublet-ssbold' => 'ss,strong', // bold is converting to spaced characters(here it is "ss")
						'endwithdoublet-embold' => 'em,strong', // bold is converting to spaced characters(here it is "ss")
						'endwithdoublet-ssem' => 'ss,em',
						'endwithdoublet-ss' => 'ss',
						'endwithdoublet-em' => 'em',
						'endwithdoublet-normalgross' => '',
						'endwithdoublet-normal' => '',
						'endwithdoublet-bold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'endwithdoublet-grossbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'asterisk-ssbold' => 'ss,strong', // bold is converting to spaced characters(here it is "ss")
						'asterisk-embold' => 'em,strong', // bold is converting to spaced characters(here it is "ss")
						'asterisk-ssem' => 'ss,em',
						'asterisk-ss' => 'ss',
						'asterisk-em' => 'em',
						'asterisk-normalgross' => '',
						'asterisk-normal' => '',
						'asterisk-bold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'asterisk-grossbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'degree-ssbold' => 'ss,strong', // bold is converting to spaced characters(here it is "ss")
						'degree-embold' => 'em,strong', // bold is converting to spaced characters(here it is "ss")
						'degree-ssem' => 'ss,em',
						'degree-ss' => 'ss',
						'degree-em' => 'em',
						'degree-normalgross' => '',
						'degree-normal' => '',
						'degree-bold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'degree-grossbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'non-asterisk-degree-ssbold' => 'ss,strong', // bold is converting to spaced characters(here it is "ss")
						'non-asterisk-degree-embold' => 'em,strong', // bold is converting to spaced characters(here it is "ss")
						'non-asterisk-degree-ssem' => 'ss,em',
						'non-asterisk-degree-ss' => 'ss',
						'non-asterisk-degree-em' => 'em',
						'non-asterisk-degree-normalgross' => '',
						'non-asterisk-degree-normal' => '',
						'non-asterisk-degree-bold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'non-asterisk-degree-grossbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'asterisk-degree-ssbold' => 'ss,strong', // bold is converting to spaced characters(here it is "ss")
						'asterisk-degree-embold' => 'em,strong', // bold is converting to spaced characters(here it is "ss")
						'asterisk-degree-ssem' => 'ss,em',
						'asterisk-degree-ss' => 'ss',
						'asterisk-degree-em' => 'em',
						'asterisk-degree-normalgross' => '',
						'asterisk-degree-normal' => '',
						'asterisk-degree-bold' => 'strong', // bold is converting to spaced characters(here it is "ss")
						'asterisk-degree-grossbold' => 'strong', // bold is converting to spaced characters(here it is "ss")
					);
				}
			}*/
			
			$symptom = str_replace ("|", "", $symptom);
			foreach ($conversionArr as $conKey => $conVal) {
				$convertableTagsArray = explode(',', $conVal);
				$convertableOpenTag = "";
				foreach ($convertableTagsArray as $openKey => $openVal) {
					if($openVal != "")
						$convertableOpenTag .= '<'.$openVal.'>';
				}
				$convertableTagsArrayReverse = array_reverse($convertableTagsArray);
				$convertableEndTag = "";
				foreach ($convertableTagsArrayReverse as $endKey => $endVal) {
					if($endVal != "")
						$convertableEndTag .= '</'.$endVal.'>';
				}
				
				if($conKey == "bar-one-normal" OR $conKey == "bar-two-normal" OR $conKey == "bar-three-normal" OR $conKey == "bar-three-and-half-normal" OR $conKey == "bar-four-normal" OR $conKey == "bar-four-and-half-normal" OR $conKey == "bar-five-normal" OR $conKey == "pi-normal") {
					$symptom = str_replace ( array (
						'<'.$conKey.'>',
						'</'.$conKey.'>'
					), array (
						$conVal,
						""
					), $symptom );

				} else {
					$symptom = str_replace ( array (
						'<'.$conKey.'>',
						'</'.$conKey.'>'
					), array (
						$convertableOpenTag,
						$convertableEndTag
					), $symptom );
				}
			}

			// $symptom = convertStrongGross($symptom);
			$symptom = str_replace ( array (
				'<ss>',
				'</ss>' 
			), array (
				'<span class="text-sperrschrift">',
				"</span>" 
			), $symptom );
			$symptom = str_replace ( array (
				'<clr',
				'</clr>' 
			), array (
				"<span",
				"</span>" 
			), $symptom );
			$symptom = removeBlankTags($symptom);
		}
		// Replacing Î± with t in italics 
		$symptom = str_replace ( array (
			'Î±',
			'Î²'
		), array (
			"<em>t</em>",
			"<em>tt</em>",
		), $symptom );
		$symptom = trim($symptom);
		$symptom = str_replace("</sup><sup>","</sup> <sup>", $symptom);
		return $symptom;
	}

	function seperateTheBrackedString($symptom, $openingSign, $endingSign, $modifiedString = NULL, $multipleCharControl)
	{
		$returnString = $symptom.$modifiedString;
		$lastOpenedOccurred = mb_strripos ( $symptom, $openingSign );
		if($lastOpenedOccurred !== false){
			$remainingOccurrenceToEndingString = mb_substr($symptom, $lastOpenedOccurred);
			$remainingBeginingToOccurrenceString = mb_substr($symptom, 0, $lastOpenedOccurred);
			if($remainingBeginingToOccurrenceString != ""){
				$completeEndTag = "";
				$cleanedOpenedTag = "";
				$openedTag = findTheOpenedTag($remainingBeginingToOccurrenceString);
				//Here we are prohibiting the addition of customized HTML tag specially for |, ||, |||, |||-, ||||,||||-,|||||, Ï as no other text formatting will occur with these symbols during import.
				$prohibitOpenTag = 0;
				if($multipleCharControl)
					$prohibitOpenTag = 1;
				if($openedTag != "" && $prohibitOpenTag == 0)
				{
					$lastOpenedTagOccurred = mb_strripos ( $openedTag, '<' );
					if($lastOpenedTagOccurred !== false){
						$openedTagsArr = explode('{#^#}', $openedTag);
						foreach ($openedTagsArr as $tagKey => $tagVal) {
							$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
							$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
							$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
							$tagNameInArr = explode(' ', $tagNameString);
							$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
							if($tagName != "")
								$completeEndTag .= '</'.$tagName.'>';
						}
						$reversedOpenedTagsArr = array_reverse($openedTagsArr);
						foreach ($reversedOpenedTagsArr as $tagKey => $tagVal) {
							$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
							$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
							$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
							$tagNameInArr = explode(' ', $tagNameString);
							$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
							if($tagName != "")
								$cleanedOpenedTag .= '<'.$tagName.'>';
						}
					}
				}
				$remainingOccurrenceToEndingString = mb_substr ( $remainingOccurrenceToEndingString, 1 );
				// $newRemainingOccurrenceToEndingString = $openingSign.$newRemainingOccurrenceToEndingString;
				// $newRemainingBeginingToOccurrenceString = $modifiedString.$remainingBeginingToOccurrenceString.$completeEndTag;
				$newRemainingBeginingToOccurrenceString = $remainingBeginingToOccurrenceString.$completeEndTag;
				$newRemainingOccurrenceToEndingString = $openingSign.$cleanedOpenedTag.$remainingOccurrenceToEndingString;

				if($newRemainingOccurrenceToEndingString != ""){
					$firstCloseOccurred = mb_strpos ( $newRemainingOccurrenceToEndingString, $endingSign );
					if($firstCloseOccurred !== false){
						$secondHalfSecondPart = mb_substr($newRemainingOccurrenceToEndingString, $firstCloseOccurred);
						$secondHalfFirstPart = mb_substr($newRemainingOccurrenceToEndingString, 0, $firstCloseOccurred);
						if($secondHalfFirstPart != ""){
							$secondHalfCompleteEndTag = "";
							$secondHalfCleanedOpenedTag = "";
							$openedTagSecondHalf = findTheOpenedTag($secondHalfFirstPart);
							if($openedTagSecondHalf != "")
							{
								$lastOpenedTagOfSecondHalfOccurred = mb_strripos ( $openedTagSecondHalf, '<' );
								if($lastOpenedTagOfSecondHalfOccurred !== false){
									$secondHalfOpenedTagsArr = explode('{#^#}', $openedTagSecondHalf);
									foreach ($secondHalfOpenedTagsArr as $tagKey => $tagVal) {
										$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
										$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
										$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
										$tagNameInArr = explode(' ', $tagNameString);
										$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
										if($tagName != "")
											$secondHalfCompleteEndTag .= '</'.$tagName.'>';
									}
									$secondHalfReversedOpenedTagsArr = array_reverse($secondHalfOpenedTagsArr);
									foreach ($secondHalfReversedOpenedTagsArr as $tagKey => $tagVal) {
										$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
										$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
										$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
										$tagNameInArr = explode(' ', $tagNameString);
										$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
										if($tagName != "")
											$secondHalfCleanedOpenedTag .= '<'.$tagName.'>';
									}
								}
							}
							$secondHalfSecondPart = mb_substr ( $secondHalfSecondPart, 1 );
							$secondHalfFirstPart = $secondHalfFirstPart.$secondHalfCompleteEndTag;
							$secondHalfSecondPart = $endingSign.$secondHalfCleanedOpenedTag.$secondHalfSecondPart;
							// echo "<br><br><br>".htmlentities($secondHalfFirstPart)." ---<br>";
							// echo htmlentities($secondHalfSecondPart)." ---<br>";
						}
						$newRemainingOccurrenceToEndingString = $secondHalfFirstPart.$secondHalfSecondPart;
						$newRemainingOccurrenceToEndingString = $newRemainingOccurrenceToEndingString.$modifiedString;
						// echo "<br><br>---- ".htmlentities($newRemainingOccurrenceToEndingString)." ---<br>";
					}
					// return seperateTheBrackedString($newRemainingOccurrenceToEndingString, $openingSign, $endingSign, $newRemainingBeginingToOccurrenceString);
					return seperateTheBrackedString($newRemainingBeginingToOccurrenceString, $openingSign, $endingSign, $newRemainingOccurrenceToEndingString, $multipleCharControl);
				} else {
					if($modifiedString != "")
						$returnString = $symptom.$modifiedString;
					else
						$returnString = $symptom;
				}
			} else {
				if($modifiedString != "")
					$returnString = $symptom.$modifiedString;
				else
					$returnString = $symptom;
			}
		} else {
			if($modifiedString != "")
				$returnString = $symptom.$modifiedString;
			else
				$returnString = $symptom;
		}
		return $returnString;
	}

	function convertNonConversionalBrackets($symptom, $openingSign, $endingSign, $conversionArr, $excludedBracket, $modifiedEndingString = NULL){
		$returnString = $symptom.$modifiedEndingString;
		$lastOpenedOccurred = mb_strripos ( $symptom, $openingSign );
		if($lastOpenedOccurred !== false){
			$remainingOccurrenceToEndingString = mb_substr($symptom, $lastOpenedOccurred);
			$remainingBeginingToOccurrenceString = mb_substr($symptom, 0, $lastOpenedOccurred);
			// echo htmlentities($remainingBeginingToOccurrenceString)." --- this is the case<br><br>"; 
			if($remainingOccurrenceToEndingString != ""){
				$firstCloseOccurred = mb_strpos ( $remainingOccurrenceToEndingString, $endingSign );
				if($firstCloseOccurred !== false){
					$secondHalfSecondPart = mb_substr($remainingOccurrenceToEndingString, $firstCloseOccurred);
					$secondHalfFirstPart = mb_substr($remainingOccurrenceToEndingString, 0, $firstCloseOccurred);
					// $newSecondHalfSecondPart = ($secondHalfSecondPart != "") ? ltrim($secondHalfSecondPart, $endingSign) : $secondHalfSecondPart;
					// Normal conversion applies here 
					if($secondHalfFirstPart != ""){
						// echo htmlentities($excludedBracket)." Here<br>";
						$excludedBracket = trim(strtolower(strip_tags($excludedBracket)));
						$cleanSecondHalfFirstPart = str_replace ( array (
								$openingSign,
								$endingSign
							), array (
								"",
								""
							), $secondHalfFirstPart );
						$cleanSecondHalfFirstPart = trim(strtolower(strip_tags($cleanSecondHalfFirstPart)));
						$cleanSecondHalfFirstPartArr = explode(",", $cleanSecondHalfFirstPart);
						// echo htmlentities($excludedBracket)."===222===".htmlentities($secondHalfFirstPart)." ===111=== ".htmlentities($cleanSecondHalfFirstPart)." ===111=== ".htmlentities($secondHalfSecondPart)." ===111=== "."<br>";
						if($excludedBracket == $cleanSecondHalfFirstPart OR in_array($excludedBracket, $cleanSecondHalfFirstPartArr)){
						// if($excludedBracket == $cleanSecondHalfFirstPart){
							// echo htmlentities($excludedBracket)."===222===".htmlentities($secondHalfFirstPart)." ===111=== ".htmlentities($cleanSecondHalfFirstPart)." ===111=== ".htmlentities($secondHalfSecondPart)." &&&&&<br>";
							foreach ($conversionArr as $conKey => $conVal) {
								$convertableTagsArray = explode(',', $conVal);
								$convertableOpenTag = "";
								$convertableOpenTagTemp = "";
								foreach ($convertableTagsArray as $openKey => $openVal) {
									if($openVal != ""){
										$convertableOpenTag .= '<'.$openVal.'>';
										$convertableOpenTagTemp .= '<'.$openVal.'-temp>';
									}
								}
								$convertableTagsArrayReverse = array_reverse($convertableTagsArray);
								$convertableEndTag = "";
								$convertableEndTagTemp = "";
								foreach ($convertableTagsArrayReverse as $endKey => $endVal) {
									if($endVal != ""){
										$convertableEndTag .= '</'.$endVal.'>';
										$convertableEndTagTemp .= '</'.$endVal.'-temp>';
									}
								}

								$secondHalfFirstPart = str_replace ( array (
									'<'.$conKey.'>',
									'</'.$conKey.'>'
								), array (
									$convertableOpenTagTemp,
									$convertableEndTagTemp
								), $secondHalfFirstPart );

								// Fetch signs if any
								// $sign = (isset($conversionSignArr[$conKey]) AND $conversionSignArr[$conKey] != "") ? $conversionSignArr[$conKey] : "";
								$sign = "";
								if($sign != ""){
									$convertableOpenTagWithSign = $convertableOpenTag." ".$sign;
									$secondHalfFirstPart = str_replace ( array (
										$convertableOpenTagTemp,
										$convertableEndTagTemp
									), array (
										$convertableOpenTagWithSign,
										$convertableEndTag
									), $secondHalfFirstPart );
								}
								else
								{
									$secondHalfFirstPart = str_replace ( array (
										$convertableOpenTagTemp,
										$convertableEndTagTemp
									), array (
										$convertableOpenTag,
										$convertableEndTag
									), $secondHalfFirstPart );
								}

								$secondHalfFirstPart = str_replace ( array (
									'<normal>',
									'</normal>'
								), array (
									'',
									''
								), $secondHalfFirstPart );
							}
						}
					}

					$remainingOccurrenceToEndingString = $secondHalfFirstPart.$secondHalfSecondPart;
				}
			}
			$modifiedEndingString = $remainingOccurrenceToEndingString.$modifiedEndingString;
			// $modifiedEndingString = $remainingOccurrenceToEndingString;

			if($remainingBeginingToOccurrenceString != ""){
				return convertNonConversionalBrackets($remainingBeginingToOccurrenceString, $openingSign, $endingSign, $conversionArr, $excludedBracket, $modifiedEndingString);
			} else {
				if($modifiedEndingString != "")
					$returnString = $modifiedEndingString;
					// $returnString = $symptom.$modifiedEndingString;
				else
					$returnString = $symptom;
			}
		} else {
			if($modifiedEndingString != "")
				$returnString = $symptom.$modifiedEndingString;
			else
				$returnString = $symptom;
		}
		return $returnString;
	}

	function getTheBracketdStringThatPartOfSymptom($symptomId){
		global $db;
		$returnArr = array(
			'part_of_symptom_string_de' => "",
			'part_of_symptom_string_en' => "",
			'part_of_symptom_string_de_and_en_merged' => "",
			'not_part_of_symptom_string_de_and_en_merged' => ""
		);
		// $returnArr = array(
		// 	'status' => false,
		// 	'return_data' => array()
		// );
		$symptomResult = mysqli_query($db, "SELECT bracketedString_de, bracketedString_en, timeString_de, timeString_en FROM quelle_import_test WHERE id = '".$symptomId."'");
		if(mysqli_num_rows($symptomResult) > 0){
			$symptomData = mysqli_fetch_assoc($symptomResult);
			$bracketedString_not_part_of_symptom_de_temp_array = array();
			$bracketedString_not_part_of_symptom_en_temp_array = array();
			$symptomData['timeString_de'] = str_replace ( array (
				'(',
				')',
				'[',
				']',
			), array (
				"",
				"",
				"",
				""
			), $symptomData['timeString_de'] );
			$symptomData['timeString_de'] = ($symptomData['timeString_de'] != "") ? explode(",", $symptomData['timeString_de']) : array();
			foreach ($symptomData['timeString_de'] as $timeDeKey => $timeDeVal) {
				array_push($bracketedString_not_part_of_symptom_de_temp_array, trim($timeDeVal));
			}
			$symptomData['timeString_en'] = str_replace ( array (
				'(',
				')',
				'[',
				']',
			), array (
				"",
				"",
				"",
				""
			), $symptomData['timeString_en'] );
			$symptomData['timeString_en'] = ($symptomData['timeString_en'] != "") ? explode(",", $symptomData['timeString_en']) : array();
			foreach ($symptomData['timeString_en'] as $timeEnKey => $timeEnVal) {
				array_push($bracketedString_not_part_of_symptom_en_temp_array, trim($timeEnVal));
			}

			$symptomData['bracketedString_de'] = rtrim(rtrim($symptomData['bracketedString_de']), ",");
			$modified_bracketedString_de = str_replace(', a. a. O.', '{@#@} a. a. O.', $symptomData['bracketedString_de']);
			$modified_bracketedString_de = str_replace(', a.a.O.', '{@#@} a.a.O.', $modified_bracketedString_de);
			$modified_bracketedString_de = str_replace(', a.a.o.', '{@#@} a.a.o.', $modified_bracketedString_de);
			$modified_bracketedString_de = str_replace(', a. a. o.', '{@#@} a. a. o.', $modified_bracketedString_de);
			if(mb_strpos($modified_bracketedString_de, '{@#@}') === false){
				$modified_bracketedString_de = str_replace(' a. a. O.', '{@#@} a. a. O.', $modified_bracketedString_de);
				$modified_bracketedString_de = str_replace(' a.a.O.', '{@#@} a.a.O.', $modified_bracketedString_de);
				$modified_bracketedString_de = str_replace(' a.a.o.', '{@#@} a.a.o.', $modified_bracketedString_de);
				$modified_bracketedString_de = str_replace(' a. a. o.', '{@#@} a. a. o.', $modified_bracketedString_de);
			}
			if(mb_strpos($modified_bracketedString_de, '{@#@}') === false){
				$modified_bracketedString_de = str_replace('a. a. O.', '{@#@}a. a. O.', $modified_bracketedString_de);
				$modified_bracketedString_de = str_replace('a.a.O.', '{@#@}a.a.O.', $modified_bracketedString_de);
				$modified_bracketedString_de = str_replace('a.a.o.', '{@#@}a.a.o.', $modified_bracketedString_de);
				$modified_bracketedString_de = str_replace('a. a. o.', '{@#@}a. a. o.', $modified_bracketedString_de);
			}

			$symptomData['bracketedString_en'] = rtrim(rtrim($symptomData['bracketedString_en']), ",");
			$modified_bracketedString_en = str_replace(', a. a. O.', '{@#@} a. a. O.', $symptomData['bracketedString_en']);
			$modified_bracketedString_en = str_replace(', a.a.O.', '{@#@} a.a.O.', $modified_bracketedString_en);
			$modified_bracketedString_en = str_replace(', a.a.o.', '{@#@} a.a.o.', $modified_bracketedString_en);
			$modified_bracketedString_en = str_replace(', a. a. o.', '{@#@} a. a. o.', $modified_bracketedString_en);
			if(mb_strpos($modified_bracketedString_en, '{@#@}') === false){
				$modified_bracketedString_en = str_replace(' a. a. O.', '{@#@} a. a. O.', $modified_bracketedString_en);
				$modified_bracketedString_en = str_replace(' a.a.O.', '{@#@} a.a.O.', $modified_bracketedString_en);
				$modified_bracketedString_en = str_replace(' a.a.o.', '{@#@} a.a.o.', $modified_bracketedString_en);
				$modified_bracketedString_en = str_replace(' a. a. o.', '{@#@} a. a. o.', $modified_bracketedString_en);
			}
			if(mb_strpos($modified_bracketedString_en, '{@#@}') === false){
				$modified_bracketedString_en = str_replace('a. a. O.', '{@#@}a. a. O.', $modified_bracketedString_en);
				$modified_bracketedString_en = str_replace('a.a.O.', '{@#@}a.a.O.', $modified_bracketedString_en);
				$modified_bracketedString_en = str_replace('a.a.o.', '{@#@}a.a.o.', $modified_bracketedString_en);
				$modified_bracketedString_en = str_replace('a. a. o.', '{@#@}a. a. o.', $modified_bracketedString_en);
			}

			// Because rference data has comma in it's self, so bracking it or exploding with the comma will not be able to detect reference. That is why before decting the associated data by comma expolded string, we are finding if the associated references is there in the full baracketd string using strpos() function.
			// i.e. Chr. Fr. Langhammer, in einem Aufsatze
			$referenceResult = mysqli_query($db,"SELECT reference.full_reference, reference.autor, reference.reference FROM symptom_reference JOIN reference ON symptom_reference.reference_id = reference.reference_id WHERE symptom_reference.symptom_id = '".$symptomId."'");
            if($referenceResult){
				while($referenceRow = mysqli_fetch_array($referenceResult)){
					// if (mb_strpos(str_replace('{@#@}', ',', $modified_bracketedString_de), trim($referenceRow['full_reference'])) !== false){
					// 	array_push($bracketedString_not_part_of_symptom_de_temp_array, trim($referenceRow['full_reference']));
					// }
					// if(mb_strpos(str_replace('{@#@}', ',', $modified_bracketedString_en), trim($referenceRow['full_reference'])) !== false){
					// 	array_push($bracketedString_not_part_of_symptom_en_temp_array, trim($referenceRow['full_reference']));
					// }	

					$lookupRefBracketedStringDeArr = explode(',', $modified_bracketedString_de);
					foreach ($lookupRefBracketedStringDeArr as $bKey => $bVal) {
						$bVal = str_replace('{@#@}', ',', $bVal);
						if (mb_strpos($bVal, trim($referenceRow['full_reference'])) !== false){
							array_push($bracketedString_not_part_of_symptom_de_temp_array, trim($referenceRow['full_reference']));
							array_push($bracketedString_not_part_of_symptom_de_temp_array, trim($bVal));
						}
						$lookupRefStringDeArr = explode(',', $bVal);
						$lookupRefDeString = (isset($lookupRefStringDeArr[0]) AND $lookupRefStringDeArr[0] != "") ? $lookupRefStringDeArr[0] : "";
						if($lookupRefDeString != "" AND $referenceRow['autor'] != ""){
							if(mb_strpos($referenceRow['autor'], $lookupRefDeString) !== false){
								array_push($bracketedString_not_part_of_symptom_de_temp_array, trim($referenceRow['autor']));
								array_push($bracketedString_not_part_of_symptom_de_temp_array, trim($referenceRow['full_reference']));
								array_push($bracketedString_not_part_of_symptom_de_temp_array, trim($lookupRefDeString));
								array_push($bracketedString_not_part_of_symptom_de_temp_array, trim($bVal));
							}
						}
					}

					$lookupRefBracketedStringEnArr = explode(',', $modified_bracketedString_en);
					foreach ($lookupRefBracketedStringEnArr as $bKey => $bVal) {
						$bVal = str_replace('{@#@}', ',', $bVal);
						if(mb_strpos($bVal, trim($referenceRow['full_reference'])) !== false){
							array_push($bracketedString_not_part_of_symptom_en_temp_array, trim($referenceRow['full_reference']));
							array_push($bracketedString_not_part_of_symptom_de_temp_array, trim($bVal));
						}

						$lookupRefStringEnArr = explode(',', $bVal);
						$lookupRefEnString = (isset($lookupRefStringEnArr[0]) AND $lookupRefStringEnArr[0] != "") ? $lookupRefStringEnArr[0] : "";
						if($lookupRefEnString != "" AND $referenceRow['autor'] != ""){
							if(mb_strpos($referenceRow['autor'], $lookupRefEnString) !== false) {
								array_push($bracketedString_not_part_of_symptom_en_temp_array, trim($referenceRow['autor']));
								array_push($bracketedString_not_part_of_symptom_en_temp_array, trim($referenceRow['full_reference']));
								array_push($bracketedString_not_part_of_symptom_de_temp_array, trim($lookupRefEnString));
								array_push($bracketedString_not_part_of_symptom_de_temp_array, trim($bVal));
							}
						}
					}
				}
			}
			$bracketedString_de_array = ($modified_bracketedString_de != "") ? explode(",", $modified_bracketedString_de) : array();
			$bracketedString_en_array = ($modified_bracketedString_en != "") ? explode(",", $modified_bracketedString_en) : array();
			$bracketedString_de_temp_array = array();
			$bracketedString_en_temp_array = array();
			foreach ($bracketedString_de_array as $deKey => $deVal) {
				if($deVal != ""){
					$tempDeVal = str_replace('{@#@}', ',', $deVal);
					$lookupStringArr = explode(',', $tempDeVal);
					$lookupString = (isset($lookupStringArr[0]) AND $lookupStringArr[0] != "") ? $lookupStringArr[0] : "";
					$tempres = lookupForAssociatedDataOfSymptom($symptomId, trim($lookupString));
					if($tempres != "")
						array_push($bracketedString_de_temp_array, $tempres);
					else
						array_push($bracketedString_not_part_of_symptom_de_temp_array, trim($deVal));
				}
			}
			foreach ($bracketedString_en_array as $enKey => $enVal) {
				if($enVal != ""){
					$tempEnVal = str_replace('{@#@}', ',', $enVal);
					$lookupStringArr = explode(',', $tempEnVal);
					$lookupString = (isset($lookupStringArr[0]) AND $lookupStringArr[0] != "") ? $lookupStringArr[0] : "";
					$tempres = lookupForAssociatedDataOfSymptom($symptomId, trim($lookupString));
					if($tempres != "")
						array_push($bracketedString_en_temp_array, $tempres);
					else
						array_push($bracketedString_not_part_of_symptom_en_temp_array, trim($enVal));
				}
			}
			$tempMergedData = array_unique(array_merge($bracketedString_de_temp_array, $bracketedString_en_temp_array));
			$tempMergedNotPartOfSymptomData = array_unique(array_merge($bracketedString_not_part_of_symptom_de_temp_array, $bracketedString_not_part_of_symptom_en_temp_array));
			$returnArr['part_of_symptom_string_de'] = (!empty($bracketedString_de_temp_array)) ? implode(", ", $bracketedString_de_temp_array) : "";
			$returnArr['part_of_symptom_string_en'] = (!empty($bracketedString_en_temp_array)) ? implode(", ", $bracketedString_en_temp_array) : "";
			$returnArr['part_of_symptom_string_de_and_en_merged'] = (!empty($tempMergedData)) ? implode(", ", $tempMergedData) : "";
			$returnArr['not_part_of_symptom_string_de_and_en_merged'] = (!empty($tempMergedNotPartOfSymptomData)) ? implode(", ", $tempMergedNotPartOfSymptomData) : "";
		}
		return $returnArr;
	}


	function lookupForAssociatedDataOfSymptom($symptomId, $string){
		global $db;
		$returnString = "";
		if($string != ""){
			$returnString = $string;
			$remedyResult = mysqli_query($db,"SELECT arznei.titel, arznei.kuerzel FROM symptom_remedy JOIN arznei ON symptom_remedy.remedy_id = arznei.arznei_id WHERE symptom_remedy.symptom_id = '".$symptomId."'");
            if($remedyResult){
				while($remedyRow = mysqli_fetch_array($remedyResult)){
					$kuerzelArr = explode("|", $remedyRow['kuerzel']); 
					$trimmedKuerzelArr=array_map('trim',$kuerzelArr);
					$trimmedKuerzelArr=array_map('strtolower',$trimmedKuerzelArr);
					$anotherPossibleStringForRemedy = $string.".";
					if(in_array(strtolower($string), $trimmedKuerzelArr) OR in_array(strtolower($anotherPossibleStringForRemedy), $trimmedKuerzelArr) OR strtolower(trim($remedyRow['titel'])) == strtolower($string) ){
						$returnString = "";
						return $returnString;
					}
				}
			}
			
			$prueferResult = mysqli_query($db,"SELECT pruefer.pruefer_id, pruefer.kuerzel, pruefer.suchname FROM symptom_pruefer JOIN pruefer ON symptom_pruefer.pruefer_id	= pruefer.pruefer_id WHERE symptom_pruefer.symptom_id = '".$symptomId."'");
            if($prueferResult){
				while($prueferRow = mysqli_fetch_array($prueferResult)){
					$kuerzelArr = explode("|", $prueferRow['kuerzel']);
					$trimmedKuerzelArr=array_map('trim',$kuerzelArr);
					$trimmedKuerzelArr=array_map('strtolower',$trimmedKuerzelArr);
					$anotherPossibleString = $string.".";
					if(in_array(strtolower($string), $trimmedKuerzelArr) OR in_array(strtolower($anotherPossibleString), $trimmedKuerzelArr) OR strtolower(trim($prueferRow['suchname'])) == strtolower($string) ){
						$returnString = "";
						return $returnString;
					}
				}
			}
            $referenceResult = mysqli_query($db,"SELECT reference.full_reference, reference.autor, reference.reference FROM symptom_reference JOIN reference ON symptom_reference.reference_id = reference.reference_id WHERE symptom_reference.symptom_id = '".$symptomId."'");
            if($referenceResult){
				while($referenceRow = mysqli_fetch_array($referenceResult)){
					if($referenceRow['full_reference'] == $string){
						$returnString = "";
						return $returnString;
					}
				}
			}
		}
		return $returnString;
	}

	// Converting the symptoms to it's applicable format according to the settings to present it in front of the user
	// [1st parameter] $isEditPreview value(1=yes, 0=no) if this function is called for symptom edit preview than the valu will be 1 else this value will always be 0  
	// [2st parameter] $symptom symptom string
	// [3nd parameter] $originalQuelleId the quelle_id of the symptom, that the particular symptom originaly belongs. 
	// [4rd parameter] $arzneiId arzneiId 
	// [5th parameter] $isFinalVersionAvailable values (0 = No, 1 = Connect edit, 2 = Paste edit)
	// [6th parameter] $includeGrade values (0 = Gragde number will not include, 1 = Will include Grade number)
	// [7th parameter] $symptomId the symptom_id of the symptombelong
	// [8th parameter] $originalSymptomId the symptom_id of the symptom where he originally belongs.(where he fist created)
	function convertTheSymptom($isEditPreview = 0, $symptom, $originalQuelleId, $arzneiId, $isFinalVersionAvailable, $includeGrade, $symptomId, $originalSymptomId = null){
		global $db;
		if($symptom != "" AND $originalQuelleId != "" AND $symptomId != ""){
			//punctuation are excluded from gradings
			$symptom = punctuationPositionFix($symptom);
			$symptom = removeBlankTags($symptom);
			$conversionArr = array(
				'parentheses-normal' => '',
				'pi-normal' => '',
				'theta-normal' => '',
				'theta-em' => '',
				'bar-one-normal' => '',
				'bar-two-normal' => '',
				'bar-three-normal' => '',
				'bar-three-and-half-normal' => '',
				'bar-four-normal' => '',
				'bar-four-and-half-normal' => '',
				'bar-five-normal' => '',
				'endwithdegree-ssbold' => 'ss,strong',
				'endwithdegree-embold' => 'em,strong',
				'endwithdegree-ssem' => 'ss,em',
				'endwithdegree-ss' => 'ss',
				'endwithdegree-em' => 'em',
				'endwithdegree-normalgross' => '',
				'endwithdegree-normal' => '',
				'endwithdegree-bold' => 'strong',
				'endwithdegree-grossbold' => 'strong',
				'endwithdegree-ssembold' => 'ss,em,strong',
				'endwithsinglet-ssbold' => 'ss,strong',
				'endwithsinglet-embold' => 'em,strong',
				'endwithsinglet-ssem' => 'ss,em',
				'endwithsinglet-ss' => 'ss',
				'endwithsinglet-em' => 'em',
				'endwithsinglet-normalgross' => '',
				'endwithsinglet-normal' => '',
				'endwithsinglet-bold' => 'strong',
				'endwithsinglet-grossbold' => 'strong',
				'endwithsinglet-ssembold' => 'ss,em,strong',
				'endwithdoublet-ssbold' => 'ss,strong',
				'endwithdoublet-embold' => 'em,strong',
				'endwithdoublet-ssem' => 'ss,em',
				'endwithdoublet-ss' => 'ss',
				'endwithdoublet-em' => 'em',
				'endwithdoublet-normalgross' => '',
				'endwithdoublet-normal' => '',
				'endwithdoublet-bold' => 'strong',
				'endwithdoublet-grossbold' => 'strong',
				'endwithdoublet-ssembold' => 'ss,em,strong',
				'asterisk-ssbold' => 'ss,strong',
				'asterisk-embold' => 'em,strong',
				'asterisk-ssem' => 'ss,em',
				'asterisk-ss' => 'ss',
				'asterisk-em' => 'em',
				'asterisk-normalgross' => '',
				'asterisk-normal' => '',
				'asterisk-bold' => 'strong',
				'asterisk-grossbold' => 'strong',
				'asterisk-ssembold' => 'ss,em,strong',
				'degree-ssbold' => 'ss,strong',
				'degree-embold' => 'em,strong',
				'degree-ssem' => 'ss,em',
				'degree-ss' => 'ss',
				'degree-em' => 'em',
				'degree-normalgross' => '',
				'degree-normal' => '',
				'degree-bold' => 'strong',
				'degree-grossbold' => 'strong',
				'degree-ssembold' => 'ss,em,strong',
				'non-asterisk-degree-ssbold' => 'ss,strong',
				'non-asterisk-degree-embold' => 'em,strong',
				'non-asterisk-degree-ssem' => 'ss,em',
				'non-asterisk-degree-ss' => 'ss',
				'non-asterisk-degree-em' => 'em',
				'non-asterisk-degree-normalgross' => '',
				'non-asterisk-degree-normal' => '',
				'non-asterisk-degree-bold' => 'strong',
				'non-asterisk-degree-grossbold' => 'strong',
				'non-asterisk-degree-ssembold' => 'ss,em,strong',
				'asterisk-degree-ssbold' => 'ss,strong',
				'asterisk-degree-embold' => 'em,strong',
				'asterisk-degree-ssem' => 'ss,em',
				'asterisk-degree-ss' => 'ss',
				'asterisk-degree-em' => 'em',
				'asterisk-degree-normalgross' => '',
				'asterisk-degree-normal' => '',
				'asterisk-degree-bold' => 'strong',
				'asterisk-degree-grossbold' => 'strong',
				'asterisk-degree-ssembold' => 'ss,em,strong',
			);

			$conversionSignArr = array(
				'parentheses-normal' => '',
				'pi-normal' => '',
				'bar-one-normal' => '',
				'bar-two-normal' => '',
				'bar-three-normal' => '',
				'bar-three-and-half-normal' => '',
				'bar-four-normal' => '',
				'bar-four-and-half-normal' => '',
				'bar-five-normal' => '',
				'endwithdegree-ssbold' => '',
				'endwithdegree-embold' => '',
				'endwithdegree-ssem' => '',
				'endwithdegree-ss' => '',
				'endwithdegree-em' => '',
				'endwithdegree-normalgross' => '',
				'endwithdegree-normal' => '',
				'endwithdegree-bold' => '',
				'endwithdegree-grossbold' => '',
				'endwithdegree-ssembold' => '',
				'endwithsinglet-ssbold' => '',
				'endwithsinglet-embold' => '',
				'endwithsinglet-ssem' => '',
				'endwithsinglet-ss' => '',
				'endwithsinglet-em' => '',
				'endwithsinglet-normalgross' => '',
				'endwithsinglet-normal' => '',
				'endwithsinglet-bold' => '',
				'endwithsinglet-grossbold' => '',
				'endwithsinglet-ssembold' => '',
				'endwithdoublet-ssbold' => '',
				'endwithdoublet-embold' => '',
				'endwithdoublet-ssem' => '',
				'endwithdoublet-ss' => '',
				'endwithdoublet-em' => '',
				'endwithdoublet-normalgross' => '',
				'endwithdoublet-normal' => '',
				'endwithdoublet-bold' => '',
				'endwithdoublet-grossbold' => '',
				'endwithdoublet-ssembold' => '',
				'asterisk-ssbold' => '',
				'asterisk-embold' => '',
				'asterisk-ssem' => '',
				'asterisk-ss' => '',
				'asterisk-em' => '',
				'asterisk-normalgross' => '',
				'asterisk-normal' => '',
				'asterisk-bold' => '',
				'asterisk-grossbold' => '',
				'asterisk-ssembold' => '',
				'degree-ssbold' => '',
				'degree-embold' => '',
				'degree-ssem' => '',
				'degree-ss' => '',
				'degree-em' => '',
				'degree-normalgross' => '',
				'degree-normal' => '',
				'degree-bold' => '',
				'degree-grossbold' => '',
				'degree-ssembold' => '',
				'non-asterisk-degree-ssbold' => '',
				'non-asterisk-degree-embold' => '',
				'non-asterisk-degree-ssem' => '',
				'non-asterisk-degree-ss' => '',
				'non-asterisk-degree-em' => '',
				'non-asterisk-degree-normalgross' => '',
				'non-asterisk-degree-normal' => '',
				'non-asterisk-degree-bold' => '',
				'non-asterisk-degree-grossbold' => '',
				'non-asterisk-degree-ssembold' => '',
				'asterisk-degree-ssbold' => '',
				'asterisk-degree-embold' => '',
				'asterisk-degree-ssem' => '',
				'asterisk-degree-ss' => '',
				'asterisk-degree-em' => '',
				'asterisk-degree-normalgross' => '',
				'asterisk-degree-normal' => '',
				'asterisk-degree-bold' => '',
				'asterisk-degree-grossbold' => '',
				'asterisk-degree-ssembold' => '',
			);
			$endingBracketsArray = array();
			$cleanSymptomString = strip_tags(trim($symptom));
			$returnCleanlineData = removeEndingSpecialCharactersForString($cleanSymptomString);
			$cleanSymptomString = (isset($returnCleanlineData['symptom_string']) AND $returnCleanlineData['symptom_string'] != "") ? $returnCleanlineData['symptom_string'] : $cleanSymptomString;
			$FirstChar = mb_substr ( $cleanSymptomString, 0, 1 );
			$LastChar = mb_substr ( $cleanSymptomString, mb_strlen ( $cleanSymptomString ) - 1 );
			$manageBracketedConversion = 0;
			if(($FirstChar == "(" AND $LastChar == ")") OR ($FirstChar == "[" AND $LastChar == "]")){
				// nothing
				$isParenthesesString = 1;
				$closingBracketFirstOccurrence = mb_strpos ( $cleanSymptomString, ")" );
				if($closingBracketFirstOccurrence !== false){
					$occurrenceToEndingString = mb_substr($cleanSymptomString, $closingBracketFirstOccurrence);
					if($occurrenceToEndingString != "" AND mb_strlen($occurrenceToEndingString) > 2)
						$isParenthesesString = 0;
				}

				if($isParenthesesString == 0){
					$manageBracketedConversion = 1;
				}
			}else {
				$manageBracketedConversion = 1;
			}

			if($manageBracketedConversion == 1){
				$excludedBracket = "";
				$notPartOfSymptomBrackets = "";
				// if(isset($originalSymptomId) AND $originalSymptomId != ""){
				// 	$originalSymptomSymPartString = mysqli_query($db, "SELECT part_of_symptom_string FROM quelle_import_test WHERE id = '".$originalSymptomId."'");
				// 	if(mysqli_num_rows($originalSymptomSymPartString) > 0){
				// 		$symPartStringData = mysqli_fetch_assoc($originalSymptomSymPartString);
				// 		$excludedBracket = (isset($symPartStringData['part_of_symptom_string']) AND $symPartStringData['part_of_symptom_string'] != "") ? $symPartStringData['part_of_symptom_string'] : "";
				// 	}
				// } else {
				// 	$symptomSymPartString = mysqli_query($db, "SELECT part_of_symptom_string FROM quelle_import_test WHERE id = '".$symptomId."'");
				// 	if(mysqli_num_rows($symptomSymPartString) > 0){
				// 		$symPartStringData = mysqli_fetch_assoc($symptomSymPartString);
				// 		$excludedBracket = (isset($symPartStringData['part_of_symptom_string']) AND $symPartStringData['part_of_symptom_string'] != "") ? $symPartStringData['part_of_symptom_string'] : "";
				// 	}
				// }
				if(isset($originalSymptomId) AND $originalSymptomId != ""){
					// $originalSymptomSymPartString = mysqli_query($db, "SELECT part_of_symptom_string FROM quelle_import_test WHERE id = '".$originalSymptomId."'");
					// if(mysqli_num_rows($originalSymptomSymPartString) > 0){
					// 	$symPartStringData = mysqli_fetch_assoc($originalSymptomSymPartString);
					// 	$excludedBracket = (isset($symPartStringData['part_of_symptom_string']) AND $symPartStringData['part_of_symptom_string'] != "") ? $symPartStringData['part_of_symptom_string'] : "";
					// }
					$tempPartOfSymptomData = getTheBracketdStringThatPartOfSymptom($originalSymptomId);
					// $excludedBracket = ($tempPartOfSymptomData['part_of_symptom_string_de_and_en_merged'] != "") ? $tempPartOfSymptomData['part_of_symptom_string_de_and_en_merged'] : "";
					// $notPartOfSymptomBrackets = ($tempPartOfSymptomData['not_part_of_symptom_string_de_and_en_merged'] != "") ? $tempPartOfSymptomData['not_part_of_symptom_string_de_and_en_merged'] : "";
					$excludedBracket = ($tempPartOfSymptomData['not_part_of_symptom_string_de_and_en_merged'] != "") ? $tempPartOfSymptomData['not_part_of_symptom_string_de_and_en_merged'] : "";
				} else {
					// $symptomSymPartString = mysqli_query($db, "SELECT part_of_symptom_string FROM quelle_import_test WHERE id = '".$symptomId."'");
					// if(mysqli_num_rows($symptomSymPartString) > 0){
					// 	$symPartStringData = mysqli_fetch_assoc($symptomSymPartString);
					// 	$excludedBracket = (isset($symPartStringData['part_of_symptom_string']) AND $symPartStringData['part_of_symptom_string'] != "") ? $symPartStringData['part_of_symptom_string'] : "";
					// }
					$tempPartOfSymptomData = getTheBracketdStringThatPartOfSymptom($symptomId);
					// echo "<pre>";
					// print_r($tempPartOfSymptomData);
					// echo "</pre>";
					// $excludedBracket = ($tempPartOfSymptomData['part_of_symptom_string_de_and_en_merged'] != "") ? $tempPartOfSymptomData['part_of_symptom_string_de_and_en_merged'] : "";
					// $notPartOfSymptomBrackets = ($tempPartOfSymptomData['not_part_of_symptom_string_de_and_en_merged'] != "") ? $tempPartOfSymptomData['not_part_of_symptom_string_de_and_en_merged'] : "";
					$excludedBracket = ($tempPartOfSymptomData['not_part_of_symptom_string_de_and_en_merged'] != "") ? $tempPartOfSymptomData['not_part_of_symptom_string_de_and_en_merged'] : "";
				}
				$excludedBracketTempArray = ($excludedBracket != "") ? explode(",", $excludedBracket) : array();
				$excludedBracketTempArray=array_map('trim',$excludedBracketTempArray);
				foreach ($excludedBracketTempArray as $bracketStringKey => $bracketStringVal) {
					$bracketStringVal = str_replace('{@#@}', ',', $bracketStringVal);
					$symptom = convertNonConversionalBrackets($symptom, "(", ")", $conversionArr, $bracketStringVal);
					$symptom = convertNonConversionalBrackets($symptom, "[", "]", $conversionArr, $bracketStringVal);
				}
			}
			$globalGradingArr = array();
			$globalGradingSignArr = array();
			$globalSettingResult = mysqli_query($db, "SELECT GSV.format_grade, GSV.format_custom_tag, GSV.format_custom_signs FROM global_grading_set_values AS GSV JOIN global_grading_sets AS GS ON GSV.global_grading_sets_id = GS.global_grading_sets_id WHERE GS.active = 1");
			// if (!$dbc || mysqli_num_rows($dbc) == 0)
			if($globalSettingResult && mysqli_num_rows($globalSettingResult) > 0){
				while($globalGradingSettings = mysqli_fetch_array($globalSettingResult)){
					$formatGrade = (isset($globalGradingSettings['format_grade']) AND $globalGradingSettings['format_grade'] != "") ? "'".$globalGradingSettings['format_grade']."'" : "";
					$formatCustomTag = (isset($globalGradingSettings['format_custom_tag']) AND $globalGradingSettings['format_custom_tag'] != "") ? $globalGradingSettings['format_custom_tag'] : "";
					$formatCustomSign = (isset($globalGradingSettings['format_custom_signs']) AND $globalGradingSettings['format_custom_signs'] != "") ? $globalGradingSettings['format_custom_signs'] : "";
					if($formatGrade != "" AND $formatCustomTag != "" AND !in_array($formatGrade, $globalGradingArr)){
						$globalGradingArr[$formatGrade] = $formatCustomTag;
						// $globalGradingArr[$formatCustomTag] = $formatGrade;
						// $globalGradingSignArr[$formatCustomTag] = $formatCustomSign;
						$globalGradingSignArr[$formatGrade] = $formatCustomSign;
					}
				}
			}

			$sourceSettingResult = mysqli_query($db, "SELECT normal, normal_within_parentheses, normal_end_with_t, normal_end_with_tt, normal_begin_with_degree, normal_end_with_degree, normal_begin_with_asterisk, normal_begin_with_asterisk_end_with_t, normal_begin_with_asterisk_end_with_tt, normal_begin_with_asterisk_end_with_degree, sperrschrift, sperrschrift_begin_with_degree, sperrschrift_begin_with_asterisk, sperrschrift_bold, sperrschrift_bold_begin_with_degree, sperrschrift_bold_begin_with_asterisk, kursiv, kursiv_end_with_t, kursiv_end_with_tt, kursiv_begin_with_degree, kursiv_end_with_degree, kursiv_begin_with_asterisk, kursiv_begin_with_asterisk_end_with_t, kursiv_begin_with_asterisk_end_with_tt, kursiv_begin_with_asterisk_end_with_degree, kursiv_bold, kursiv_bold_begin_with_asterisk_end_with_t, kursiv_bold_begin_with_asterisk_end_with_tt, kursiv_bold_begin_with_degree, kursiv_bold_begin_with_asterisk, kursiv_bold_begin_with_asterisk_end_with_degree, fett, fett_end_with_t, fett_end_with_tt, fett_begin_with_degree, fett_end_with_degree, fett_begin_with_asterisk, fett_begin_with_asterisk_end_with_t, fett_begin_with_asterisk_end_with_tt, fett_begin_with_asterisk_end_with_degree, fett_converted_spaced, fett_converted_spaced_degree_at_beginning, fett_converted_spaced_asterisk_at_beginning, gross, gross_begin_with_degree, gross_begin_with_asterisk, gross_bold, gross_bold_begin_with_degree, gross_bold_begin_with_asterisk, pi_sign, one_bar, two_bar, three_bar, three_and_half_bar, four_bar, four_and_half_bar, five_bar FROM quelle_grading_settings WHERE quelle_id = '".$originalQuelleId."'");
			if($sourceSettingResult && mysqli_num_rows($sourceSettingResult) > 0){
				$sourceSettingData = mysqli_fetch_assoc($sourceSettingResult);
			}
			// If this symptom has it own specific garading settings then the will get apply
			if(isset($originalSymptomId) AND $originalSymptomId != ""){
				$originalSymptomSettingResult = mysqli_query($db, "SELECT normal, normal_within_parentheses, normal_end_with_t, normal_end_with_tt, normal_begin_with_degree, normal_end_with_degree, normal_begin_with_asterisk, normal_begin_with_asterisk_end_with_t, normal_begin_with_asterisk_end_with_tt, normal_begin_with_asterisk_end_with_degree, sperrschrift, sperrschrift_begin_with_degree, sperrschrift_begin_with_asterisk, sperrschrift_bold, sperrschrift_bold_begin_with_degree, sperrschrift_bold_begin_with_asterisk, kursiv, kursiv_end_with_t, kursiv_end_with_tt, kursiv_begin_with_degree, kursiv_end_with_degree, kursiv_begin_with_asterisk, kursiv_begin_with_asterisk_end_with_t, kursiv_begin_with_asterisk_end_with_tt, kursiv_begin_with_asterisk_end_with_degree, kursiv_bold, kursiv_bold_begin_with_asterisk_end_with_t, kursiv_bold_begin_with_asterisk_end_with_tt, kursiv_bold_begin_with_degree, kursiv_bold_begin_with_asterisk, kursiv_bold_begin_with_asterisk_end_with_degree, fett, fett_end_with_t, fett_end_with_tt, fett_begin_with_degree, fett_end_with_degree, fett_begin_with_asterisk, fett_begin_with_asterisk_end_with_t, fett_begin_with_asterisk_end_with_tt, fett_begin_with_asterisk_end_with_degree, fett_converted_spaced, fett_converted_spaced_degree_at_beginning, fett_converted_spaced_asterisk_at_beginning, gross, gross_begin_with_degree, gross_begin_with_asterisk, gross_bold, gross_bold_begin_with_degree, gross_bold_begin_with_asterisk, pi_sign, one_bar, two_bar, three_bar, three_and_half_bar, four_bar, four_and_half_bar, five_bar FROM symptom_grading_settings WHERE symptom_id = '".$originalSymptomId."' AND active = 1 ORDER BY symptom_grading_settings_id DESC LIMIT 1");
				if(mysqli_num_rows($originalSymptomSettingResult) > 0){
					$sourceSettingData = mysqli_fetch_assoc($originalSymptomSettingResult);
				}
			}

			$symptomSettingResult = mysqli_query($db, "SELECT normal, normal_within_parentheses, normal_end_with_t, normal_end_with_tt, normal_begin_with_degree, normal_end_with_degree, normal_begin_with_asterisk, normal_begin_with_asterisk_end_with_t, normal_begin_with_asterisk_end_with_tt, normal_begin_with_asterisk_end_with_degree, sperrschrift, sperrschrift_begin_with_degree, sperrschrift_begin_with_asterisk, sperrschrift_bold, sperrschrift_bold_begin_with_degree, sperrschrift_bold_begin_with_asterisk, kursiv, kursiv_end_with_t, kursiv_end_with_tt, kursiv_begin_with_degree, kursiv_end_with_degree, kursiv_begin_with_asterisk, kursiv_begin_with_asterisk_end_with_t, kursiv_begin_with_asterisk_end_with_tt, kursiv_begin_with_asterisk_end_with_degree, kursiv_bold, kursiv_bold_begin_with_asterisk_end_with_t, kursiv_bold_begin_with_asterisk_end_with_tt, kursiv_bold_begin_with_degree, kursiv_bold_begin_with_asterisk, kursiv_bold_begin_with_asterisk_end_with_degree, fett, fett_end_with_t, fett_end_with_tt, fett_begin_with_degree, fett_end_with_degree, fett_begin_with_asterisk, fett_begin_with_asterisk_end_with_t, fett_begin_with_asterisk_end_with_tt, fett_begin_with_asterisk_end_with_degree, fett_converted_spaced, fett_converted_spaced_degree_at_beginning, fett_converted_spaced_asterisk_at_beginning, gross, gross_begin_with_degree, gross_begin_with_asterisk, gross_bold, gross_bold_begin_with_degree, gross_bold_begin_with_asterisk, pi_sign, one_bar, two_bar, three_bar, three_and_half_bar, four_bar, four_and_half_bar, five_bar FROM symptom_grading_settings WHERE symptom_id = '".$symptomId."' AND active = 1 ORDER BY symptom_grading_settings_id DESC LIMIT 1");
			if($symptomSettingResult && mysqli_num_rows($symptomSettingResult) > 0){
				$sourceSettingData = mysqli_fetch_assoc($symptomSettingResult);
			}

			// Fecthing temp garding setting data of a symptom for the editable symptom preview section (This is only applicable while editing a symptom)
			if($isEditPreview == 1){
				$tempSymptomId = (isset($originalSymptomId) AND $originalSymptomId != "") ? $originalSymptomId : $symptomId;
				$tempSymptomGradingSettingResult = mysqli_query($db, "SELECT normal, normal_within_parentheses, normal_end_with_t, normal_end_with_tt, normal_begin_with_degree, normal_end_with_degree, normal_begin_with_asterisk, normal_begin_with_asterisk_end_with_t, normal_begin_with_asterisk_end_with_tt, normal_begin_with_asterisk_end_with_degree, sperrschrift, sperrschrift_begin_with_degree, sperrschrift_begin_with_asterisk, sperrschrift_bold, sperrschrift_bold_begin_with_degree, sperrschrift_bold_begin_with_asterisk, kursiv, kursiv_end_with_t, kursiv_end_with_tt, kursiv_begin_with_degree, kursiv_end_with_degree, kursiv_begin_with_asterisk, kursiv_begin_with_asterisk_end_with_t, kursiv_begin_with_asterisk_end_with_tt, kursiv_begin_with_asterisk_end_with_degree, kursiv_bold, kursiv_bold_begin_with_asterisk_end_with_t, kursiv_bold_begin_with_asterisk_end_with_tt, kursiv_bold_begin_with_degree, kursiv_bold_begin_with_asterisk, kursiv_bold_begin_with_asterisk_end_with_degree, fett, fett_end_with_t, fett_end_with_tt, fett_begin_with_degree, fett_end_with_degree, fett_begin_with_asterisk, fett_begin_with_asterisk_end_with_t, fett_begin_with_asterisk_end_with_tt, fett_begin_with_asterisk_end_with_degree, fett_converted_spaced, fett_converted_spaced_degree_at_beginning, fett_converted_spaced_asterisk_at_beginning, gross, gross_begin_with_degree, gross_begin_with_asterisk, gross_bold, gross_bold_begin_with_degree, gross_bold_begin_with_asterisk, pi_sign, one_bar, two_bar, three_bar, three_and_half_bar, four_bar, four_and_half_bar, five_bar FROM temp_editable_symptom_grading_settings WHERE symptom_id = '".$tempSymptomId."'");
				if(mysqli_num_rows($tempSymptomGradingSettingResult) > 0){
					$sourceSettingData = mysqli_fetch_assoc($tempSymptomGradingSettingResult);
				}
			}

			//fetching import rule of the source
			$importedRule = fetchSourceImportRule($originalQuelleId, $arzneiId);
			
			$preConversionChanges = array();
			$piSign = (isset($sourceSettingData['pi_sign']) and $sourceSettingData['pi_sign'] != "") ? "'".$sourceSettingData['pi_sign']."'" : "";
			if($piSign != ""){
				// $key = array_search($piSign, $globalGradingArr);
				$key = (isset($globalGradingArr[$piSign]) AND $globalGradingArr[$piSign] != "") ? $globalGradingArr[$piSign] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['pi-normal'] = $key;
					$conversionSignArr['pi-normal'] = (isset($globalGradingSignArr[$piSign]) AND $globalGradingSignArr[$piSign] != "") ? $globalGradingSignArr[$piSign] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['pi-normal'] = array('grade' => $piSign, 'is_it_gross' => $is_it_gross);
			}
			$oneBar = (isset($sourceSettingData['one_bar']) and $sourceSettingData['one_bar'] != "") ? "'".$sourceSettingData['one_bar']."'" : "";
			if($oneBar != ""){
				// $key = array_search($oneBar, $globalGradingArr);
				$key = (isset($globalGradingArr[$oneBar]) AND $globalGradingArr[$oneBar] != "") ? $globalGradingArr[$oneBar] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['bar-one-normal'] = $key;
					$conversionSignArr['bar-one-normal'] = (isset($globalGradingSignArr[$oneBar]) AND $globalGradingSignArr[$oneBar] != "") ? $globalGradingSignArr[$oneBar] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['bar-one-normal'] = array('grade' => $oneBar, 'is_it_gross' => $is_it_gross);
			}
			$twoBar = (isset($sourceSettingData['two_bar']) and $sourceSettingData['two_bar'] != "")? "'".$sourceSettingData['two_bar']."'" : "";
			if($twoBar != ""){
				// $key = array_search($twoBar, $globalGradingArr);
				$key = (isset($globalGradingArr[$twoBar]) AND $globalGradingArr[$twoBar] != "") ? $globalGradingArr[$twoBar] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['bar-two-normal'] = $key;
					$conversionSignArr['bar-two-normal'] = (isset($globalGradingSignArr[$twoBar]) AND $globalGradingSignArr[$twoBar] != "") ? $globalGradingSignArr[$twoBar] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['bar-two-normal'] = array('grade' => $twoBar, 'is_it_gross' => $is_it_gross);
			}
			$threeBar = (isset($sourceSettingData['three_bar']) and $sourceSettingData['three_bar'] != "")? "'".$sourceSettingData['three_bar']."'" : "";
			if($threeBar != ""){
				// $key = array_search($threeBar, $globalGradingArr);
				$key = (isset($globalGradingArr[$threeBar]) AND $globalGradingArr[$threeBar] != "") ? $globalGradingArr[$threeBar] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['bar-three-normal'] = $key;
					$conversionSignArr['bar-three-normal'] = (isset($globalGradingSignArr[$threeBar]) AND $globalGradingSignArr[$threeBar] != "") ? $globalGradingSignArr[$threeBar] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['bar-three-normal'] = array('grade' => $threeBar, 'is_it_gross' => $is_it_gross);
			}
			$threeAndHalfBar = (isset($sourceSettingData['three_and_half_bar']) and $sourceSettingData['three_and_half_bar'] != "")? "'".$sourceSettingData['three_and_half_bar']."'" : "";
			if($threeAndHalfBar != ""){
				// $key = array_search($threeAndHalfBar, $globalGradingArr);
				$key = (isset($globalGradingArr[$threeAndHalfBar]) AND $globalGradingArr[$threeAndHalfBar] != "") ? $globalGradingArr[$threeAndHalfBar] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['bar-three-and-half-normal'] = $key;
					$conversionSignArr['bar-three-and-half-normal'] = (isset($globalGradingSignArr[$threeAndHalfBar]) AND $globalGradingSignArr[$threeAndHalfBar] != "") ? $globalGradingSignArr[$threeAndHalfBar] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['bar-three-and-half-normal'] = array('grade' => $threeAndHalfBar, 'is_it_gross' => $is_it_gross);
			}
			$fourBar = (isset($sourceSettingData['four_bar']) and $sourceSettingData['four_bar'] != "")? "'".$sourceSettingData['four_bar']."'" : "";
			if($fourBar != ""){
				// $key = array_search($fourBar, $globalGradingArr);
				$key = (isset($globalGradingArr[$fourBar]) AND $globalGradingArr[$fourBar] != "") ? $globalGradingArr[$fourBar] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['bar-four-normal'] = $key;
					$conversionSignArr['bar-four-normal'] = (isset($globalGradingSignArr[$fourBar]) AND $globalGradingSignArr[$fourBar] != "") ? $globalGradingSignArr[$fourBar] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['bar-four-normal'] = array('grade' => $fourBar, 'is_it_gross' => $is_it_gross);
			}
			$fourAndHalfBar = (isset($sourceSettingData['four_and_half_bar']) and $sourceSettingData['four_and_half_bar'] != "")? "'".$sourceSettingData['four_and_half_bar']."'" : "";
			if($fourAndHalfBar != ""){
				// $key = array_search($fourAndHalfBar, $globalGradingArr);
				$key = (isset($globalGradingArr[$fourAndHalfBar]) AND $globalGradingArr[$fourAndHalfBar] != "") ? $globalGradingArr[$fourAndHalfBar] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['bar-four-and-half-normal'] = $key;
					$conversionSignArr['bar-four-and-half-normal'] = (isset($globalGradingSignArr[$fourAndHalfBar]) AND $globalGradingSignArr[$fourAndHalfBar] != "") ? $globalGradingSignArr[$fourAndHalfBar] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['bar-four-and-half-normal'] = array('grade' => $fourAndHalfBar, 'is_it_gross' => $is_it_gross);
			}
			$fiveBar = (isset($sourceSettingData['five_bar']) and $sourceSettingData['five_bar'] != "")? "'".$sourceSettingData['five_bar']."'" : "";
			if($fiveBar != ""){
				// $key = array_search($fiveBar, $globalGradingArr);
				$key = (isset($globalGradingArr[$fiveBar]) AND $globalGradingArr[$fiveBar] != "") ? $globalGradingArr[$fiveBar] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['bar-five-normal'] = $key;
					$conversionSignArr['bar-five-normal'] = (isset($globalGradingSignArr[$fiveBar]) AND $globalGradingSignArr[$fiveBar] != "") ? $globalGradingSignArr[$fiveBar] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['bar-five-normal'] = array('grade' => $fiveBar, 'is_it_gross' => $is_it_gross);
			}
			$normal = (isset($sourceSettingData['normal']) and $sourceSettingData['normal'] != "")? "'".$sourceSettingData['normal']."'" : "";
			if($normal != ""){
				// $key = array_search($normal, $globalGradingArr);
				$key = (isset($globalGradingArr[$normal]) AND $globalGradingArr[$normal] != "") ? $globalGradingArr[$normal] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['non-asterisk-degree-normal'] = $key;
					$conversionSignArr['non-asterisk-degree-normal'] = (isset($globalGradingSignArr[$normal]) AND $globalGradingSignArr[$normal] != "") ? $globalGradingSignArr[$normal] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['non-asterisk-degree-normal'] = array('grade' => $normal, 'is_it_gross' => $is_it_gross);
			}
		    $normal_within_parentheses = (isset($sourceSettingData['normal_within_parentheses']) and $sourceSettingData['normal_within_parentheses'] != "") ? "'".$sourceSettingData['normal_within_parentheses']."'" : "";
		    if($normal_within_parentheses != ""){
				// $key = array_search($normal_within_parentheses, $globalGradingArr);
				$key = (isset($globalGradingArr[$normal_within_parentheses]) AND $globalGradingArr[$normal_within_parentheses] != "") ? $globalGradingArr[$normal_within_parentheses] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['parentheses-normal'] = $key;
					$conversionSignArr['parentheses-normal'] = (isset($globalGradingSignArr[$normal_within_parentheses]) AND $globalGradingSignArr[$normal_within_parentheses] != "") ? $globalGradingSignArr[$normal_within_parentheses] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['parentheses-normal'] = array('grade' => $normal_within_parentheses, 'is_it_gross' => $is_it_gross);
			}
		   
            $normal_end_with_t = (isset($sourceSettingData['normal']) and $sourceSettingData['normal'] != "") ? "'".$sourceSettingData['normal']."'" : "";
			if($normal_end_with_t != ""){
				$key = (isset($globalGradingArr[$normal_end_with_t]) AND $globalGradingArr[$normal_end_with_t] != "") ? $globalGradingArr[$normal_end_with_t] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['endwithsinglet-normal'] = $key;
					$conversionSignArr['endwithsinglet-normal'] = (isset($globalGradingSignArr[$normal_end_with_t]) AND $globalGradingSignArr[$normal_end_with_t] != "") ? $globalGradingSignArr[$normal_end_with_t] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['endwithsinglet-normal'] = array('grade' => $normal_end_with_t, 'is_it_gross' => $is_it_gross);
			}

		    $normal_end_with_tt = (isset($sourceSettingData['normal']) and $sourceSettingData['normal'] != "") ? "'".$sourceSettingData['normal']."'" : "";
			if($normal_end_with_tt != ""){
				$key = (isset($globalGradingArr[$normal_end_with_tt]) AND $globalGradingArr[$normal_end_with_tt] != "") ? $globalGradingArr[$normal_end_with_tt] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['endwithdoublet-normal'] = $key;
					$conversionSignArr['endwithdoublet-normal'] = (isset($globalGradingSignArr[$normal_end_with_tt]) AND $globalGradingSignArr[$normal_end_with_tt] != "") ? $globalGradingSignArr[$normal_end_with_tt] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['endwithdoublet-normal'] = array('grade' => $normal_end_with_tt, 'is_it_gross' => $is_it_gross);
			}
		    $normal_begin_with_degree = (isset($sourceSettingData['normal_begin_with_degree']) and $sourceSettingData['normal_begin_with_degree'] != "") ? "'".$sourceSettingData['normal_begin_with_degree']."'" : "";
		    if($normal_begin_with_degree != ""){
				// $key = array_search($normal_begin_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$normal_begin_with_degree]) AND $globalGradingArr[$normal_begin_with_degree] != "") ? $globalGradingArr[$normal_begin_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['degree-normal'] = $key;
					$conversionSignArr['degree-normal'] = (isset($globalGradingSignArr[$normal_begin_with_degree]) AND $globalGradingSignArr[$normal_begin_with_degree] != "") ? $globalGradingSignArr[$normal_begin_with_degree] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['degree-normal'] = array('grade' => $normal_begin_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $normal_end_with_degree = (isset($sourceSettingData['normal_end_with_degree']) and $sourceSettingData['normal_end_with_degree'] != "") ? "'".$sourceSettingData['normal_end_with_degree']."'" : "";
		    if($normal_end_with_degree != ""){
				// $key = array_search($normal_end_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$normal_end_with_degree]) AND $globalGradingArr[$normal_end_with_degree] != "") ? $globalGradingArr[$normal_end_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['endwithdegree-normal'] = $key;
					$conversionSignArr['endwithdegree-normal'] = (isset($globalGradingSignArr[$normal_end_with_degree]) AND $globalGradingSignArr[$normal_end_with_degree] != "") ? $globalGradingSignArr[$normal_end_with_degree] : "";
				// }	

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['endwithdegree-normal'] = array('grade' => $normal_end_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $normal_begin_with_asterisk = (isset($sourceSettingData['normal_begin_with_asterisk']) and $sourceSettingData['normal_begin_with_asterisk'] != "")? "'".$sourceSettingData['normal_begin_with_asterisk']."'" : "";
		    if($normal_begin_with_asterisk != ""){
				// $key = array_search($normal_begin_with_asterisk, $globalGradingArr);
				$key = (isset($globalGradingArr[$normal_begin_with_asterisk]) AND $globalGradingArr[$normal_begin_with_asterisk] != "") ? $globalGradingArr[$normal_begin_with_asterisk] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-normal'] = $key;
					$conversionSignArr['asterisk-normal'] = (isset($globalGradingSignArr[$normal_begin_with_asterisk]) AND $globalGradingSignArr[$normal_begin_with_asterisk] != "") ? $globalGradingSignArr[$normal_begin_with_asterisk] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-normal'] = array('grade' => $normal_begin_with_asterisk, 'is_it_gross' => $is_it_gross);
			}
		    $normal_begin_with_asterisk_end_with_t = (isset($sourceSettingData['normal_begin_with_asterisk_end_with_t']) and $sourceSettingData['normal_begin_with_asterisk_end_with_t'] != "") ? $sourceSettingData['normal_begin_with_asterisk_end_with_t'] : ""; 
		    $normal_begin_with_asterisk_end_with_tt = (isset($sourceSettingData['normal_begin_with_asterisk_end_with_tt']) and $sourceSettingData['normal_begin_with_asterisk_end_with_tt'] !="" ) ? $sourceSettingData['normal_begin_with_asterisk_end_with_tt'] : "";
		    $normal_begin_with_asterisk_end_with_degree = (isset($sourceSettingData['normal_begin_with_asterisk_end_with_degree']) and $sourceSettingData['normal_begin_with_asterisk_end_with_degree'] !="" ) ? "'".$sourceSettingData['normal_begin_with_asterisk_end_with_degree']."'" : "";
		    if($normal_begin_with_asterisk_end_with_degree != ""){
				// $key = array_search($normal_begin_with_asterisk_end_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$normal_begin_with_asterisk_end_with_degree]) AND $globalGradingArr[$normal_begin_with_asterisk_end_with_degree] != "") ? $globalGradingArr[$normal_begin_with_asterisk_end_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['asterisk-degree-normal'] = $key;
					$conversionSignArr['asterisk-degree-normal'] = (isset($globalGradingSignArr[$normal_begin_with_asterisk_end_with_degree]) AND $globalGradingSignArr[$normal_begin_with_asterisk_end_with_degree] != "") ? $globalGradingSignArr[$normal_begin_with_asterisk_end_with_degree] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-degree-normal'] = array('grade' => $normal_begin_with_asterisk_end_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $sperrschrift = (isset($sourceSettingData['sperrschrift']) and $sourceSettingData['sperrschrift'] !="" ) ? "'".$sourceSettingData['sperrschrift']."'" : "";
		    if($sperrschrift != ""){
				// $key = array_search($sperrschrift, $globalGradingArr);
				$key = (isset($globalGradingArr[$sperrschrift]) AND $globalGradingArr[$sperrschrift] != "") ? $globalGradingArr[$sperrschrift] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['non-asterisk-degree-ss'] = $key;
					$conversionSignArr['non-asterisk-degree-ss'] = (isset($globalGradingSignArr[$sperrschrift]) AND $globalGradingSignArr[$sperrschrift] != "") ? $globalGradingSignArr[$sperrschrift] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['non-asterisk-degree-ss'] = array('grade' => $sperrschrift, 'is_it_gross' => $is_it_gross);
			}
		    $sperrschrift_begin_with_degree = (isset($sourceSettingData['sperrschrift_begin_with_degree']) and $sourceSettingData['sperrschrift_begin_with_degree'] !="" ) ? "'".$sourceSettingData['sperrschrift_begin_with_degree']."'" : "";
		    if($sperrschrift_begin_with_degree != ""){
				// $key = array_search($sperrschrift_begin_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$sperrschrift_begin_with_degree]) AND $globalGradingArr[$sperrschrift_begin_with_degree] != "") ? $globalGradingArr[$sperrschrift_begin_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['degree-ss'] = $key;
					$conversionSignArr['degree-ss'] = (isset($globalGradingSignArr[$sperrschrift_begin_with_degree]) AND $globalGradingSignArr[$sperrschrift_begin_with_degree] != "") ? $globalGradingSignArr[$sperrschrift_begin_with_degree] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['degree-ss'] = array('grade' => $sperrschrift_begin_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $sperrschrift_begin_with_asterisk = (isset($sourceSettingData['sperrschrift_begin_with_asterisk']) and $sourceSettingData['sperrschrift_begin_with_asterisk'] !="" ) ? "'".$sourceSettingData['sperrschrift_begin_with_asterisk']."'" : "";
		    if($sperrschrift_begin_with_asterisk != ""){
				// $key = array_search($sperrschrift_begin_with_asterisk, $globalGradingArr);
				$key = (isset($globalGradingArr[$sperrschrift_begin_with_asterisk]) AND $globalGradingArr[$sperrschrift_begin_with_asterisk] != "") ? $globalGradingArr[$sperrschrift_begin_with_asterisk] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['asterisk-ss'] = $key;
					$conversionSignArr['asterisk-ss'] = (isset($globalGradingSignArr[$sperrschrift_begin_with_asterisk]) AND $globalGradingSignArr[$sperrschrift_begin_with_asterisk] != "") ? $globalGradingSignArr[$sperrschrift_begin_with_asterisk] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-ss'] = array('grade' => $sperrschrift_begin_with_asterisk, 'is_it_gross' => $is_it_gross);
			}
		    $sperrschrift_bold = (isset($sourceSettingData['sperrschrift_bold']) and $sourceSettingData['sperrschrift_bold'] !="" ) ? "'".$sourceSettingData['sperrschrift_bold']."'" : "";
		    if($sperrschrift_bold != ""){
				// $key = array_search($sperrschrift_bold, $globalGradingArr);
				$key = (isset($globalGradingArr[$sperrschrift_bold]) AND $globalGradingArr[$sperrschrift_bold] != "") ? $globalGradingArr[$sperrschrift_bold] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['non-asterisk-degree-ssbold'] = $key;
					$conversionSignArr['non-asterisk-degree-ssbold'] = (isset($globalGradingSignArr[$sperrschrift_bold]) AND $globalGradingSignArr[$sperrschrift_bold] != "") ? $globalGradingSignArr[$sperrschrift_bold] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['non-asterisk-degree-ssbold'] = array('grade' => $sperrschrift_bold, 'is_it_gross' => $is_it_gross);
			}
		    $sperrschrift_bold_begin_with_degree = (isset($sourceSettingData['sperrschrift_bold_begin_with_degree']) and $sourceSettingData['sperrschrift_bold_begin_with_degree'] !="" ) ? "'".$sourceSettingData['sperrschrift_bold_begin_with_degree']."'" : "";
		    if($sperrschrift_bold_begin_with_degree != ""){
				// $key = array_search($sperrschrift_bold_begin_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$sperrschrift_bold_begin_with_degree]) AND $globalGradingArr[$sperrschrift_bold_begin_with_degree] != "") ? $globalGradingArr[$sperrschrift_bold_begin_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['degree-ssbold'] = $key;
					$conversionSignArr['degree-ssbold'] = (isset($globalGradingSignArr[$sperrschrift_bold_begin_with_degree]) AND $globalGradingSignArr[$sperrschrift_bold_begin_with_degree] != "") ? $globalGradingSignArr[$sperrschrift_bold_begin_with_degree] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['degree-ssbold'] = array('grade' => $sperrschrift_bold_begin_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $sperrschrift_bold_begin_with_asterisk = (isset($sourceSettingData['sperrschrift_bold_begin_with_asterisk']) and $sourceSettingData['sperrschrift_bold_begin_with_asterisk'] !="" ) ? "'".$sourceSettingData['sperrschrift_bold_begin_with_asterisk']."'" : "";
		    if($sperrschrift_bold_begin_with_asterisk != ""){
				// $key = array_search($sperrschrift_bold_begin_with_asterisk, $globalGradingArr);
				$key = (isset($globalGradingArr[$sperrschrift_bold_begin_with_asterisk]) AND $globalGradingArr[$sperrschrift_bold_begin_with_asterisk] != "") ? $globalGradingArr[$sperrschrift_bold_begin_with_asterisk] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-ssbold'] = $key;
					$conversionSignArr['asterisk-ssbold'] = (isset($globalGradingSignArr[$sperrschrift_bold_begin_with_asterisk]) AND $globalGradingSignArr[$sperrschrift_bold_begin_with_asterisk] != "") ? $globalGradingSignArr[$sperrschrift_bold_begin_with_asterisk] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-ssbold'] = array('grade' => $sperrschrift_bold_begin_with_asterisk, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv = (isset($sourceSettingData['kursiv']) and $sourceSettingData['kursiv'] !="" ) ? "'".$sourceSettingData['kursiv']."'" : "";
		    if($kursiv != ""){
				// $key = array_search($kursiv, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv]) AND $globalGradingArr[$kursiv] != "") ? $globalGradingArr[$kursiv] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['non-asterisk-degree-em'] = $key;
					$conversionSignArr['non-asterisk-degree-em'] = (isset($globalGradingSignArr[$kursiv]) AND $globalGradingSignArr[$kursiv] != "") ? $globalGradingSignArr[$kursiv] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['non-asterisk-degree-em'] = array('grade' => $kursiv, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv_end_with_t = (isset($sourceSettingData['kursiv']) and $sourceSettingData['kursiv'] !="" ) ? "'".$sourceSettingData['kursiv']."'" : "";
			if($kursiv_end_with_t != ""){
				// $key = array_search($kursiv, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv_end_with_t]) AND $globalGradingArr[$kursiv_end_with_t] != "") ? $globalGradingArr[$kursiv_end_with_t] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['endwithsinglet-em'] = $key;
					$conversionSignArr['endwithsinglet-em'] = (isset($globalGradingSignArr[$kursiv_end_with_t]) AND $globalGradingSignArr[$kursiv_end_with_t] != "") ? $globalGradingSignArr[$kursiv_end_with_t] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['endwithsinglet-em'] = array('grade' => $kursiv_end_with_t, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv_end_with_tt = (isset($sourceSettingData['kursiv']) and $sourceSettingData['kursiv'] !="" ) ? "'".$sourceSettingData['kursiv']."'" : "";
			if($kursiv_end_with_tt != ""){
				// $key = array_search($kursiv, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv_end_with_tt]) AND $globalGradingArr[$kursiv_end_with_tt] != "") ? $globalGradingArr[$kursiv_end_with_tt] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['endwithdoublet-em'] = $key;
					$conversionSignArr['endwithdoublet-em'] = (isset($globalGradingSignArr[$kursiv_end_with_tt]) AND $globalGradingSignArr[$kursiv_end_with_tt] != "") ? $globalGradingSignArr[$kursiv_end_with_tt] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['endwithdoublet-em'] = array('grade' => $kursiv_end_with_tt, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv_begin_with_degree = (isset($sourceSettingData['kursiv_begin_with_degree']) and $sourceSettingData['kursiv_begin_with_degree'] !="" ) ? "'".$sourceSettingData['kursiv_begin_with_degree']."'" : "";
		    if($kursiv_begin_with_degree != ""){
				// $key = array_search($kursiv_begin_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv_begin_with_degree]) AND $globalGradingArr[$kursiv_begin_with_degree] != "") ? $globalGradingArr[$kursiv_begin_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['degree-em'] = $key;
					$conversionSignArr['degree-em'] = (isset($globalGradingSignArr[$kursiv_begin_with_degree]) AND $globalGradingSignArr[$kursiv_begin_with_degree] != "") ? $globalGradingSignArr[$kursiv_begin_with_degree] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['degree-em'] = array('grade' => $kursiv_begin_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv_end_with_degree = (isset($sourceSettingData['kursiv_end_with_degree']) and $sourceSettingData['kursiv_end_with_degree'] !="" ) ? "'".$sourceSettingData['kursiv_end_with_degree']."'" : "";
		    if($kursiv_end_with_degree != ""){
				// $key = array_search($kursiv_end_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv_end_with_degree]) AND $globalGradingArr[$kursiv_end_with_degree] != "") ? $globalGradingArr[$kursiv_end_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['endwithdegree-em'] = $key;
					$conversionSignArr['endwithdegree-em'] = (isset($globalGradingSignArr[$kursiv_end_with_degree]) AND $globalGradingSignArr[$kursiv_end_with_degree] != "") ? $globalGradingSignArr[$kursiv_end_with_degree] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['endwithdegree-em'] = array('grade' => $kursiv_end_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv_begin_with_asterisk = (isset($sourceSettingData['kursiv_begin_with_asterisk']) and $sourceSettingData['kursiv_begin_with_asterisk'] !="" ) ? "'".$sourceSettingData['kursiv_begin_with_asterisk']."'" : "";
		    if($kursiv_begin_with_asterisk != ""){
				// $key = array_search($kursiv_begin_with_asterisk, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv_begin_with_asterisk]) AND $globalGradingArr[$kursiv_begin_with_asterisk] != "") ? $globalGradingArr[$kursiv_begin_with_asterisk] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-em'] = $key;
					$conversionSignArr['asterisk-em'] = (isset($globalGradingSignArr[$kursiv_begin_with_asterisk]) AND $globalGradingSignArr[$kursiv_begin_with_asterisk] != "") ? $globalGradingSignArr[$kursiv_begin_with_asterisk] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-em'] = array('grade' => $kursiv_begin_with_asterisk, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv_begin_with_asterisk_end_with_t = (isset($sourceSettingData['kursiv_begin_with_asterisk_end_with_t']) and $sourceSettingData['kursiv_begin_with_asterisk_end_with_t'] !="" ) ? $sourceSettingData['kursiv_begin_with_asterisk_end_with_t'] : "";
		    $kursiv_begin_with_asterisk_end_with_tt = (isset($sourceSettingData['kursiv_begin_with_asterisk_end_with_tt']) and $sourceSettingData['kursiv_begin_with_asterisk_end_with_tt'] !="" ) ? $sourceSettingData['kursiv_begin_with_asterisk_end_with_tt'] : "";
		    $kursiv_begin_with_asterisk_end_with_degree = (isset($sourceSettingData['kursiv_begin_with_asterisk_end_with_degree']) and $sourceSettingData['kursiv_begin_with_asterisk_end_with_degree'] !="" ) ? "'".$sourceSettingData['kursiv_begin_with_asterisk_end_with_degree']."'" : "";
		    if($kursiv_begin_with_asterisk_end_with_degree != ""){
				// $key = array_search($kursiv_begin_with_asterisk_end_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv_begin_with_asterisk_end_with_degree]) AND $globalGradingArr[$kursiv_begin_with_asterisk_end_with_degree] != "") ? $globalGradingArr[$kursiv_begin_with_asterisk_end_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-degree-em'] = $key;
					$conversionSignArr['asterisk-degree-em'] = (isset($globalGradingSignArr[$kursiv_begin_with_asterisk_end_with_degree]) AND $globalGradingSignArr[$kursiv_begin_with_asterisk_end_with_degree] != "") ? $globalGradingSignArr[$kursiv_begin_with_asterisk_end_with_degree] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-degree-em'] = array('grade' => $kursiv_begin_with_asterisk_end_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv_bold = (isset($sourceSettingData['kursiv_bold']) and $sourceSettingData['kursiv_bold'] !="" ) ? "'".$sourceSettingData['kursiv_bold']."'" : "";
		    if($kursiv_bold != ""){
				// $key = array_search($kursiv_bold, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv_bold]) AND $globalGradingArr[$kursiv_bold] != "") ? $globalGradingArr[$kursiv_bold] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['non-asterisk-degree-embold'] = $key;
					$conversionSignArr['non-asterisk-degree-embold'] = (isset($globalGradingSignArr[$kursiv_bold]) AND $globalGradingSignArr[$kursiv_bold] != "") ? $globalGradingSignArr[$kursiv_bold] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['non-asterisk-degree-embold'] = array('grade' => $kursiv_bold, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv_bold_begin_with_asterisk_end_with_t = (isset($sourceSettingData['kursiv_bold_begin_with_asterisk_end_with_t']) and $sourceSettingData['kursiv_bold_begin_with_asterisk_end_with_t'] !="" ) ? $sourceSettingData['kursiv_bold_begin_with_asterisk_end_with_t'] : "";
		    $kursiv_bold_begin_with_asterisk_end_with_tt = (isset($sourceSettingData['kursiv_bold_begin_with_asterisk_end_with_tt']) and $sourceSettingData['kursiv_bold_begin_with_asterisk_end_with_tt'] !="" ) ? $sourceSettingData['kursiv_bold_begin_with_asterisk_end_with_tt'] : "";
		    $kursiv_bold_begin_with_degree = (isset($sourceSettingData['kursiv_bold_begin_with_degree']) and $sourceSettingData['kursiv_bold_begin_with_degree'] !="" ) ? "'".$sourceSettingData['kursiv_bold_begin_with_degree']."'" : "";
		    if($kursiv_bold_begin_with_degree != ""){
				// $key = array_search($kursiv_bold_begin_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv_bold_begin_with_degree]) AND $globalGradingArr[$kursiv_bold_begin_with_degree] != "") ? $globalGradingArr[$kursiv_bold_begin_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['degree-embold'] = $key;
					$conversionSignArr['degree-embold'] = (isset($globalGradingSignArr[$kursiv_bold_begin_with_degree]) AND $globalGradingSignArr[$kursiv_bold_begin_with_degree] != "") ? $globalGradingSignArr[$kursiv_bold_begin_with_degree] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['degree-embold'] = array('grade' => $kursiv_bold_begin_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv_bold_begin_with_asterisk = (isset($sourceSettingData['kursiv_bold_begin_with_asterisk']) and $sourceSettingData['kursiv_bold_begin_with_asterisk'] !="" ) ? $sourceSettingData['kursiv_bold_begin_with_asterisk'] : "";
		    if($kursiv_bold_begin_with_asterisk != ""){
				// $key = array_search($kursiv_bold_begin_with_asterisk, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv_bold_begin_with_asterisk]) AND $globalGradingArr[$kursiv_bold_begin_with_asterisk] != "") ? $globalGradingArr[$kursiv_bold_begin_with_asterisk] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-embold'] = $key;
					$conversionSignArr['asterisk-embold'] = (isset($globalGradingSignArr[$kursiv_bold_begin_with_asterisk]) AND $globalGradingSignArr[$kursiv_bold_begin_with_asterisk] != "") ? $globalGradingSignArr[$kursiv_bold_begin_with_asterisk] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-embold'] = array('grade' => $kursiv_bold_begin_with_asterisk, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv_bold_begin_with_asterisk_end_with_degree = (isset($sourceSettingData['kursiv_bold_begin_with_asterisk_end_with_degree']) and $sourceSettingData['kursiv_bold_begin_with_asterisk_end_with_degree'] !="" ) ? "'".$sourceSettingData['kursiv_bold_begin_with_asterisk_end_with_degree']."'" : "";
		    if($kursiv_bold_begin_with_asterisk_end_with_degree != ""){
				// $key = array_search($kursiv_bold_begin_with_asterisk_end_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv_bold_begin_with_asterisk_end_with_degree]) AND $globalGradingArr[$kursiv_bold_begin_with_asterisk_end_with_degree] != "") ? $globalGradingArr[$kursiv_bold_begin_with_asterisk_end_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-degree-embold'] = $key;
					$conversionSignArr['asterisk-degree-embold'] = (isset($globalGradingSignArr[$kursiv_bold_begin_with_asterisk_end_with_degree]) AND $globalGradingSignArr[$kursiv_bold_begin_with_asterisk_end_with_degree] != "") ? $globalGradingSignArr[$kursiv_bold_begin_with_asterisk_end_with_degree] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-degree-embold'] = array('grade' => $kursiv_bold_begin_with_asterisk_end_with_degree, 'is_it_gross' => $is_it_gross);
			}
			$fett = (isset($sourceSettingData['fett']) and $sourceSettingData['fett'] !=""  and $importedRule == "setting_3") ? "'".$sourceSettingData['fett']."'" : "";
			if($fett != ""){
				// $key = array_search($fett, $globalGradingArr);
				$key = (isset($globalGradingArr[$fett]) AND $globalGradingArr[$fett] != "") ? $globalGradingArr[$fett] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['non-asterisk-degree-bold'] = $key;
					$conversionSignArr['non-asterisk-degree-bold'] = (isset($globalGradingSignArr[$fett]) AND $globalGradingSignArr[$fett] != "") ? $globalGradingSignArr[$fett] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['non-asterisk-degree-bold'] = array('grade' => $fett, 'is_it_gross' => $is_it_gross);
			}
			//fett_converted_spaced starts
			$fett_converted_spaced = (isset($sourceSettingData['fett_converted_spaced']) and $sourceSettingData['fett_converted_spaced'] !="" and $importedRule == "default_setting") ? "'".$sourceSettingData['fett_converted_spaced']."'" : "";
			if($fett_converted_spaced != ""){
				$key = (isset($globalGradingArr[$fett_converted_spaced]) AND $globalGradingArr[$fett_converted_spaced] != "") ? $globalGradingArr[$fett_converted_spaced] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['non-asterisk-degree-bold'] = $key;
					$conversionSignArr['non-asterisk-degree-bold'] = (isset($globalGradingSignArr[$fett_converted_spaced]) AND $globalGradingSignArr[$fett_converted_spaced] != "") ? $globalGradingSignArr[$fett_converted_spaced] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['non-asterisk-degree-bold'] = array('grade' => $fett_converted_spaced, 'is_it_gross' => $is_it_gross);
			}
			//fett_converted_spaced ends
			$fett_end_with_t = (isset($sourceSettingData['fett']) and $sourceSettingData['fett'] !=""  and $importedRule == "setting_3") ? "'".$sourceSettingData['fett']."'" : "";
			if($fett_end_with_t != ""){
				// $key = array_search($fett_begin_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$fett_end_with_t]) AND $globalGradingArr[$fett_end_with_t] != "") ? $globalGradingArr[$fett_end_with_t] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['endwithsinglet-bold'] = $key;
					$conversionSignArr['endwithsinglet-bold'] = (isset($globalGradingSignArr[$fett_end_with_t]) AND $globalGradingSignArr[$fett_end_with_t] != "") ? $globalGradingSignArr[$fett_end_with_t] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['endwithsinglet-bold'] = array('grade' => $fett_end_with_t, 'is_it_gross' => $is_it_gross);
			}
			$fett_end_with_tt = (isset($sourceSettingData['fett']) and $sourceSettingData['fett'] !=""  and $importedRule == "setting_3") ? "'".$sourceSettingData['fett']."'" : "";

			if($fett_end_with_tt != ""){
				// $key = array_search($fett_begin_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$fett_end_with_tt]) AND $globalGradingArr[$fett_end_with_tt] != "") ? $globalGradingArr[$fett_end_with_tt] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['endwithdoublet-bold'] = $key;
					$conversionSignArr['endwithdoublet-bold'] = (isset($globalGradingSignArr[$fett_end_with_tt]) AND $globalGradingSignArr[$fett_end_with_tt] != "") ? $globalGradingSignArr[$fett_end_with_tt] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['endwithdoublet-bold'] = array('grade' => $fett_end_with_tt, 'is_it_gross' => $is_it_gross);
			}
		    $fett_begin_with_degree = (isset($sourceSettingData['fett_begin_with_degree']) and $sourceSettingData['fett_begin_with_degree'] !="" and $importedRule == "setting_3") ? "'".$sourceSettingData['fett_begin_with_degree']."'" : "";
		    if($fett_begin_with_degree != ""){
				// $key = array_search($fett_begin_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$fett_begin_with_degree]) AND $globalGradingArr[$fett_begin_with_degree] != "") ? $globalGradingArr[$fett_begin_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['degree-bold'] = $key;
					$conversionSignArr['degree-bold'] = (isset($globalGradingSignArr[$fett_begin_with_degree]) AND $globalGradingSignArr[$fett_begin_with_degree] != "") ? $globalGradingSignArr[$fett_begin_with_degree] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['degree-bold'] = array('grade' => $fett_begin_with_degree, 'is_it_gross' => $is_it_gross);
			}
			//fett_converted_spaced_degree_at_beginning starts
			$fett_converted_spaced_degree_at_beginning = (isset($sourceSettingData['fett_converted_spaced_degree_at_beginning']) and $sourceSettingData['fett_converted_spaced_degree_at_beginning'] !="" and $importedRule == "default_setting") ? "'".$sourceSettingData['fett_converted_spaced_degree_at_beginning']."'" : "";
		    if($fett_converted_spaced_degree_at_beginning != ""){
				$key = (isset($globalGradingArr[$fett_converted_spaced_degree_at_beginning]) AND $globalGradingArr[$fett_converted_spaced_degree_at_beginning] != "") ? $globalGradingArr[$fett_converted_spaced_degree_at_beginning] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['degree-bold'] = $key;
					$conversionSignArr['degree-bold'] = (isset($globalGradingSignArr[$fett_converted_spaced_degree_at_beginning]) AND $globalGradingSignArr[$fett_converted_spaced_degree_at_beginning] != "") ? $globalGradingSignArr[$fett_converted_spaced_degree_at_beginning] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['degree-bold'] = array('grade' => $fett_converted_spaced_degree_at_beginning, 'is_it_gross' => $is_it_gross);
			}
			//fett_converted_spaced_degree_at_beginning ends
		    $fett_end_with_degree = (isset($sourceSettingData['fett_end_with_degree']) and $sourceSettingData['fett_end_with_degree'] !="" ) ? "'".$sourceSettingData['fett_end_with_degree']."'" : "";
		    if($fett_end_with_degree != ""){
				// $key = array_search($fett_end_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$fett_end_with_degree]) AND $globalGradingArr[$fett_end_with_degree] != "") ? $globalGradingArr[$fett_end_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['endwithdegree-bold'] = $key;
					$conversionSignArr['endwithdegree-bold'] = (isset($globalGradingSignArr[$fett_end_with_degree]) AND $globalGradingSignArr[$fett_end_with_degree] != "") ? $globalGradingSignArr[$fett_end_with_degree] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['endwithdegree-bold'] = array('grade' => $fett_end_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $fett_begin_with_asterisk = (isset($sourceSettingData['fett_begin_with_asterisk']) and $sourceSettingData['fett_begin_with_asterisk'] !="" and $importedRule == "setting_3") ? "'".$sourceSettingData['fett_begin_with_asterisk']."'" : "";
		    if($fett_begin_with_asterisk != ""){
				// $key = array_search($fett_begin_with_asterisk, $globalGradingArr);
				$key = (isset($globalGradingArr[$fett_begin_with_asterisk]) AND $globalGradingArr[$fett_begin_with_asterisk] != "") ? $globalGradingArr[$fett_begin_with_asterisk] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-bold'] = $key;
					$conversionSignArr['asterisk-bold'] = (isset($globalGradingSignArr[$fett_begin_with_asterisk]) AND $globalGradingSignArr[$fett_begin_with_asterisk] != "") ? $globalGradingSignArr[$fett_begin_with_asterisk] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-bold'] = array('grade' => $fett_begin_with_asterisk, 'is_it_gross' => $is_it_gross);
			}
			//fett_converted_spaced_asterisk_at_beginning starts
			$fett_converted_spaced_asterisk_at_beginning = (isset($sourceSettingData['fett_converted_spaced_asterisk_at_beginning']) and $sourceSettingData['fett_converted_spaced_asterisk_at_beginning'] !="" and $importedRule == "default_setting") ? "'".$sourceSettingData['fett_converted_spaced_asterisk_at_beginning']."'" : "";
		    if($fett_converted_spaced_asterisk_at_beginning != ""){
				$key = (isset($globalGradingArr[$fett_converted_spaced_asterisk_at_beginning]) AND $globalGradingArr[$fett_converted_spaced_asterisk_at_beginning] != "") ? $globalGradingArr[$fett_converted_spaced_asterisk_at_beginning] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-bold'] = $key;
					$conversionSignArr['asterisk-bold'] = (isset($globalGradingSignArr[$fett_converted_spaced_asterisk_at_beginning]) AND $globalGradingSignArr[$fett_converted_spaced_asterisk_at_beginning] != "") ? $globalGradingSignArr[$fett_converted_spaced_asterisk_at_beginning] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-bold'] = array('grade' => $fett_converted_spaced_asterisk_at_beginning, 'is_it_gross' => $is_it_gross);
			}
			//fett_converted_spaced_asterisk_at_beginning ends
		    $fett_begin_with_asterisk_end_with_t = (isset($sourceSettingData['fett_begin_with_asterisk_end_with_t']) and $sourceSettingData['fett_begin_with_asterisk_end_with_t'] !="" ) ? $sourceSettingData['fett_begin_with_asterisk_end_with_t'] : "";
		    $fett_begin_with_asterisk_end_with_tt = (isset($sourceSettingData['fett_begin_with_asterisk_end_with_tt']) and $sourceSettingData['fett_begin_with_asterisk_end_with_tt'] !="" ) ? $sourceSettingData['fett_begin_with_asterisk_end_with_tt'] : "";
		    $fett_begin_with_asterisk_end_with_degree = (isset($sourceSettingData['fett_begin_with_asterisk_end_with_degree']) and $sourceSettingData['fett_begin_with_asterisk_end_with_degree'] !="" ) ? "'".$sourceSettingData['fett_begin_with_asterisk_end_with_degree']."'" : "";
		    if($fett_begin_with_asterisk_end_with_degree != ""){
				// $key = array_search($fett_begin_with_asterisk_end_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$fett_begin_with_asterisk_end_with_degree]) AND $globalGradingArr[$fett_begin_with_asterisk_end_with_degree] != "") ? $globalGradingArr[$fett_begin_with_asterisk_end_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-degree-bold'] = $key;
					$conversionSignArr['asterisk-degree-bold'] = (isset($globalGradingSignArr[$fett_begin_with_asterisk_end_with_degree]) AND $globalGradingSignArr[$fett_begin_with_asterisk_end_with_degree] != "") ? $globalGradingSignArr[$fett_begin_with_asterisk_end_with_degree] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-degree-bold'] = array('grade' => $fett_begin_with_asterisk_end_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $gross = (isset($sourceSettingData['gross']) and $sourceSettingData['gross'] !="" ) ? "'".$sourceSettingData['gross']."'" : "";
		    if($gross != ""){
				// $key = array_search($gross, $globalGradingArr);
				$key = (isset($globalGradingArr[$gross]) AND $globalGradingArr[$gross] != "") ? $globalGradingArr[$gross] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['non-asterisk-degree-normalgross'] = $key;
					$conversionSignArr['non-asterisk-degree-normalgross'] = (isset($globalGradingSignArr[$gross]) AND $globalGradingSignArr[$gross] != "") ? $globalGradingSignArr[$gross] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['non-asterisk-degree-normalgross'] = array('grade' => $gross, 'is_it_gross' => $is_it_gross);
			}
		    $gross_begin_with_degree = (isset($sourceSettingData['gross_begin_with_degree']) and $sourceSettingData['gross_begin_with_degree'] !="" ) ? "'".$sourceSettingData['gross_begin_with_degree']."'" : "";
		    if($gross_begin_with_degree != ""){
				// $key = array_search($gross_begin_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$gross_begin_with_degree]) AND $globalGradingArr[$gross_begin_with_degree] != "") ? $globalGradingArr[$gross_begin_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['degree-normalgross'] = $key;
					$conversionSignArr['degree-normalgross'] = (isset($globalGradingSignArr[$gross_begin_with_degree]) AND $globalGradingSignArr[$gross_begin_with_degree] != "") ? $globalGradingSignArr[$gross_begin_with_degree] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['degree-normalgross'] = array('grade' => $gross_begin_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $gross_begin_with_asterisk = (isset($sourceSettingData['gross_begin_with_asterisk']) and $sourceSettingData['gross_begin_with_asterisk'] !="" ) ? "'".$sourceSettingData['gross_begin_with_asterisk']."'" : "";
		    if($gross_begin_with_asterisk != ""){
				// $key = array_search($gross_begin_with_asterisk, $globalGradingArr);
				$key = (isset($globalGradingArr[$gross_begin_with_asterisk]) AND $globalGradingArr[$gross_begin_with_asterisk] != "") ? $globalGradingArr[$gross_begin_with_asterisk] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['asterisk-normalgross'] = $key;
					$conversionSignArr['asterisk-normalgross'] = (isset($globalGradingSignArr[$gross_begin_with_asterisk]) AND $globalGradingSignArr[$gross_begin_with_asterisk] != "") ? $globalGradingSignArr[$gross_begin_with_asterisk] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-normalgross'] = array('grade' => $gross_begin_with_asterisk, 'is_it_gross' => $is_it_gross);
			}
		    $gross_bold = (isset($sourceSettingData['gross_bold']) and $sourceSettingData['gross_bold'] !="" ) ? "'".$sourceSettingData['gross_bold']."'" : "";
		    if($gross_bold != ""){
				// $key = array_search($gross_bold, $globalGradingArr);
				$key = (isset($globalGradingArr[$gross_bold]) AND $globalGradingArr[$gross_bold] != "") ? $globalGradingArr[$gross_bold] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['non-asterisk-degree-grossbold'] = $key;
					$conversionSignArr['non-asterisk-degree-grossbold'] = (isset($globalGradingSignArr[$gross_bold]) AND $globalGradingSignArr[$gross_bold] != "") ? $globalGradingSignArr[$gross_bold] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['non-asterisk-degree-grossbold'] = array('grade' => $gross_bold, 'is_it_gross' => $is_it_gross);
			}
		    $gross_bold_begin_with_degree = (isset($sourceSettingData['gross_bold_begin_with_degree']) and $sourceSettingData['gross_bold_begin_with_degree'] !="" ) ? "'".$sourceSettingData['gross_bold_begin_with_degree']."'" : "";
		    if($gross_bold_begin_with_degree != ""){
				// $key = array_search($gross_bold_begin_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$gross_bold_begin_with_degree]) AND $globalGradingArr[$gross_bold_begin_with_degree] != "") ? $globalGradingArr[$gross_bold_begin_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['degree-grossbold'] = $key;
					$conversionSignArr['degree-grossbold'] = (isset($globalGradingSignArr[$gross_bold_begin_with_degree]) AND $globalGradingSignArr[$gross_bold_begin_with_degree] != "") ? $globalGradingSignArr[$gross_bold_begin_with_degree] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['degree-grossbold'] = array('grade' => $gross_bold_begin_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $gross_bold_begin_with_asterisk = (isset($sourceSettingData['gross_bold_begin_with_asterisk']) and $sourceSettingData['gross_bold_begin_with_asterisk'] !="" ) ? "'".$sourceSettingData['gross_bold_begin_with_asterisk']."'" : "";
		    if($gross_bold_begin_with_asterisk != ""){
				// $key = array_search($gross_bold_begin_with_asterisk, $globalGradingArr);
				$key = (isset($globalGradingArr[$gross_bold_begin_with_asterisk]) AND $globalGradingArr[$gross_bold_begin_with_asterisk] != "") ? $globalGradingArr[$gross_bold_begin_with_asterisk] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				// if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-grossbold'] = $key;
					$conversionSignArr['asterisk-grossbold'] = (isset($globalGradingSignArr[$gross_bold_begin_with_asterisk]) AND $globalGradingSignArr[$gross_bold_begin_with_asterisk] != "") ? $globalGradingSignArr[$gross_bold_begin_with_asterisk] : "";
				// }

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-grossbold'] = array('grade' => $gross_bold_begin_with_asterisk, 'is_it_gross' => $is_it_gross);
			}

			// This below format is only applicable for Final version, it is not applicable for the normaly imported symptom
			// 'endwithdegree-ssembold' => 'ss,em,strong',
			// 'asterisk-ssembold' => 'ss,em,strong',
			// 'degree-ssembold' => 'ss,em,strong',
			// 'non-asterisk-degree-ssembold' => 'ss,em,strong',
			// 'asterisk-degree-ssembold' => 'ss,em,strong',
			$ss_em_strong_grade_value = (isset($globalGradingArr['ss_em_strong']) AND $globalGradingArr['ss_em_strong'] != "") ? $globalGradingArr['ss_em_strong'] : "";
			if($ss_em_strong_grade_value != "")
				$preConversionChanges['non-asterisk-degree-ssembold'] = array('grade' => $ss_em_strong_grade_value, 'is_it_gross' => 0);   
			// echo htmlentities($symptom)."<br>";
			// Implementing the pre conversion changes
			foreach ($preConversionChanges as $preSetKey => $preSetVal) {
				if(isset($preConversionChanges[$preSetKey]['is_it_gross']) AND $preConversionChanges[$preSetKey]['is_it_gross'] == 0)
					$symptom = makeSymptomPortionsLowercaseUcfirst($symptom, $preSetKey);
			}

			/* $dynamicSymptomId = (isset($originalSymptomId) AND $originalSymptomId != "") ? $originalSymptomId : $symptomId;
			$symptomGradingTypeResult = mysqli_query($db, "SELECT symptom_grading_setting_type_for_de, symptom_grading_setting_type_for_en FROM symptom_grading_setting_type WHERE symptom_id = '".$dynamicSymptomId."'");
			if(mysqli_num_rows($symptomGradingTypeResult) > 0){
				$symGradingRow = mysqli_fetch_assoc($symptomGradingTypeResult);
				if($symGradingRow['symptom_grading_setting_type_for_de'] == 2 OR $symGradingRow['symptom_grading_setting_type_for_en'] == 2){
					$conversionArr = array(
						'parentheses-normal' => '',
						'pi-normal' => '',
						'bar-one-normal' => '',
						'bar-two-normal' => '',
						'bar-three-normal' => '',
						'bar-three-and-half-normal' => '',
						'bar-four-normal' => '',
						'bar-four-and-half-normal' => '',
						'bar-five-normal' => '',
						'endwithdegree-ssbold' => 'ss,strong',
						'endwithdegree-embold' => 'em,strong',
						'endwithdegree-ssem' => 'ss,em',
						'endwithdegree-ss' => 'ss',
						'endwithdegree-em' => 'em',
						'endwithdegree-normalgross' => '',
						'endwithdegree-normal' => '',
						'endwithdegree-bold' => 'strong',
						'endwithdegree-grossbold' => 'strong',
						'endwithdegree-ssembold' => 'ss,em,strong',
						'endwithsinglet-ssbold' => 'ss,strong',
						'endwithsinglet-embold' => 'em,strong',
						'endwithsinglet-ssem' => 'ss,em',
						'endwithsinglet-ss' => 'ss',
						'endwithsinglet-em' => 'em',
						'endwithsinglet-normalgross' => '',
						'endwithsinglet-normal' => '',
						'endwithsinglet-bold' => 'strong',
						'endwithsinglet-grossbold' => 'strong',
						'endwithsinglet-ssembold' => 'ss,em,strong',
						'endwithdoublet-ssbold' => 'ss,strong',
						'endwithdoublet-embold' => 'em,strong',
						'endwithdoublet-ssem' => 'ss,em',
						'endwithdoublet-ss' => 'ss',
						'endwithdoublet-em' => 'em',
						'endwithdoublet-normalgross' => '',
						'endwithdoublet-normal' => '',
						'endwithdoublet-bold' => 'strong',
						'endwithdoublet-grossbold' => 'strong',
						'endwithdoublet-ssembold' => 'ss,em,strong',
						'asterisk-ssbold' => 'ss,strong',
						'asterisk-embold' => 'em,strong',
						'asterisk-ssem' => 'ss,em',
						'asterisk-ss' => 'ss',
						'asterisk-em' => 'em',
						'asterisk-normalgross' => '',
						'asterisk-normal' => '',
						'asterisk-bold' => 'strong',
						'asterisk-grossbold' => 'strong',
						'asterisk-ssembold' => 'ss,em,strong',
						'degree-ssbold' => 'ss,strong',
						'degree-embold' => 'em,strong',
						'degree-ssem' => 'ss,em',
						'degree-ss' => 'ss',
						'degree-em' => 'em',
						'degree-normalgross' => '',
						'degree-normal' => '',
						'degree-bold' => 'strong',
						'degree-grossbold' => 'strong',
						'degree-ssembold' => 'ss,em,strong',
						'non-asterisk-degree-ssbold' => 'ss,strong',
						'non-asterisk-degree-embold' => 'em,strong',
						'non-asterisk-degree-ssem' => 'ss,em',
						'non-asterisk-degree-ss' => 'ss',
						'non-asterisk-degree-em' => 'em',
						'non-asterisk-degree-normalgross' => '',
						'non-asterisk-degree-normal' => '',
						'non-asterisk-degree-bold' => 'strong',
						'non-asterisk-degree-grossbold' => 'strong',
						'non-asterisk-degree-ssembold' => 'ss,em,strong',
						'asterisk-degree-ssbold' => 'ss,strong',
						'asterisk-degree-embold' => 'em,strong',
						'asterisk-degree-ssem' => 'ss,em',
						'asterisk-degree-ss' => 'ss',
						'asterisk-degree-em' => 'em',
						'asterisk-degree-normalgross' => '',
						'asterisk-degree-normal' => '',
						'asterisk-degree-bold' => 'strong',
						'asterisk-degree-grossbold' => 'strong',
						'asterisk-degree-ssembold' => 'ss,em,strong',
					);
					$includeGrade = 0;
				}
			} */
			// Including Grading number in the symptom string
			if(isset($includeGrade) AND $includeGrade == 1){ 
				foreach ($preConversionChanges as $gradeKey => $gradeVal) {
					$grd = $preConversionChanges[$gradeKey]['grade'];
					if($preConversionChanges[$gradeKey]['grade'] == "'3.2'")
						$grd = "'3'";
					if($preConversionChanges[$gradeKey]['grade'] == "'4.2'")
						$grd = "'4'";
					if($preConversionChanges[$gradeKey]['grade'] == "'5.2'")
						$grd = "'5'";

					$symptom = str_replace('<'.$gradeKey.'>', '<br><strong> '.$grd.' </strong><'.$gradeKey.'>', $symptom);
				}
				$firstBrPosition = mb_strpos ( $symptom, '<br>' );
				if($firstBrPosition === 0)
					$symptom = mb_substr ( $symptom, mb_strlen('<br>') );

				$newString = "";
				$brakedParts = explode('<br>', $symptom);
				foreach ($brakedParts as $brakedKey => $brakedVal) {
					$firstStrongTagPosition = mb_strpos ( $brakedVal, "</strong>" );
					$remainingString = trim(strip_tags(mb_substr ( $brakedVal, $firstStrongTagPosition+mb_strlen("</strong>") )));
					if($remainingString != "." AND $remainingString != "," AND $remainingString != ";" AND $remainingString != "!")
						$newString .= "<br>".$brakedVal;
				}

				if($newString != ""){
					$symptom = $newString;

					$firstBrPosition = mb_strpos ( $symptom, '<br>' );
					if($firstBrPosition === 0)
						$symptom = mb_substr ( $symptom, mb_strlen('<br>') );
				}
			}
			foreach ($conversionArr as $conKey => $conVal) {
				$convertableTagsArray = explode(',', $conVal);
				$convertableOpenTag = "";
				$convertableOpenTagTemp = "";
				foreach ($convertableTagsArray as $openKey => $openVal) {
					if($openVal != ""){
						$convertableOpenTag .= '<'.$openVal.'>';
						$convertableOpenTagTemp .= '<'.$openVal.'-temp>';
					}
				}
				$convertableTagsArrayReverse = array_reverse($convertableTagsArray);
				$convertableEndTag = "";
				$convertableEndTagTemp = "";
				foreach ($convertableTagsArrayReverse as $endKey => $endVal) {
					if($endVal != ""){
						$convertableEndTag .= '</'.$endVal.'>';
						$convertableEndTagTemp .= '</'.$endVal.'-temp>';
					}
				}

				$symptom = str_replace ( array (
					'<'.$conKey.'>',
					'</'.$conKey.'>'
				), array (
					$convertableOpenTagTemp,
					$convertableEndTagTemp
				), $symptom );

				// Fetch signs if any
				$sign = (isset($conversionSignArr[$conKey]) AND $conversionSignArr[$conKey] != "") ? $conversionSignArr[$conKey] : "";
				if($sign != ""){
					$convertableOpenTagWithSign = $convertableOpenTag." ".$sign;
					$symptom = str_replace ( array (
						$convertableOpenTagTemp,
						$convertableEndTagTemp
					), array (
						$convertableOpenTagWithSign,
						$convertableEndTag
					), $symptom );
				}
				else
				{
					$symptom = str_replace ( array (
						$convertableOpenTagTemp,
						$convertableEndTagTemp
					), array (
						$convertableOpenTag,
						$convertableEndTag
					), $symptom );
				}

				$symptom = str_replace ( array (
					'<normal>',
					'</normal>'
				), array (
					'',
					''
				), $symptom );
			}
			$symptom = convertStrongGross($symptom);
			$symptom = str_replace ( array (
				'<ss>',
				'</ss>' 
			), array (
				'<span class="text-sperrschrift">',
				"</span>" 
			), $symptom );
			$symptom = str_replace ( array (
				'<clr',
				'</clr>' 
			), array (
				"<span",
				"</span>" 
			), $symptom );
			$symptom = removeBlankTags($symptom);
		}
		// Removing *,Â°,Â¯
		$symptom = str_replace ( array (
					'*',
					'Â°',
					'Î±',
					'Î²',
					'Â¯'
				), array (
					"",
					"",
					"",
					""
				), $symptom );
		$symptom = trim($symptom);
		//removing sup tags from the string
		$symptom = preg_replace("/<sup>(.*?)<\/sup>/i", "", $symptom);
		return $symptom;
	}

	// Converting the symptoms to it's applicable format according to the settings to present it in front of the user
	// [1st parameter] $symptom symptom string
	// [2nd parameter] $originalQuelleId the quelle_id of the symptom, that the particular symptom originaly belongs. 
	// [3rd parameter] $arzneiId arzneiId 
	// [4th parameter] $isFinalVersionAvailable values (0 = No, 1 = Connect edit, 2 = Paste edit)
	// [5th parameter] $includeGrade values (0 = Gragde number will not include, 1 = Will include Grade number)
	// [6th parameter] $symptomId the symptom_id of the symptombelong
	// [7th parameter] $originalSymptomId the symptom_id of the symptom where he originally belongs.(where he fist created)
	function convertTheSymptomForBonninghausen($symptom, $originalQuelleId, $arzneiId, $isFinalVersionAvailable, $includeGrade, $symptomId, $originalSymptomId = null){
		global $db;
		if($symptom != "" AND $originalQuelleId != "" AND $symptomId != ""){
			$conversionArr = array(
				'parentheses-normal' => '',
				'pi-normal' => '',
				'bar-one-normal' => '',
				'bar-two-normal' => '',
				'bar-three-normal' => '',
				'bar-three-and-half-normal' => '',
				'bar-four-normal' => '',
				'bar-four-and-half-normal' => '',
				'bar-five-normal' => '',
				'endwithdegree-ssbold' => 'ss,strong',
				'endwithdegree-embold' => 'em,strong',
				'endwithdegree-ssem' => 'ss,em',
				'endwithdegree-ss' => 'ss',
				'endwithdegree-em' => 'em',
				'endwithdegree-normalgross' => '',
				'endwithdegree-normal' => '',
				'endwithdegree-bold' => 'strong',
				'endwithdegree-grossbold' => 'strong',
				'endwithdegree-ssembold' => 'ss,em,strong',
				'asterisk-ssbold' => 'ss,strong',
				'asterisk-embold' => 'em,strong',
				'asterisk-ssem' => 'ss,em',
				'asterisk-ss' => 'ss',
				'asterisk-em' => 'em',
				'asterisk-normalgross' => '',
				'asterisk-normal' => '',
				'asterisk-bold' => 'strong',
				'asterisk-grossbold' => 'strong',
				'asterisk-ssembold' => 'ss,em,strong',
				'degree-ssbold' => 'ss,strong',
				'degree-embold' => 'em,strong',
				'degree-ssem' => 'ss,em',
				'degree-ss' => 'ss',
				'degree-em' => 'em',
				'degree-normalgross' => '',
				'degree-normal' => '',
				'degree-bold' => 'strong',
				'degree-grossbold' => 'strong',
				'degree-ssembold' => 'ss,em,strong',
				'non-asterisk-degree-ssbold' => 'ss,strong',
				'non-asterisk-degree-embold' => 'em,strong',
				'non-asterisk-degree-ssem' => 'ss,em',
				'non-asterisk-degree-ss' => 'ss',
				'non-asterisk-degree-em' => 'em',
				'non-asterisk-degree-normalgross' => '',
				'non-asterisk-degree-normal' => '',
				'non-asterisk-degree-bold' => 'strong',
				'non-asterisk-degree-grossbold' => 'strong',
				'non-asterisk-degree-ssembold' => 'ss,em,strong',
				'asterisk-degree-ssbold' => 'ss,strong',
				'asterisk-degree-embold' => 'em,strong',
				'asterisk-degree-ssem' => 'ss,em',
				'asterisk-degree-ss' => 'ss',
				'asterisk-degree-em' => 'em',
				'asterisk-degree-normalgross' => '',
				'asterisk-degree-normal' => '',
				'asterisk-degree-bold' => 'strong',
				'asterisk-degree-grossbold' => 'strong',
				'asterisk-degree-ssembold' => 'ss,em,strong',
			);

			$conversionSignArr = array(
				'parentheses-normal' => '',
				'pi-normal' => '',
				'bar-one-normal' => '',
				'bar-two-normal' => '',
				'bar-three-normal' => '',
				'bar-three-and-half-normal' => '',
				'bar-four-normal' => '',
				'bar-four-and-half-normal' => '',
				'bar-five-normal' => '',
				'endwithdegree-ssbold' => '',
				'endwithdegree-embold' => '',
				'endwithdegree-ssem' => '',
				'endwithdegree-ss' => '',
				'endwithdegree-em' => '',
				'endwithdegree-normalgross' => '',
				'endwithdegree-normal' => '',
				'endwithdegree-bold' => '',
				'endwithdegree-grossbold' => '',
				'endwithdegree-ssembold' => '',
				'asterisk-ssbold' => '',
				'asterisk-embold' => '',
				'asterisk-ssem' => '',
				'asterisk-ss' => '',
				'asterisk-em' => '',
				'asterisk-normalgross' => '',
				'asterisk-normal' => '',
				'asterisk-bold' => '',
				'asterisk-grossbold' => '',
				'asterisk-ssembold' => '',
				'degree-ssbold' => '',
				'degree-embold' => '',
				'degree-ssem' => '',
				'degree-ss' => '',
				'degree-em' => '',
				'degree-normalgross' => '',
				'degree-normal' => '',
				'degree-bold' => '',
				'degree-grossbold' => '',
				'degree-ssembold' => '',
				'non-asterisk-degree-ssbold' => '',
				'non-asterisk-degree-embold' => '',
				'non-asterisk-degree-ssem' => '',
				'non-asterisk-degree-ss' => '',
				'non-asterisk-degree-em' => '',
				'non-asterisk-degree-normalgross' => '',
				'non-asterisk-degree-normal' => '',
				'non-asterisk-degree-bold' => '',
				'non-asterisk-degree-grossbold' => '',
				'non-asterisk-degree-ssembold' => '',
				'asterisk-degree-ssbold' => '',
				'asterisk-degree-embold' => '',
				'asterisk-degree-ssem' => '',
				'asterisk-degree-ss' => '',
				'asterisk-degree-em' => '',
				'asterisk-degree-normalgross' => '',
				'asterisk-degree-normal' => '',
				'asterisk-degree-bold' => '',
				'asterisk-degree-grossbold' => '',
				'asterisk-degree-ssembold' => '',
			);

			$globalGradingArr = array();
			$globalGradingSignArr = array();
			$globalSettingResult = mysqli_query($db, "SELECT GSV.format_grade, GSV.format_custom_tag, GSV.format_custom_signs FROM global_grading_set_values AS GSV JOIN global_grading_sets AS GS ON GSV.global_grading_sets_id = GS.global_grading_sets_id WHERE GS.active = 1");
			// if (!$dbc || mysqli_num_rows($dbc) == 0)
			if(mysqli_num_rows($globalSettingResult) > 0){
				while($globalGradingSettings = mysqli_fetch_array($globalSettingResult)){
					$formatGrade = (isset($globalGradingSettings['format_grade']) AND $globalGradingSettings['format_grade'] != "") ? "'".$globalGradingSettings['format_grade']."'" : "";
					$formatCustomTag = (isset($globalGradingSettings['format_custom_tag']) AND $globalGradingSettings['format_custom_tag'] != "") ? $globalGradingSettings['format_custom_tag'] : "";
					$formatCustomSign = (isset($globalGradingSettings['format_custom_signs']) AND $globalGradingSettings['format_custom_signs'] != "") ? $globalGradingSettings['format_custom_signs'] : "";
					if($formatGrade != "" AND $formatCustomTag != "" AND !in_array($formatGrade, $globalGradingArr)){
						$globalGradingArr[$formatGrade] = $formatCustomTag;
						// $globalGradingArr[$formatCustomTag] = $formatGrade;
						// $globalGradingSignArr[$formatCustomTag] = $formatCustomSign;
						$globalGradingSignArr[$formatGrade] = $formatCustomSign;
					}
				}
			}

			$sourceSettingResult = mysqli_query($db, "SELECT normal, normal_within_parentheses, normal_end_with_t, normal_end_with_tt, normal_begin_with_degree, normal_end_with_degree, normal_begin_with_asterisk, normal_begin_with_asterisk_end_with_t, normal_begin_with_asterisk_end_with_tt, normal_begin_with_asterisk_end_with_degree, sperrschrift, sperrschrift_begin_with_degree, sperrschrift_begin_with_asterisk, sperrschrift_bold, sperrschrift_bold_begin_with_degree, sperrschrift_bold_begin_with_asterisk, kursiv, kursiv_end_with_t, kursiv_end_with_tt, kursiv_begin_with_degree, kursiv_end_with_degree, kursiv_begin_with_asterisk, kursiv_begin_with_asterisk_end_with_t, kursiv_begin_with_asterisk_end_with_tt, kursiv_begin_with_asterisk_end_with_degree, kursiv_bold, kursiv_bold_begin_with_asterisk_end_with_t, kursiv_bold_begin_with_asterisk_end_with_tt, kursiv_bold_begin_with_degree, kursiv_bold_begin_with_asterisk, kursiv_bold_begin_with_asterisk_end_with_degree, fett, fett_end_with_t, fett_end_with_tt, fett_begin_with_degree, fett_end_with_degree, fett_begin_with_asterisk, fett_begin_with_asterisk_end_with_t, fett_begin_with_asterisk_end_with_tt, fett_begin_with_asterisk_end_with_degree, fett_converted_spaced, fett_converted_spaced_degree_at_beginning, fett_converted_spaced_asterisk_at_beginning, gross, gross_begin_with_degree, gross_begin_with_asterisk, gross_bold, gross_bold_begin_with_degree, gross_bold_begin_with_asterisk, pi_sign, one_bar, two_bar, three_bar, three_and_half_bar, four_bar, four_and_half_bar, five_bar FROM quelle_grading_settings WHERE quelle_id = '".$originalQuelleId."'");
			if(mysqli_num_rows($sourceSettingResult) > 0){
				$sourceSettingData = mysqli_fetch_assoc($sourceSettingResult);
			}

			$symptomSettingBonninghausenResult = mysqli_query($db, "SELECT normal, normal_within_parentheses, normal_end_with_t, normal_end_with_tt, normal_begin_with_degree, normal_end_with_degree, normal_begin_with_asterisk, normal_begin_with_asterisk_end_with_t, normal_begin_with_asterisk_end_with_tt, normal_begin_with_asterisk_end_with_degree, sperrschrift, sperrschrift_begin_with_degree, sperrschrift_begin_with_asterisk, sperrschrift_bold, sperrschrift_bold_begin_with_degree, sperrschrift_bold_begin_with_asterisk, kursiv, kursiv_end_with_t, kursiv_end_with_tt, kursiv_begin_with_degree, kursiv_end_with_degree, kursiv_begin_with_asterisk, kursiv_begin_with_asterisk_end_with_t, kursiv_begin_with_asterisk_end_with_tt, kursiv_begin_with_asterisk_end_with_degree, kursiv_bold, kursiv_bold_begin_with_asterisk_end_with_t, kursiv_bold_begin_with_asterisk_end_with_tt, kursiv_bold_begin_with_degree, kursiv_bold_begin_with_asterisk, kursiv_bold_begin_with_asterisk_end_with_degree, fett, fett_end_with_t, fett_end_with_tt, fett_begin_with_degree, fett_end_with_degree, fett_begin_with_asterisk, fett_begin_with_asterisk_end_with_t, fett_begin_with_asterisk_end_with_tt, fett_begin_with_asterisk_end_with_degree, gross, gross_begin_with_degree, gross_begin_with_asterisk, gross_bold, gross_bold_begin_with_degree, gross_bold_begin_with_asterisk, pi_sign, one_bar, two_bar, three_bar, three_and_half_bar, four_bar, four_and_half_bar, five_bar FROM bonninghausen_approved_symptom_grading_settings WHERE symptom_id = '".$symptomId."'");
			if(mysqli_num_rows($symptomSettingBonninghausenResult) > 0){
				$sourceSettingData = mysqli_fetch_assoc($symptomSettingBonninghausenResult);
			}

			$preConversionChanges = array();
			$piSign = (isset($sourceSettingData['pi_sign']) and $sourceSettingData['pi_sign'] != "") ? "'".$sourceSettingData['pi_sign']."'" : "";
			if($piSign != ""){
				// $key = array_search($piSign, $globalGradingArr);
				$key = (isset($globalGradingArr[$piSign]) AND $globalGradingArr[$piSign] != "") ? $globalGradingArr[$piSign] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['pi-normal'] = $key;
					$conversionSignArr['pi-normal'] = (isset($globalGradingSignArr[$piSign]) AND $globalGradingSignArr[$piSign] != "") ? $globalGradingSignArr[$piSign] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['pi-normal'] = array('grade' => $piSign, 'is_it_gross' => $is_it_gross);
			}
			$oneBar = (isset($sourceSettingData['one_bar']) and $sourceSettingData['one_bar'] != "") ? "'".$sourceSettingData['one_bar']."'" : "";
			if($oneBar != ""){
				// $key = array_search($oneBar, $globalGradingArr);
				$key = (isset($globalGradingArr[$oneBar]) AND $globalGradingArr[$oneBar] != "") ? $globalGradingArr[$oneBar] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['bar-one-normal'] = $key;
					$conversionSignArr['bar-one-normal'] = (isset($globalGradingSignArr[$oneBar]) AND $globalGradingSignArr[$oneBar] != "") ? $globalGradingSignArr[$oneBar] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['bar-one-normal'] = array('grade' => $oneBar, 'is_it_gross' => $is_it_gross);
			}
			$twoBar = (isset($sourceSettingData['two_bar']) and $sourceSettingData['two_bar'] != "")? "'".$sourceSettingData['two_bar']."'" : "";
			if($twoBar != ""){
				// $key = array_search($twoBar, $globalGradingArr);
				$key = (isset($globalGradingArr[$twoBar]) AND $globalGradingArr[$twoBar] != "") ? $globalGradingArr[$twoBar] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['bar-two-normal'] = $key;
					$conversionSignArr['bar-two-normal'] = (isset($globalGradingSignArr[$twoBar]) AND $globalGradingSignArr[$twoBar] != "") ? $globalGradingSignArr[$twoBar] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['bar-two-normal'] = array('grade' => $twoBar, 'is_it_gross' => $is_it_gross);
			}
			$threeBar = (isset($sourceSettingData['three_bar']) and $sourceSettingData['three_bar'] != "")? "'".$sourceSettingData['three_bar']."'" : "";
			if($threeBar != ""){
				// $key = array_search($threeBar, $globalGradingArr);
				$key = (isset($globalGradingArr[$threeBar]) AND $globalGradingArr[$threeBar] != "") ? $globalGradingArr[$threeBar] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['bar-three-normal'] = $key;
					$conversionSignArr['bar-three-normal'] = (isset($globalGradingSignArr[$threeBar]) AND $globalGradingSignArr[$threeBar] != "") ? $globalGradingSignArr[$threeBar] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['bar-three-normal'] = array('grade' => $threeBar, 'is_it_gross' => $is_it_gross);
			}
			$threeAndHalfBar = (isset($sourceSettingData['three_and_half_bar']) and $sourceSettingData['three_and_half_bar'] != "")? "'".$sourceSettingData['three_and_half_bar']."'" : "";
			if($threeAndHalfBar != ""){
				// $key = array_search($threeAndHalfBar, $globalGradingArr);
				$key = (isset($globalGradingArr[$threeAndHalfBar]) AND $globalGradingArr[$threeAndHalfBar] != "") ? $globalGradingArr[$threeAndHalfBar] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['bar-three-and-half-normal'] = $key;
					$conversionSignArr['bar-three-and-half-normal'] = (isset($globalGradingSignArr[$threeAndHalfBar]) AND $globalGradingSignArr[$threeAndHalfBar] != "") ? $globalGradingSignArr[$threeAndHalfBar] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['bar-three-and-half-normal'] = array('grade' => $threeAndHalfBar, 'is_it_gross' => $is_it_gross);
			}
			$fourBar = (isset($sourceSettingData['four_bar']) and $sourceSettingData['four_bar'] != "")? "'".$sourceSettingData['four_bar']."'" : "";
			if($fourBar != ""){
				// $key = array_search($fourBar, $globalGradingArr);
				$key = (isset($globalGradingArr[$fourBar]) AND $globalGradingArr[$fourBar] != "") ? $globalGradingArr[$fourBar] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['bar-four-normal'] = $key;
					$conversionSignArr['bar-four-normal'] = (isset($globalGradingSignArr[$fourBar]) AND $globalGradingSignArr[$fourBar] != "") ? $globalGradingSignArr[$fourBar] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['bar-four-normal'] = array('grade' => $fourBar, 'is_it_gross' => $is_it_gross);
			}
			$fourAndHalfBar = (isset($sourceSettingData['four_and_half_bar']) and $sourceSettingData['four_and_half_bar'] != "")? "'".$sourceSettingData['four_and_half_bar']."'" : "";
			if($fourAndHalfBar != ""){
				// $key = array_search($fourAndHalfBar, $globalGradingArr);
				$key = (isset($globalGradingArr[$fourAndHalfBar]) AND $globalGradingArr[$fourAndHalfBar] != "") ? $globalGradingArr[$fourAndHalfBar] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['bar-four-and-half-normal'] = $key;
					$conversionSignArr['bar-four-and-half-normal'] = (isset($globalGradingSignArr[$fourAndHalfBar]) AND $globalGradingSignArr[$fourAndHalfBar] != "") ? $globalGradingSignArr[$fourAndHalfBar] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['bar-four-and-half-normal'] = array('grade' => $fourAndHalfBar, 'is_it_gross' => $is_it_gross);
			}
			$fiveBar = (isset($sourceSettingData['five_bar']) and $sourceSettingData['five_bar'] != "")? "'".$sourceSettingData['five_bar']."'" : "";
			if($fiveBar != ""){
				// $key = array_search($fiveBar, $globalGradingArr);
				$key = (isset($globalGradingArr[$fiveBar]) AND $globalGradingArr[$fiveBar] != "") ? $globalGradingArr[$fiveBar] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['bar-five-normal'] = $key;
					$conversionSignArr['bar-five-normal'] = (isset($globalGradingSignArr[$fiveBar]) AND $globalGradingSignArr[$fiveBar] != "") ? $globalGradingSignArr[$fiveBar] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['bar-five-normal'] = array('grade' => $fiveBar, 'is_it_gross' => $is_it_gross);
			}
			$normal = (isset($sourceSettingData['normal']) and $sourceSettingData['normal'] != "")? "'".$sourceSettingData['normal']."'" : "";
			if($normal != ""){
				// $key = array_search($normal, $globalGradingArr);
				$key = (isset($globalGradingArr[$normal]) AND $globalGradingArr[$normal] != "") ? $globalGradingArr[$normal] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['non-asterisk-degree-normal'] = $key;
					$conversionSignArr['non-asterisk-degree-normal'] = (isset($globalGradingSignArr[$normal]) AND $globalGradingSignArr[$normal] != "") ? $globalGradingSignArr[$normal] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['non-asterisk-degree-normal'] = array('grade' => $normal, 'is_it_gross' => $is_it_gross);
			}
		    $normal_within_parentheses = (isset($sourceSettingData['normal_within_parentheses']) and $sourceSettingData['normal_within_parentheses'] != "") ? "'".$sourceSettingData['normal_within_parentheses']."'" : "";
		    if($normal_within_parentheses != ""){
				// $key = array_search($normal_within_parentheses, $globalGradingArr);
				$key = (isset($globalGradingArr[$normal_within_parentheses]) AND $globalGradingArr[$normal_within_parentheses] != "") ? $globalGradingArr[$normal_within_parentheses] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['parentheses-normal'] = $key;
					$conversionSignArr['parentheses-normal'] = (isset($globalGradingSignArr[$normal_within_parentheses]) AND $globalGradingSignArr[$normal_within_parentheses] != "") ? $globalGradingSignArr[$normal_within_parentheses] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['parentheses-normal'] = array('grade' => $normal_within_parentheses, 'is_it_gross' => $is_it_gross);
			}
		    $normal_end_with_t = (isset($sourceSettingData['normal_end_with_t']) and $sourceSettingData['normal_end_with_t'] != "") ? $sourceSettingData['normal_end_with_t'] : "";
		    $normal_end_with_tt = (isset($sourceSettingData['normal_end_with_tt']) and $sourceSettingData['normal_end_with_tt'] != "") ? $sourceSettingData['normal_end_with_tt'] : "";
		    $normal_begin_with_degree = (isset($sourceSettingData['normal_begin_with_degree']) and $sourceSettingData['normal_begin_with_degree'] != "") ? "'".$sourceSettingData['normal_begin_with_degree']."'" : "";
		    if($normal_begin_with_degree != ""){
				// $key = array_search($normal_begin_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$normal_begin_with_degree]) AND $globalGradingArr[$normal_begin_with_degree] != "") ? $globalGradingArr[$normal_begin_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['degree-normal'] = $key;
					$conversionSignArr['degree-normal'] = (isset($globalGradingSignArr[$normal_begin_with_degree]) AND $globalGradingSignArr[$normal_begin_with_degree] != "") ? $globalGradingSignArr[$normal_begin_with_degree] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['degree-normal'] = array('grade' => $normal_begin_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $normal_end_with_degree = (isset($sourceSettingData['normal_end_with_degree']) and $sourceSettingData['normal_end_with_degree'] != "") ? "'".$sourceSettingData['normal_end_with_degree']."'" : "";
		    if($normal_end_with_degree != ""){
				// $key = array_search($normal_end_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$normal_end_with_degree]) AND $globalGradingArr[$normal_end_with_degree] != "") ? $globalGradingArr[$normal_end_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['endwithdegree-normal'] = $key;
					$conversionSignArr['endwithdegree-normal'] = (isset($globalGradingSignArr[$normal_end_with_degree]) AND $globalGradingSignArr[$normal_end_with_degree] != "") ? $globalGradingSignArr[$normal_end_with_degree] : "";
				}	

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['endwithdegree-normal'] = array('grade' => $normal_end_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $normal_begin_with_asterisk = (isset($sourceSettingData['normal_begin_with_asterisk']) and $sourceSettingData['normal_begin_with_asterisk'] != "")? "'".$sourceSettingData['normal_begin_with_asterisk']."'" : "";
		    if($normal_begin_with_asterisk != ""){
				// $key = array_search($normal_begin_with_asterisk, $globalGradingArr);
				$key = (isset($globalGradingArr[$normal_begin_with_asterisk]) AND $globalGradingArr[$normal_begin_with_asterisk] != "") ? $globalGradingArr[$normal_begin_with_asterisk] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-normal'] = $key;
					$conversionSignArr['asterisk-normal'] = (isset($globalGradingSignArr[$normal_begin_with_asterisk]) AND $globalGradingSignArr[$normal_begin_with_asterisk] != "") ? $globalGradingSignArr[$normal_begin_with_asterisk] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-normal'] = array('grade' => $normal_begin_with_asterisk, 'is_it_gross' => $is_it_gross);
			}
		    $normal_begin_with_asterisk_end_with_t = (isset($sourceSettingData['normal_begin_with_asterisk_end_with_t']) and $sourceSettingData['normal_begin_with_asterisk_end_with_t'] != "") ? $sourceSettingData['normal_begin_with_asterisk_end_with_t'] : ""; 
		    $normal_begin_with_asterisk_end_with_tt = (isset($sourceSettingData['normal_begin_with_asterisk_end_with_tt']) and $sourceSettingData['normal_begin_with_asterisk_end_with_tt'] !="" ) ? $sourceSettingData['normal_begin_with_asterisk_end_with_tt'] : "";
		    $normal_begin_with_asterisk_end_with_degree = (isset($sourceSettingData['normal_begin_with_asterisk_end_with_degree']) and $sourceSettingData['normal_begin_with_asterisk_end_with_degree'] !="" ) ? "'".$sourceSettingData['normal_begin_with_asterisk_end_with_degree']."'" : "";
		    if($normal_begin_with_asterisk_end_with_degree != ""){
				// $key = array_search($normal_begin_with_asterisk_end_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$normal_begin_with_asterisk_end_with_degree]) AND $globalGradingArr[$normal_begin_with_asterisk_end_with_degree] != "") ? $globalGradingArr[$normal_begin_with_asterisk_end_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['asterisk-degree-normal'] = $key;
					$conversionSignArr['asterisk-degree-normal'] = (isset($globalGradingSignArr[$normal_begin_with_asterisk_end_with_degree]) AND $globalGradingSignArr[$normal_begin_with_asterisk_end_with_degree] != "") ? $globalGradingSignArr[$normal_begin_with_asterisk_end_with_degree] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-degree-normal'] = array('grade' => $normal_begin_with_asterisk_end_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $sperrschrift = (isset($sourceSettingData['sperrschrift']) and $sourceSettingData['sperrschrift'] !="" ) ? "'".$sourceSettingData['sperrschrift']."'" : "";
		    if($sperrschrift != ""){
				// $key = array_search($sperrschrift, $globalGradingArr);
				$key = (isset($globalGradingArr[$sperrschrift]) AND $globalGradingArr[$sperrschrift] != "") ? $globalGradingArr[$sperrschrift] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['non-asterisk-degree-ss'] = $key;
					$conversionSignArr['non-asterisk-degree-ss'] = (isset($globalGradingSignArr[$sperrschrift]) AND $globalGradingSignArr[$sperrschrift] != "") ? $globalGradingSignArr[$sperrschrift] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['non-asterisk-degree-ss'] = array('grade' => $sperrschrift, 'is_it_gross' => $is_it_gross);
			}
		    $sperrschrift_begin_with_degree = (isset($sourceSettingData['sperrschrift_begin_with_degree']) and $sourceSettingData['sperrschrift_begin_with_degree'] !="" ) ? "'".$sourceSettingData['sperrschrift_begin_with_degree']."'" : "";
		    if($sperrschrift_begin_with_degree != ""){
				// $key = array_search($sperrschrift_begin_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$sperrschrift_begin_with_degree]) AND $globalGradingArr[$sperrschrift_begin_with_degree] != "") ? $globalGradingArr[$sperrschrift_begin_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['degree-ss'] = $key;
					$conversionSignArr['degree-ss'] = (isset($globalGradingSignArr[$sperrschrift_begin_with_degree]) AND $globalGradingSignArr[$sperrschrift_begin_with_degree] != "") ? $globalGradingSignArr[$sperrschrift_begin_with_degree] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['degree-ss'] = array('grade' => $sperrschrift_begin_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $sperrschrift_begin_with_asterisk = (isset($sourceSettingData['sperrschrift_begin_with_asterisk']) and $sourceSettingData['sperrschrift_begin_with_asterisk'] !="" ) ? "'".$sourceSettingData['sperrschrift_begin_with_asterisk']."'" : "";
		    if($sperrschrift_begin_with_asterisk != ""){
				// $key = array_search($sperrschrift_begin_with_asterisk, $globalGradingArr);
				$key = (isset($globalGradingArr[$sperrschrift_begin_with_asterisk]) AND $globalGradingArr[$sperrschrift_begin_with_asterisk] != "") ? $globalGradingArr[$sperrschrift_begin_with_asterisk] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['asterisk-ss'] = $key;
					$conversionSignArr['asterisk-ss'] = (isset($globalGradingSignArr[$sperrschrift_begin_with_asterisk]) AND $globalGradingSignArr[$sperrschrift_begin_with_asterisk] != "") ? $globalGradingSignArr[$sperrschrift_begin_with_asterisk] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-ss'] = array('grade' => $sperrschrift_begin_with_asterisk, 'is_it_gross' => $is_it_gross);
			}
		    $sperrschrift_bold = (isset($sourceSettingData['sperrschrift_bold']) and $sourceSettingData['sperrschrift_bold'] !="" ) ? "'".$sourceSettingData['sperrschrift_bold']."'" : "";
		    if($sperrschrift_bold != ""){
				// $key = array_search($sperrschrift_bold, $globalGradingArr);
				$key = (isset($globalGradingArr[$sperrschrift_bold]) AND $globalGradingArr[$sperrschrift_bold] != "") ? $globalGradingArr[$sperrschrift_bold] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['non-asterisk-degree-ssbold'] = $key;
					$conversionSignArr['non-asterisk-degree-ssbold'] = (isset($globalGradingSignArr[$sperrschrift_bold]) AND $globalGradingSignArr[$sperrschrift_bold] != "") ? $globalGradingSignArr[$sperrschrift_bold] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['non-asterisk-degree-ssbold'] = array('grade' => $sperrschrift_bold, 'is_it_gross' => $is_it_gross);
			}
		    $sperrschrift_bold_begin_with_degree = (isset($sourceSettingData['sperrschrift_bold_begin_with_degree']) and $sourceSettingData['sperrschrift_bold_begin_with_degree'] !="" ) ? "'".$sourceSettingData['sperrschrift_bold_begin_with_degree']."'" : "";
		    if($sperrschrift_bold_begin_with_degree != ""){
				// $key = array_search($sperrschrift_bold_begin_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$sperrschrift_bold_begin_with_degree]) AND $globalGradingArr[$sperrschrift_bold_begin_with_degree] != "") ? $globalGradingArr[$sperrschrift_bold_begin_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['degree-ssbold'] = $key;
					$conversionSignArr['degree-ssbold'] = (isset($globalGradingSignArr[$sperrschrift_bold_begin_with_degree]) AND $globalGradingSignArr[$sperrschrift_bold_begin_with_degree] != "") ? $globalGradingSignArr[$sperrschrift_bold_begin_with_degree] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['degree-ssbold'] = array('grade' => $sperrschrift_bold_begin_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $sperrschrift_bold_begin_with_asterisk = (isset($sourceSettingData['sperrschrift_bold_begin_with_asterisk']) and $sourceSettingData['sperrschrift_bold_begin_with_asterisk'] !="" ) ? "'".$sourceSettingData['sperrschrift_bold_begin_with_asterisk']."'" : "";
		    if($sperrschrift_bold_begin_with_asterisk != ""){
				// $key = array_search($sperrschrift_bold_begin_with_asterisk, $globalGradingArr);
				$key = (isset($globalGradingArr[$sperrschrift_bold_begin_with_asterisk]) AND $globalGradingArr[$sperrschrift_bold_begin_with_asterisk] != "") ? $globalGradingArr[$sperrschrift_bold_begin_with_asterisk] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-ssbold'] = $key;
					$conversionSignArr['asterisk-ssbold'] = (isset($globalGradingSignArr[$sperrschrift_bold_begin_with_asterisk]) AND $globalGradingSignArr[$sperrschrift_bold_begin_with_asterisk] != "") ? $globalGradingSignArr[$sperrschrift_bold_begin_with_asterisk] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-ssbold'] = array('grade' => $sperrschrift_bold_begin_with_asterisk, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv = (isset($sourceSettingData['kursiv']) and $sourceSettingData['kursiv'] !="" ) ? "'".$sourceSettingData['kursiv']."'" : "";
		    if($kursiv != ""){
				// $key = array_search($kursiv, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv]) AND $globalGradingArr[$kursiv] != "") ? $globalGradingArr[$kursiv] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['non-asterisk-degree-em'] = $key;
					$conversionSignArr['non-asterisk-degree-em'] = (isset($globalGradingSignArr[$kursiv]) AND $globalGradingSignArr[$kursiv] != "") ? $globalGradingSignArr[$kursiv] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['non-asterisk-degree-em'] = array('grade' => $kursiv, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv_end_with_t = (isset($sourceSettingData['kursiv_end_with_t']) and $sourceSettingData['kursiv_end_with_t'] !="" ) ? $sourceSettingData['kursiv_end_with_t'] : "";
		    $kursiv_end_with_tt = (isset($sourceSettingData['kursiv_end_with_tt']) and $sourceSettingData['kursiv_end_with_tt'] !="" ) ? $sourceSettingData['kursiv_end_with_tt'] : "";
		    $kursiv_begin_with_degree = (isset($sourceSettingData['kursiv_begin_with_degree']) and $sourceSettingData['kursiv_begin_with_degree'] !="" ) ? "'".$sourceSettingData['kursiv_begin_with_degree']."'" : "";
		    if($kursiv_begin_with_degree != ""){
				// $key = array_search($kursiv_begin_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv_begin_with_degree]) AND $globalGradingArr[$kursiv_begin_with_degree] != "") ? $globalGradingArr[$kursiv_begin_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['degree-em'] = $key;
					$conversionSignArr['degree-em'] = (isset($globalGradingSignArr[$kursiv_begin_with_degree]) AND $globalGradingSignArr[$kursiv_begin_with_degree] != "") ? $globalGradingSignArr[$kursiv_begin_with_degree] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['degree-em'] = array('grade' => $kursiv_begin_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv_end_with_degree = (isset($sourceSettingData['kursiv_end_with_degree']) and $sourceSettingData['kursiv_end_with_degree'] !="" ) ? "'".$sourceSettingData['kursiv_end_with_degree']."'" : "";
		    if($kursiv_end_with_degree != ""){
				// $key = array_search($kursiv_end_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv_end_with_degree]) AND $globalGradingArr[$kursiv_end_with_degree] != "") ? $globalGradingArr[$kursiv_end_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['endwithdegree-em'] = $key;
					$conversionSignArr['endwithdegree-em'] = (isset($globalGradingSignArr[$kursiv_end_with_degree]) AND $globalGradingSignArr[$kursiv_end_with_degree] != "") ? $globalGradingSignArr[$kursiv_end_with_degree] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['endwithdegree-em'] = array('grade' => $kursiv_end_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv_begin_with_asterisk = (isset($sourceSettingData['kursiv_begin_with_asterisk']) and $sourceSettingData['kursiv_begin_with_asterisk'] !="" ) ? "'".$sourceSettingData['kursiv_begin_with_asterisk']."'" : "";
		    if($kursiv_begin_with_asterisk != ""){
				// $key = array_search($kursiv_begin_with_asterisk, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv_begin_with_asterisk]) AND $globalGradingArr[$kursiv_begin_with_asterisk] != "") ? $globalGradingArr[$kursiv_begin_with_asterisk] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-em'] = $key;
					$conversionSignArr['asterisk-em'] = (isset($globalGradingSignArr[$kursiv_begin_with_asterisk]) AND $globalGradingSignArr[$kursiv_begin_with_asterisk] != "") ? $globalGradingSignArr[$kursiv_begin_with_asterisk] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-em'] = array('grade' => $kursiv_begin_with_asterisk, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv_begin_with_asterisk_end_with_t = (isset($sourceSettingData['kursiv_begin_with_asterisk_end_with_t']) and $sourceSettingData['kursiv_begin_with_asterisk_end_with_t'] !="" ) ? $sourceSettingData['kursiv_begin_with_asterisk_end_with_t'] : "";
		    $kursiv_begin_with_asterisk_end_with_tt = (isset($sourceSettingData['kursiv_begin_with_asterisk_end_with_tt']) and $sourceSettingData['kursiv_begin_with_asterisk_end_with_tt'] !="" ) ? $sourceSettingData['kursiv_begin_with_asterisk_end_with_tt'] : "";
		    $kursiv_begin_with_asterisk_end_with_degree = (isset($sourceSettingData['kursiv_begin_with_asterisk_end_with_degree']) and $sourceSettingData['kursiv_begin_with_asterisk_end_with_degree'] !="" ) ? "'".$sourceSettingData['kursiv_begin_with_asterisk_end_with_degree']."'" : "";
		    if($kursiv_begin_with_asterisk_end_with_degree != ""){
				// $key = array_search($kursiv_begin_with_asterisk_end_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv_begin_with_asterisk_end_with_degree]) AND $globalGradingArr[$kursiv_begin_with_asterisk_end_with_degree] != "") ? $globalGradingArr[$kursiv_begin_with_asterisk_end_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-degree-em'] = $key;
					$conversionSignArr['asterisk-degree-em'] = (isset($globalGradingSignArr[$kursiv_begin_with_asterisk_end_with_degree]) AND $globalGradingSignArr[$kursiv_begin_with_asterisk_end_with_degree] != "") ? $globalGradingSignArr[$kursiv_begin_with_asterisk_end_with_degree] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-degree-em'] = array('grade' => $kursiv_begin_with_asterisk_end_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv_bold = (isset($sourceSettingData['kursiv_bold']) and $sourceSettingData['kursiv_bold'] !="" ) ? "'".$sourceSettingData['kursiv_bold']."'" : "";
		    if($kursiv_bold != ""){
				// $key = array_search($kursiv_bold, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv_bold]) AND $globalGradingArr[$kursiv_bold] != "") ? $globalGradingArr[$kursiv_bold] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['non-asterisk-degree-embold'] = $key;
					$conversionSignArr['non-asterisk-degree-embold'] = (isset($globalGradingSignArr[$kursiv_bold]) AND $globalGradingSignArr[$kursiv_bold] != "") ? $globalGradingSignArr[$kursiv_bold] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['non-asterisk-degree-embold'] = array('grade' => $kursiv_bold, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv_bold_begin_with_asterisk_end_with_t = (isset($sourceSettingData['kursiv_bold_begin_with_asterisk_end_with_t']) and $sourceSettingData['kursiv_bold_begin_with_asterisk_end_with_t'] !="" ) ? $sourceSettingData['kursiv_bold_begin_with_asterisk_end_with_t'] : "";
		    $kursiv_bold_begin_with_asterisk_end_with_tt = (isset($sourceSettingData['kursiv_bold_begin_with_asterisk_end_with_tt']) and $sourceSettingData['kursiv_bold_begin_with_asterisk_end_with_tt'] !="" ) ? $sourceSettingData['kursiv_bold_begin_with_asterisk_end_with_tt'] : "";
		    $kursiv_bold_begin_with_degree = (isset($sourceSettingData['kursiv_bold_begin_with_degree']) and $sourceSettingData['kursiv_bold_begin_with_degree'] !="" ) ? "'".$sourceSettingData['kursiv_bold_begin_with_degree']."'" : "";
		    if($kursiv_bold_begin_with_degree != ""){
				// $key = array_search($kursiv_bold_begin_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv_bold_begin_with_degree]) AND $globalGradingArr[$kursiv_bold_begin_with_degree] != "") ? $globalGradingArr[$kursiv_bold_begin_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['degree-embold'] = $key;
					$conversionSignArr['degree-embold'] = (isset($globalGradingSignArr[$kursiv_bold_begin_with_degree]) AND $globalGradingSignArr[$kursiv_bold_begin_with_degree] != "") ? $globalGradingSignArr[$kursiv_bold_begin_with_degree] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['degree-embold'] = array('grade' => $kursiv_bold_begin_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv_bold_begin_with_asterisk = (isset($sourceSettingData['kursiv_bold_begin_with_asterisk']) and $sourceSettingData['kursiv_bold_begin_with_asterisk'] !="" ) ? $sourceSettingData['kursiv_bold_begin_with_asterisk'] : "";
		    if($kursiv_bold_begin_with_asterisk != ""){
				// $key = array_search($kursiv_bold_begin_with_asterisk, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv_bold_begin_with_asterisk]) AND $globalGradingArr[$kursiv_bold_begin_with_asterisk] != "") ? $globalGradingArr[$kursiv_bold_begin_with_asterisk] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-embold'] = $key;
					$conversionSignArr['asterisk-embold'] = (isset($globalGradingSignArr[$kursiv_bold_begin_with_asterisk]) AND $globalGradingSignArr[$kursiv_bold_begin_with_asterisk] != "") ? $globalGradingSignArr[$kursiv_bold_begin_with_asterisk] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-embold'] = array('grade' => $kursiv_bold_begin_with_asterisk, 'is_it_gross' => $is_it_gross);
			}
		    $kursiv_bold_begin_with_asterisk_end_with_degree = (isset($sourceSettingData['kursiv_bold_begin_with_asterisk_end_with_degree']) and $sourceSettingData['kursiv_bold_begin_with_asterisk_end_with_degree'] !="" ) ? "'".$sourceSettingData['kursiv_bold_begin_with_asterisk_end_with_degree']."'" : "";
		    if($kursiv_bold_begin_with_asterisk_end_with_degree != ""){
				// $key = array_search($kursiv_bold_begin_with_asterisk_end_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$kursiv_bold_begin_with_asterisk_end_with_degree]) AND $globalGradingArr[$kursiv_bold_begin_with_asterisk_end_with_degree] != "") ? $globalGradingArr[$kursiv_bold_begin_with_asterisk_end_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-degree-embold'] = $key;
					$conversionSignArr['asterisk-degree-embold'] = (isset($globalGradingSignArr[$kursiv_bold_begin_with_asterisk_end_with_degree]) AND $globalGradingSignArr[$kursiv_bold_begin_with_asterisk_end_with_degree] != "") ? $globalGradingSignArr[$kursiv_bold_begin_with_asterisk_end_with_degree] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-degree-embold'] = array('grade' => $kursiv_bold_begin_with_asterisk_end_with_degree, 'is_it_gross' => $is_it_gross);
			}
			$fett = (isset($sourceSettingData['fett']) and $sourceSettingData['fett'] !="" ) ? "'".$sourceSettingData['fett']."'" : "";
			if($fett != ""){
				// $key = array_search($fett, $globalGradingArr);
				$key = (isset($globalGradingArr[$fett]) AND $globalGradingArr[$fett] != "") ? $globalGradingArr[$fett] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['non-asterisk-degree-bold'] = $key;
					$conversionSignArr['non-asterisk-degree-bold'] = (isset($globalGradingSignArr[$fett]) AND $globalGradingSignArr[$fett] != "") ? $globalGradingSignArr[$fett] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['non-asterisk-degree-bold'] = array('grade' => $fett, 'is_it_gross' => $is_it_gross);
			}
		    $fett_end_with_t = (isset($sourceSettingData['fett_end_with_t']) and $sourceSettingData['fett_end_with_t'] !="" ) ? $sourceSettingData['fett_end_with_t'] : "";
		    $fett_end_with_tt = (isset($sourceSettingData['fett_end_with_tt']) and $sourceSettingData['fett_end_with_tt'] !="" ) ? $sourceSettingData['fett_end_with_tt'] : "";
		    $fett_begin_with_degree = (isset($sourceSettingData['fett_begin_with_degree']) and $sourceSettingData['fett_begin_with_degree'] !="" ) ? "'".$sourceSettingData['fett_begin_with_degree']."'" : "";
		    if($fett_begin_with_degree != ""){
				// $key = array_search($fett_begin_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$fett_begin_with_degree]) AND $globalGradingArr[$fett_begin_with_degree] != "") ? $globalGradingArr[$fett_begin_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['degree-bold'] = $key;
					$conversionSignArr['degree-bold'] = (isset($globalGradingSignArr[$fett_begin_with_degree]) AND $globalGradingSignArr[$fett_begin_with_degree] != "") ? $globalGradingSignArr[$fett_begin_with_degree] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['degree-bold'] = array('grade' => $fett_begin_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $fett_end_with_degree = (isset($sourceSettingData['fett_end_with_degree']) and $sourceSettingData['fett_end_with_degree'] !="" ) ? "'".$sourceSettingData['fett_end_with_degree']."'" : "";
		    if($fett_end_with_degree != ""){
				// $key = array_search($fett_end_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$fett_end_with_degree]) AND $globalGradingArr[$fett_end_with_degree] != "") ? $globalGradingArr[$fett_end_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['endwithdegree-bold'] = $key;
					$conversionSignArr['endwithdegree-bold'] = (isset($globalGradingSignArr[$fett_end_with_degree]) AND $globalGradingSignArr[$fett_end_with_degree] != "") ? $globalGradingSignArr[$fett_end_with_degree] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['endwithdegree-bold'] = array('grade' => $fett_end_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $fett_begin_with_asterisk = (isset($sourceSettingData['fett_begin_with_asterisk']) and $sourceSettingData['fett_begin_with_asterisk'] !="" ) ? "'".$sourceSettingData['fett_begin_with_asterisk']."'" : "";
		    if($fett_begin_with_asterisk != ""){
				// $key = array_search($fett_begin_with_asterisk, $globalGradingArr);
				$key = (isset($globalGradingArr[$fett_begin_with_asterisk]) AND $globalGradingArr[$fett_begin_with_asterisk] != "") ? $globalGradingArr[$fett_begin_with_asterisk] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-bold'] = $key;
					$conversionSignArr['asterisk-bold'] = (isset($globalGradingSignArr[$fett_begin_with_asterisk]) AND $globalGradingSignArr[$fett_begin_with_asterisk] != "") ? $globalGradingSignArr[$fett_begin_with_asterisk] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-bold'] = array('grade' => $fett_begin_with_asterisk, 'is_it_gross' => $is_it_gross);
			}
		    $fett_begin_with_asterisk_end_with_t = (isset($sourceSettingData['fett_begin_with_asterisk_end_with_t']) and $sourceSettingData['fett_begin_with_asterisk_end_with_t'] !="" ) ? $sourceSettingData['fett_begin_with_asterisk_end_with_t'] : "";
		    $fett_begin_with_asterisk_end_with_tt = (isset($sourceSettingData['fett_begin_with_asterisk_end_with_tt']) and $sourceSettingData['fett_begin_with_asterisk_end_with_tt'] !="" ) ? $sourceSettingData['fett_begin_with_asterisk_end_with_tt'] : "";
		    $fett_begin_with_asterisk_end_with_degree = (isset($sourceSettingData['fett_begin_with_asterisk_end_with_degree']) and $sourceSettingData['fett_begin_with_asterisk_end_with_degree'] !="" ) ? "'".$sourceSettingData['fett_begin_with_asterisk_end_with_degree']."'" : "";
		    if($fett_begin_with_asterisk_end_with_degree != ""){
				// $key = array_search($fett_begin_with_asterisk_end_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$fett_begin_with_asterisk_end_with_degree]) AND $globalGradingArr[$fett_begin_with_asterisk_end_with_degree] != "") ? $globalGradingArr[$fett_begin_with_asterisk_end_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-degree-bold'] = $key;
					$conversionSignArr['asterisk-degree-bold'] = (isset($globalGradingSignArr[$fett_begin_with_asterisk_end_with_degree]) AND $globalGradingSignArr[$fett_begin_with_asterisk_end_with_degree] != "") ? $globalGradingSignArr[$fett_begin_with_asterisk_end_with_degree] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-degree-bold'] = array('grade' => $fett_begin_with_asterisk_end_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $gross = (isset($sourceSettingData['gross']) and $sourceSettingData['gross'] !="" ) ? "'".$sourceSettingData['gross']."'" : "";
		    if($gross != ""){
				// $key = array_search($gross, $globalGradingArr);
				$key = (isset($globalGradingArr[$gross]) AND $globalGradingArr[$gross] != "") ? $globalGradingArr[$gross] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['non-asterisk-degree-normalgross'] = $key;
					$conversionSignArr['non-asterisk-degree-normalgross'] = (isset($globalGradingSignArr[$gross]) AND $globalGradingSignArr[$gross] != "") ? $globalGradingSignArr[$gross] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['non-asterisk-degree-normalgross'] = array('grade' => $gross, 'is_it_gross' => $is_it_gross);
			}
		    $gross_begin_with_degree = (isset($sourceSettingData['gross_begin_with_degree']) and $sourceSettingData['gross_begin_with_degree'] !="" ) ? "'".$sourceSettingData['gross_begin_with_degree']."'" : "";
		    if($gross_begin_with_degree != ""){
				// $key = array_search($gross_begin_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$gross_begin_with_degree]) AND $globalGradingArr[$gross_begin_with_degree] != "") ? $globalGradingArr[$gross_begin_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['degree-normalgross'] = $key;
					$conversionSignArr['degree-normalgross'] = (isset($globalGradingSignArr[$gross_begin_with_degree]) AND $globalGradingSignArr[$gross_begin_with_degree] != "") ? $globalGradingSignArr[$gross_begin_with_degree] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['degree-normalgross'] = array('grade' => $gross_begin_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $gross_begin_with_asterisk = (isset($sourceSettingData['gross_begin_with_asterisk']) and $sourceSettingData['gross_begin_with_asterisk'] !="" ) ? "'".$sourceSettingData['gross_begin_with_asterisk']."'" : "";
		    if($gross_begin_with_asterisk != ""){
				// $key = array_search($gross_begin_with_asterisk, $globalGradingArr);
				$key = (isset($globalGradingArr[$gross_begin_with_asterisk]) AND $globalGradingArr[$gross_begin_with_asterisk] != "") ? $globalGradingArr[$gross_begin_with_asterisk] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							"," 
						), $key );
					}
					$conversionArr['asterisk-normalgross'] = $key;
					$conversionSignArr['asterisk-normalgross'] = (isset($globalGradingSignArr[$gross_begin_with_asterisk]) AND $globalGradingSignArr[$gross_begin_with_asterisk] != "") ? $globalGradingSignArr[$gross_begin_with_asterisk] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-normalgross'] = array('grade' => $gross_begin_with_asterisk, 'is_it_gross' => $is_it_gross);
			}
		    $gross_bold = (isset($sourceSettingData['gross_bold']) and $sourceSettingData['gross_bold'] !="" ) ? "'".$sourceSettingData['gross_bold']."'" : "";
		    if($gross_bold != ""){
				// $key = array_search($gross_bold, $globalGradingArr);
				$key = (isset($globalGradingArr[$gross_bold]) AND $globalGradingArr[$gross_bold] != "") ? $globalGradingArr[$gross_bold] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['non-asterisk-degree-grossbold'] = $key;
					$conversionSignArr['non-asterisk-degree-grossbold'] = (isset($globalGradingSignArr[$gross_bold]) AND $globalGradingSignArr[$gross_bold] != "") ? $globalGradingSignArr[$gross_bold] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['non-asterisk-degree-grossbold'] = array('grade' => $gross_bold, 'is_it_gross' => $is_it_gross);
			}
		    $gross_bold_begin_with_degree = (isset($sourceSettingData['gross_bold_begin_with_degree']) and $sourceSettingData['gross_bold_begin_with_degree'] !="" ) ? "'".$sourceSettingData['gross_bold_begin_with_degree']."'" : "";
		    if($gross_bold_begin_with_degree != ""){
				// $key = array_search($gross_bold_begin_with_degree, $globalGradingArr);
				$key = (isset($globalGradingArr[$gross_bold_begin_with_degree]) AND $globalGradingArr[$gross_bold_begin_with_degree] != "") ? $globalGradingArr[$gross_bold_begin_with_degree] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_' 
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['degree-grossbold'] = $key;
					$conversionSignArr['degree-grossbold'] = (isset($globalGradingSignArr[$gross_bold_begin_with_degree]) AND $globalGradingSignArr[$gross_bold_begin_with_degree] != "") ? $globalGradingSignArr[$gross_bold_begin_with_degree] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['degree-grossbold'] = array('grade' => $gross_bold_begin_with_degree, 'is_it_gross' => $is_it_gross);
			}
		    $gross_bold_begin_with_asterisk = (isset($sourceSettingData['gross_bold_begin_with_asterisk']) and $sourceSettingData['gross_bold_begin_with_asterisk'] !="" ) ? "'".$sourceSettingData['gross_bold_begin_with_asterisk']."'" : "";
		    if($gross_bold_begin_with_asterisk != ""){
				// $key = array_search($gross_bold_begin_with_asterisk, $globalGradingArr);
				$key = (isset($globalGradingArr[$gross_bold_begin_with_asterisk]) AND $globalGradingArr[$gross_bold_begin_with_asterisk] != "") ? $globalGradingArr[$gross_bold_begin_with_asterisk] : "";
				// If we the provided symptom is Final version than we don't have to convert it, it's already created in converted version by user 
				if($isFinalVersionAvailable == 0){
					if($key != "")
					{
						$key = str_replace ( array (
							'normal',
							'_'
						), array (
							"normal",
							","
						), $key );
					}
					$conversionArr['asterisk-grossbold'] = $key;
					$conversionSignArr['asterisk-grossbold'] = (isset($globalGradingSignArr[$gross_bold_begin_with_asterisk]) AND $globalGradingSignArr[$gross_bold_begin_with_asterisk] != "") ? $globalGradingSignArr[$gross_bold_begin_with_asterisk] : "";
				}

				$is_it_gross = ($key == "stronggross") ? 1 : 0; // Gross means Uppercase
				$preConversionChanges['asterisk-grossbold'] = array('grade' => $gross_bold_begin_with_asterisk, 'is_it_gross' => $is_it_gross);
			}

			// This below format is only applicable for Final version, it is not applicable for the normaly imported symptom
			// 'endwithdegree-ssembold' => 'ss,em,strong',
			// 'asterisk-ssembold' => 'ss,em,strong',
			// 'degree-ssembold' => 'ss,em,strong',
			// 'non-asterisk-degree-ssembold' => 'ss,em,strong',
			// 'asterisk-degree-ssembold' => 'ss,em,strong',
			$ss_em_strong_grade_value = (isset($globalGradingArr['ss_em_strong']) AND $globalGradingArr['ss_em_strong'] != "") ? $globalGradingArr['ss_em_strong'] : "";
			if($ss_em_strong_grade_value != "")
				$preConversionChanges['non-asterisk-degree-ssembold'] = array('grade' => $ss_em_strong_grade_value, 'is_it_gross' => 0);   

			// Implementing the pre conversion changes
			foreach ($preConversionChanges as $preSetKey => $preSetVal) {
				if(isset($preConversionChanges[$preSetKey]['is_it_gross']) AND $preConversionChanges[$preSetKey]['is_it_gross'] == 0)
					$symptom = makeSymptomPortionsLowercaseUcfirst($symptom, $preSetKey);
			}
			// echo '<pre>';
			// print_r($preConversionChanges);
			// Including Grading number in the symptom string
			if(isset($includeGrade) AND $includeGrade == 1){
				foreach ($preConversionChanges as $gradeKey => $gradeVal) {
					$symptom = str_replace('<'.$gradeKey.'>', '<br><strong> '.$preConversionChanges[$gradeKey]['grade'].' </strong><'.$gradeKey.'>', $symptom);
				}
				$firstBrPosition = mb_strpos ( $symptom, '<br>' );
				if($firstBrPosition === 0)
					$symptom = mb_substr ( $symptom, mb_strlen('<br>') );

				$newString = "";
				$brakedParts = explode('<br>', $symptom);
				foreach ($brakedParts as $brakedKey => $brakedVal) {
					$firstStrongTagPosition = mb_strpos ( $brakedVal, "</strong>" );
					$remainingString = trim(strip_tags(mb_substr ( $brakedVal, $firstStrongTagPosition+mb_strlen("</strong>") )));
					if($remainingString != "." AND $remainingString != "," AND $remainingString != ";" AND $remainingString != "!")
						$newString .= "<br>".$brakedVal;
				}

				if($newString != ""){
					$symptom = $newString;

					$firstBrPosition = mb_strpos ( $symptom, '<br>' );
					if($firstBrPosition === 0)
						$symptom = mb_substr ( $symptom, mb_strlen('<br>') );
				}
			}
			// echo $symptom." -------<br>";
			// echo htmlentities($symptom)." -------<br>";

			// echo '<pre>';
			// print_r($conversionArr);
			foreach ($conversionArr as $conKey => $conVal) {
				$convertableTagsArray = explode(',', $conVal);
				$convertableOpenTag = "";
				$convertableOpenTagTemp = "";
				foreach ($convertableTagsArray as $openKey => $openVal) {
					if($openVal != ""){
						$convertableOpenTag .= '<'.$openVal.'>';
						$convertableOpenTagTemp .= '<'.$openVal.'-temp>';
					}
				}
				$convertableTagsArrayReverse = array_reverse($convertableTagsArray);
				$convertableEndTag = "";
				$convertableEndTagTemp = "";
				foreach ($convertableTagsArrayReverse as $endKey => $endVal) {
					if($endVal != ""){
						$convertableEndTag .= '</'.$endVal.'>';
						$convertableEndTagTemp .= '</'.$endVal.'-temp>';
					}
				}

				$symptom = str_replace ( array (
					'<'.$conKey.'>',
					'</'.$conKey.'>'
				), array (
					$convertableOpenTagTemp,
					$convertableEndTagTemp
				), $symptom );

				// Fetch signs if any
				$sign = (isset($conversionSignArr[$conKey]) AND $conversionSignArr[$conKey] != "") ? $conversionSignArr[$conKey] : "";
				if($sign != ""){
					$convertableOpenTagWithSign = $convertableOpenTag." ".$sign;
					$symptom = str_replace ( array (
						$convertableOpenTagTemp,
						$convertableEndTagTemp
					), array (
						$convertableOpenTagWithSign,
						$convertableEndTag
					), $symptom );
				}
				else
				{
					$symptom = str_replace ( array (
						$convertableOpenTagTemp,
						$convertableEndTagTemp
					), array (
						$convertableOpenTag,
						$convertableEndTag
					), $symptom );
				}

				$symptom = str_replace ( array (
					'<normal>',
					'</normal>'
				), array (
					'',
					''
				), $symptom );
			}

			// echo $symptom." ---<br><br>";
			// echo htmlentities($symptom)." ---<br><br>";

			$symptom = convertStrongGross($symptom);
			$symptom = str_replace ( array (
				'<ss>',
				'</ss>' 
			), array (
				'<span class="text-sperrschrift">',
				"</span>" 
			), $symptom );
			$symptom = str_replace ( array (
				'<clr',
				'</clr>' 
			), array (
				"<span",
				"</span>" 
			), $symptom );
			$symptom = removeBlankTags($symptom);
		}
		// Removing *,Â°,Â¯
		$symptom = str_replace ( array (
					'*',
					'Â°',
					'Â¯'
				), array (
					"",
					"",
					""
				), $symptom );
		$symptom = trim($symptom);

		return $symptom;
	}

	// *<asterisk-em>Burning and pressure in the eyes</asterisk-em><non-asterisk-degree-normal>.</non-asterisk-degree-normal> 
	function makeSymptomPortionsLowercaseUcfirst($string, $customTag, $modifiedStringPart = NULL){
		if($string != ""){
			$firstBeginingTagPosition = mb_strpos ( $string, '<'.$customTag.'>' );
			if($firstBeginingTagPosition !== false){

				// find position in new String
				$newString = mb_substr ( $string, $firstBeginingTagPosition );
				$newEndingTagPosition = mb_strpos ( $newString, '</'.$customTag.'>' );
				if($newEndingTagPosition !== false){
					$FullTagString = mb_substr ( $newString, 0, $newEndingTagPosition+mb_strlen('</'.$customTag.'>') );
					$tagString = str_replace ( array (
						'<'.$customTag.'>',
						'</'.$customTag.'>' 
					), array (
						"",
						"" 
					), $FullTagString );
					// Examining the string is a GROSS(Uppercase) string or not
					// If it is not GROSS string then keeping it as it is and If it is GROSS string then making it UcFirst.
					
					// Finding the uppercase words
					// preg_match_all("/[[:upper:]]+/u", $string, $capsMatches, PREG_OFFSET_CAPTURE);
					// Below regular expression won't detect the last word of the string as uppercas even though it is a upperacse word. It needs anything non word after the word to detect. So adding the default delemeter {#^#} at the end of the eximining string just to detect all the uppercase word correctly.

					// ****** I am commenting this below part because it is making ucfirst words in the middle of string to lower case which not good. if the below portion is required for any other reason in the future then i have to go with a fullproof solution. 
					// ***** START

					// $modifiedTagString = $tagString."{#^#}";
					// // Removing all numbers/numerals to make the Regex work accurate
					// $modifiedTagString = preg_replace('/d+/u', '', $modifiedTagString); 
					// mb_preg_match_all("/\\b(?=[A-Z0-9])[A-Z0-9 ]+(?=\\W)/u", $modifiedTagString, $capsMatches, PREG_OFFSET_CAPTURE);
					// if(isset($capsMatches[0]) AND !empty($capsMatches[0])){
					// 	$tagString = mb_strtolower($tagString);
					// 	$tagString = ucfirst($tagString);
					// }

					// ***** END
					
					$FullTagString = '<'.$customTag.'>'.$tagString.'</'.$customTag.'>';
					$modifiedPortion = mb_substr ( $string, 0, $firstBeginingTagPosition ).$FullTagString;
				
					$modifiedStringPart = $modifiedStringPart.$modifiedPortion;
					$getAfterWardString = mb_substr ( $newString, $newEndingTagPosition+mb_strlen('</'.$customTag.'>') );
					return makeSymptomPortionsLowercaseUcfirst($getAfterWardString, $customTag, $modifiedStringPart);
				} else {
					if($modifiedStringPart != "")
						$string = $modifiedStringPart.$string;
				}

			} else {
				if($modifiedStringPart != "")
					$string = $modifiedStringPart.$string;
			}
		} else {
			if($modifiedStringPart != "")
				$string = $modifiedStringPart.$string;
		}

		return $string;
	}

	// Does string contain letters?
	function hasLetters( $string ) {
		return preg_match( '/[a-zA-Z]/u', $string );
	}

	function removeCustomParentTags($string){
		if($string != ""){
			// $string = str_replace ( array (
			// 	'<parentheses-normal>',
			// 	'</parentheses-normal>' 
			// ), array (
			// 	"",
			// 	"" 
			// ), $string );
			$string = str_replace ( array (
				'<endwithdegree>',
				'</endwithdegree>' 
			), array (
				"",
				"" 
			), $string );
			$string = str_replace ( array (
				'<asterisk>',
				'</asterisk>' 
			), array (
				"",
				"" 
			), $string );
			$string = str_replace ( array (
				'<theta>',
				'</theta>' 
			), array (
				"",
				"" 
			), $string );
			$string = str_replace ( array (
				'<degree>',
				'</degree>' 
			), array (
				"",
				"" 
			), $string );
			$string = str_replace ( array (
				'<non-asterisk-degree>',
				'</non-asterisk-degree>' 
			), array (
				"",
				"" 
			), $string );
			$string = str_replace ( array (
				'<asterisk-degree>',
				'</asterisk-degree>' 
			), array (
				"",
				"" 
			), $string );
			$string = str_replace ( array (
				'<endwithsinglet>',
				'</endwithsinglet>' 
			), array (
				"",
				"" 
			), $string );
			$string = str_replace ( array (
				'<endwithdoublet>',
				'</endwithdoublet>' 
			), array (
				"",
				"" 
			), $string );
		}
		return $string;
	}

	// Converting stronggross tag's string to Uppercase
	function convertStrongGross($line){
		if($line != ""){
			$firstOccurrence = mb_strpos ( $line, '<stronggross>' );
			if($firstOccurrence !== false){
				$firstCloseTagOccurrence = mb_strpos ( $line, '</stronggross>' );
				if($firstCloseTagOccurrence !== false){
					$strongGrossStringPart = mb_substr ( $line, $firstOccurrence+strlen('<stronggross>'));
					$endingPositionInNewString = mb_strpos ( $strongGrossStringPart, '</stronggross>' );
					$strongGrossStringPart = mb_substr ( $strongGrossStringPart, 0, $endingPositionInNewString);
					if($strongGrossStringPart != ""){
						$modifiedStringPart = '<strong>'.mb_strtoupper($strongGrossStringPart, 'UTF-8').'</strong>';
						$line = mb_substr($line, 0, $firstOccurrence).$modifiedStringPart.mb_substr($line, $firstCloseTagOccurrence+strlen('</stronggross>'));
						$checkStillStrongTagOccurred = mb_strpos ( $line, '<stronggross>' );
						if($checkStillStrongTagOccurred !== false)
							return convertStrongGross($line);
					}
				}
			}
		}
		return $line;
	}

	function removeBlankTags($line){
		if($line != ""){
			$line = str_replace( '&nbsp;', ' ', $line );
		    do {
		        $tmp = $line;
		        $line = preg_replace('#<([^ >]+)[^>]*></\1>#', '', $line );
		    } while ( $line !== $tmp );
		    do {
		        $tmpNew = $line;
		        $line = preg_replace('#<([^ >]+)[^>]*>[[:space:]]+</\1>#', ' ', $line );
		    } while ( $line !== $tmpNew );


		    /*
		    Another regular expression to remove empty html tags
		    <[^>]*>\s*<\/[^>]*>
		    demo link: https://regex101.com/r/hQ1rP0/26
		    */

			// $line = preg_replace("#<b[^>]*>\s*</b>#is", "", $line ); 
			// $line = preg_replace("#<i[^>]*>\s*</i>#is", "", $line ); 
			// $line = preg_replace("#<strong[^>]*>\s*</strong>#is", "", $line ); 
			// $line = preg_replace("#<em[^>]*>\s*</em>#is", "", $line ); 
			// $line = preg_replace("#<u[^>]*>\s*</u>#is", "", $line ); 
			// $line = preg_replace("#<sup[^>]*>\s*</sup>#is", "", $line ); 
			// $line = preg_replace("#<span[^>]*>\s*</span>#is", "", $line ); 
			// $line = preg_replace("#<ss[^>]*>\s*</ss>#is", "", $line );

			// $line = preg_replace("#<parentheses-normal[^>]*>\s*</parentheses-normal>#is", "", $line );

			// $parentCustomTagArr = array('endwithdegree', 'asterisk', 'degree', 'non-asterisk-degree', 'asterisk-degree');
			// foreach ($parentCustomTagArr as $tagKey => $tagVal) {
			// 	$line = preg_replace("#<".$tagVal."[^>]*>\s*</".$tagVal.">#is", "", $line );

			// 	$line = preg_replace("#<".$tagVal."-ssbold[^>]*>\s*</".$tagVal."-ssbold>#is", "", $line );
			// 	$line = preg_replace("#<".$tagVal."-embold[^>]*>\s*</".$tagVal."-embold>#is", "", $line );
			// 	$line = preg_replace("#<".$tagVal."-ssem[^>]*>\s*</".$tagVal."-ssem>#is", "", $line );
			// 	$line = preg_replace("#<".$tagVal."-ss[^>]*>\s*</".$tagVal."-ss>#is", "", $line );
			// 	$line = preg_replace("#<".$tagVal."-em[^>]*>\s*</".$tagVal."-em>#is", "", $line );
			// 	$line = preg_replace("#<".$tagVal."-normalgross[^>]*>\s*</".$tagVal."-normalgross>#is", "", $line );
			// 	$line = preg_replace("#<".$tagVal."-normal[^>]*>\s*</".$tagVal."-normal>#is", "", $line );
			// 	$line = preg_replace("#<".$tagVal."-bold[^>]*>\s*</".$tagVal."-bold>#is", "", $line );
			// 	$line = preg_replace("#<".$tagVal."-grossbold[^>]*>\s*</".$tagVal."-grossbold>#is", "", $line );
			// }
		}
		return $line;
	}

	function structureNonAsteriskAndDegreePortions($line, $customTag, $modifiedPortion = NULL){
		if($line != ""){
			$asteriskFirstOccurrence = mb_strpos ( $line, '<asterisk>' );
			$thetaFirstOccurrence = mb_strpos ( $line, '<theta>' );
			$degreeFirstOccurrence = mb_strpos ( $line, '<degree>' );
			$asteriskDegreeFirstOccurrence = mb_strpos ( $line, '<asterisk-degree>' );

			$firstOccuredTagPosition = "";
			$applicableCustomTag = "";
			if($asteriskFirstOccurrence !== false){
				$firstOccuredTagPosition = $asteriskFirstOccurrence;
				$applicableCustomTag = 'asterisk';
			}
			if($thetaFirstOccurrence !== false){
				$firstOccuredTagPosition = $thetaFirstOccurrence;
				$applicableCustomTag = 'theta';
			}
			if($degreeFirstOccurrence !== false){
				if($firstOccuredTagPosition == ""){
					$firstOccuredTagPosition = $degreeFirstOccurrence;
					$applicableCustomTag = 'degree';
				} else if($degreeFirstOccurrence < $firstOccuredTagPosition){
					$firstOccuredTagPosition = $degreeFirstOccurrence;
					$applicableCustomTag = 'degree';
				}
			}
			if($asteriskDegreeFirstOccurrence !== false){
				if($firstOccuredTagPosition == ""){
					$firstOccuredTagPosition = $asteriskDegreeFirstOccurrence;
					$applicableCustomTag = 'asterisk-degree';
				} else if($asteriskDegreeFirstOccurrence < $firstOccuredTagPosition){
					$firstOccuredTagPosition = $asteriskDegreeFirstOccurrence;
					$applicableCustomTag = 'asterisk-degree';
				}
			}

			if($firstOccuredTagPosition != "" AND $applicableCustomTag != ""){
				$firstOpenedTagsEnding = '</'.$applicableCustomTag.'>';
				$occurrenceToEndOfTheString = mb_substr($line, $firstOccuredTagPosition);
				$beginingToOccurrenceString = mb_substr($line, 0, $firstOccuredTagPosition);
				$modifiedStringPart = $beginingToOccurrenceString;
				if($modifiedStringPart != ""){
					$completeEndTag = "";
					$cleanedOpenedTag = "";
					$openedTag = findTheOpenedTag($modifiedStringPart);
					if($openedTag != "")
					{
						$lastOpenedOccurred = mb_strripos ( $openedTag, '<' );
						if($lastOpenedOccurred !== false){
							$openedTagsArr = explode('{#^#}', $openedTag);
							foreach ($openedTagsArr as $tagKey => $tagVal) {
								$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
								$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
								$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
								$tagNameInArr = explode(' ', $tagNameString);
								$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
								if($tagName != "")
									$completeEndTag .= '</'.$tagName.'>';
							}
							$reversedOpenedTagsArr = array_reverse($openedTagsArr);
							foreach ($reversedOpenedTagsArr as $tagKey => $tagVal) {
								$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
								$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
								$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
								$tagNameInArr = explode(' ', $tagNameString);
								$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
								if($tagName != "")
									$cleanedOpenedTag .= '<'.$tagName.'>';
							}
						}
					}
					$modifiedStringPart = $modifiedStringPart.$completeEndTag;
					if($modifiedStringPart != "" AND trim($modifiedStringPart) != "*" AND trim($modifiedStringPart) != "Â°") {
						$reArrangedString = reArrangeTheTags($modifiedStringPart);	
						$modifiedStringPart = replaceWithCustomTags($reArrangedString, $customTag);
					}
				}
				// Modified begining part
				$beginingToOccurrenceString = $modifiedStringPart;
				// find first opened tags ending position in $occurrenceToEndOfTheString
				$firstOpenedTagsEndingPosition = mb_strpos ( $occurrenceToEndOfTheString, $firstOpenedTagsEnding );	
				if($firstOpenedTagsEndingPosition !== false) {
					$stringTillTheClosingTag = mb_substr ( $occurrenceToEndOfTheString, 0, $firstOpenedTagsEndingPosition+strlen($firstOpenedTagsEnding));
					// Remaining string
					$remainingString = mb_substr ( $occurrenceToEndOfTheString, $firstOpenedTagsEndingPosition+strlen($firstOpenedTagsEnding));
					// Modified first portion
					$modifiedPortion = $modifiedPortion.$beginingToOccurrenceString.$stringTillTheClosingTag;
					
					if($remainingString != "")
						return structureNonAsteriskAndDegreePortions($remainingString, $customTag, $modifiedPortion);
					else
						$line = $modifiedPortion;	

				} else {
					$line = $modifiedPortion.$beginingToOccurrenceString.$occurrenceToEndOfTheString;
				}

			} else {
				$modifiedStringPart = $line;
				$completeEndTag = "";
				$cleanedOpenedTag = "";
				$openedTag = findTheOpenedTag($modifiedStringPart);
				if($openedTag != "")
				{
					$lastOpenedOccurred = mb_strripos ( $openedTag, '<' );
					if($lastOpenedOccurred !== false){
						$openedTagsArr = explode('{#^#}', $openedTag);
						foreach ($openedTagsArr as $tagKey => $tagVal) {
							$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
							$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
							$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
							$tagNameInArr = explode(' ', $tagNameString);
							$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
							if($tagName != "")
								$completeEndTag .= '</'.$tagName.'>';
						}
						$reversedOpenedTagsArr = array_reverse($openedTagsArr);
						foreach ($reversedOpenedTagsArr as $tagKey => $tagVal) {
							$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
							$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
							$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
							$tagNameInArr = explode(' ', $tagNameString);
							$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
							if($tagName != "")
								$cleanedOpenedTag .= '<'.$tagName.'>';
						}
					}
				}
				$modifiedStringPart = $modifiedStringPart.$completeEndTag;
				$reArrangedString = reArrangeTheTags($modifiedStringPart);
				$modifiedStringPart = replaceWithCustomTags($reArrangedString, $customTag);
				$line = $modifiedPortion.$modifiedStringPart;
			}
		}
		return $line;
	}

	function structureEndingWithDegreeFormatString($line, $customTag){
		if($line != ""){
			$degreeFirstOccurrence = mb_strpos ( $line, 'Â°' );
			if($degreeFirstOccurrence !== false){
				// $string = rtrim(trim($line), "Â°");
				$string = mb_substr($line, 0, $degreeFirstOccurrence);
				$stringEndingPart = mb_substr($line, $degreeFirstOccurrence);
				//any text formatting with degree and dot is removed in the end of the string
				$stringEndingPart = strip_tags($stringEndingPart);

				$completeEndTag = "";
				$cleanedOpenedTag = "";
				$openedTag = findTheOpenedTag($string);
				if($openedTag != "")
				{
					$lastOpenedOccurred = mb_strripos ( $openedTag, '<' );
					if($lastOpenedOccurred !== false){
						$openedTagsArr = explode('{#^#}', $openedTag);
						foreach ($openedTagsArr as $tagKey => $tagVal) {
							$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
							$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
							$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
							$tagNameInArr = explode(' ', $tagNameString);
							$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
							if($tagName != "")
								$completeEndTag .= '</'.$tagName.'>';
						}
						$reversedOpenedTagsArr = array_reverse($openedTagsArr);
						foreach ($reversedOpenedTagsArr as $tagKey => $tagVal) {
							$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
							$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
							$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
							$tagNameInArr = explode(' ', $tagNameString);
							$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
							if($tagName != "")
								$cleanedOpenedTag .= '<'.$tagName.'>';
						}
					}
				}
				$completeString = $string.$completeEndTag;

				$endDegreeModified = str_replace ( "Â°", ' <degree-at-end>Â°</degree-at-end>', $stringEndingPart );

				if(strip_tags($string) == ""){
					//$line = $string.$stringEndingPart;
					$line = $string.$endDegreeModified;
				} else {
					$reArrangedString = reArrangeTheTags($completeString);
					$modifiedAsteriskPortion = replaceWithCustomTags($reArrangedString, $customTag);
					$line = '<'.$customTag.'>'.$modifiedAsteriskPortion.'</'.$customTag.'>'.$endDegreeModified;
				}
			}
		}

		return $line;
	}

	function structureEndingWithSingleTFormatString($line, $customTag){
		if($line != ""){
			$degreeFirstOccurrence = mb_strpos ( $line, 'Î±' );
			if($degreeFirstOccurrence !== false){
				// $string = rtrim(trim($line), "Â°");
				$string = mb_substr($line, 0, $degreeFirstOccurrence);
				$stringEndingPart = mb_substr($line, $degreeFirstOccurrence);
				//any text formatting with degree and dot is removed in the end of the string
				$stringEndingPart = strip_tags($stringEndingPart);

				$completeEndTag = "";
				$cleanedOpenedTag = "";
				$openedTag = findTheOpenedTag($string);
				if($openedTag != "")
				{
					$lastOpenedOccurred = mb_strripos ( $openedTag, '<' );
					if($lastOpenedOccurred !== false){
						$openedTagsArr = explode('{#^#}', $openedTag);
						foreach ($openedTagsArr as $tagKey => $tagVal) {
							$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
							$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
							$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
							$tagNameInArr = explode(' ', $tagNameString);
							$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
							if($tagName != "")
								$completeEndTag .= '</'.$tagName.'>';
						}
						$reversedOpenedTagsArr = array_reverse($openedTagsArr);
						foreach ($reversedOpenedTagsArr as $tagKey => $tagVal) {
							$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
							$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
							$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
							$tagNameInArr = explode(' ', $tagNameString);
							$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
							if($tagName != "")
								$cleanedOpenedTag .= '<'.$tagName.'>';
						}
					}
				}
				$completeString = $string.$completeEndTag;

				$endDegreeModified = str_replace ( "Î±", ' <singlet-at-end>Î±</singlet-at-end>', $stringEndingPart );

				if(strip_tags($string) == ""){
					//$line = $string.$stringEndingPart;
					$line = $string.$endDegreeModified;
				} else {
					$reArrangedString = reArrangeTheTags($completeString);
					$modifiedAsteriskPortion = replaceWithCustomTags($reArrangedString, $customTag);
					$line = '<'.$customTag.'>'.$modifiedAsteriskPortion.'</'.$customTag.'>'.$endDegreeModified;
				}
			}
		}

		return $line;
	}

	function structureEndingWithDoubleTFormatString($line, $customTag){
		if($line != ""){
			$degreeFirstOccurrence = mb_strpos ( $line, 'Î²' );
			if($degreeFirstOccurrence !== false){
				// $string = rtrim(trim($line), "Â°");
				$string = mb_substr($line, 0, $degreeFirstOccurrence);
				$stringEndingPart = mb_substr($line, $degreeFirstOccurrence);
				//any text formatting with degree and dot is removed in the end of the string
				$stringEndingPart = strip_tags($stringEndingPart);

				$completeEndTag = "";
				$cleanedOpenedTag = "";
				$openedTag = findTheOpenedTag($string);
				if($openedTag != "")
				{
					$lastOpenedOccurred = mb_strripos ( $openedTag, '<' );
					if($lastOpenedOccurred !== false){
						$openedTagsArr = explode('{#^#}', $openedTag);
						foreach ($openedTagsArr as $tagKey => $tagVal) {
							$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
							$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
							$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
							$tagNameInArr = explode(' ', $tagNameString);
							$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
							if($tagName != "")
								$completeEndTag .= '</'.$tagName.'>';
						}
						$reversedOpenedTagsArr = array_reverse($openedTagsArr);
						foreach ($reversedOpenedTagsArr as $tagKey => $tagVal) {
							$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
							$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
							$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
							$tagNameInArr = explode(' ', $tagNameString);
							$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
							if($tagName != "")
								$cleanedOpenedTag .= '<'.$tagName.'>';
						}
					}
				}
				$completeString = $string.$completeEndTag;

				$endDegreeModified = str_replace ( "Î²", ' <doublet-at-end>Î²</doublet-at-end>', $stringEndingPart );

				if(strip_tags($string) == ""){
					//$line = $string.$stringEndingPart;
					$line = $string.$endDegreeModified;
				} else {
					$reArrangedString = reArrangeTheTags($completeString);
					$modifiedAsteriskPortion = replaceWithCustomTags($reArrangedString, $customTag);
					$line = '<'.$customTag.'>'.$modifiedAsteriskPortion.'</'.$customTag.'>'.$endDegreeModified;
				}
			}
		}

		return $line;
	}

	function convertPatternPortions($line, $sign, $customTag){
		if($line != ""){
			$occurred = mb_strpos ( $line, $sign);
			if($occurred !== false){
				$stringAfterOccurredAsterisk = mb_substr($line, $occurred+1);
				// if($sign == "Î¸")
				// 	$stringAfterOccurredAsterisk = mb_substr($line, $occurred);
				$thetaFirstOccurence = mb_strpos ( $stringAfterOccurredAsterisk, 'Î¸' );
				$asteriskFirstOccurrence = mb_strpos ( $stringAfterOccurredAsterisk, '*' );
				$degreeFirstOccurrence = mb_strpos ( $stringAfterOccurredAsterisk, 'Â°' );
				$macronFirstOccurrence = mb_strpos ( $stringAfterOccurredAsterisk, 'Â¯' );
				$apostropheFirstOccurrence = mb_strpos ( $stringAfterOccurredAsterisk, "'" );
				$fullstopFirstOccurrence = mb_strpos ( $stringAfterOccurredAsterisk, "." );
				$semicolonFirstOccurrence = mb_strpos ( $stringAfterOccurredAsterisk, ";" );

				$firstOccuredSignPosition = "";
				$applicableCustomTag = "";
				if($thetaFirstOccurence !== false){
					$firstOccuredSignPosition = $thetaFirstOccurence;
					$applicableCustomTag = $customTag;
				}
				if($asteriskFirstOccurrence !== false){
					$firstOccuredSignPosition = $asteriskFirstOccurrence;
					$applicableCustomTag = $customTag;
				}
				if($degreeFirstOccurrence !== false){
					if($firstOccuredSignPosition == ""){
						$firstOccuredSignPosition = $degreeFirstOccurrence;
						if($sign == 'Â°')
							$applicableCustomTag = $customTag;
						else{
							// For these kind of symptom: *ThrÃ¤nen und WÃ¤ssern der Augen, Â°auch bloÃ im Freien. the first part needs to be "asterisk" only not "asterisk-degree" thats why below condition given
							$remainingPartOfTheString = mb_substr($stringAfterOccurredAsterisk, $degreeFirstOccurrence+1);
							if($remainingPartOfTheString != "" AND mb_strlen(strip_tags($remainingPartOfTheString)) > 2){
								$applicableCustomTag = $customTag;
							} else {
								$applicableCustomTag = $customTag."-degree";
							}
						}
					} else if($degreeFirstOccurrence < $firstOccuredSignPosition){
						$firstOccuredSignPosition = $degreeFirstOccurrence;
						if($sign == 'Â°')
							$applicableCustomTag = $customTag;
						else{
							// For these kind of symptom: *ThrÃ¤nen und WÃ¤ssern der Augen, Â°auch bloÃ im Freien. the first part needs to be "asterisk" only not "asterisk-degree" thats why below condition given
							$remainingPartOfTheString = mb_substr($stringAfterOccurredAsterisk, $degreeFirstOccurrence+1);
							if($remainingPartOfTheString != "" AND mb_strlen(strip_tags($remainingPartOfTheString)) > 2){
								$applicableCustomTag = $customTag;
							} else {
								$applicableCustomTag = $customTag."-degree";
							}
						}
					}
				}
				if($macronFirstOccurrence !== false){
					if($firstOccuredSignPosition == ""){
						$firstOccuredSignPosition = $macronFirstOccurrence;
						$applicableCustomTag = $customTag;
					} else if($macronFirstOccurrence < $firstOccuredSignPosition){
						$firstOccuredSignPosition = $macronFirstOccurrence;
						$applicableCustomTag = $customTag;
					}
				}
				if($apostropheFirstOccurrence !== false){
					if($firstOccuredSignPosition == ""){
						$firstOccuredSignPosition = $apostropheFirstOccurrence;
						$applicableCustomTag = $customTag;
					} else if($apostropheFirstOccurrence < $firstOccuredSignPosition){
						$firstOccuredSignPosition = $apostropheFirstOccurrence;
						$applicableCustomTag = $customTag;
					}
				}
				if($fullstopFirstOccurrence !== false){
					if($firstOccuredSignPosition == ""){
						$firstOccuredSignPosition = $fullstopFirstOccurrence;
						$applicableCustomTag = $customTag;
					} else if($fullstopFirstOccurrence < $firstOccuredSignPosition){
						$firstOccuredSignPosition = $fullstopFirstOccurrence;
						$applicableCustomTag = $customTag;
					}
				}
				if($semicolonFirstOccurrence !== false){
					if($firstOccuredSignPosition == ""){
						$firstOccuredSignPosition = $semicolonFirstOccurrence;
						$applicableCustomTag = $customTag;
					} else if($semicolonFirstOccurrence < $firstOccuredSignPosition){
						$firstOccuredSignPosition = $semicolonFirstOccurrence;
						$applicableCustomTag = $customTag;
					}
				}
				if($firstOccuredSignPosition != "" AND $applicableCustomTag != ""){
					$asteriskPortion = mb_substr($stringAfterOccurredAsterisk, 0, $firstOccuredSignPosition);
					$completeEndTag = "";
					$cleanedOpenedTag = "";
					$openedTag = findTheOpenedTag($asteriskPortion);
					if($openedTag != "")
					{
						$lastOpenedOccurred = mb_strripos ( $openedTag, '<' );
						if($lastOpenedOccurred !== false){
							$openedTagsArr = explode('{#^#}', $openedTag);
							foreach ($openedTagsArr as $tagKey => $tagVal) {
								$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
								$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
								$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
								$tagNameInArr = explode(' ', $tagNameString);
								$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
								if($tagName != "")
									$completeEndTag .= '</'.$tagName.'>';
							}
							$reversedOpenedTagsArr = array_reverse($openedTagsArr);
							foreach ($reversedOpenedTagsArr as $tagKey => $tagVal) {
								$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
								$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
								$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
								$tagNameInArr = explode(' ', $tagNameString);
								$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
								if($tagName != "")
									$cleanedOpenedTag .= '<'.$tagName.'>';
							}
						}
					}
					
					$modifiedPreAsteriskPortion = str_replace($sign, '{#^#}', mb_substr($line, 0, $occurred+1));
					$completeAsteriskString = $asteriskPortion.$completeEndTag;
					$reArrangedString = reArrangeTheTags($completeAsteriskString);

					//manipulating theta symbol here
					if($sign == "Î¸")
						$reArrangedString = "{{xoYox}} ".$reArrangedString;	
					$modifiedAsteriskPortion = replaceWithCustomTags($reArrangedString, $applicableCustomTag);
					$line = $modifiedPreAsteriskPortion.'<'.$applicableCustomTag.'>'.$modifiedAsteriskPortion.'</'.$applicableCustomTag.'>'.$cleanedOpenedTag.mb_substr($stringAfterOccurredAsterisk, $firstOccuredSignPosition);
					return convertPatternPortions($line, $sign, $customTag);

				} else {
					// Making Full string as applicable sign string(e.g.: asterisk String)
					$asteriskPortion = $stringAfterOccurredAsterisk;
					$completeEndTag = "";
					$cleanedOpenedTag = "";
					$openedTag = findTheOpenedTag($asteriskPortion);
					if($openedTag != "")
					{
						$lastOpenedOccurred = mb_strripos ( $openedTag, '<' );
						if($lastOpenedOccurred !== false){
							$openedTagsArr = explode('{#^#}', $openedTag);
							foreach ($openedTagsArr as $tagKey => $tagVal) {
								$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
								$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
								$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
								$tagNameInArr = explode(' ', $tagNameString);
								$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
								if($tagName != "")
									$completeEndTag .= '</'.$tagName.'>';
							}
							$reversedOpenedTagsArr = array_reverse($openedTagsArr);
							foreach ($reversedOpenedTagsArr as $tagKey => $tagVal) {
								$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
								$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
								$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
								$tagNameInArr = explode(' ', $tagNameString);
								$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
								if($tagName != "")
									$cleanedOpenedTag .= '<'.$tagName.'>';
							}
						}
					}
					$completeAsteriskString = $asteriskPortion.$completeEndTag;
					if(strip_tags($asteriskPortion) == ""){
						$line = mb_substr($line, 0, $occurred+1);
					} else {
						$reArrangedString = reArrangeTheTags($completeAsteriskString);
						$modifiedAsteriskPortion = replaceWithCustomTags($reArrangedString, $customTag);
						$line = mb_substr($line, 0, $occurred+1).'<'.$customTag.'>'.$modifiedAsteriskPortion.'</'.$customTag.'>';
					}
				}
			}
		}
		if($sign == "Î¸"){
			$line = str_replace('{{xoYox}}', $sign, $line);
			$line = str_replace('{#^#}', "", $line);
		}else{
			$line = str_replace('{#^#}', $sign, $line);
		}
		
		return $line;
	}

	function replaceWithCustomTags($reArrangedString, $customTag){
		$modifiedString = $reArrangedString;

		if($modifiedString != "" AND $customTag != ""){
			// removing black font color <clr style="color: black;"> which is appearing somethimes when copying string from translate.google.co.in
			$blackFontCnt = 0; 
			do { 
				$modifiedString = preg_replace("#<clr style=\"color: black;\">(.+?)</clr>#is", "$1", $modifiedString, -1, $blackFontCnt ); 
			} while ( $blackFontCnt > 0 );


			// Sperrschrift bold conversion start
			$sperrschriftBoldCntV1 = 0;
			do { 
				$modifiedString = preg_replace("#<strong>\s*<ss>(.+?)</ss>\s*</strong>#is", "<".$customTag."-ssbold>$1</".$customTag."-ssbold>", $modifiedString, -1, $sperrschriftBoldCntV1 ); 
			} while ( $sperrschriftBoldCntV1 > 0 );

			$sperrschriftBoldCntV2 = 0;
			do { 
				$modifiedString = preg_replace("#<ss>\s*<strong>(.+?)</strong>\s*</ss>#is", "<".$customTag."-ssbold>$1</".$customTag."-ssbold>", $modifiedString, -1, $sperrschriftBoldCntV2 ); 
			} while ( $sperrschriftBoldCntV2 > 0 );

			$sperrschriftBoldCntV3 = 0;
			do { 
				$modifiedString = preg_replace("#<em>\s*<".$customTag."-ssbold>(.+?)</".$customTag."-ssbold>\s*</em>#is", "<".$customTag."-ssembold>$1</".$customTag."-ssembold>", $modifiedString, -1, $sperrschriftBoldCntV3 ); 
			} while ( $sperrschriftBoldCntV3 > 0 );
			$sperrschriftBoldCntV4 = 0;
			do { 
				$modifiedString = preg_replace("#<".$customTag."-ssbold>\s*<em>(.+?)</em>\s*</".$customTag."-ssbold>#is", "<".$customTag."-ssembold>$1</".$customTag."-ssembold>", $modifiedString, -1, $sperrschriftBoldCntV4 ); 
			} while ( $sperrschriftBoldCntV4 > 0 );
			// Sperrschrift bold conversion end



			// Kursiv bold conversion start
			$kursivBoldCntV1 = 0; 
			do { 
				$modifiedString = preg_replace("#<strong>\s*<em>(.+?)</em>\s*</strong>#is", "<".$customTag."-embold>$1</".$customTag."-embold>", $modifiedString, -1, $kursivBoldCntV1 ); 
			} while ( $kursivBoldCntV1 > 0 );
			$kursivBoldCntV2 = 0; 
			do { 
				$modifiedString = preg_replace("#<em>\s*<strong>(.+?)</strong>\s*</em>#is", "<".$customTag."-embold>$1</".$customTag."-embold>", $modifiedString, -1, $kursivBoldCntV2 ); 
			} while ( $kursivBoldCntV2 > 0 );
			$kursivBoldCntV3 = 0; 
			do { 
				$modifiedString = preg_replace("#<ss>\s*<".$customTag."-embold>(.+?)</".$customTag."-embold>\s*</ss>#is", "<".$customTag."-ssembold>$1</".$customTag."-ssembold>", $modifiedString, -1, $kursivBoldCntV3 ); 
			} while ( $kursivBoldCntV3 > 0 );
			$kursivBoldCntV4 = 0; 
			do { 
				$modifiedString = preg_replace("#<".$customTag."-embold>\s*<ss>(.+?)</ss>\s*</".$customTag."-embold>#is", "<".$customTag."-ssembold>$1</".$customTag."-ssembold>", $modifiedString, -1, $kursivBoldCntV4 ); 
			} while ( $kursivBoldCntV4 > 0 );
			// Kursiv bold conversion end

			if($customTag != "asterisk-degree"){
				$modifiedString = findAndReplaceStrongTagsIncludingGross($modifiedString, $customTag);
			}

			$modifiedString = findAndReplaceStrongTags($modifiedString, $customTag);

			// Before getting (* and Â°)Sperrschrift and (* and Â°)Kursiv replace the unwanted formats so that they do not get converted
			$ssemCntV1 = 0; 
			do { 
				$modifiedString = preg_replace("#<ss>\s*<em>(.+?)</em>\s*</ss>#is", "<".$customTag."-ssem>$1</".$customTag."-ssem>", $modifiedString, -1, $ssemCntV1 ); 
			} while ( $ssemCntV1 > 0 );
			$ssemCntV2 = 0;   
			do { 
				$modifiedString = preg_replace("#<em>\s*<ss>(.+?)</ss>\s*</em>#is", "<".$customTag."-ssem>$1</".$customTag."-ssem>", $modifiedString, -1, $ssemCntV2 ); 
			} while ( $ssemCntV2 > 0 );

			// Get the  (* and Â°)Sperrschrift
			$ssCntV1 = 0; 
			do { 
				$modifiedString = preg_replace("#<ss>(.+?)</ss>#is", "<".$customTag."-ss>$1</".$customTag."-ss>", $modifiedString, -1, $ssCntV1 ); 
			} while ( $ssCntV1 > 0 );
			// Get the  (* and Â°)Kursiv
			$emCntV1 = 0; 
			do { 
				$modifiedString = preg_replace("#<em>(.+?)</em>#is", "<".$customTag."-em>$1</".$customTag."-em>", $modifiedString, -1, $emCntV1 ); 
			} while ( $emCntV1 > 0 );

			// echo "<br>".htmlentities($modifiedString)."<-- BEFORE Gross call666<br><br>";
			$modifiedString = structureNormalPortions($modifiedString, $customTag);
			// echo "<br>".htmlentities($modifiedString)."<-- AFTER 2nd Gross call666<br><br>";

		}
		return $modifiedString;
	}

	function structureNormalPortions($string, $customTag, $modifiedPortion = NULL){
		if($string != ""){
			$remainingString = "";
			mb_preg_match_all("#<[^/>]*>#i", $string, $matches, PREG_OFFSET_CAPTURE);
			if(isset($matches[0]) AND !empty($matches[0])){
				$firstElement = reset($matches[0]);
				$firstOpenedTag = $firstElement[0];
				$firstOpenedTagPosition = $firstElement[1];
				$openedTagNameString = trim ( str_replace ( "</", '', $firstOpenedTag ) );	
				$openedTagNameString = trim ( str_replace ( "<", '', $openedTagNameString ) );	
				$openedTagNameString = trim ( str_replace ( ">", '', $openedTagNameString ) );
				$openedTagNameInArr = explode(' ', $openedTagNameString);
				$openedTagName = (isset($openedTagNameInArr[0]) AND $openedTagNameInArr[0] != "") ? $openedTagNameInArr[0] : "";
				if($openedTagName != ""){
					$firstOpenedTagsEnding = '</'.$openedTagName.'>';
					$occurrenceToEndOfTheString = mb_substr($string, $firstOpenedTagPosition);
					$beginingToOccurrenceString = mb_substr($string, 0, $firstOpenedTagPosition);
					
					$modifiedStringPart = $beginingToOccurrenceString;
					if($beginingToOccurrenceString != ""){
						$modifiedStringPart = structureTheGrossPart($beginingToOccurrenceString, $customTag);
					}
					// Modified begining part
					$beginingToOccurrenceString = $modifiedStringPart;
					// find first opened tags ending position in $occurrenceToEndOfTheString
					
					$firstOpenedTagsEndingPosition = mb_strpos ( $occurrenceToEndOfTheString, $firstOpenedTagsEnding );	
					if($firstOpenedTagsEndingPosition !== false) {
						$stringTillTheClosingTag = mb_substr ( $occurrenceToEndOfTheString, 0, $firstOpenedTagsEndingPosition+strlen($firstOpenedTagsEnding));
						// Remaining string
						$remainingString = mb_substr ( $occurrenceToEndOfTheString, $firstOpenedTagsEndingPosition+strlen($firstOpenedTagsEnding));
						
						// Modified first portion
						// if($beginingToOccurrenceString == "" AND $stringTillTheClosingTag != "")
						// 	$stringTillTheClosingTag = structureTheGrossPart($stringTillTheClosingTag, $customTag);
						$modifiedPortion = $modifiedPortion.$beginingToOccurrenceString.$stringTillTheClosingTag;
						
						if($remainingString != "")
							return structureNormalPortions($remainingString, $customTag, $modifiedPortion);
						else
							$string = $modifiedPortion;	

					} else {
						$string = $modifiedPortion.$beginingToOccurrenceString.$occurrenceToEndOfTheString;
					}
				} else {
					$modifiedStringPart = structureTheGrossPart($string, $customTag);
					// $string = $modifiedPortion."<".$customTag."-normal>".$string."</".$customTag."-normal>";	
					$string = $modifiedPortion.$modifiedStringPart;	
				}
			} else {
				$modifiedStringPart = structureTheGrossPart($string, $customTag);
				// $string = $modifiedPortion."<".$customTag."-normal>".$string."</".$customTag."-normal>";
				$string = $modifiedPortion.$modifiedStringPart;	
			}
		}
		return $string;
	}

	function structureTheGrossPart($string, $customTag){
		$modifiedStringPart = $string;
		if($string != ""){
			$cleanBeginingToOccurrenceString = strip_tags($string);
			if($cleanBeginingToOccurrenceString == mb_strtoupper($cleanBeginingToOccurrenceString, 'UTF-8')){
				if(hasLetters($string) == 1)
					$modifiedStringPart = '<'.$customTag.'-normalgross>'.$string.'</'.$customTag.'-normalgross>';
				else
					$modifiedStringPart = '<'.$customTag.'-normal>'.$string.'</'.$customTag.'-normal>';
			}
			else {
				// Finding the uppercase words
				// preg_match_all("/[[:upper:]]+/u", $string, $capsMatches, PREG_OFFSET_CAPTURE);
				// Below regular expression won't detect the last word of the string as uppercas even though it is a upperacse word. It needs anything non word after the word to detect. So adding the default delemeter {#^#} at the end of the eximining string just to detect all the uppercase word correctly.
				// Also the below regex patters is to detect Uppercase words which are togather and also which are single 
				$stringModified = $string."{#^#}";
				// mb_preg_match_all("/\\b(?=[A-Z0-9])[A-Z0-9 ]+(?=\\W)/u", $stringModified, $capsMatches, PREG_OFFSET_CAPTURE);
				mb_preg_match_all("/\\b(?=[[:upper:]\d])[[:upper:]\d ]+(?=\\W)/u", $stringModified, $capsMatches, PREG_OFFSET_CAPTURE);
				if(isset($capsMatches[0]) AND !empty($capsMatches[0])){
					$constructedString = "";
					$occurredPosition = "";
					$occurredString = "";
					$grossWords = array();
					foreach ($capsMatches[0] as $key => $val) {
						$occurredPositionInCheck = $capsMatches[0][$key][1];
						$occurredStringInCheck = $capsMatches[0][$key][0];
						$isAcceptableGross = 0;
						// If it finds multiple words than making $isAcceptableGross = 1
						$occurredStringWordArr = explode(' ', $occurredStringInCheck);
						if(count($occurredStringWordArr) == 1){
							if(strlen($occurredStringWordArr[0]) > 2)
								$isAcceptableGross = 1;
						}
						if(count($occurredStringWordArr) > 1){
							if(strlen($occurredStringWordArr[0]) > 1 OR strlen($occurredStringWordArr[1]) > 1)
								$isAcceptableGross = 1;
						}
						// Finding the Left and right hand side words of the occured word 
						$stringBeforeTheWord = mb_substr ( $string, 0, $occurredPositionInCheck );
						$stringAfterTheWord = mb_substr ( $string, $occurredPositionInCheck+mb_strlen($occurredStringInCheck) );
						if(isset($stringBeforeTheWord) AND $stringBeforeTheWord != "") {
							$stringBeforeTheWord = strip_tags($stringBeforeTheWord);
							$arrayOfwordsBeforeTheWordString = explode(' ', $stringBeforeTheWord);
						}

						if(isset($stringAfterTheWord) AND $stringAfterTheWord != "") {
							$stringAfterTheWord = strip_tags($stringAfterTheWord);
							$arrayOfwordsAfterTheWordString = explode(' ', $stringAfterTheWord);
						}

						$leftSideWord = (isset($arrayOfwordsBeforeTheWordString) AND !empty($arrayOfwordsBeforeTheWordString)) ? end($arrayOfwordsBeforeTheWordString) : ""; 
						$rightSideWord = (isset($arrayOfwordsAfterTheWordString) AND !empty($arrayOfwordsAfterTheWordString)) ? current($arrayOfwordsAfterTheWordString) : ""; 
						if($leftSideWord != ""){
							if(hasLetters($leftSideWord) == 1){
								if($leftSideWord == mb_strtoupper($leftSideWord, 'UTF-8'))
									$isAcceptableGross = 1;
							}
						}
						if($rightSideWord != ""){
							if(hasLetters($rightSideWord) == 1){
								if($rightSideWord == mb_strtoupper($rightSideWord, 'UTF-8'))
									$isAcceptableGross = 1;
							}
						}

						if($isAcceptableGross == 1){
							$grossWords[] = $val;
						}
					}

					if(!empty($grossWords)) {
						foreach ($grossWords as $key => $val) {
							$occurredPosition = $capsMatches[0][$key][1];
							$occurredString = $capsMatches[0][$key][0];

							if($key == 0){
								if($occurredPosition == 0)
									$constructedString .= '<'.$customTag.'-normalgross>'.mb_substr ( $string, $occurredPosition, $occurredPosition+mb_strlen($occurredString) ).'</'.$customTag.'-normalgross>';
								else
									$constructedString .= '<'.$customTag.'-normal>'.mb_substr ( $string, 0, $occurredPosition ).'</'.$customTag.'-normal><'.$customTag.'-normalgross>'.mb_substr ( $string, $occurredPosition, mb_strlen($occurredString) ).'</'.$customTag.'-normalgross>';
							} else {
								$previousKey = ($key != 0) ? $key - 1 : 0;
								$previousOccurredPosition = (isset($capsMatches[0][$previousKey][1]) AND $capsMatches[0][$previousKey][1] != "") ? $capsMatches[0][$previousKey][1] : 0;
								$previousOccurredString = (isset($capsMatches[0][$previousKey][0]) AND $capsMatches[0][$previousKey][0] != "") ? $capsMatches[0][$previousKey][0] : "";

								$getStringInBetween = mb_substr ( $string, 0, $occurredPosition );
								$getStringInBetween = mb_substr ( $getStringInBetween, $previousOccurredPosition+mb_strlen($previousOccurredString) );
								$getStringInBetween = ($getStringInBetween != "") ? rtrim($getStringInBetween) : '';
								$constructedString .= '<'.$customTag.'-normal>'.$getStringInBetween.'</'.$customTag.'-normal><'.$customTag.'-normalgross> '.mb_substr ( $string, $occurredPosition, mb_strlen($occurredString) ).'</'.$customTag.'-normalgross>';
							}
						}
					}
						
					if($occurredPosition >= 0 AND $occurredString != "" AND $constructedString != ""){
						$modifiedStringPart = $constructedString.'<'.$customTag.'-normal>'.mb_substr ( $string, $occurredPosition+mb_strlen($occurredString) ).'</'.$customTag.'-normal>';
						$modifiedStringPart = preg_replace("#<".$customTag."-normalgross>\s*</".$customTag."-normalgross>#is", "", $modifiedStringPart ); 
						$modifiedStringPart = preg_replace("#<".$customTag."-normal>\s*</".$customTag."-normal>#is", "", $modifiedStringPart );
					} else {
						$modifiedStringPart = '<'.$customTag.'-normal>'.$string.'</'.$customTag.'-normal>';
					}
				} else {
					$modifiedStringPart = '<'.$customTag.'-normal>'.$string.'</'.$customTag.'-normal>';
				}
			}
		}
		return $modifiedStringPart;
	}

	function findAndReplaceStrongTags($string, $customTag){
		if($string != ""){
			$firstEndingTagOccurred = mb_strpos ( $string, '<strong>' );
			if($firstEndingTagOccurred !== false){
				$firstEndingTagClosingSignPosition = mb_strpos ( $string, '</strong>' );
				if($firstEndingTagClosingSignPosition !== false){
					$strongStringPart = mb_substr ( $string, $firstEndingTagOccurred+strlen('<strong>'));
					$endingPositionInNewString = mb_strpos ( $strongStringPart, '</strong>' );
					$strongStringPart = mb_substr ( $strongStringPart, 0, $endingPositionInNewString);
					if($strongStringPart != ""){
						
						$completeEndTag = "";
						$cleanedOpenedTag = "";
						$stringBeforeOccurance = mb_substr($string, 0, $firstEndingTagOccurred);
						if($stringBeforeOccurance != ""){
							$openedTag = findTheOpenedTag($stringBeforeOccurance);
							if($openedTag != "")
							{
								$lastOpenedOccurred = mb_strripos ( $openedTag, '<' );
								if($lastOpenedOccurred !== false){
									$openedTagsArr = explode('{#^#}', $openedTag);
									foreach ($openedTagsArr as $tagKey => $tagVal) {
										$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
										$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
										$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
										$tagNameInArr = explode(' ', $tagNameString);
										$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
										if($tagName != "")
											$completeEndTag .= '</'.$tagName.'>';
									}
									$reversedOpenedTagsArr = array_reverse($openedTagsArr);
									foreach ($reversedOpenedTagsArr as $tagKey => $tagVal) {
										$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
										$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
										$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
										$tagNameInArr = explode(' ', $tagNameString);
										$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
										if($tagName != "")
											$cleanedOpenedTag .= '<'.$tagName.'>';
										// if($tagNameString != "")
										// 	$cleanedOpenedTag .= '<'.$tagNameString.'>';
									}
								}
							}
						}

						$modifiedStringPart = '<'.$customTag.'-bold>'.$strongStringPart.'</'.$customTag.'-bold>';
						$string = mb_substr($string, 0, $firstEndingTagOccurred).$completeEndTag.$modifiedStringPart.$cleanedOpenedTag.mb_substr($string, $firstEndingTagClosingSignPosition+strlen('</strong>'));
						$checkStillStrongTagOccurred = mb_strpos ( $string, '<strong>' );
						if($checkStillStrongTagOccurred !== false)
							return findAndReplaceStrongTags($string, $customTag);
					}
				}
			}
		}
		return $string;
	}

	function findAndReplaceStrongTagsIncludingGross($string, $customTag){
		if($string != ""){
			$firstEndingTagOccurred = mb_strpos ( $string, '<strong>' );
			if($firstEndingTagOccurred !== false){
				$firstEndingTagClosingSignPosition = mb_strpos ( $string, '</strong>' );
				if($firstEndingTagClosingSignPosition !== false){
					$strongStringPart = mb_substr ( $string, $firstEndingTagOccurred+mb_strlen('<strong>'));
					$endingPositionInNewString = mb_strpos ( $strongStringPart, '</strong>' );
					$strongStringPart = mb_substr ( $strongStringPart, 0, $endingPositionInNewString);
					if($strongStringPart != ""){
						$modifiedStringPart = $strongStringPart;
						$cleanStrongStringPart = strip_tags($strongStringPart);
						if($cleanStrongStringPart == mb_strtoupper($cleanStrongStringPart, 'UTF-8')){
							if(hasLetters($strongStringPart) == 1)
								$modifiedStringPart = '<'.$customTag.'-grossbold>'.$strongStringPart.'</'.$customTag.'-grossbold>';
							else
								$modifiedStringPart = '<'.$customTag.'-bold>'.$strongStringPart.'</'.$customTag.'-bold>';
						}
						else {
							// Finding the uppercase words
							// preg_match_all("/[[:upper:]]+/u", $strongStringPart, $matches, PREG_OFFSET_CAPTURE);
							// Below regular expression won't detect the last word of the string as uppercas even though it is a upperacse word. It needs anything non word after the word to detect. So adding the default delemeter {#^#} at the end of the eximining string just to detect all the uppercase word correctly.
							// Also the below regex patters is to detect Uppercase words which are togather and also which are single 
							$strongStringPartModified = $strongStringPart."{#^#}";
							// mb_preg_match_all("/\\b(?=[A-Z0-9])[A-Z0-9 ]+(?=\\W)/u", $strongStringPartModified, $matches, PREG_OFFSET_CAPTURE);
							mb_preg_match_all("/\\b(?=[[:upper:]\d])[[:upper:]\d ]+(?=\\W)/u", $strongStringPartModified, $matches, PREG_OFFSET_CAPTURE);
							if(isset($matches[0]) AND !empty($matches[0])){
								$constructedString = "";
								$occurredPosition = "";
								$occurredString = "";
								// $uppercaseWordsArr = array();
								$grossWords = array();
								foreach ($matches[0] as $key => $val) {
									$occurredPositionInCheck = $matches[0][$key][1];
									$occurredStringInCheck = $matches[0][$key][0];
									$isAcceptableGross = 0;
									// If it finds multiple words than making $isAcceptableGross = 1
									$occurredStringWordArr = explode(' ', trim($occurredStringInCheck));
									if(count($occurredStringWordArr) == 1){
										if(strlen($occurredStringWordArr[0]) > 2)
											$isAcceptableGross = 1;
									}
									if(count($occurredStringWordArr) > 1){
										if(strlen($occurredStringWordArr[0]) > 1 OR strlen($occurredStringWordArr[1]) > 1)
											$isAcceptableGross = 1;
									}
									// Finding the Left and right hand side words of the occured word 
									$stringBeforeTheWord = mb_substr ( $strongStringPart, 0, $occurredPositionInCheck );
									$stringAfterTheWord = mb_substr ( $strongStringPart, $occurredPositionInCheck+mb_strlen($occurredStringInCheck) );
									if(isset($stringBeforeTheWord) AND $stringBeforeTheWord != "") {
										$stringBeforeTheWord = strip_tags($stringBeforeTheWord);
										$arrayOfwordsBeforeTheWordString = explode(' ', $stringBeforeTheWord);
									}

									if(isset($stringAfterTheWord) AND $stringAfterTheWord != "") {
										$stringAfterTheWord = strip_tags($stringAfterTheWord);
										$arrayOfwordsAfterTheWordString = explode(' ', $stringAfterTheWord);
									}

									$leftSideWord = (isset($arrayOfwordsBeforeTheWordString) AND !empty($arrayOfwordsBeforeTheWordString)) ? end($arrayOfwordsBeforeTheWordString) : ""; 
									$rightSideWord = (isset($arrayOfwordsAfterTheWordString) AND !empty($arrayOfwordsAfterTheWordString)) ? current($arrayOfwordsAfterTheWordString) : ""; 
									if($leftSideWord != ""){
										if(hasLetters($leftSideWord) == 1){
											if($leftSideWord == mb_strtoupper($leftSideWord, 'UTF-8'))
												$isAcceptableGross = 1;
										}
									}
									if($rightSideWord != ""){
										if(hasLetters($rightSideWord) == 1){
											if($rightSideWord == mb_strtoupper($rightSideWord, 'UTF-8'))
												$isAcceptableGross = 1;
										}
									}

									if($isAcceptableGross == 1){
										$grossWords[] = $val;
									}
								}

								if(!empty($grossWords)){
									foreach ($grossWords as $key => $val) {
										$occurredPosition = $matches[0][$key][1];
										$occurredString = $matches[0][$key][0];

										if($key == 0){
											if($occurredPosition == 0)
												$constructedString .= '<'.$customTag.'-grossbold>'.mb_substr ( $strongStringPart, $occurredPosition, $occurredPosition+mb_strlen($occurredString) ).'</'.$customTag.'-grossbold>';
											else
												$constructedString .= '<'.$customTag.'-bold>'.mb_substr ( $strongStringPart, 0, $occurredPosition ).'</'.$customTag.'-bold><'.$customTag.'-grossbold>'.mb_substr ( $strongStringPart, $occurredPosition, mb_strlen($occurredString) ).'</'.$customTag.'-grossbold>';
										} else {
											$previousKey = ($key != 0) ? $key - 1 : 0;
											$previousOccurredPosition = (isset($matches[0][$previousKey][1]) AND $matches[0][$previousKey][1] != "") ? $matches[0][$previousKey][1] : 0;
											$previousOccurredString = (isset($matches[0][$previousKey][0]) AND $matches[0][$previousKey][0] != "") ? $matches[0][$previousKey][0] : "";

											$getStringInBetween = mb_substr ( $strongStringPart, 0, $occurredPosition );
											$getStringInBetween = mb_substr ( $getStringInBetween, $previousOccurredPosition+mb_strlen($previousOccurredString) );
											$getStringInBetween = ($getStringInBetween != "") ? rtrim($getStringInBetween) : '';
											$constructedString .= '<'.$customTag.'-bold>'.$getStringInBetween.'</'.$customTag.'-bold><'.$customTag.'-grossbold> '.mb_substr ( $strongStringPart, $occurredPosition, mb_strlen($occurredString) ).'</'.$customTag.'-grossbold>';
										}
									}
								}
									
								if($occurredPosition >= 0 AND $occurredString != "" AND $constructedString != ""){
									$modifiedStringPart = $constructedString.'<'.$customTag.'-bold>'.mb_substr ( $strongStringPart, $occurredPosition+mb_strlen($occurredString) ).'</'.$customTag.'-bold>';
									$modifiedStringPart = preg_replace("#<".$customTag."-grossbold>\s*</".$customTag."-grossbold>#is", "", $modifiedStringPart ); 
									$modifiedStringPart = preg_replace("#<".$customTag."-bold>\s*</".$customTag."-bold>#is", "", $modifiedStringPart );
								} else {
									$modifiedStringPart = '<'.$customTag.'-bold>'.$strongStringPart.'</'.$customTag.'-bold>';
								}
							} else {
								$modifiedStringPart = '<'.$customTag.'-bold>'.$strongStringPart.'</'.$customTag.'-bold>';
							}
						}

						$completeEndTag = "";
						$cleanedOpenedTag = "";
						$stringBeforeOccurance = mb_substr($string, 0, $firstEndingTagOccurred);
						if($stringBeforeOccurance != ""){
							$openedTag = findTheOpenedTag($stringBeforeOccurance);
							if($openedTag != "")
							{
								$lastOpenedOccurred = mb_strripos ( $openedTag, '<' );
								if($lastOpenedOccurred !== false){
									$openedTagsArr = explode('{#^#}', $openedTag);
									foreach ($openedTagsArr as $tagKey => $tagVal) {
										$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
										$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
										$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
										$tagNameInArr = explode(' ', $tagNameString);
										$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
										if($tagName != "")
											$completeEndTag .= '</'.$tagName.'>';
									}
									$reversedOpenedTagsArr = array_reverse($openedTagsArr);
									foreach ($reversedOpenedTagsArr as $tagKey => $tagVal) {
										$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
										$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
										$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
										$tagNameInArr = explode(' ', $tagNameString);
										$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
										if($tagName != "")
											$cleanedOpenedTag .= '<'.$tagName.'>';
										// if($tagNameString != "")
										// 	$cleanedOpenedTag .= '<'.$tagNameString.'>';
									}
								}
							}
						}

						$string = mb_substr($string, 0, $firstEndingTagOccurred).$completeEndTag.$modifiedStringPart.$cleanedOpenedTag.mb_substr($string, $firstEndingTagClosingSignPosition+mb_strlen('</strong>'));
						$checkStillStrongTagOccurred = mb_strpos ( $string, '<strong>' );
						if($checkStillStrongTagOccurred !== false)
							return findAndReplaceStrongTagsIncludingGross($string, $customTag);
					}
				}
			}
		}
		return $string;
	}

	function reArrangeTheTags($line, $modifiedLine = NULL){
		if($line != ""){
			mb_preg_match_all("#<[^/>]*>#i", $line, $matches, PREG_OFFSET_CAPTURE);
			if(isset($matches[0]) AND !empty($matches[0])){
				$lastElement = end($matches[0]);
				$lastOpenedTag = $lastElement[0];
				$lastOpenedTagPosition = $lastElement[1];
				$openedTagNameString = trim ( str_replace ( "</", '', $lastOpenedTag ) );	
				$openedTagNameString = trim ( str_replace ( "<", '', $openedTagNameString ) );	
				$openedTagNameString = trim ( str_replace ( ">", '', $openedTagNameString ) );
				$openedTagNameInArr = explode(' ', $openedTagNameString);
				$openedTagName = (isset($openedTagNameInArr[0]) AND $openedTagNameInArr[0] != "") ? $openedTagNameInArr[0] : "";
				if($openedTagName != ""){
					$lastOpenedTagsEnding = '</'.$openedTagName.'>';
					$remainingOccurrenceToEndingString = mb_substr($line, $lastOpenedTagPosition);
					$remainingBeginingToOccurrenceString = mb_substr($line, 0, $lastOpenedTagPosition);
					$completeEndTag = "";
					$cleanedOpenedTag = "";
					$checkRemainingBeginingToOccurrenceStringWithoutTags = strip_tags($remainingBeginingToOccurrenceString);
					if($remainingBeginingToOccurrenceString != "" AND $checkRemainingBeginingToOccurrenceStringWithoutTags != ""){
						$openedTag = findTheOpenedTag($remainingBeginingToOccurrenceString);
						if($openedTag != "")
						{
							$lastOpenedOccurred = mb_strripos ( $openedTag, '<' );
							if($lastOpenedOccurred !== false){
								$openedTagsArr = explode('{#^#}', $openedTag);
								foreach ($openedTagsArr as $tagKey => $tagVal) {
									$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
									$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
									$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
									$tagNameInArr = explode(' ', $tagNameString);
									$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
									if($tagName != "")
										$completeEndTag .= '</'.$tagName.'>';
								}
								$reversedOpenedTagsArr = array_reverse($openedTagsArr);
								foreach ($reversedOpenedTagsArr as $tagKey => $tagVal) {
									$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
									$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
									$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
									$tagNameInArr = explode(' ', $tagNameString);
									$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
									if($tagName != "")
										$cleanedOpenedTag .= '<'.$tagName.'>';
									// if($tagNameString != "")
									// 	$cleanedOpenedTag .= '<'.$tagNameString.'>';
								}
								
								// $cleanedOpenedTag = str_replace('{#^#}', '', $openedTag);
								$occurred = mb_strpos ( $remainingOccurrenceToEndingString, $lastOpenedTagsEnding );
								if($occurred !== false){
									$modifiedRemainingBeginingToOccurrenceString = $remainingBeginingToOccurrenceString.$completeEndTag;
									if(trim($completeEndTag) == trim(mb_substr($remainingOccurrenceToEndingString, $occurred+mb_strlen($lastOpenedTagsEnding)))){
										$modifiedRemainingOccurrenceToEndingString = $cleanedOpenedTag.mb_substr($remainingOccurrenceToEndingString, 0, $occurred+mb_strlen($lastOpenedTagsEnding)).$completeEndTag;
									} else {
										$isEndingOccurredInOneplace = mb_strpos ( mb_substr($remainingOccurrenceToEndingString, $occurred+mb_strlen($lastOpenedTagsEnding)), $completeEndTag );
										if($isEndingOccurredInOneplace === false){
											$structuredMultiTagEndingPart = structureMultiTagEndingPart(mb_substr($remainingOccurrenceToEndingString, $occurred+mb_strlen($lastOpenedTagsEnding)));

											$modifiedRemainingOccurrenceToEndingString = $cleanedOpenedTag.mb_substr($remainingOccurrenceToEndingString, 0, $occurred+mb_strlen($lastOpenedTagsEnding)).$completeEndTag.$structuredMultiTagEndingPart;
										} else {
											$modifiedRemainingOccurrenceToEndingString = $cleanedOpenedTag.mb_substr($remainingOccurrenceToEndingString, 0, $occurred+mb_strlen($lastOpenedTagsEnding)).$completeEndTag.$cleanedOpenedTag.mb_substr($remainingOccurrenceToEndingString, $occurred+mb_strlen($lastOpenedTagsEnding));
										}
										
									}
									$openedTagsInEndingString = "";

									if($openedTagsInEndingString != ""){
										$modifiedRemainingBeginingToOccurrenceString = removeBlankTags($modifiedRemainingBeginingToOccurrenceString);
										$modifiedRemainingOccurrenceToEndingString = removeBlankTags($modifiedRemainingOccurrenceToEndingString);
										$completeString = $modifiedRemainingBeginingToOccurrenceString.$modifiedRemainingOccurrenceToEndingString;
										$checkStringWithoutTags = strip_tags($completeString);
										if($checkStringWithoutTags != "")
											return reArrangeTheTags($completeString);
										else {
											if($modifiedLine != "")
												$line = $line.$modifiedLine;
										}
									} else {
										$modifiedRemainingBeginingToOccurrenceString = removeBlankTags($modifiedRemainingBeginingToOccurrenceString);
										$modifiedRemainingOccurrenceToEndingString = removeBlankTags($modifiedRemainingOccurrenceToEndingString);
										$modifiedLine = $modifiedRemainingOccurrenceToEndingString.$modifiedLine;
										$checkStringWithoutTags = strip_tags($modifiedRemainingBeginingToOccurrenceString);
										if($checkStringWithoutTags != "")
											return reArrangeTheTags($modifiedRemainingBeginingToOccurrenceString, $modifiedLine);
										else {
											if($modifiedLine != "")
												$line = $line.$modifiedLine;
										}
									}
								} else {
									if($modifiedLine != "")
										$line = $line.$modifiedLine;
								}
							} else {
								if($modifiedLine != "")
									$line = $line.$modifiedLine;
							}
						}else {
							if($modifiedLine != "")
								$line = $line.$modifiedLine;
						}
					} else {
						if($modifiedLine != "")
							$line = $line.$modifiedLine;
					}
				} else {
					if($modifiedLine != "")
						$line = $line.$modifiedLine;
				}

			} else {
				if($modifiedLine != "")
					$line = $line.$modifiedLine;
			}
		}

		return $line;
	}

	function structureMultiTagEndingPart($string = NULL, $preaparedString = NULL){
		if($string != ""){
			$firstEndingTagOccurred = mb_strpos ( $string, '</' );
			if($firstEndingTagOccurred !== false){
				$firstEndingTagClosingSignPosition = mb_strpos ( $string, '>' );
				if($firstEndingTagClosingSignPosition !== false){

					$currentCompleteTag = mb_substr ( $string, $firstEndingTagOccurred, $firstEndingTagClosingSignPosition+1 );
					$currentTagNameString = trim ( str_replace ( "</", '', $currentCompleteTag ) );	
					$currentTagNameString = trim ( str_replace ( "<", '', $currentTagNameString ) );	
					$currentTagNameString = trim ( str_replace ( ">", '', $currentTagNameString ) );	
					$currentTagNameInArr = explode(' ', $currentTagNameString);
					$currentTagName = (isset($currentTagNameInArr[0]) AND $currentTagNameInArr[0] != "") ? $currentTagNameInArr[0] : "";
					$currentOpenTag = ($currentTagName != "") ? '<'.$currentTagName.'>' : "";

					$getAfterWardString = mb_substr ( $string, $firstEndingTagClosingSignPosition+1 );
					$cleanedOpenedTag = "";
					$completeEndTag = "";
					$endTags = findTheEndingTags($getAfterWardString);

					if($endTags != "")
					{
						$endTagsArr = explode('{#^#}', $endTags);
						foreach ($endTagsArr as $tagKey => $tagVal) {
							$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
							$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
							$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
							$tagNameInArr = explode(' ', $tagNameString);
							$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
							if($tagName != "")
								$completeEndTag .= '</'.$tagName.'>';
						}
						$reversedEndTagsArr = array_reverse($endTagsArr);
						foreach ($reversedEndTagsArr as $tagKey => $tagVal) {
							$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
							$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
							$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
							$tagNameInArr = explode(' ', $tagNameString);
							$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
							if($tagName != "")
								$cleanedOpenedTag .= '<'.$tagName.'>';
						}
					}
					
					$modifiedPortion = $cleanedOpenedTag.$currentOpenTag.mb_substr ( $string, 0, $firstEndingTagClosingSignPosition+1 ).$completeEndTag;
					
					$preaparedString = $preaparedString.$modifiedPortion;
					$getAfterWardString = mb_substr ( $string, $firstEndingTagClosingSignPosition+1 );
					return structureMultiTagEndingPart($getAfterWardString, $preaparedString);

				} else {
					if($preaparedString != "")
						$string = $preaparedString.$string;
				}
			} else {
				if($preaparedString != "")
					$string = $preaparedString.$string;
			}
		} else {
			if($preaparedString != "")
				$string = $preaparedString.$string;
		}

		return $string;
	}

	function findTheEndingTags($string, $endingTags = NULL){
		if($string != ""){
			$firstEndingTagOccurred = mb_strpos ( $string, '</' );
			if($firstEndingTagOccurred !== false){
				// $getAfterWardString = mb_substr ( $string, $firstEndingTagOccurred );
				$firstEndingTagClosingSignPosition = mb_strripos ( $string, '>' );
				if($firstEndingTagClosingSignPosition !== false){
					$completeTag = mb_substr ( $string, $firstEndingTagOccurred, $firstEndingTagClosingSignPosition+1 );
					if($completeTag != ""){
						$endingTags .= $completeTag."{#^#}";
						$getAfterWardString = mb_substr ( $string, $firstEndingTagClosingSignPosition+1 );
						if($getAfterWardString != "")
							return findTheEndingTags($getAfterWardString);
					}
				}
			}
		}
		return $endingTags;
	}

	function separateTheApplicableStratingSign($line, $sign){
		if($line != ""){
			$occurred = mb_strpos ( $line, $sign );
			if($occurred !== false){
				$stringBeforeTheSign = mb_substr ( $line, 0, $occurred );
				if($stringBeforeTheSign != ""){
					$openedTag = findTheOpenedTag($stringBeforeTheSign);
					if($openedTag != "")
					{
						$lastOpenedOccurred = mb_strripos ( $openedTag, '<' );
						if($lastOpenedOccurred !== false){
							$completeEndTag = "";
							$cleanedOpenedTag = "";
							$openedTagsArr = explode('{#^#}', $openedTag);
							foreach ($openedTagsArr as $tagKey => $tagVal) {
								$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
								$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
								$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
								$tagNameInArr = explode(' ', $tagNameString);
								$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
								if($tagName != "")
									$completeEndTag .= '</'.$tagName.'>';
							}
							$reversedOpenedTagsArr = array_reverse($openedTagsArr);
							foreach ($reversedOpenedTagsArr as $tagKey => $tagVal) {
								$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
								$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
								$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
								$tagNameInArr = explode(' ', $tagNameString);
								$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
								if($tagName != "")
									$cleanedOpenedTag .= '<'.$tagName.'>';
							}
							$newstr = mb_substr($line, 0, $occurred) . $completeEndTag . mb_substr($line, $occurred);
							$occurredNewPos = mb_strpos ( $newstr, $sign );
							if($occurredNewPos !== false){
								$signContainingPart = mb_substr($newstr, 0, $occurredNewPos+1);
								$signContainingPartModified = str_replace($sign, '{#^#}', $signContainingPart);
								$modifiedLine = $signContainingPartModified . $cleanedOpenedTag . mb_substr($newstr, $occurredNewPos+1);
								return separateTheApplicableStratingSign($modifiedLine, $sign);
							}
						}
					}
				}
			}
		}
		$line = str_replace('{#^#}', $sign, $line);
		return $line;
	}

	function findTheOpenedTag($stringBeforeTheSign, $openedTag=NULL){
		if($stringBeforeTheSign != ""){
			$lastTagEndingOccurred = mb_strripos ( $stringBeforeTheSign, '>' );
			if($lastTagEndingOccurred !== false){
				$lastTagOpeningOccurred = mb_strripos ( $stringBeforeTheSign, '<' );
				if($lastTagOpeningOccurred !== false){
					if(mb_substr ( $stringBeforeTheSign, $lastTagOpeningOccurred+1, 1 ) === "/"){
						$lastTagEndingOccurred2 = mb_strripos ( $stringBeforeTheSign, '>' );

						if($lastTagEndingOccurred > $lastTagOpeningOccurred){
							$tagLength = ($lastTagEndingOccurred+1) - $lastTagOpeningOccurred;
							$completeTag = mb_substr ( $stringBeforeTheSign, $lastTagOpeningOccurred, $tagLength );
							$tagNameString = trim ( str_replace ( "</", '', $completeTag ) );	
							$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
							$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );	
							$tagNameInArr = explode(' ', $tagNameString);
							$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
							$portionOfStratingTag = '<'.$tagName;	
							$completeEndTag = '</'.$tagName.'>';
							$openingPortionOccurred = mb_strripos ( $stringBeforeTheSign, $portionOfStratingTag );
							if($openingPortionOccurred !== false){
								$remainingString = mb_substr ( $stringBeforeTheSign, 0, $openingPortionOccurred );
								if($remainingString != ""){
									return findTheOpenedTag($remainingString, $openedTag);
								}
							}
						}
					}else{
						$tagLength = ($lastTagEndingOccurred+1) - $lastTagOpeningOccurred;
						$extractedTag = mb_substr ( $stringBeforeTheSign, $lastTagOpeningOccurred, $tagLength );
						$openedTag .= $extractedTag."{#^#}";
						$remainingString = mb_substr ( $stringBeforeTheSign, 0, $lastTagOpeningOccurred );
						if($remainingString != ""){
							return findTheOpenedTag($remainingString, $openedTag);
						}
					}
				}
			}
		}
		return $openedTag;
	}

	/*
	* Function for retriving all custom taged strings from the symptom string
	* Parameter : symptom string, Final modified symptom string to return, custom opening tag, custom ending tag
	*/
	function getAllCustomTagedStrings($symptomString, $finalReturnString, $operationOnTag, $openingBracket, $closingBracket){
		if($symptomString != ""){
			$lastClose = mb_strripos ( $symptomString, $closingBracket );
			if($lastClose !== false){
				$prePartString = mb_substr ( $symptomString, 0, $lastClose + mb_strlen($closingBracket) );	
				$lastOpen = mb_strripos ( $prePartString, $openingBracket );
				if($lastOpen > 0){
					$extractedBracketedString = mb_substr ( $prePartString, $lastOpen );
					$modifiedExtractedBracketedString = $extractedBracketedString;

					// Sperrschrift bold conversion start
					$sperrschriftBoldCntV1 = 0;
					do { 
						$modifiedExtractedBracketedString = preg_replace("#<strong>\s*<span[^>]*style=(\"|')[^>]*letter-spacing:[^>]*>(.+?)</span>\s*</strong>#is", "<".$operationOnTag."-ssbold>$2</".$operationOnTag."-ssbold>", $modifiedExtractedBracketedString, -1, $sperrschriftBoldCntV1 ); 
					} while ( $sperrschriftBoldCntV1 > 0 );

					$sperrschriftBoldCntV2 = 0;
					do { 
						$modifiedExtractedBracketedString = preg_replace("#<span[^>]*style=(\"|')[^>]*letter-spacing:[^>]*>\s*<strong>(.+?)</strong>\s*</span>#is", "<".$operationOnTag."-ssbold>$2</".$operationOnTag."-ssbold>", $modifiedExtractedBracketedString, -1, $sperrschriftBoldCntV2 ); 
					} while ( $sperrschriftBoldCntV2 > 0 );
					$sperrschriftBoldCntV3 = 0; 
					do { 
						$modifiedExtractedBracketedString = preg_replace("#<strong>\s*<span class=\"text-sperrschrift\">(.+?)</span>\s*</strong>#is", "<".$operationOnTag."-ssbold>$1</".$operationOnTag."-ssbold>", $modifiedExtractedBracketedString, -1, $sperrschriftBoldCntV3 ); 
					} while ( $sperrschriftBoldCntV3 > 0 );
					$sperrschriftBoldCntV4 = 0; 
					do { 
						$modifiedExtractedBracketedString = preg_replace("#<span class=\"text-sperrschrift\">\s*<strong>(.+?)</strong>\s*</span>#is", "<".$operationOnTag."-ssbold>$1</".$operationOnTag."-ssbold>", $modifiedExtractedBracketedString, -1, $sperrschriftBoldCntV4 ); 
					} while ( $sperrschriftBoldCntV4 > 0 );
					// Sperrschrift bold conversion end
					
					// Kursiv bold conversion start
					$kursivBoldCntV1 = 0; 
					do { 
						$modifiedExtractedBracketedString = preg_replace("#<strong>\s*<em>(.+?)</em>\s*</strong>#is", "<".$operationOnTag."-embold>$1</".$operationOnTag."-embold>", $modifiedExtractedBracketedString, -1, $kursivBoldCntV1 ); 
					} while ( $kursivBoldCntV1 > 0 );
					$kursivBoldCntV2 = 0; 
					do { 
						$modifiedExtractedBracketedString = preg_replace("#<em>\s*<strong>(.+?)</strong>\s*</em>#is", "<".$operationOnTag."-embold>$1</".$operationOnTag."-embold>", $modifiedExtractedBracketedString, -1, $kursivBoldCntV2 ); 
					} while ( $kursivBoldCntV2 > 0 );
					// Kursiv bold conversion end

					// Converting BOLD to Double Space
					$boldCnt = 0;
					do { 
						$modifiedExtractedBracketedString = preg_replace("#<b[^>]*>(.+?)</b>#is", "<".$operationOnTag."-bold>$1</".$operationOnTag."-bold>", $modifiedExtractedBracketedString, -1, $boldCnt ); 
					} while ( $boldCnt > 0 );

					$strongCnt = 0; 
					do { 
						$modifiedExtractedBracketedString = preg_replace("#<strong[^>]*>(.+?)</strong>#is", "<".$operationOnTag."-bold>$1</".$operationOnTag."-bold>", $modifiedExtractedBracketedString, -1, $strongCnt ); 
					} while ( $strongCnt > 0 );

					// Replacing Spaced sentences's tag to our custom tag "<ss>"
					$letterSpaceCnt = 0; 
					do { 
						$modifiedExtractedBracketedString = preg_replace("#<span[^>]*style=(\"|')[^>]*letter-spacing:[^>]*>(.+?)</span>#is", "<".$operationOnTag."-ss>$2</".$operationOnTag."-ss>", $modifiedExtractedBracketedString, -1, $letterSpaceCnt ); 
					} while ( $letterSpaceCnt > 0 );

					$finalReturnString = $modifiedExtractedBracketedString;

					$remainingStringFromBegining = mb_substr ( $prePartString, 0, mb_strlen($prePartString)-mb_strlen($extractedBracketedString) );
					return getAllCustomTagedStrings($remainingStringFromBegining, $finalReturnString, $operationOnTag, $openingBracket, $closingBracket);
				}
			}
		}
		return $finalReturnString;
	}

	/*
	* Function for removing last ending bracketed part from the searchable symptom string
	* Parameter : searchableText(searchable symptom string), openingBracket, closingBracket 
	*/
	function removLastBracketedPart($string, $openingBracket, $closingBracket){
		$returnString = $string;
		if($string != ""){
			$lastOpeningBracket = mb_strripos ( $string, $openingBracket );
			if($lastOpeningBracket > 0){
				$extractedBracketedString = mb_substr ( $string, $lastOpeningBracket );
				$lastClosingBracket = mb_strripos ( $extractedBracketedString, $closingBracket );
				if($lastClosingBracket != False){
					$remainingStringAfterCloseTag = mb_substr ( $extractedBracketedString, $lastClosingBracket );
					if($remainingStringAfterCloseTag != ""){
						$remainingStringAfterCloseTag = strip_tags($remainingStringAfterCloseTag);
						$cleanedRemainingString = rtrim($remainingStringAfterCloseTag);
						if (mb_substr($cleanedRemainingString,-mb_strlen($closingBracket))===$closingBracket) 
							$cleanedRemainingString = rtrim( mb_substr($cleanedRemainingString, 0, mb_strlen($cleanedRemainingString)-mb_strlen($closingBracket)));
						else if (mb_substr($cleanedRemainingString,-mb_strlen('und'))==='und') 
							$cleanedRemainingString = rtrim( mb_substr($cleanedRemainingString, 0, mb_strlen($cleanedRemainingString)-mb_strlen('und')));
						else if (mb_substr($cleanedRemainingString,-mb_strlen('and'))==='and') 
							$cleanedRemainingString = rtrim( mb_substr($cleanedRemainingString, 0, mb_strlen($cleanedRemainingString)-mb_strlen('and')));
						else if (mb_substr($cleanedRemainingString,-mb_strlen('.'))==='.') 
							$cleanedRemainingString = rtrim( mb_substr($cleanedRemainingString, 0, mb_strlen($cleanedRemainingString)-mb_strlen('.')));
						else if (mb_substr($cleanedRemainingString,-mb_strlen(','))===',') 
							$cleanedRemainingString = rtrim( mb_substr($cleanedRemainingString, 0, mb_strlen($cleanedRemainingString)-mb_strlen(',')));
						$cleanedRemainingString = preg_replace('/\s+/', '', $cleanedRemainingString);
						$cleanedRemainingString = rtrim($cleanedRemainingString, $closingBracket);

						if($cleanedRemainingString == ""){
							$returnString = mb_substr ( $string, 0, $lastOpeningBracket );
						}
					}else{
						$returnString = mb_substr ( $string, 0, $lastOpeningBracket );
					}
					
					$completeEndTag = "";
					$cleanedOpenedTag = "";
					$openedTag = findTheOpenedTag($returnString);
					if($openedTag != "")
					{
						$lastOpenedOccurred = mb_strripos ( $openedTag, '<' );
						if($lastOpenedOccurred !== false){
							$openedTagsArr = explode('{#^#}', $openedTag);
							foreach ($openedTagsArr as $tagKey => $tagVal) {
								$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
								$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
								$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
								$tagNameInArr = explode(' ', $tagNameString);
								$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
								if($tagName != "")
									$completeEndTag .= '</'.$tagName.'>';
							}
							$reversedOpenedTagsArr = array_reverse($openedTagsArr);
							foreach ($reversedOpenedTagsArr as $tagKey => $tagVal) {
								$tagNameString = trim ( str_replace ( "</", '', $tagVal ) );	
								$tagNameString = trim ( str_replace ( "<", '', $tagNameString ) );	
								$tagNameString = trim ( str_replace ( ">", '', $tagNameString ) );
								$tagNameInArr = explode(' ', $tagNameString);
								$tagName = (isset($tagNameInArr[0]) AND $tagNameInArr[0] != "") ? $tagNameInArr[0] : "";
								if($tagName != "")
									$cleanedOpenedTag .= '<'.$tagName.'>';
							}
						}
					}
					$returnString = $returnString.$completeEndTag;
				}
			}
		}
		return $returnString;
	}

	/*
	* Function for retriving all ending bracketed strings from the symptom string
	* Parameter : symptom string, opening bracket, ending bracket
	*/
	function getAllEndingBracketedStrings($symptomString, $openingBracket, $closingBracket, $returnArray=array()){
		$returnArr = array();
		if($symptomString != ""){
			$cleanedRemainingString = rtrim($symptomString);
			if (mb_substr($cleanedRemainingString,-mb_strlen('und'))==='und') 
				$cleanedRemainingString = rtrim( mb_substr($cleanedRemainingString, 0, mb_strlen($cleanedRemainingString)-mb_strlen('und')));
			else if (mb_substr($cleanedRemainingString,-mb_strlen('and'))==='and') 
				$cleanedRemainingString = rtrim( mb_substr($cleanedRemainingString, 0, mb_strlen($cleanedRemainingString)-mb_strlen('and')));
			else if (mb_substr($cleanedRemainingString,-mb_strlen('.'))==='.') 
				$cleanedRemainingString = rtrim( mb_substr($cleanedRemainingString, 0, mb_strlen($cleanedRemainingString)-mb_strlen('.')));
			else if (mb_substr($cleanedRemainingString,-mb_strlen(','))===',') 
				$cleanedRemainingString = rtrim( mb_substr($cleanedRemainingString, 0, mb_strlen($cleanedRemainingString)-mb_strlen(',')));
			// $cleanedRemainingString = rtrim($cleanedRemainingString, '.');
			// $cleanedRemainingString = rtrim($cleanedRemainingString, ',');
			// $cleanedRemainingString = rtrim($cleanedRemainingString, 'und');
			// $cleanedRemainingString = rtrim($cleanedRemainingString, 'and');

			$cleanedRemainingString = rtrim($cleanedRemainingString);
			$lastChar = mb_substr ( $cleanedRemainingString, mb_strlen ( $cleanedRemainingString ) - 1 );
			if( $lastChar == $closingBracket ){
				$lastOpeningBracket = mb_strripos ( $cleanedRemainingString, $openingBracket );
				if($lastOpeningBracket > 0){
					$extractedBracketedString = mb_substr ( $cleanedRemainingString, $lastOpeningBracket );
					$checkForNestedbrackets = isNestedBracket($cleanedRemainingString, $extractedBracketedString, $openingBracket, $closingBracket);
					if(isset($checkForNestedbrackets['status']) && $checkForNestedbrackets['status'] === TRUE){
						$extractedBracketedString = $checkForNestedbrackets['bracketed_string'];
						if(trim($checkForNestedbrackets['bracketed_string']) != $cleanedRemainingString){
							$cleanString = (mb_substr ( $extractedBracketedString, mb_strlen ( $extractedBracketedString ) - 1, 1 ) == $closingBracket) ? mb_substr ( $extractedBracketedString, 0, mb_strlen ( $extractedBracketedString ) - 1 ) : $extractedBracketedString;
							$cleanString = (mb_substr ( $cleanString, 0, 1 ) == $openingBracket) ? mb_substr ( $cleanString, 1 ) : $cleanString;
							$returnArray [] = $cleanString;
						}
					}
					else
					{
						$cleanString = (mb_substr ( $extractedBracketedString, mb_strlen ( $extractedBracketedString ) - 1, 1 ) == $closingBracket) ? mb_substr ( $extractedBracketedString, 0, mb_strlen ( $extractedBracketedString ) - 1 ) : $extractedBracketedString;
						$cleanString = (mb_substr ( $cleanString, 0, 1 ) == $openingBracket) ? mb_substr ( $cleanString, 1 ) : $cleanString;
						$returnArray [] = $cleanString;
					}

					$remainingStringFromBegining = mb_substr ( $cleanedRemainingString, 0, mb_strlen($cleanedRemainingString)-mb_strlen($extractedBracketedString) );
					return getAllEndingBracketedStrings($remainingStringFromBegining, $openingBracket, $closingBracket, $returnArray);
				}
			}
		}
		$returnArr = $returnArray;	
		return $returnArr;
	}

	/*
	* Function for retriving all bracketed strings from the symptom string
	* Parameter : symptom string, opening bracket, ending bracket
	*/
	function getAllbracketedStrings($symptomString, $openingBracket, $closingBracket, $returnArray=array()){
		$returnArr = array();
		if($symptomString != ""){
			$lastClose = mb_strripos ( $symptomString, $closingBracket );
			if($lastClose !== false){
				$prePartString = mb_substr ( $symptomString, 0, $lastClose + 1 );	
				$lastOpen = mb_strripos ( $prePartString, $openingBracket );
				if($lastOpen >= 0){
					$extractedBracketedString = mb_substr ( $prePartString, $lastOpen );		
					$checkForNestedbrackets = isNestedBracket($prePartString, $extractedBracketedString, $openingBracket, $closingBracket);
					if(isset($checkForNestedbrackets['status']) && $checkForNestedbrackets['status'] === TRUE){
						$extractedBracketedString = $checkForNestedbrackets['bracketed_string'];
						$symptomStringForCompare = trim($symptomString);
						$symptomStringForCompare = rtrim($symptomStringForCompare, '.');
						$symptomStringForCompare = rtrim($symptomStringForCompare, ',');
						if(trim($checkForNestedbrackets['bracketed_string']) != $symptomStringForCompare){
							$cleanString = (mb_substr ( $extractedBracketedString, mb_strlen ( $extractedBracketedString ) - 1, 1 ) == $closingBracket) ? mb_substr ( $extractedBracketedString, 0, mb_strlen ( $extractedBracketedString ) - 1 ) : $extractedBracketedString;
							$cleanString = (mb_substr ( $cleanString, 0, 1 ) == $openingBracket) ? mb_substr ( $cleanString, 1 ) : $cleanString;
							$returnArray [] = $cleanString;
						}	
					}else{
						$cleanString = (mb_substr ( $extractedBracketedString, mb_strlen ( $extractedBracketedString ) - 1, 1 ) == $closingBracket) ? mb_substr ( $extractedBracketedString, 0, mb_strlen ( $extractedBracketedString ) - 1 ) : $extractedBracketedString;
						$cleanString = (mb_substr ( $cleanString, 0, 1 ) == $openingBracket) ? mb_substr ( $cleanString, 1 ) : $cleanString;
						$returnArray [] = $cleanString;
					}
					$remainingStringFromBegining = mb_substr ( $prePartString, 0, mb_strlen($prePartString)-mb_strlen($extractedBracketedString) );
					return getAllbracketedStrings($remainingStringFromBegining, $openingBracket, $closingBracket, $returnArray);
				}
			}
		}
		$returnArr = $returnArray;	
		return $returnArr;
	}


	// 21-11-2023
	function getTheTagsContent($string, $openingTag, $endingTag, $stringArray = array()){
		if($string != ""){
			$lastClose = mb_strripos ($string, $endingTag);
			$prePartString = mb_substr ($string, 0, $lastClose + mb_strlen($endingTag));
			$lastOpen = mb_strripos ( $prePartString, $openingTag );
			// $returnArr [] =  $lastOpen;
			if($lastOpen !== false){
				$extractedBracketedString = mb_substr ( $prePartString, $lastOpen );
				if($extractedBracketedString != "")
					$stringArray [] =  $extractedBracketedString;
				$stringBeforeTheTag = mb_substr ( $prePartString, 0, $lastOpen );
				// $returnArr [] =  $stringBeforeTheTag;
				if($stringBeforeTheTag != "")
					return getTheTagsContent($stringBeforeTheTag, $openingTag, $endingTag, $stringArray);
			}
		}
		return $stringArray;
	}


	function convertTheContentToUppercaseWithHtml($string, $preparedStringBeforeFoundTag = NULL){
		if($string != ""){
			$string = str_replace ( array (
							'<grss>',
							'</grss>'
						), '', $string );
			mb_preg_match_all("/<[^<]+>/", $string, $matches, PREG_OFFSET_CAPTURE);
			if(isset($matches[0][0][0]) AND $matches[0][0][0] != ""){
				$firstTagPosition = mb_strpos ( $string, $matches[0][0][0] );	
				if($firstTagPosition !== false) {
					$stringBeforeFoundTag = mb_substr ($string, 0, $firstTagPosition );
					$stringAfterFoundTag = mb_substr ($string, $firstTagPosition );
					$stringRemainToExamine = substr ($string, $firstTagPosition+strlen($matches[0][0][0]) );
					if($stringBeforeFoundTag != ""){
						$stringBeforeFoundTag = mb_strtoupper($stringBeforeFoundTag, 'UTF-8');
					}
					$preparedStringBeforeFoundTag = $preparedStringBeforeFoundTag.$stringBeforeFoundTag.$matches[0][0][0];

					if($stringRemainToExamine != "")
						return convertTheContentToUppercaseWithHtml($stringRemainToExamine, $preparedStringBeforeFoundTag);
					else{
						$returnString = $preparedStringBeforeFoundTag;
					}
				}else{
					$returnString = $preparedStringBeforeFoundTag.mb_strtoupper($string, 'UTF-8');
				}
			}else{
				$returnString = $preparedStringBeforeFoundTag.mb_strtoupper($string, 'UTF-8');
			}
		}else {
			$returnString = "";
		}
		return $returnString;
	}

	/*
	* Function for deleting Source import Temp Data by master_id
	* Parameter : master_id
	*/
	function deleteSourceImportTempData($masterId){
		global $db;
		$isDeleted = false;

		/* MySQL Transaction START */
		try{
			// First of all, let's begin a transaction
			$db->begin_transaction();
			/* Delete Temp table data START */
			$tempSymptomResult = mysqli_query($db, "SELECT * FROM temp_quelle_import_test where master_id = '".$masterId."'");
			if(mysqli_num_rows($tempSymptomResult) > 0){
				while($tempSymptomData = mysqli_fetch_array($tempSymptomResult)){

					/* Delete newly added pruefers form temp_pruefer table start */
					$deleteTempPrueferQuery = "DELETE FROM temp_pruefer WHERE symptom_id = '".$tempSymptomData['id']."'";
					$db->query($deleteTempPrueferQuery);
					/* Delete newly added pruefers form temp_pruefer table start */

					$deleteTempSymptomPrueferQuery = "DELETE FROM temp_symptom_pruefer WHERE symptom_id = '".$tempSymptomData['id']."'";
					$db->query($deleteTempSymptomPrueferQuery);

					$deleteTempRemedyQuery="DELETE FROM temp_remedy WHERE symptom_id = '".$tempSymptomData['id']."'";
					$db->query($deleteTempRemedyQuery);

					// Deleting Temp Reference
					$deleteTempReferenceQuery="DELETE FROM temp_reference WHERE symptom_id = '".$tempSymptomData['id']."'";
					$db->query($deleteTempReferenceQuery);

					// Deleting Temp Symptom Reference
					$deleteTempSymptomReferenceQuery="DELETE FROM temp_symptom_reference WHERE symptom_id = '".$tempSymptomData['id']."'";
					$db->query($deleteTempSymptomReferenceQuery);

					// Deleting Temp Pre Defined Symptom Reference
					$deleteTempPreDedinedSymptomReferenceQuery="DELETE FROM temp_pre_defined_symptom_reference WHERE symptom_id = '".$tempSymptomData['id']."'";
					$db->query($deleteTempPreDedinedSymptomReferenceQuery);

					// Deleting Temp Pre Defined Symptom Pruefer
					$deleteTempPreDedinedSymptomPrueferQuery="DELETE FROM temp_pre_defined_symptom_pruefer WHERE symptom_id = '".$tempSymptomData['id']."'";
					$db->query($deleteTempPreDedinedSymptomPrueferQuery);

					// Deleting Temp Approved Reference
					$deleteTempApprovedReferenceQuery="DELETE FROM temp_approved_reference WHERE symptom_id = '".$tempSymptomData['id']."'";
					$db->query($deleteTempApprovedReferenceQuery);

					// Deleting Temp Approved Pruefer
					$deleteTempApprovedPrueferQuery="DELETE FROM temp_approved_pruefer WHERE symptom_id = '".$tempSymptomData['id']."'";
					$db->query($deleteTempApprovedPrueferQuery);

					$symptomGradingResult = mysqli_query($db, "SELECT symptom_grading_settings_id FROM temp_symptom_grading_settings WHERE symptom_id = '".$tempSymptomData['id']."' AND master_id ='".$masterId."'");
					if(mysqli_num_rows($symptomGradingResult) > 0){
						$deleteSymptomGrading ="DELETE FROM temp_symptom_grading_settings WHERE symptom_id = '".$tempSymptomData['id']."' AND master_id ='".$masterId."'";
						$db->query($deleteSymptomGrading);
					}
				}
			}

			$deleteTempSymptomQuery = "DELETE FROM temp_quelle_import_test WHERE master_id = '".$masterId."'";
			$db->query($deleteTempSymptomQuery);

			$deleteTempMasterQuery = "DELETE FROM temp_quelle_import_master WHERE id = '".$masterId."'";
			$db->query($deleteTempMasterQuery);
			/* Delete Temp table data END */

			// If we arrive here, it means that no exception was thrown
		    // i.e. no query has failed, and we can commit the transaction
		    $db->commit();
		    $isDeleted = true;
		}catch (Exception $e) {
		    // An exception has been thrown
		    // We must rollback the transaction
		    $db->rollback();
		    $isDeleted = false;
		}
		/* MySQL Transaction END */

		return $isDeleted;
	}

	/*
	* Function for checeking is there any Uppercase letter in the string
	*/
	function isThereAnyUppercase($string){
		$returnVal = false;
		if(preg_match('/[A-Z]/u', $string))
		{ 
		    // There is one upper 
		    $returnVal = true;
		}

		return $returnVal;
	}

	/*
	* Function for checeking is the first character of the string is Uppercase letter
	*/
	function isFirstCharacterUppercase($string){
		$isFirstCharUppercase = false;
		$words = preg_split("/\s{1,}/",$string);
		foreach ($words as $word) {
		    $firstChar = mb_substr($word, 0, 1);
		    if(preg_match('/[A-Z]/u', $firstChar))
			{ 
			   	// There is one upper 
			    $isFirstCharUppercase = true;
			}else{
				$isFirstCharUppercase = false;
				break;
			}
		}
		return $isFirstCharUppercase;
	}

	function encodeStringIfNeeded($string){
		  if ( false === mb_check_encoding($string, 'UTF-8') ){
		  	echo "yes";
		  	exit();
		  	return $string = utf8_encode($string);  
		  }
		  else 
		  	return $string;
	}

	/*
	* In array functionalities for multidimensional arrays like - pruefer array, remedy array, reference array etc.
	*/
	function custom_in_array($needle, $needleField, $array, $strict = false) {
		if(!empty($array)){
			foreach ($array as $key => $val) {
				if($strict){
					if(isset($array[$key][$needleField]) AND $array[$key][$needleField] === $needle)
						return true;
				}else{
					if(isset($array[$key][$needleField]) AND $array[$key][$needleField] == $needle)
						return true;
				}
		    }	
		}

	    return false;
	}

	/*
	* Get base array key from multidimensional array  
	*/
	function get_base_key_in_md_array($needle, $needleField, $array, $strict = false) {
		if(!empty($array)){
			foreach ($array as $key => $val) {
				if($strict){
					if(isset($array[$key][$needleField]) AND $array[$key][$needleField] === $needle)
						return $key;
				}else{
					if(isset($array[$key][$needleField]) AND $array[$key][$needleField] == $needle)
						return $key;
				}
		    }	
		}

	    return false;
	}

	/*
	* Checking if it's time data or not
	* function isTimeString
	* Parameters: compareing string, position of opening bracket 
	* Return: False if match not found else returns the extracted string 
	*/
	function isTimeString($cleanline=NULL, $bracketP=NULL, $timeStringEndTagArray){
		//global $timeStringEndTagArray;
		$returnVal=false;

		if($cleanline != NULL AND $bracketP != NULL){

			foreach ($timeStringEndTagArray as $timeStrKey => $timeStrVal) {
				// if (mb_substr($cleanline,-mb_strlen('St)'))==='St)'){
				if (mb_substr($cleanline,-mb_strlen($timeStrVal)) === $timeStrVal){
					$prepareTimeString = rtrim( mb_substr ( $cleanline, $bracketP ), '.' );
					$prepareTimeString = rtrim( $prepareTimeString, ',' );
					$returnVal = $prepareTimeString;
					break;
				}	
			}
			// if ((mb_substr($cleanline,-mb_strlen('St)'))==='St)') OR (mb_substr($cleanline,-mb_strlen('St.)'))==='St.)') OR (mb_substr($cleanline,-mb_strlen('St. )'))==='St. )') OR (mb_substr($cleanline,-mb_strlen('St.).'))==='St.).') OR (mb_substr($cleanline,-mb_strlen('Tagen.)'))==='Tagen.)') OR (mb_substr($cleanline,-mb_strlen('Tagen.).'))==='Tagen.).') OR (mb_substr($cleanline,-mb_strlen('Tagen)'))==='Tagen)') OR (mb_substr($cleanline,-mb_strlen('Tagen).'))==='Tagen).') OR (mb_substr($cleanline,-mb_strlen('Nacht)'))==='Nacht)') OR (mb_substr($cleanline,-mb_strlen('Tag)'))==='Tag)') OR (mb_substr($cleanline,-mb_strlen('Tag.)'))==='Tag.)') OR (mb_substr($cleanline,-mb_strlen('Tag.).'))==='Tag.).') OR (mb_substr($cleanline,-mb_strlen('T)'))==='T)') OR (mb_substr($cleanline,-mb_strlen('T.)'))==='T.)') OR (mb_substr($cleanline,-mb_strlen('T.).'))==='T.).') OR (mb_substr($cleanline,-mb_strlen('Uhr.).'))==='Uhr.).') OR (mb_substr($cleanline,-mb_strlen('Uhr).'))==='Uhr).') OR (mb_substr($cleanline,-mb_strlen('Uhr)'))==='Uhr)') OR (mb_substr($cleanline,-mb_strlen('Uhr),'))==='Uhr),') OR (mb_substr($cleanline,-mb_strlen('Uhr.),'))==='Uhr.),') OR (mb_substr($cleanline,-mb_strlen('hour.).'))==='hour.).') OR (mb_substr($cleanline,-mb_strlen('hour).'))==='hour).') OR (mb_substr($cleanline,-mb_strlen('hour)'))==='hour)') OR (mb_substr($cleanline,-mb_strlen('hour),'))==='hour),') OR (mb_substr($cleanline,-mb_strlen('hour.),'))==='hour.),') OR (mb_substr($cleanline,-mb_strlen('hours)'))==='hours)') OR (mb_substr($cleanline,-mb_strlen('hours).'))==='hours).') OR (mb_substr($cleanline,-mb_strlen('hours.)'))==='hours.)') OR (mb_substr($cleanline,-mb_strlen('hours.).'))==='hours.).') OR (mb_substr($cleanline,-mb_strlen('hours),'))==='hours),') OR (mb_substr($cleanline,-mb_strlen('hours.),'))==='hours.),') OR (mb_substr($cleanline,-mb_strlen('Hour.).'))==='Hour.).') OR (mb_substr($cleanline,-mb_strlen('Hour).'))==='Hour).') OR (mb_substr($cleanline,-mb_strlen('Hour)'))==='Hour)') OR (mb_substr($cleanline,-mb_strlen('Hour),'))==='Hour),') OR (mb_substr($cleanline,-mb_strlen('Hour.),'))==='Hour.),') OR (mb_substr($cleanline,-mb_strlen('Hours)'))==='Hours)') OR (mb_substr($cleanline,-mb_strlen('Hours).'))==='Hours).') OR (mb_substr($cleanline,-mb_strlen('Hours.)'))==='Hours.)') OR (mb_substr($cleanline,-mb_strlen('Hours.).'))==='Hours.).') OR (mb_substr($cleanline,-mb_strlen('Hours),'))==='Hours),') OR (mb_substr($cleanline,-mb_strlen('Hours.),'))==='Hours.),') OR (mb_substr($cleanline,-mb_strlen('minute.).'))==='minute.).') OR (mb_substr($cleanline,-mb_strlen('minute).'))==='minute).') OR (mb_substr($cleanline,-mb_strlen('minute)'))==='minute)') OR (mb_substr($cleanline,-mb_strlen('minute),'))==='minute),') OR (mb_substr($cleanline,-mb_strlen('minute.),'))==='minute.),') OR (mb_substr($cleanline,-mb_strlen('minutes)'))==='minutes)') OR (mb_substr($cleanline,-mb_strlen('minutes.)'))==='minutes.)') OR (mb_substr($cleanline,-mb_strlen('minutes.).'))==='minutes.).') OR (mb_substr($cleanline,-mb_strlen('minutes),'))==='minutes),') OR (mb_substr($cleanline,-mb_strlen('minutes.),'))==='minutes.),') OR (mb_substr($cleanline,-mb_strlen('Minute.).'))==='Minute.).') OR (mb_substr($cleanline,-mb_strlen('Minute).'))==='Minute).') OR (mb_substr($cleanline,-mb_strlen('Minute)'))==='Minute)') OR (mb_substr($cleanline,-mb_strlen('Minute),'))==='Minute),') OR (mb_substr($cleanline,-mb_strlen('Minute.),'))==='Minute.),') OR (mb_substr($cleanline,-mb_strlen('Minutes)'))==='Minutes)') OR (mb_substr($cleanline,-mb_strlen('Minutes.)'))==='Minutes.)') OR (mb_substr($cleanline,-mb_strlen('Minutes.).'))==='Minutes.).') OR (mb_substr($cleanline,-mb_strlen('Minutes),'))==='Minutes),') OR (mb_substr($cleanline,-mb_strlen('Minutes.),'))==='Minutes.),'))
			// {
			// 	// $timeStringArray[] = rtrim( mb_substr ( $cleanline, $bracketP + 1, - 1 ), ')' );
			// 	$prepareTimeString = rtrim( mb_substr ( $cleanline, $bracketP ), '.' );
			// 	$prepareTimeString = rtrim( $prepareTimeString, ',' );
			// 	$returnVal = $prepareTimeString;
			// }
		}

		return $returnVal;
	}

	/*
	* Finding all time data in the symptom string
	* function getAllTimeData
	* Parameters: symptom string 
	* Return: empty array if no time data found else returns the time data array 
	*/
	function getAllTimeData($cleanline=NULL, $timeStringEndTagArray, $returnArray=array()){
		$returnArr = array();
		if($cleanline != NULL){
			$lastOccurance = mb_strripos ( $cleanline, ')' );
			if($lastOccurance !== false){
				$prePartString = mb_substr ( $cleanline, 0, $lastOccurance + 1 );
				$lastOccuranceOfParentheses = mb_strripos ( $prePartString, '(' );
				$extractedTimeString = mb_substr ( $prePartString, $lastOccuranceOfParentheses );
				$isNested = 0;
				$isTimeData = 0; 
				$checkForNestedbrackets = isNestedBracket($prePartString, $extractedTimeString, "(", ")");
				if(isset($checkForNestedbrackets['status']) && $checkForNestedbrackets['status'] === TRUE){
					$extractedTimeString = $checkForNestedbrackets['bracketed_string'];
					$isNested = 1;
				}
				foreach ($timeStringEndTagArray as $timeStrKey => $timeStrVal) {
					if (mb_substr($extractedTimeString,-mb_strlen($timeStrVal)) === $timeStrVal){
						$considerAsTimeData = 1; // 1 = Yes, 0 = No
						$isOccurred1 = mb_strpos ($extractedTimeString, ', St)');
						if($isOccurred1 !== false)
							$considerAsTimeData = 0;
						$isOccurred2 = mb_strpos ($extractedTimeString, ', St).');
						if($isOccurred2 !== false)
							$considerAsTimeData = 0;
						$isOccurred3 = mb_strpos ($extractedTimeString, ', St.)');
						if($isOccurred3 !== false)
							$considerAsTimeData = 0;
						$isOccurred4 = mb_strpos ($extractedTimeString, ', St. )');
						if($isOccurred4 !== false)
							$considerAsTimeData = 0;
						$isOccurred5 = mb_strpos ($extractedTimeString, ', St.).');
						if($isOccurred5 !== false)
							$considerAsTimeData = 0;

						if($considerAsTimeData == 1){
							$isTimeData = 1;
							$returnArray[] = $extractedTimeString;
						}
					}
				}
				// Checking for Time Data inside the nested bracketed string 
				if($isNested == 1 AND $isTimeData == 0){
					$examiningString = trim($extractedTimeString);
					$examiningString = (mb_substr ( $examiningString, mb_strlen ( $examiningString ) - 1, 1 ) == ')') ? mb_substr ( $examiningString, 0, mb_strlen ( $examiningString ) - 1 ) : $examiningString;
					$examiningString = (mb_substr ( $examiningString, 0, 1 ) == '(') ? mb_substr ( $examiningString, 1 ) : $examiningString;
					$timeDataResultArr = isTimeStringInNestedBracket($examiningString, $timeStringEndTagArray);
					if(isset($timeDataResultArr) AND !empty($timeDataResultArr)){
						foreach ($timeDataResultArr as $timeKey => $timeVal) {
							$returnArray[] = $timeVal;
						}
					}
				}
				$remainingStringFromBegining = mb_substr ( $prePartString, 0, mb_strlen($prePartString)-mb_strlen($extractedTimeString) );
				return getAllTimeData($remainingStringFromBegining, $timeStringEndTagArray, $returnArray);
			}	
		} 
		$returnArr = $returnArray;

		return $returnArr;
	}

	function isTimeStringInNestedBracket($examiningString=NULL, $timeStringEndTagArray, $returnArray=array()){
		$returnArr = array();
		if($examiningString != NULL){
			$innerLastOccurance = mb_strripos ( $examiningString, ')' );
			if($innerLastOccurance !== false){
				$innerPrePartString = mb_substr ( $examiningString, 0, $innerLastOccurance + 1 );
				$innerLastOccuranceOfParentheses = mb_strripos ( $innerPrePartString, '(' );
				$innerExtractedTimeString = mb_substr ( $innerPrePartString, $innerLastOccuranceOfParentheses );
				
				$checkForNestedbrackets = isNestedBracket($innerPrePartString, $innerExtractedTimeString, "(", ")");
				if(isset($checkForNestedbrackets['status']) && $checkForNestedbrackets['status'] === TRUE)
					$innerExtractedTimeString = $checkForNestedbrackets['bracketed_string'];
				
				foreach ($timeStringEndTagArray as $timeStrKey => $timeStrVal) {
					if (mb_substr($innerExtractedTimeString,-mb_strlen($timeStrVal)) === $timeStrVal){
						$returnArray[] = $innerExtractedTimeString;
					}
				}
				$remainingStringFromBegining = mb_substr ( $innerPrePartString, 0, mb_strlen($innerPrePartString)-mb_strlen($innerExtractedTimeString) );
				return isTimeStringInNestedBracket($remainingStringFromBegining, $timeStringEndTagArray, $returnArray);
			}
			$returnArr = $returnArray;
		}
		return $returnArr;
	}

	/*
	* Checking is the given bracketed string contains nested brackets
	* Parameters: Full string, bracketed string extracted implementing normal rule,
	*             Opening bracket "(" OR "[", Closing bracket ")" OR "]"
	* Return: An array, key 
	*		   "status" => true OR false,
	*          "bracketed_string" => Bracketed string
	*/
	function isNestedBracket($fullString, $bracketedString, $openingBracket, $closingBracket){
		$returnArr = array(
			'status' => false,
			'bracketed_string' => $bracketedString
		);
		$numberOfClosingBracket=mb_substr_count($bracketedString, $closingBracket);
		if( $numberOfClosingBracket > 1 ){
			while( $numberOfClosingBracket > 1 ){ 
				$remainingStringFromBegining = mb_substr ( $fullString, 0, mb_strlen($fullString)-mb_strlen($bracketedString) );
				$lastOccuranceOfParentheses = mb_strripos ( $remainingStringFromBegining, $openingBracket );
				$prePartString = mb_substr ( $remainingStringFromBegining, $lastOccuranceOfParentheses );
				if( mb_substr_count($prePartString, $closingBracket) > 0 ){
					$numberOfClosingBracket = $numberOfClosingBracket + mb_substr_count($prePartString, $closingBracket);
				}
				$bracketedString = $prePartString.$bracketedString;
				$numberOfClosingBracket--;
			}
			$returnArr = array(
				'status' => true,
				'bracketed_string' => $bracketedString
			);
		}

		return $returnArr;
	}

	/*
	* This function will get called when expected  the string is found with a. a. O.
	*/
	function lookupReferenceInCurrentImport($string, $masterId, $symptomId = null){
		global $db;

		if($string == "A.f.d.H.")
			$string = "No Author, Archiv f. d. homÃ¶op. Heilk. V. III.";

		$returnArr = array(
			'data' => array(),
			'need_approval' => 0,
			'is_multiple' => 0
		);

		$string = trim ( $string );
		$string = (mb_substr ( $string, mb_strlen ( $string ) - 1, 1 ) == ',') ? mb_substr ( $string, 0, mb_strlen ( $string ) - 1 ) : $string;
		$string = trim($string);
		if($symptomId != '')
			$referenceSearchResult = mysqli_query($db, "SELECT reference.reference_id, reference.full_reference, reference.autor, reference.reference FROM temp_approved_reference JOIN reference ON temp_approved_reference.reference_id = reference.reference_id WHERE reference.autor LIKE '%".$string."%' AND temp_approved_reference.master_id = ".$masterId." AND temp_approved_reference.symptom_id < '".$symptomId."' ORDER BY temp_approved_reference.symptom_id DESC LIMIT 1");
		else
			$referenceSearchResult = mysqli_query($db, "SELECT reference.reference_id, reference.full_reference, reference.autor, reference.reference FROM temp_approved_reference JOIN reference ON temp_approved_reference.reference_id = reference.reference_id WHERE reference.autor LIKE '%".$string."%' AND temp_approved_reference.master_id = ".$masterId." ORDER BY temp_approved_reference.symptom_id DESC LIMIT 1");
		if(mysqli_num_rows($referenceSearchResult) > 0){
			$referenceData = mysqli_fetch_assoc($referenceSearchResult);

			if(isset($referenceData['reference_id']) AND $referenceData['reference_id'] != ""){
				$dataArr['reference_id'] = $referenceData['reference_id'];
				$dataArr['full_reference'] = $referenceData['full_reference'];
				$dataArr['autor'] = $referenceData['autor'];
				$dataArr['reference'] = $referenceData['reference'];
				$returnArr['data'][] = $dataArr;
			}
		}

		if(empty($returnArr['data'])){
			$returnArr['need_approval'] = 1;
		}

		return $returnArr;
	}

	function lookupLiteratureReference($string){
		global $db;

		if($string == "A.f.d.H.")
			$string = "No Author, Archiv f. d. homÃ¶op. Heilk. V. III.";

		$returnArr = array(
			'data' => array(),
			'need_approval' => 0,
			'is_multiple' => 0
		);
		$isExactMatchFound = 0;

		// $string = str_replace("No Author,", "", $string);
		$string = trim ( $string );
		$additionalQueryCondition = "";
		if(mb_strpos($string, ',') !== false){
			$stringArray = explode(',', $string);
			if(isset($stringArray[0]) AND !empty($stringArray[0])){
				$authorName = trim($stringArray[0]);
				if(strtolower($authorName) != "no author")
					$additionalQueryCondition = " OR autor LIKE '%".$authorName."%'";
			}
			// getting 40% of the string
			$thirtyPercentOftheString =  round((40 / 100) * mb_strlen($string));
			$stringQuery = mb_substr($string, 0, $thirtyPercentOftheString); 
		}else{
			// getting 70% of the string
			$seventyPercentOftheString =  round((70 / 100) * mb_strlen($string));
			$stringQuery = mb_substr($string, 0, $seventyPercentOftheString); 
		}
		$referenceSearchResult = mysqli_query($db, "SELECT reference_id, full_reference, autor, reference FROM reference where full_reference LIKE '%".$stringQuery."%'".$additionalQueryCondition);
		if(mysqli_num_rows($referenceSearchResult) > 0){
			// $referenceData = mysqli_fetch_assoc($referenceSearchResult);
			while($referenceData = mysqli_fetch_array($referenceSearchResult)){
				if($referenceData['full_reference'] == $string){
					$isExactMatchFound = 1;
					$returnArr['data'] = array();
					$dataArr['reference_id'] = $referenceData['reference_id'];
					$dataArr['full_reference'] = $referenceData['full_reference'];
					$dataArr['autor'] = $referenceData['autor'];
					$dataArr['reference'] = $referenceData['reference'];
					$returnArr['data'][] = $dataArr;
					break;
				}else{
					$dataArr['reference_id'] = $referenceData['reference_id'];
					$dataArr['full_reference'] = $referenceData['full_reference'];
					$dataArr['autor'] = $referenceData['autor'];
					$dataArr['reference'] = $referenceData['reference'];
					$returnArr['data'][] = $dataArr;
				}
			}
		}

		if(empty($returnArr['data'])){
				$returnArr['need_approval'] = 1;
		}else{
			if($isExactMatchFound == 0){
				$returnArr['need_approval'] = 1;
				if(count($returnArr['data']) > 1)
					$returnArr['is_multiple'] = 1;
			}
		}
		return $returnArr;
	}

	function lookupRemedyWithSymptom($remedyWithSymptomString, $similarRemedyString, $similarSymptomString){
		global $db;

		$returnArr = array(
			'data' => array(),
			'need_approval' => 0,
			'is_multiple' => 0
		);
		$isExactMatchFound = 0;

		$remedyWithSymptomString = trim ( $remedyWithSymptomString );
		$similarRemedyString = trim ( $similarRemedyString );
		$similarSymptomString = trim ( $similarSymptomString );

		$remedyDataArr = array();
		$remedySearchResult = mysqli_query($db, "SELECT remedy_id, name FROM remedy where name = '".$similarRemedyString."'");
		if(mysqli_num_rows($remedySearchResult) > 0){
			$remedyData = mysqli_fetch_assoc($remedySearchResult);
			$remedyDataArr['remedy_id'] = $remedyData['remedy_id'];
			$remedyDataArr['name'] = $remedyData['name'];
		}else{
			$remedyDataArr['remedy_id'] = null;
			$remedyDataArr['name'] = $similarRemedyString;
		}

		$cleanString = (mb_substr ( $remedyWithSymptomString, mb_strlen ( $remedyWithSymptomString ) - 1, 1 ) == '.') ? mb_substr ( $remedyWithSymptomString, 0, mb_strlen ( $remedyWithSymptomString ) - 1 ) : '';
		
		$remedyWithSymptomSearchResult = mysqli_query($db, "SELECT id, symptom_of_different_remedy, Remedy FROM quelle_import_test WHERE symptom_of_different_remedy LIKE '%".$remedyWithSymptomString."%'");
		if(mysqli_num_rows($remedyWithSymptomSearchResult) > 0){
			// $remedyWithSymptomData = mysqli_fetch_assoc($remedyWithSymptomSearchResult);
			while($remedyWithSymptomData = mysqli_fetch_array($remedyWithSymptomSearchResult)){
				if($remedyWithSymptomData['symptom_of_different_remedy'] == $remedyWithSymptomString){
					$isExactMatchFound = 1;
					$returnArr['data'] = array();
					$dataArr['symptom_id'] = $remedyWithSymptomData['id'];
					$dataArr['symptom_of_different_remedy'] = $remedyWithSymptomData['symptom_of_different_remedy'];
					$dataArr['remedy'][] = $remedyDataArr;
					$returnArr['data'][] = $dataArr;
					break;
				}else{
					$dataArr['symptom_id'] = $remedyWithSymptomData['id'];
					$dataArr['symptom_of_different_remedy'] = $remedyWithSymptomData['symptom_of_different_remedy'];
					$dataArr['remedy'][] = $remedyDataArr;
					$returnArr['data'][] = $dataArr;
				}
			}
		}

		if($cleanString != "" AND $isExactMatchFound == 0)
			return lookupRemedyWithSymptom($cleanString, $similarRemedyString, $similarSymptomString);

		if(empty($returnArr['data'])){
				$returnArr['need_approval'] = 1;
		}else{
			if($isExactMatchFound == 0){
				$returnArr['need_approval'] = 1;
				if(count($returnArr['data']) > 1)
					$returnArr['is_multiple'] = 1;
			}
		}
		return $returnArr;
	}

	function newLookupRemedyWithSymptom($remedyWithSymptomString, $similarRemedyString, $similarSymptomString){
		global $db;

		$returnArr = array(
			'data' => array(),
			'need_approval' => 0,
			'is_multiple' => 0
		);
		$isExactMatchFound = 0;

		$remedyWithSymptomString = trim ( $remedyWithSymptomString );
		$similarRemedyString = trim ( $similarRemedyString );
		$similarSymptomString = trim ( $similarSymptomString );

		$remedyDataArr = array();
		if(mb_substr ( $similarRemedyString, mb_strlen ( $similarRemedyString ) - 1, 1 ) == '.'){
			$workingString = $similarRemedyString;
		}else{
			// getting 85% of the string
			$eightyfivePercentOftheString =  round((85 / 100) * mb_strlen($similarRemedyString));
			$workingString = mb_substr($similarRemedyString, 0, $eightyfivePercentOftheString); 
		}
		$remedySearchResult = mysqli_query($db, "SELECT arznei_id, titel, kuerzel FROM arznei where kuerzel LIKE '%".$workingString."%' OR titel LIKE '%".$workingString."%'");
		if(mysqli_num_rows($remedySearchResult) > 0){
			while($remedyData = mysqli_fetch_array($remedySearchResult)){ 
				$kuerzelArr = explode("|", $remedyData['kuerzel']); 
				$trimmedKuerzelArr=array_map('trim',$kuerzelArr);
				$trimmedKuerzelArr=array_map('strtolower',$trimmedKuerzelArr);
				if(in_array(strtolower($similarRemedyString), $trimmedKuerzelArr) OR strtolower(trim($remedyData['titel'])) == strtolower($similarRemedyString) ){
					$remedyDataArr['remedy_id'] = $remedyData['arznei_id'];
					$remedyDataArr['name'] = $remedyData['titel'];
					$remedyDataArr['kuerzel'] = $remedyData['kuerzel'];
					break;
				}
				else{
					$remedyDataArr['remedy_id'] = null;
					$remedyDataArr['name'] = $similarRemedyString;
					$remedyDataArr['kuerzel'] = "";
				}
			}
		}


		$cleanString = (mb_substr ( $remedyWithSymptomString, mb_strlen ( $remedyWithSymptomString ) - 1, 1 ) == '.') ? mb_substr ( $remedyWithSymptomString, 0, mb_strlen ( $remedyWithSymptomString ) - 1 ) : '';
		
		$remedyWithSymptomSearchResult = mysqli_query($db, "SELECT id, symptom_of_different_remedy, Remedy FROM quelle_import_test WHERE symptom_of_different_remedy LIKE '%".$remedyWithSymptomString."%'");
		if(mysqli_num_rows($remedyWithSymptomSearchResult) > 0){
			// $remedyWithSymptomData = mysqli_fetch_assoc($remedyWithSymptomSearchResult);
			while($remedyWithSymptomData = mysqli_fetch_array($remedyWithSymptomSearchResult)){
				if($remedyWithSymptomData['symptom_of_different_remedy'] == $remedyWithSymptomString){
					$isExactMatchFound = 1;
					$returnArr['data'] = array();
					$dataArr['symptom_id'] = $remedyWithSymptomData['id'];
					$dataArr['symptom_of_different_remedy'] = $remedyWithSymptomData['symptom_of_different_remedy'];
					$dataArr['remedy'][] = $remedyDataArr;
					$returnArr['data'][] = $dataArr;
					break;
				}else{
					$dataArr['symptom_id'] = $remedyWithSymptomData['id'];
					$dataArr['symptom_of_different_remedy'] = $remedyWithSymptomData['symptom_of_different_remedy'];
					$dataArr['remedy'][] = $remedyDataArr;
					$returnArr['data'][] = $dataArr;
				}
			}
		}

		if($cleanString != "" AND $isExactMatchFound == 0)
			return newLookupRemedyWithSymptom($cleanString, $similarRemedyString, $similarSymptomString);

		if(empty($returnArr['data'])){
				$returnArr['need_approval'] = 1;
		}else{
			if($isExactMatchFound == 0){
				$returnArr['need_approval'] = 1;
				if(count($returnArr['data']) > 1)
					$returnArr['is_multiple'] = 1;
			}
		}
		return $returnArr;
	}

	function lookupRemedy($string){
		global $db;

		$returnArr = array(
			'data' => array(),
			'need_approval' => 0,
			'is_multiple' => 0
		);
		$isExactMatchFound = 0;

		$string = trim ( $string );
		if(mb_substr ( $string, mb_strlen ( $string ) - 1, 1 ) == '.'){
			$cleanString = mb_substr ( $string, 0, mb_strlen ( $string ) - 1 );
			$workingString = $string;
		}else{
			$cleanString = "";
			// getting 85% of the string
			$eightyfivePercentOftheString =  round((85 / 100) * mb_strlen($string));
			$workingString = mb_substr($string, 0, $eightyfivePercentOftheString); 
		}
		// $cleanString = (mb_substr ( $string, mb_strlen ( $string ) - 1, 1 ) == '.') ? mb_substr ( $string, 0, mb_strlen ( $string ) - 1 ) : ''; 
		$remedySearchResult = mysqli_query($db, "SELECT remedy_id, name FROM remedy where name LIKE '%".$workingString."%'");
		if(mysqli_num_rows($remedySearchResult) > 0){
			// $remedyData = mysqli_fetch_assoc($remedySearchResult);
			while($remedyData = mysqli_fetch_array($remedySearchResult)){
				
				if(strtolower(trim($remedyData['name'])) == strtolower(trim($string))){
					$isExactMatchFound = 1;
					$returnArr['data'] = array();
					$dataArr['remedy_id'] = $remedyData['remedy_id'];
					$dataArr['name'] = $remedyData['name'];
					$returnArr['data'][] = $dataArr;
					break;
				}else{
					$dataArr['remedy_id'] = $remedyData['remedy_id'];
					$dataArr['name'] = $remedyData['name'];
					$returnArr['data'][] = $dataArr;
				}
			}
		}

		if($cleanString != "" AND $isExactMatchFound == 0)
			return lookupRemedy($cleanString);

		if(empty($returnArr['data'])){
			$returnArr['need_approval'] = 1;
		}else{
			if($isExactMatchFound == 0){
				$returnArr['need_approval'] = 1;
				if(count($returnArr['data']) > 1)
					$returnArr['is_multiple'] = 1;
			}
		}
		return $returnArr;
	}

	function newLookupRemedy($string){
		global $db;

		$returnArr = array(
			'data' => array(),
			'need_approval' => 0,
			'is_multiple' => 0
		);
		$isExactMatchFound = 0;

		$string = trim ($string);
		if(mb_substr ( $string, mb_strlen ( $string ) - 1, 1 ) == '.'){
			$cleanString = mb_substr ( $string, 0, mb_strlen ( $string ) - 1 );
			$workingString = $string;
		}else{
			$cleanString = "";
			// getting 85% of the string
			$eightyfivePercentOftheString =  round((85 / 100) * mb_strlen($string));
			$workingString = mb_substr($string, 0, $eightyfivePercentOftheString); 
		}
		$workingString = ($workingString != "") ? mysqli_real_escape_string($db, $workingString) : "";
		$remedySearchResult = mysqli_query($db, "SELECT arznei_id, titel, kuerzel FROM arznei where kuerzel LIKE '%".$workingString."%' OR titel LIKE '%".$workingString."%'");
		if(mysqli_num_rows($remedySearchResult) > 0){
			while($remedyData = mysqli_fetch_array($remedySearchResult)){ 
				$kuerzelArr = explode("|", $remedyData['kuerzel']); 
				$trimmedKuerzelArr=array_map('trim',$kuerzelArr);
				$trimmedKuerzelArr=array_map('strtolower',$trimmedKuerzelArr);
				if(in_array(strtolower($string), $trimmedKuerzelArr) OR strtolower(trim($remedyData['titel'])) == strtolower($string) ){
					$isExactMatchFound = 1;
					$returnArr['data'] = array();
					$dataArr['remedy_id'] = $remedyData['arznei_id'];
					$dataArr['name'] = $remedyData['titel'];
					$dataArr['kuerzel'] = $remedyData['kuerzel'];
					$returnArr['data'][] = $dataArr;
					break;
				}
				else{
					$dataArr['remedy_id'] = $remedyData['arznei_id'];
					$dataArr['name'] = $remedyData['titel'];
					$dataArr['kuerzel'] = $remedyData['kuerzel'];
					$returnArr['data'][] = $dataArr;
				}
			}
		}

		if($cleanString != "" AND $isExactMatchFound == 0)
			return newLookupRemedy($cleanString);

		if(empty($returnArr['data'])){
			$returnArr['need_approval'] = 1;
		}else{
			if($isExactMatchFound == 0){
				$returnArr['need_approval'] = 1;
				if(count($returnArr['data']) > 1)
					$returnArr['is_multiple'] = 1;
			}
		}
		return $returnArr;
	}

	/*
	* This function will get called when expected  the string is found with a. a. O.
	*/
	function lookupPrueferInCurrentImport($string, $masterId, $symptomId = null){
		global $db;

		$returnArr = array(
			'data' => array(),
			'need_approval' => 0,
			'is_multiple' => 0
		);
		
		$string = trim($string);
		$string = (mb_substr ( $string, mb_strlen ( $string ) - 1, 1 ) == ',') ? mb_substr ( $string, 0, mb_strlen ( $string ) - 1 ) : $string;
		$string = trim($string);
		$cleanString = (mb_substr ( $string, mb_strlen ( $string ) - 1, 1 ) == '.') ? mb_substr ( $string, 0, mb_strlen ( $string ) - 1 ) : '';

		if($symptomId != '')
			$prueferSearchResult = mysqli_query($db, "SELECT pruefer.pruefer_id, pruefer.kuerzel, pruefer.suchname, pruefer.nachname FROM temp_approved_pruefer JOIN pruefer ON temp_approved_pruefer.pruefer_id = pruefer.pruefer_id where (pruefer.kuerzel LIKE '%".$string."%' OR pruefer.suchname LIKE '%".$string."%' OR pruefer.nachname LIKE '%".$string."%') AND temp_approved_pruefer.master_id = ".$masterId." AND temp_approved_pruefer.symptom_id < '".$symptomId."' ORDER BY temp_approved_pruefer.symptom_id DESC LIMIT 1");
		else
			$prueferSearchResult = mysqli_query($db, "SELECT pruefer.pruefer_id, pruefer.kuerzel, pruefer.suchname, pruefer.nachname FROM temp_approved_pruefer JOIN pruefer ON temp_approved_pruefer.pruefer_id = pruefer.pruefer_id where (pruefer.kuerzel LIKE '%".$string."%' OR pruefer.suchname LIKE '%".$string."%' OR pruefer.nachname LIKE '%".$string."%') AND temp_approved_pruefer.master_id = ".$masterId." ORDER BY temp_approved_pruefer.symptom_id DESC LIMIT 1");
		if(mysqli_num_rows($prueferSearchResult) > 0){ 
			$pruferData = mysqli_fetch_assoc($prueferSearchResult);
			if(isset($pruferData['pruefer_id']) AND $pruferData['pruefer_id'] != ""){
				$dataArr['pruefer_id'] = $pruferData['pruefer_id'];
				$dataArr['kuerzel'] = $pruferData['kuerzel'];
				$dataArr['suchname'] = $pruferData['suchname'];
				$dataArr['nachname'] = $pruferData['nachname'];
				$returnArr['data'][] = $dataArr;
			}
		}

		if(empty($returnArr['data']) AND $cleanString != "")
			return lookupPrueferInCurrentImport($cleanString, $masterId, $symptomId);

		if(empty($returnArr['data'])){
			$returnArr['need_approval'] = 1;
		}
		
		return $returnArr;
	}

	function lookupPruefer($string) {
		global $db;

		$returnArr = array(
			'data' => array(),
			'need_approval' => 0,
			'is_multiple' => 0
		);
		$isExactMatchFound = 0;
		
		$string = trim($string);
		// checking for comma's existance and taking approptiate action (e.g. W. E. Wislicenus, in einemAufsatze.)
		if (mb_strpos($string, ',') !== false){
			$separator = ",";
			$commaFirstOccurrence = mb_stripos ( $string, $separator );
			$beforeTheCommaString = trim( mb_substr ( $string, 0, $commaFirstOccurrence ) );

			$beforeTheCommaStringInArray = explode(" ", $beforeTheCommaString);
			$lastWord = end($beforeTheCommaStringInArray);

			$workingString = trim($lastWord);
			$string = $beforeTheCommaString;
		}else{
			$workingString = $string;
		}

		if(mb_substr ( $workingString, mb_strlen ( $workingString ) - 1, 1 ) == '.'){
			$cleanString = mb_substr ( $workingString, 0, mb_strlen ( $workingString ) - 1 );
		}else{
			$cleanString = "";
			// getting 80% of the string
			$eightyPercentOftheString =  round((80 / 100) * mb_strlen($workingString));
			$workingString = mb_substr($workingString, 0, $eightyPercentOftheString); 
		}

		// $cleanString = (mb_substr ( $string, mb_strlen ( $string ) - 1, 1 ) == '.') ? mb_substr ( $string, 0, mb_strlen ( $string ) - 1 ) : '';
		// $stringQuery = utf8_decode($workingString);		
		// $comparingString = utf8_decode($string);
		// echo "<br> <br>";
		// var_dump(html_entity_decode($string));
		// $string = html_entity_decode($string);
		// $strings = 'GroÃ';
		// var_dump(htmlentities(htmlentities($strings)));
		// var_dump($strings);
		// mysqli_query($db, "SET NAMES 'utf8'");
		$prueferSearchResult = mysqli_query($db, "SELECT pruefer_id, kuerzel, suchname, nachname FROM pruefer where kuerzel LIKE '%".$workingString."%' OR suchname LIKE '%".$workingString."%' OR nachname LIKE '%".$workingString."%'");
		if(mysqli_num_rows($prueferSearchResult) > 0){ 
			// $gettingPruferData = mysqli_fetch_assoc($prueferSearchResult);
			while($pruferData = mysqli_fetch_array($prueferSearchResult)){ 
				$kuerzelArr = explode("|", $pruferData['kuerzel']); 
				$trimmedKuerzelArr=array_map('trim',$kuerzelArr);
				if(in_array($string, $trimmedKuerzelArr) OR strtolower(trim($pruferData['suchname'])) OR strtolower(trim($pruferData['nachname'])) == strtolower($string) ){
					$isExactMatchFound = 1;
					$returnArr['data'] = array();
					$dataArr['pruefer_id'] = $pruferData['pruefer_id'];
					$dataArr['kuerzel'] = $pruferData['kuerzel'];
					$dataArr['suchname'] = $pruferData['suchname'];
					$dataArr['nachname'] = $pruferData['nachname'];
					$returnArr['data'][] = $dataArr;
					break;
				}
				else{
					$dataArr['pruefer_id'] = $pruferData['pruefer_id'];
					$dataArr['kuerzel'] = $pruferData['kuerzel'];
					$dataArr['suchname'] = $pruferData['suchname'];
					$dataArr['nachname'] = $pruferData['nachname'];
					$returnArr['data'][] = $dataArr;
				}
			}
		}

		if($cleanString != "" AND $isExactMatchFound == 0)
			return lookupPruefer($cleanString);

		if(empty($returnArr['data'])){
			$returnArr['need_approval'] = 1;
		}
		else{
			if($isExactMatchFound == 0){
				$returnArr['need_approval'] = 1;
				if(count($returnArr['data']) > 1)
					$returnArr['is_multiple'] = 1;
			}
		}
		return $returnArr;
	}


	/*
	* Checking approval string is this has chances of cleared in this import
	* Parameters: approval string
	* Return: true OR false
	*/
	function isClearedInThisImport($tempSymptomId, $approvalString, $masterId, $approvalFor, $isPreDefinedTagsApprovalGet, $tagParameter){
		global $db;
		$returnVal = false;

		// Make it Checked unless user clicks on Later button
		$symptomCheckedUpdateQuery="UPDATE temp_quelle_import_test SET is_rechecked = 1 WHERE id = '".$tempSymptomId."'";
		$db->query($symptomCheckedUpdateQuery);

		/*
		* Here i am breaking the approval string in some conditions following Rule 1 and Rule 2(so far) 
		* because there can be multiple elements to check.E.g: (Caust. Cupr. Puls.)
		* other than some conditions i am taking the full approval string to compare. 
		*/
		$approvalStraingArray = array();
		$lastBracketedString = trim($approvalString);
		$approvalStraingArray[] = $lastBracketedString;

		// Checking the existance of , - . ; and , a. a. O. and , a.a.O.
		$isAaoExist = mb_strpos($lastBracketedString, 'a. a. O.');
		$isAaoWithoutSpaceExist = mb_strpos($lastBracketedString, 'a.a.O.');
		$isAaoAllLowerWithoutSpaceExist = mb_strpos($lastBracketedString, 'a.a.o.');
		$isAaoAllLowerWithSpaceExist = mb_strpos($lastBracketedString, 'a. a. o.');
		$isCommaExist = mb_substr_count($lastBracketedString,",");
		$isHyphenExist = mb_substr_count($lastBracketedString," - ");
		$isDotExist = mb_substr_count($lastBracketedString,".");
		$isSemicolonExist = mb_substr_count($lastBracketedString,";");

		// 0 = end bracket, 1 = middle bracket
		if($approvalFor == 1){
			// Middle bracket approval
			if($isPreDefinedTagsApprovalGet == 1){
				$approvalStraingArray = array();
				$approvalStraingArray = explode("{#^#}", $lastBracketedString);
			}
			else if(($isCommaExist != 0 OR $isSemicolonExist != 0) AND $isDotExist != 0){
				if (mb_strpos($lastBracketedString, ',') !== false) 
					$separator = ",";
				else
					$separator = ";";

				$approvalStraingArray = array();
				$approvalStraingArray = explode($separator, $lastBracketedString);
			}
			else if(($isCommaExist != 0 OR $isSemicolonExist != 0) OR $isDotExist == 1){
				$workingString = trim($lastBracketedString);
				if($isCommaExist != 0 OR $isSemicolonExist != 0){
      				if (mb_strpos($workingString, ',') !== false)
						$separator = ",";
					else if (mb_strpos($workingString, ';') !== false)
						$separator = ";";
					$approvalStraingArray = array();
					$approvalStraingArray = explode($separator, $workingString);
				}else{
					if (mb_strpos($workingString, '.') !== false){
						// Split by dot(.)
						$makeStringToExplode = str_replace('.', '.{#^#}', $workingString);
						$approvalStraingArray = array();
						$approvalStraingArray = explode("{#^#}", $makeStringToExplode);
					}
					else{
						$approvalStraingArray = array();
						$approvalStraingArray[] = $workingString;
					}
				}
			}
		}else{
			// End bracket approval
			if($isPreDefinedTagsApprovalGet == 1){
				$approvalStraingArray = array();
				$approvalStraingArray = explode("{#^#}", $lastBracketedString);
			}
			else if($isCommaExist == 0 AND $isSemicolonExist == 0 AND $isHyphenExist == 0 AND $isAaoExist === false AND $isAaoWithoutSpaceExist === false AND $isAaoAllLowerWithoutSpaceExist === false AND $isAaoAllLowerWithSpaceExist === false)
			{
				// No Comma AND No Semicolon AND No Hyphen AND No , a. a. O. START
				$workingString = $lastBracketedString;
				$wordsInLastString = explode(" ", $lastBracketedString);
				if(!empty($wordsInLastString)){
					if(count($wordsInLastString) > 1){
						$approvalStraingArray = array();
						$makeStringToExplode = str_replace('.', '.{#^#}', $workingString);
						$approvalStraingArray = explode("{#^#}", $makeStringToExplode);
					}
				}
				// No Comma AND No Semicolon AND No Hyphen AND No , a. a. O. END
			}
			else if(($isCommaExist != 0 OR $isSemicolonExist != 0) AND $isHyphenExist == 0 AND $isAaoExist === false AND $isAaoWithoutSpaceExist === false AND $isAaoAllLowerWithoutSpaceExist === false AND $isAaoAllLowerWithSpaceExist === false)
			{
				// With Comma OR Semicolon AND NO Hyphen AND No , a. a. O. START
				if (mb_strpos($lastBracketedString, ',') !== false) 
					$separator = ",";
				else
					$separator = ";";

				$approvalStraingArray = array();
				$approvalStraingArray = explode($separator, $lastBracketedString);
				// With Comma OR Semicolon AND NO Hyphen AND No , a. a. O. END
			}
			else if(($isAaoExist !== false OR $isAaoWithoutSpaceExist !== false OR $isAaoAllLowerWithoutSpaceExist !== false OR $isAaoAllLowerWithSpaceExist !== false) AND $isHyphenExist != 0)
			{
				$approvalStraingArray = array();
				$workingString = trim($lastBracketedString);
				$eachElement = explode(" - ", $workingString);
				foreach ($eachElement as $elementKey => $elementVal) {
					$approvalStringVal = str_replace("a. a. O.", "{#^#}", $elementVal);
					$approvalStringVal = str_replace("a.a.O.", "{#^#}", $approvalStringVal);
					$approvalStringVal = str_replace("a.a.o.", "{#^#}", $approvalStringVal);
					$approvalStringVal = str_replace("a. a. o.", "{#^#}", $approvalStringVal);
					$approvalStringVal = trim($approvalStringVal);
					$approvalStringVal = (mb_substr ( $approvalStringVal, mb_strlen ( $approvalStringVal ) - 1, 1 ) == ',') ? mb_substr ( $approvalStringVal, 0, mb_strlen ( $approvalStringVal ) - 1 ) : $approvalStringVal;
					$approvalPreStraing = trim($approvalStringVal);
					$aaoPosition = mb_strpos($approvalPreStraing, '{#^#}');
					if($aaoPosition !== false){
						$approvalPreStraing = mb_substr($approvalPreStraing, 0, $aaoPosition);
					}
					$approvalPreStraing = str_replace("{#^#}", "", $approvalPreStraing);
					$approvalStraingArray[] = trim($approvalPreStraing);
				} 
			}
			else if($isHyphenExist != 0)
			{
				$approvalStraingArray = array();
				$workingString = trim($lastBracketedString);
				$eachElement = explode(" - ", $workingString);
				foreach ($eachElement as $elementKey => $elementVal) {
					$approvalStringVal = str_replace("a. a. O.", "{#^#}", $elementVal);
					$approvalStringVal = str_replace("a.a.O.", "{#^#}", $approvalStringVal);
					$approvalStringVal = str_replace("a.a.o.", "{#^#}", $approvalStringVal);
					$approvalStringVal = str_replace("a. a. o.", "{#^#}", $approvalStringVal);
					$approvalStringVal = trim($approvalStringVal);
					$approvalStringVal = (mb_substr ( $approvalStringVal, mb_strlen ( $approvalStringVal ) - 1, 1 ) == ',') ? mb_substr ( $approvalStringVal, 0, mb_strlen ( $approvalStringVal ) - 1 ) : $approvalStringVal;
					$approvalPreStraing = trim($approvalStringVal);
					$aaoPosition = mb_strpos($approvalPreStraing, '{#^#}');
					if($aaoPosition !== false){
						$approvalPreStraing = mb_substr($approvalPreStraing, 0, $aaoPosition);
					}
					$approvalPreStraing = str_replace("{#^#}", "", $approvalPreStraing);
					$approvalStraingArray[] = trim($approvalPreStraing);
				} 
			}
			else if($isAaoExist !== false OR $isAaoWithoutSpaceExist !== false OR $isAaoAllLowerWithoutSpaceExist !== false OR $isAaoAllLowerWithSpaceExist !== false)
			{
				$approvalStraingArray = array();
				$approvalStringVal = str_replace("a. a. O.", "{#^#}", $lastBracketedString);
				$approvalStringVal = str_replace("a.a.O.", "{#^#}", $approvalStringVal);
				$approvalStringVal = str_replace("a.a.o.", "{#^#}", $approvalStringVal);
				$approvalStringVal = str_replace("a. a. o.", "{#^#}", $approvalStringVal);
				$approvalStringVal = trim($approvalStringVal);
				$approvalStringVal = (mb_substr ( $approvalStringVal, mb_strlen ( $approvalStringVal ) - 1, 1 ) == ',') ? mb_substr ( $approvalStringVal, 0, mb_strlen ( $approvalStringVal ) - 1 ) : $approvalStringVal;
				$approvalPreStraing = trim($approvalStringVal);
				$aaoPosition = mb_strpos($approvalPreStraing, '{#^#}');
				if($aaoPosition !== false){
					$approvalPreStraing = mb_substr($approvalPreStraing, 0, $aaoPosition);
				}
				$approvalPreStraing = str_replace("{#^#}", "", $approvalPreStraing);
				$approvalStraingArray[] = trim($approvalPreStraing);
			}
		}

		// Checking is it cleared already in this import process
		if(!empty($approvalStraingArray)){
			$isMatchFound = 0;
			foreach ($approvalStraingArray as $approvalStringKey => $approvalStringVal) {
				// getting 80% of the string
				$approvalStringVal = trim($approvalStringVal); 
				if($approvalStringVal != ""){
					$eightyPercentOftheString =  round((80 / 100) * mb_strlen($approvalStringVal));
					$newApprovalString = mb_substr($approvalStringVal, 0, $eightyPercentOftheString);
					$newApprovalString = mysqli_real_escape_string($db, $newApprovalString);
					$approvalStringSearchResult = mysqli_query($db, "SELECT id FROM temp_quelle_import_test WHERE (approval_string LIKE '%".$newApprovalString."%' OR middle_bracket_approval_string LIKE '%".$newApprovalString."%') AND master_id = '".$masterId."' AND id != '".$tempSymptomId."' AND need_approval = 0");
					if(mysqli_num_rows($approvalStringSearchResult) > 0){
						$isMatchFound = 1;
						break;
					}
				}
			}
			if($isMatchFound == 1){
				// Cleaning Previous Data From temp START
				$deleteTempRemedyQuery="DELETE FROM temp_remedy WHERE symptom_id = '".$tempSymptomId."'";
				$db->query($deleteTempRemedyQuery);

				$deleteTempPrueferQuery = "DELETE FROM temp_pruefer WHERE symptom_id = '".$tempSymptomId."'";
				$db->query($deleteTempPrueferQuery);

				$deleteTempSymptomPrueferQuery = "DELETE FROM temp_symptom_pruefer WHERE symptom_id = '".$tempSymptomId."'";
				$db->query($deleteTempSymptomPrueferQuery);

				$deleteTempReferenceQuery = "DELETE FROM temp_reference WHERE symptom_id = '".$tempSymptomId."'";
				$db->query($deleteTempReferenceQuery);

				$deleteTempSymptomReferenceQuery = "DELETE FROM temp_symptom_reference WHERE symptom_id = '".$tempSymptomId."'";
				$db->query($deleteTempSymptomReferenceQuery);

				// Deleting Temp Approved Reference
				$deleteTempApprovedReferenceQuery="DELETE FROM temp_approved_reference WHERE symptom_id = '".$tempSymptomId."'";
				$db->query($deleteTempApprovedReferenceQuery);

				// Deleting Temp Approved Pruefer
				$deleteTempApprovedPrueferQuery="DELETE FROM temp_approved_pruefer WHERE symptom_id = '".$tempSymptomId."'";
				$db->query($deleteTempApprovedPrueferQuery);
				// Cleaning Previous Data From temp END

				$aLiteraturquellen = array ();
				$EntnommenAus='';
				$needApproval = 0;
				$remedyArray = array();
				$prueferArray = array();
				$referenceArray = array();
				$prueferPriority = 0;
				$remedyPriority = 0;
				$partOfSymptomPriority = 0;
				$referenceWithNoAuthorPriority = 0;
				$referencePriority = 0;
				$remedyWithSymptomPriority = 0;
				$moreThanOneTagStringPriority = 0;
				$aaoHyphenPriority = 0;
				$hyphenPrueferPriority = 0;
				$hyphenReferencePriority = 0;
				$hyphenApprovalString = "";
				$tagsApprovalString = "";
				$isPreDefinedTagsApproval = 0;
				$symptomOfDifferentRemedy = "";

				/* applying Rules on the approval string again it may get cleared already in this import process START */
				// 0 = end bracket, 1 = middle bracket
				if($approvalFor == 1){
					/* Middle bracket approval start*/
					if($isPreDefinedTagsApprovalGet == 1){
						// This section works when there is unknown data in pre defined tags START
						if($isPreDefinedTagsApprovalGet == 1 AND $tagParameter == "pruefer"){
							$isPreDefinedTagsApproval = 1;
							$ckeckPApproval = 0;
							$tagsApproalStringForPrue = "";
							foreach ($approvalStraingArray as $prueferPkey => $prueferPval) {
								$prueferPval = trim($prueferPval);
								$tagsApproalStringForPrue .= $prueferPval."{#^#}";

								$cleanPrueferString = (mb_substr ( $prueferPval, mb_strlen ( $prueferPval ) - 1, 1 ) == '.') ? $prueferPval : $prueferPval.'.'; 
								$prueferReturnArr = lookupPruefer($cleanPrueferString);
								if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
									$ckeckPApproval = 1;
									
									if(!empty($prueferReturnArr['data'])){
										foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
												$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
										}
									}
									else{
										$dataArr = array();
										$dataArr['pruefer_id'] = null;
										$dataArr['kuerzel'] = null;
										$dataArr['suchname'] = trim($prueferPval);
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($dataArr['suchname'], 'suchname', $prueferArray) != true)
											$prueferArray[] = $dataArr;
									}
								}
								else{
									foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
											$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
									}
								}
							}

							if($ckeckPApproval == 1){
								$needApproval = 1;

								$tagsApprovalString = $tagsApproalStringForPrue;
								$tagsApprovalString = rtrim($tagsApprovalString, "{#^#}");

								$foundPrueferStringArray = explode("{#^#}", $tagsApprovalString);
								if(count($foundPrueferStringArray) > 1){
									$referencePriority = 0;
									$referenceWithNoAuthorPriority = 0;
									$remedyWithSymptomPriority = 0;
									$remedyPriority = 0;
									$partOfSymptomPriority = 0;
									$prueferPriority = 0;
									$aaoHyphenPriority = 0;
									$hyphenPrueferPriority = 0;
									$hyphenReferencePriority = 0;
									$moreThanOneTagStringPriority = 10;
								}else{
									$referencePriority = 0;
									$referenceWithNoAuthorPriority = 0;
									$remedyWithSymptomPriority = 0;
									$remedyPriority = 0;
									$partOfSymptomPriority = 0;
									$aaoHyphenPriority = 0;
									$hyphenPrueferPriority = 0;
									$hyphenReferencePriority = 0;
									$moreThanOneTagStringPriority = 0;
									$prueferPriority = 10;
								}

							}else{
								$needApproval = 0;
							}
						}
						else if($isPreDefinedTagsApprovalGet == 1 AND $tagParameter == "reference"){
							$isPreDefinedTagsApproval = 1;
							$tagsApproalStringForRef = ""; 
							$ckeckRApproval = 0;
							foreach ($approvalStraingArray as $refKey => $refVal) {
								$refVal = trim($refVal);
								$tagsApproalStringForRef .= $refVal."{#^#}";
								$referenceReturnArr = lookupLiteratureReference($refVal);
								
								if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
									$ckeckRApproval = 1;

									if(!empty($referenceReturnArr['data'])){
										foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true)
												$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
										}
									}
									else{
										$fullReferenceInArray = explode(",", $refVal);
										if(count($fullReferenceInArray) >= 2){
											$referenceAutor = trim($fullReferenceInArray[0]);
							        		array_shift($fullReferenceInArray);
							        		$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
										}else{
											$referenceAutor = "";
											$referenceTxt = $refVal;
										}
										
										$dataArr = array();
										$dataArr['reference_id'] = null;
										$dataArr['full_reference'] = $refVal;
										$dataArr['autor'] = $referenceAutor;
										$dataArr['reference'] = $referenceTxt;
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($dataArr['full_reference'], 'full_reference', $referenceArray) != true)
											$referenceArray[] = $dataArr;
									}

								}else{
									foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
											$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
											$aLiteraturquellen [$refKey] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
										}
									}
								}
							}

							if($ckeckRApproval == 1){
								$needApproval = 1;

								$aLiteraturquellen = array(); 
								$tagsApprovalString = $tagsApproalStringForRef;
								$tagsApprovalString = rtrim($tagsApprovalString, "{#^#}");

								$foundReferenceStringArray = explode("{#^#}", $tagsApprovalString);

								if(count($foundReferenceStringArray) > 1){
									$partOfSymptomPriority = 0;
									$remedyWithSymptomPriority = 0;
									$prueferPriority = 0;
									$remedyPriority = 0;
									$referencePriority = 0;
									$referenceWithNoAuthorPriority = 0;
									$aaoHyphenPriority = 0;
									$hyphenPrueferPriority = 0;
									$hyphenReferencePriority = 0;
									$moreThanOneTagStringPriority = 10;
								}else{
									$partOfSymptomPriority = 0;
									$remedyWithSymptomPriority = 0;
									$prueferPriority = 0;
									$remedyPriority = 0;
									$aaoHyphenPriority = 0;
									$hyphenPrueferPriority = 0;
									$hyphenReferencePriority = 0;
									$moreThanOneTagStringPriority = 0;
									$referenceWithNoAuthorPriority = 0;
									$referencePriority = 10;
								}
							}else{
								$needApproval = 0;
							}
						}
						else if($isPreDefinedTagsApprovalGet == 1 AND $tagParameter == "multitag"){
							$isPreDefinedTagsApproval = 1;
							$tagsApproalStringForRef = ""; 
							$ckeckRApproval = 0;
							foreach ($approvalStraingArray as $refKey => $refVal) {
								$refVal = trim($refVal);
								$tagsApproalStringForRef .= $refVal."{#^#}";
								$referenceReturnArr = lookupLiteratureReference($refVal);
								
								if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
									$ckeckRApproval = 1;

									if(!empty($referenceReturnArr['data'])){
										foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true)
												$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
										}
									}
									else{
										$fullReferenceInArray = explode(",", $refVal);
										if(count($fullReferenceInArray) >= 2){
											$referenceAutor = trim($fullReferenceInArray[0]);
							        		array_shift($fullReferenceInArray);
							        		$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
										}else{
											$referenceAutor = "";
											$referenceTxt = $refVal;
										}
										
										$dataArr = array();
										$dataArr['reference_id'] = null;
										$dataArr['full_reference'] = $refVal;
										$dataArr['autor'] = $referenceAutor;
										$dataArr['reference'] = $referenceTxt;
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($dataArr['full_reference'], 'full_reference', $referenceArray) != true)
											$referenceArray[] = $dataArr;
									}

								}else{
									foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
											$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
											$aLiteraturquellen [$refKey] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
										}
									}
								}
							}

							$ckeckPApproval = 0;
							$tagsApproalStringForPrue = "";
							foreach ($approvalStraingArray as $prueferPkey => $prueferPval) {
								$prueferPval = trim($prueferPval);
								$tagsApproalStringForPrue .= $prueferPval."{#^#}";

								$cleanPrueferString = (mb_substr ( $prueferPval, mb_strlen ( $prueferPval ) - 1, 1 ) == '.') ? $prueferPval : $prueferPval.'.'; 
								$prueferReturnArr = lookupPruefer($cleanPrueferString);
								if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
									$ckeckPApproval = 1;
									
									if(!empty($prueferReturnArr['data'])){
										foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
												$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
										}
									}
									else{
										$dataArr = array();
										$dataArr['pruefer_id'] = null;
										$dataArr['kuerzel'] = null;
										$dataArr['suchname'] = trim($prueferPval);
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($dataArr['suchname'], 'suchname', $prueferArray) != true)
											$prueferArray[] = $dataArr;
									}
								}
								else{
									foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
											$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
									}
								}
							}

							if($ckeckPApproval == 1 OR $ckeckRApproval == 1){
								$tagsApprovalString = $tagsApproalStringForPrue.$tagsApproalStringForRef;
								$tagsApprovalString = rtrim($tagsApprovalString, "{#^#}");

								$needApproval = 1;

								$referencePriority = 0;
								$referenceWithNoAuthorPriority = 0;
								$remedyWithSymptomPriority = 0;
								$partOfSymptomPriority = 0;
								$remedyPriority = 0;
								$prueferPriority = 0;
								$aaoHyphenPriority = 0;
								$hyphenPrueferPriority = 0;
								$hyphenReferencePriority = 0;
								$moreThanOneTagStringPriority = 10;
							}else{
								$needApproval = 0;
							}
						}
						// This section works when there is unknown data in pre defined tags END
					}
					else if(($isCommaExist != 0 OR $isSemicolonExist != 0) AND $isDotExist != 0){
						// With Comma OR Semicolon
						if (mb_strpos($lastBracketedString, ',') !== false) 
							$separator = ",";
						else
							$separator = ";";

						$commaFirstOccurrence = mb_stripos ( $lastBracketedString, $separator );
						$beforeTheCommaString = trim( mb_substr ( $lastBracketedString, 0, $commaFirstOccurrence ) );
						$afterTheCommaString = trim( ltrim( mb_substr ( $lastBracketedString, $commaFirstOccurrence ), $separator ));
						$beforeTheCommaStringInArray = explode(" ", $beforeTheCommaString);
						$afterTheCommaStringInArray = explode(" ", $afterTheCommaString);

						$isDotExistInBeforeTheCommaString = mb_substr_count($beforeTheCommaString,".");
						$isDotExistInAfterTheCommaString = mb_substr_count($afterTheCommaString,".");

						$workingString = trim($lastBracketedString);

						/* REMEDY START */
						$checkRemedyApprovalStatus = 0;
						$expectedRemedyArray = explode($separator, $workingString);
						foreach ($expectedRemedyArray as $expectedRemedyKey => $expectedRemedyVal) {
							if($expectedRemedyVal == "")
								continue;

							$cleanExpectedRemedyName = trim($expectedRemedyVal);
							$cleanRemedyString = (mb_substr ( $cleanExpectedRemedyName, mb_strlen ( $cleanExpectedRemedyName ) - 1, 1 ) == '.') ? $cleanExpectedRemedyName : $cleanExpectedRemedyName.'.'; 
							$remedyReturnArr = newLookupRemedy($cleanRemedyString);
							if(isset($remedyReturnArr['need_approval']) AND $remedyReturnArr['need_approval'] == 1){
								$checkRemedyApprovalStatus = 1;
								if(!empty($remedyReturnArr['data'])){
									foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
										// custom_in_array(needle, needle_field, array) 
										if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $remedyArray) != true)
											$remedyArray[] = $remedyReturnArr['data'][$remedyReturnKey];
									}

								}
								else{
									$dataArr = array();
									$dataArr['remedy_id'] = null;
									$dataArr['name'] = $cleanExpectedRemedyName;
									$dataArr['kuerzel'] = "";
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($dataArr['name'], 'name', $remedyArray) != true)
										$remedyArray[] = $dataArr;
								}
							}
							else{
								foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $remedyArray) != true)
										$remedyArray[] = $remedyReturnArr['data'][$remedyReturnKey];
								}
							}
						}
						// Setting last operations approval status to main approval checking variable 
						$needApproval = $checkRemedyApprovalStatus; 
						/* REMEDY END */

						if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString != 0 AND $isDotExistInAfterTheCommaString !=0){
							/*
							* 6.1 Single word + dot before the comma and one or more words + dot after comma (no matter if upper or lower case)
							*
							* 1 = chcek for remedis by spliting by comma
							*/
							if($needApproval == 1){
								$referenceWithNoAuthorPriority = 0;
								$aaoHyphenPriority = 0;
								$hyphenPrueferPriority = 0;
								$hyphenReferencePriority = 0;
								$moreThanOneTagStringPriority = 0;
								$remedyWithSymptomPriority = 0;
								$prueferPriority = 0;
								$partOfSymptomPriority = 0;
								$referencePriority = 0;
								$remedyPriority = 10;
							}
						}
						else if($isCommaExist == 1 AND ((count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 1) OR (count($afterTheCommaStringInArray) == 1 AND $isDotExistInAfterTheCommaString == 1)))
						{
							/*
							* 6.2. Single word + dot before the comma or after a comma (only one dot and one comma)
							*
							* 1 = check for remedy with symptom text (Eg: Opi., during the day)(Eg: small boils in crops, Sulph.)
							* 2 = part of symptom
							*/
							if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 1){
								$similarRemedyString = $beforeTheCommaString;
								$similarSymptomString = $afterTheCommaString;	
							}else{
								$similarRemedyString = $afterTheCommaString;
								$similarSymptomString = $beforeTheCommaString;
							}
							$cleanRemedyWithSymptomString = (mb_substr ( $workingString, mb_strlen ( $workingString ) - 1, 1 ) == '.') ? $workingString : $workingString.'.'; 
							$remedyWithSymptomReturnArr = newLookupRemedyWithSymptom($cleanRemedyWithSymptomString, $similarRemedyString, $similarSymptomString);
							if(isset($remedyWithSymptomReturnArr['need_approval']) AND $remedyWithSymptomReturnArr['need_approval'] == 0){
								$needApproval = 0;
								$remedyArray = array();
								$referenceArray = array();
								$aLiteraturquellen = array();
								$prueferArray = array();
								if(isset($remedyWithSymptomReturnArr['data'][0]['remedy']))
									$remedyArray = $remedyWithSymptomReturnArr['data'][0]['remedy'];
								$symptomOfDifferentRemedy = (isset($remedyWithSymptomReturnArr['data'][0]['symptom_of_different_remedy'])) ? $remedyWithSymptomReturnArr['data'][0]['symptom_of_different_remedy'] : "";
							}else{
								$needApproval = 1;
							}

							if($needApproval == 1){
								$referenceWithNoAuthorPriority = 0;
								$aaoHyphenPriority = 0;
								$hyphenPrueferPriority = 0;
								$hyphenReferencePriority = 0;
								$moreThanOneTagStringPriority = 0;
								$prueferPriority = 0;
								$referencePriority = 0;
								$remedyPriority = 0;
								$remedyWithSymptomPriority = 9;
								$partOfSymptomPriority = 10;
							}
						}
					}
					else if(($isCommaExist != 0 OR $isSemicolonExist != 0) OR $isDotExist == 1){
						/*
						* 6.3. One or more comma OR one dot
						*
						* 1 = part of symptom
						* 2 = chcek for remedis by spliting by comma
						*/
						$workingString = trim($lastBracketedString);
						if($isCommaExist != 0 OR $isSemicolonExist != 0){
		      				if (mb_strpos($workingString, ',') !== false)
								$separator = ",";
							else if (mb_strpos($workingString, ';') !== false)
								$separator = ";";
							$expectedRemedyArray = explode($separator, $workingString);
						}else{
							if (mb_strpos($workingString, '.') !== false){
								// Split by dot(.)
								$makeStringToExplode = str_replace('.', '.{#^#}', $workingString);
								$expectedRemedyArray = explode("{#^#}", $makeStringToExplode);
							}
							else
								$expectedRemedyArray[] = $workingString;
						}

						if(!empty($expectedRemedyArray)){
							/* REMEDY START */
							$checkRemedyApprovalStatus = 0;
							foreach ($expectedRemedyArray as $expectedRemedyKey => $expectedRemedyVal) {
								if($expectedRemedyVal == "")
									continue;	

								$cleanExpectedRemedyName = trim($expectedRemedyVal);
								$cleanRemedyString = (mb_substr ( $cleanExpectedRemedyName, mb_strlen ( $cleanExpectedRemedyName ) - 1, 1 ) == '.') ? $cleanExpectedRemedyName : $cleanExpectedRemedyName.'.'; 
								$remedyReturnArr = newLookupRemedy($cleanRemedyString);
								if(isset($remedyReturnArr['need_approval']) AND $remedyReturnArr['need_approval'] == 1){
									$checkRemedyApprovalStatus = 1;
									if(!empty($remedyReturnArr['data'])){
										foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
											// custom_in_array(needle, needle_field, array) 
											if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $remedyArray) != true)
												$remedyArray[] = $remedyReturnArr['data'][$remedyReturnKey];
										}

									}
									else{
										$dataArr = array();
										$dataArr['remedy_id'] = null;
										$dataArr['name'] = $cleanExpectedRemedyName;
										$dataArr['kuerzel'] = "";
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($dataArr['name'], 'name', $remedyArray) != true)
											$remedyArray[] = $dataArr;
									}
								}
								else{
									foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $remedyArray) != true)
											$remedyArray[] = $remedyReturnArr['data'][$remedyReturnKey];
									}
								}
							}
							// Setting last operations approval status to main approval checking variable 
							$needApproval = $checkRemedyApprovalStatus; 
							/* REMEDY END */
						}

						if($needApproval == 1){
							$referenceWithNoAuthorPriority = 0;
							$aaoHyphenPriority = 0;
							$hyphenPrueferPriority = 0;
							$hyphenReferencePriority = 0;
							$moreThanOneTagStringPriority = 0;
							$prueferPriority = 0;
							$referencePriority = 0;
							$remedyWithSymptomPriority = 0;
							$partOfSymptomPriority = 9;
							$remedyPriority = 10;
						}
					}
					/* Middle bracket approval end*/
				}else{
					/* End bracket approval start */
					if($isPreDefinedTagsApprovalGet == 1){
						// This section works when there is unknown data in pre defined tags START
						if($isPreDefinedTagsApprovalGet == 1 AND $tagParameter == "pruefer"){
							$isPreDefinedTagsApproval = 1;
							$ckeckPApproval = 0;
							$tagsApproalStringForPrue = "";
							foreach ($approvalStraingArray as $prueferPkey => $prueferPval) {
								$prueferPval = trim($prueferPval);
								$tagsApproalStringForPrue .= $prueferPval."{#^#}";

								$cleanPrueferString = (mb_substr ( $prueferPval, mb_strlen ( $prueferPval ) - 1, 1 ) == '.') ? $prueferPval : $prueferPval.'.'; 
								$prueferReturnArr = lookupPruefer($cleanPrueferString);
								if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
									$ckeckPApproval = 1;
									
									if(!empty($prueferReturnArr['data'])){
										foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
												$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
										}
									}
									else{
										$dataArr = array();
										$dataArr['pruefer_id'] = null;
										$dataArr['kuerzel'] = null;
										$dataArr['suchname'] = trim($prueferPval);
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($dataArr['suchname'], 'suchname', $prueferArray) != true)
											$prueferArray[] = $dataArr;
									}
								}
								else{
									foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
											$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
									}
								}
							}

							if($ckeckPApproval == 1){
								$needApproval = 1;

								$tagsApprovalString = $tagsApproalStringForPrue;
								$tagsApprovalString = rtrim($tagsApprovalString, "{#^#}");

								$foundPrueferStringArray = explode("{#^#}", $tagsApprovalString);
								if(count($foundPrueferStringArray) > 1){
									$referencePriority = 0;
									$referenceWithNoAuthorPriority = 0;
									$remedyWithSymptomPriority = 0;
									$remedyPriority = 0;
									$partOfSymptomPriority = 0;
									$prueferPriority = 0;
									$aaoHyphenPriority = 0;
									$hyphenPrueferPriority = 0;
									$hyphenReferencePriority = 0;
									$moreThanOneTagStringPriority = 10;
								}else{
									$referencePriority = 0;
									$referenceWithNoAuthorPriority = 0;
									$remedyWithSymptomPriority = 0;
									$remedyPriority = 0;
									$partOfSymptomPriority = 0;
									$aaoHyphenPriority = 0;
									$hyphenPrueferPriority = 0;
									$hyphenReferencePriority = 0;
									$moreThanOneTagStringPriority = 0;
									$prueferPriority = 10;
								}
							}else{
								$needApproval = 0;
							}
						}
						else if($isPreDefinedTagsApprovalGet == 1 AND $tagParameter == "reference"){
							$isPreDefinedTagsApproval = 1;
							$tagsApproalStringForRef = ""; 
							$ckeckRApproval = 0;
							foreach ($approvalStraingArray as $refKey => $refVal) {
								$refVal = trim($refVal);
								$tagsApproalStringForRef .= $refVal."{#^#}";
								$referenceReturnArr = lookupLiteratureReference($refVal);
								if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
									$ckeckRApproval = 1;

									if(!empty($referenceReturnArr['data'])){
										foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true)
												$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
										}
									}
									else{
										$fullReferenceInArray = explode(",", $refVal);
										if(count($fullReferenceInArray) >= 2){
											$referenceAutor = trim($fullReferenceInArray[0]);
							        		array_shift($fullReferenceInArray);
							        		$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
										}else{
											$referenceAutor = "";
											$referenceTxt = $refVal;
										}
										
										$dataArr = array();
										$dataArr['reference_id'] = null;
										$dataArr['full_reference'] = $refVal;
										$dataArr['autor'] = $referenceAutor;
										$dataArr['reference'] = $referenceTxt;
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($dataArr['full_reference'], 'full_reference', $referenceArray) != true)
											$referenceArray[] = $dataArr;
									}
								}else{
									foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
											$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
											$aLiteraturquellen [$refKey] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
										}
									}
								}
							}

							if($ckeckRApproval == 1){
								$needApproval = 1;

								$aLiteraturquellen = array(); 
								$tagsApprovalString = $tagsApproalStringForRef;
								$tagsApprovalString = rtrim($tagsApprovalString, "{#^#}");

								$foundReferenceStringArray = explode("{#^#}", $tagsApprovalString);

								if(count($foundReferenceStringArray) > 1){
									$partOfSymptomPriority = 0;
									$remedyWithSymptomPriority = 0;
									$prueferPriority = 0;
									$remedyPriority = 0;
									$referencePriority = 0;
									$referenceWithNoAuthorPriority = 0;
									$aaoHyphenPriority = 0;
									$hyphenPrueferPriority = 0;
									$hyphenReferencePriority = 0;
									$moreThanOneTagStringPriority = 10;
								}else{
									$partOfSymptomPriority = 0;
									$remedyWithSymptomPriority = 0;
									$prueferPriority = 0;
									$remedyPriority = 0;
									$aaoHyphenPriority = 0;
									$hyphenPrueferPriority = 0;
									$hyphenReferencePriority = 0;
									$moreThanOneTagStringPriority = 0;
									$referenceWithNoAuthorPriority = 0;
									$referencePriority = 10;
								}
							}else{
								$needApproval = 0;
							}
						}
						else if($isPreDefinedTagsApprovalGet == 1 AND $tagParameter == "multitag"){
							$isPreDefinedTagsApproval = 1;
							$tagsApproalStringForRef = ""; 
							$ckeckRApproval = 0;
							foreach ($approvalStraingArray as $refKey => $refVal) {
								$refVal = trim($refVal);
								$tagsApproalStringForRef .= $refVal."{#^#}";
								$referenceReturnArr = lookupLiteratureReference($refVal);
								if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
									$ckeckRApproval = 1;

									if(!empty($referenceReturnArr['data'])){
										foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true)
												$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
										}
									}
									else{
										$fullReferenceInArray = explode(",", $refVal);
										if(count($fullReferenceInArray) >= 2){
											$referenceAutor = trim($fullReferenceInArray[0]);
							        		array_shift($fullReferenceInArray);
							        		$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
										}else{
											$referenceAutor = "";
											$referenceTxt = $refVal;
										}
										
										$dataArr = array();
										$dataArr['reference_id'] = null;
										$dataArr['full_reference'] = $refVal;
										$dataArr['autor'] = $referenceAutor;
										$dataArr['reference'] = $referenceTxt;
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($dataArr['full_reference'], 'full_reference', $referenceArray) != true)
											$referenceArray[] = $dataArr;
									}
								}else{
									foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
											$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
											$aLiteraturquellen [$refKey] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
										}
									}
								}
							}

							$ckeckPApproval = 0;
							$tagsApproalStringForPrue = "";
							foreach ($approvalStraingArray as $prueferPkey => $prueferPval) {
								$prueferPval = trim($prueferPval);
								$tagsApproalStringForPrue .= $prueferPval."{#^#}";

								$cleanPrueferString = (mb_substr ( $prueferPval, mb_strlen ( $prueferPval ) - 1, 1 ) == '.') ? $prueferPval : $prueferPval.'.'; 
								$prueferReturnArr = lookupPruefer($cleanPrueferString);
								if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
									$ckeckPApproval = 1;
									
									if(!empty($prueferReturnArr['data'])){
										foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
												$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
										}
									}
									else{
										$dataArr = array();
										$dataArr['pruefer_id'] = null;
										$dataArr['kuerzel'] = null;
										$dataArr['suchname'] = trim($prueferPval);
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($dataArr['suchname'], 'suchname', $prueferArray) != true)
											$prueferArray[] = $dataArr;
									}
								}
								else{
									foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
											$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
									}
								}
							}

							if($ckeckPApproval == 1 OR $ckeckRApproval == 1){
								$tagsApprovalString = $tagsApproalStringForPrue.$tagsApproalStringForRef;
								$tagsApprovalString = rtrim($tagsApprovalString, "{#^#}");

								$needApproval = 1;

								$referencePriority = 0;
								$referenceWithNoAuthorPriority = 0;
								$remedyWithSymptomPriority = 0;
								$partOfSymptomPriority = 0;
								$remedyPriority = 0;
								$prueferPriority = 0;
								$aaoHyphenPriority = 0;
								$hyphenPrueferPriority = 0;
								$hyphenReferencePriority = 0;
								$moreThanOneTagStringPriority = 10;
							}else{
								$needApproval = 0;
							}
						}
						// This section works when there is unknown data in pre defined tags END
					}
					else if($isCommaExist == 0 AND $isSemicolonExist == 0 AND $isHyphenExist == 0 AND $isAaoExist === false AND $isAaoWithoutSpaceExist === false AND $isAaoAllLowerWithoutSpaceExist === false AND $isAaoAllLowerWithSpaceExist === false)
					{
						// No Comma AND No Semicolon AND No Hyphen AND No , a. a. O. START

						$workingString = trim($lastBracketedString);
						$expectedRemedyArray = array();
						/*
						* COMMON LOOKUP SECTION START
						*/
						if (mb_strpos($workingString, '.') !== false){
							// Split by dot(.)
							$makeStringToExplode = str_replace('.', '.{#^#}', $workingString);
							$expectedRemedyArray = explode("{#^#}", $makeStringToExplode);
						}
						else
							$expectedRemedyArray[] = $workingString;

						/* REMEDY START */
						$checkRemedyApprovalStatus = 0;
						foreach ($expectedRemedyArray as $expectedRemedyKey => $expectedRemedyVal) {
							if($expectedRemedyVal == "")
								continue;	

							$cleanExpectedRemedyName = trim($expectedRemedyVal);
							$cleanRemedyString = (mb_substr ( $cleanExpectedRemedyName, mb_strlen ( $cleanExpectedRemedyName ) - 1, 1 ) == '.') ? $cleanExpectedRemedyName : $cleanExpectedRemedyName.'.';
							$remedyReturnArr = newLookupRemedy($cleanRemedyString);
							if(isset($remedyReturnArr['need_approval']) AND $remedyReturnArr['need_approval'] == 1){
								$checkRemedyApprovalStatus = 1;
								if(!empty($remedyReturnArr['data'])){
									foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $remedyArray) != true)
											$remedyArray[] = $remedyReturnArr['data'][$remedyReturnKey];
									}
								}
								else{
									$dataArr = array();
									$dataArr['remedy_id'] = null;
									$dataArr['name'] = $cleanExpectedRemedyName;
									$dataArr['kuerzel'] = "";
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($dataArr['name'], 'name', $remedyArray) != true)
										$remedyArray[] = $dataArr;
								}
							}
							else{
								foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $remedyArray) != true)
										$remedyArray[] = $remedyReturnArr['data'][$remedyReturnKey];
								}
							}
						}

						// Setting last operations approval status to main approval checking variable 
						$needApproval = $checkRemedyApprovalStatus; 
						/* REMEDY END */

						/* PRUEFER STRAT */
						if($needApproval == 1){
							$cleanPrueferString = (mb_substr ( $workingString, mb_strlen ( $workingString ) - 1, 1 ) == '.') ? $workingString : $workingString.'.'; 
							$prueferReturnArr = lookupPruefer($cleanPrueferString);
							if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
								if(!empty($prueferReturnArr['data'])){
									foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
											$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
									}
								}else{
									$dataArr = array();
									$dataArr['pruefer_id'] = null;
									$dataArr['kuerzel'] = null;
									$dataArr['suchname'] = $workingString;
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($dataArr['suchname'], 'suchname', $prueferArray) != true)
										$prueferArray[] = $dataArr;
								}
							}
							else{
								$needApproval = 0;
								$remedyArray = array();
								foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
										$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
								}
							}
						}
						/* PRUEFER END */

						/* REFERENCE WITH NO AUTHOR START */
						if($needApproval == 1){
							$noAuthorWorkingString = "No Author, ".trim($workingString);
							$referenceReturnArr = lookupLiteratureReference($noAuthorWorkingString);
							if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){

								if(!empty($referenceReturnArr['data'])){
									foreach ($referenceReturnArr['data'] as $refKey => $refVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($referenceReturnArr['data'][$refKey]['reference_id'], 'reference_id', $referenceArray) != true)
											$referenceArray[] = $referenceReturnArr['data'][$refKey];
									}
								}
								else{
									$fullReferenceInArray = explode(",", $noAuthorWorkingString);
									if(count($fullReferenceInArray) >= 2){
										$referenceAutor = trim($fullReferenceInArray[0]);
						        		array_shift($fullReferenceInArray);
						        		$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
									}else{
										$referenceAutor = "No Author";
										$referenceTxt = $workingString;
									}
									
									$dataArr = array();
									$dataArr['reference_id'] = null;
									$dataArr['full_reference'] = $noAuthorWorkingString;
									$dataArr['autor'] = $referenceAutor;
									$dataArr['reference'] = $referenceTxt;
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($dataArr['full_reference'], 'full_reference', $referenceArray) != true)
										$referenceArray[] = $dataArr;
								}

							}else{
								$needApproval = 0;
								$prueferArray = array();
								$remedyArray = array();
								foreach ($referenceReturnArr['data'] as $refKey => $refVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($referenceReturnArr['data'][$refKey]['reference_id'], 'reference_id', $referenceArray) != true){
										$referenceArray[] = $referenceReturnArr['data'][$refKey];
										$aLiteraturquellen [] = ($referenceReturnArr['data'][$refKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$refKey]['full_reference']) : "";
									}
								}
							}
						}
						/* REFERENCE WITH NO AUTHOR END */

						/*
						* COMMON LOOKUP SECTION END
						*/

						$wordsInLastString = explode(" ", $lastBracketedString);
						if(!empty($wordsInLastString)){
							if(count($wordsInLastString) == 1){
								/*
								* (A) SINGLE WORD START
								*/
								
								if($isDotExist != 0){
									// Single word has dot START
									if( isFirstCharacterUppercase($workingString) === true){
										/*
										* (A1) If the word + dot has uppercase (I mean only the first character is uppercase)
										*
										* 1 = chcek for remedy
										* 2 = chcek for part of symptom
										* 3 = chcek for pruefer
										*/
										if($needApproval == 1){
											$referencePriority = 0;
											$referenceWithNoAuthorPriority = 0;
											$remedyWithSymptomPriority = 0;
											$aaoHyphenPriority = 0;
											$hyphenPrueferPriority = 0;
											$hyphenReferencePriority = 0;
											$moreThanOneTagStringPriority = 0;
											$remedyPriority = 8;
											$partOfSymptomPriority = 9;
											$prueferPriority = 10;
										}
									}else{
										/*
										* (A2) If the word + dot is lowercase
										*
										* 1 = chcek for part of symptom
										* 2 = chcek for remedy
										*/
										if($needApproval == 1){
											// As we are not going to ask Pruefer Question, making $prueferArray array empty and $prueferPriority = 0
											$prueferArray = array();
											$referencePriority = 0;
											$referenceWithNoAuthorPriority = 0;
											$remedyWithSymptomPriority = 0;
											$prueferPriority = 0;
											$aaoHyphenPriority = 0;
											$hyphenPrueferPriority = 0;
											$hyphenReferencePriority = 0;
											$moreThanOneTagStringPriority = 0;
											$partOfSymptomPriority = 9;
											$remedyPriority = 10;
										}
									}
									// Single word has dot END
								}else{
									// Single word don't have any dot START
									if( isFirstCharacterUppercase($workingString) === true){
										/*
										* (A4) Single word uppercase without dot (I mean only the first character is uppercase)
										*
										* 1 = chcek for remedy
										* 2 = chcek for part of symptom
										* 3 = chcek for pruefer
										*/
										if($needApproval == 1){
											$referencePriority = 0;
											$referenceWithNoAuthorPriority = 0;
											$remedyWithSymptomPriority = 0;
											$aaoHyphenPriority = 0;
											$hyphenPrueferPriority = 0;
											$hyphenReferencePriority = 0;
											$moreThanOneTagStringPriority = 0;
											$remedyPriority = 8;
											$partOfSymptomPriority = 9;
											$prueferPriority = 10;
										}
									}else{
										/*
										* (A3) Single word lowercase without dot
										*
										* 1 = chcek for part of symptom
										* 2 = chcek for remedy
										* 3 = chcek for pruefer
										*/
										if($needApproval == 1){
											$referencePriority = 0;
											$referenceWithNoAuthorPriority = 0;
											$remedyWithSymptomPriority = 0;
											$aaoHyphenPriority = 0;
											$hyphenPrueferPriority = 0;
											$hyphenReferencePriority = 0;
											$moreThanOneTagStringPriority = 0;
											$partOfSymptomPriority = 8;
											$remedyPriority = 9;
											$prueferPriority = 10;
										}
									}
									// Single word don't have any dot END
								}

								/*
								* (A) SINGLE WORD END
								*/
							}
							else
							{
								/* 
								* (B) MORE THAN ONE WORD (case insensitive i.e., upper or lower case does not matter) START 
								*/
								if($isDotExist != 0){
									/*
									* (B1) Words have one or more than one dot(s)
									*
									* 1 = chcek for part of symptom
									* 2 = chcek for n remedies splited by dot(.)
									* 3 = chcek for pruefer
									* 4 = chcek for reference with no author
									*/

									if($needApproval == 1){
										$remedyWithSymptomPriority = 0;
										$aaoHyphenPriority = 0;
										$hyphenPrueferPriority = 0;
										$hyphenReferencePriority = 0;
										$moreThanOneTagStringPriority = 0;
										$referencePriority = 0;
										$partOfSymptomPriority = 7;
										$remedyPriority = 8;
										$prueferPriority = 9;
										$referenceWithNoAuthorPriority = 10;
									}

								}else{
									/*
									* (B1) Words have NO dot(s)
									*
									* 1 = chcek for part of symptom
									* 2 = chcek for remedy
									* 3 = chcek for pruefer
									*/

									if($needApproval == 1){
										$referencePriority = 0;
										$referenceWithNoAuthorPriority = 0;
										$remedyWithSymptomPriority = 0;
										$aaoHyphenPriority = 0;
										$hyphenPrueferPriority = 0;
										$hyphenReferencePriority = 0;
										$moreThanOneTagStringPriority = 0;
										$partOfSymptomPriority = 8;
										$remedyPriority = 9;
										$prueferPriority = 10;
									}
								}

								/* 
								* (B) MORE THAN ONE WORD (case insensitive i.e., upper or lower case does not matter) END 
								*/
							}
						}
						// No Comma AND No Semicolon AND No Hyphen AND No , a. a. O. END
					}
					else if(($isCommaExist != 0 OR $isSemicolonExist != 0) AND $isHyphenExist == 0 AND $isAaoExist === false AND $isAaoWithoutSpaceExist === false AND $isAaoAllLowerWithoutSpaceExist === false AND $isAaoAllLowerWithSpaceExist === false)
					{
						// With Comma OR Semicolon AND NO Hyphen AND No , a. a. O. START
						if (mb_strpos($lastBracketedString, ',') !== false) 
							$separator = ",";
						else
							$separator = ";";

						$commaFirstOccurrence = mb_stripos ( $lastBracketedString, $separator );
						$beforeTheCommaString = trim( mb_substr ( $lastBracketedString, 0, $commaFirstOccurrence ) );
						$afterTheCommaString = trim( ltrim( mb_substr ( $lastBracketedString, $commaFirstOccurrence ), $separator ));
						$beforeTheCommaStringInArray = explode(" ", $beforeTheCommaString);
						$afterTheCommaStringInArray = explode(" ", $afterTheCommaString);

						$isDotExistInBeforeTheCommaString = mb_substr_count($beforeTheCommaString,".");
						$isDotExistInAfterTheCommaString = mb_substr_count($afterTheCommaString,".");
						
						$upperCaseCheckInBeforeTheCommaStr = isThereAnyUppercase($beforeTheCommaString);
						$upperCaseCheckInAfterTheCommaStr = isThereAnyUppercase($afterTheCommaString);
						$isFirstCharUpperBeforeTheCommaStr = isFirstCharacterUppercase($beforeTheCommaString);

						$workingString = trim($lastBracketedString);

						/*
						* COMMON LOOKUP SECTION START
						*/

						/* REMEDY START */
						$checkRemedyApprovalStatus = 0;
						$expectedRemedyArray = explode($separator, $workingString);
						foreach ($expectedRemedyArray as $expectedRemedyKey => $expectedRemedyVal) {
							if($expectedRemedyVal == "")
								continue;	

							$cleanExpectedRemedyName = trim($expectedRemedyVal);
							$cleanRemedyString = (mb_substr ( $cleanExpectedRemedyName, mb_strlen ( $cleanExpectedRemedyName ) - 1, 1 ) == '.') ? $cleanExpectedRemedyName : $cleanExpectedRemedyName.'.'; 
							$remedyReturnArr = newLookupRemedy($cleanRemedyString);
							if(isset($remedyReturnArr['need_approval']) AND $remedyReturnArr['need_approval'] == 1){
								$checkRemedyApprovalStatus = 1;
								if(!empty($remedyReturnArr['data'])){
									foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
										// custom_in_array(needle, needle_field, array) 
										if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $remedyArray) != true)
											$remedyArray[] = $remedyReturnArr['data'][$remedyReturnKey];
									}

								}
								else{
									$dataArr = array();
									$dataArr['remedy_id'] = null;
									$dataArr['name'] = $cleanExpectedRemedyName;
									$dataArr['kuerzel'] = "";
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($dataArr['name'], 'name', $remedyArray) != true)
										$remedyArray[] = $dataArr;
								}
							}
							else{
								foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $remedyArray) != true)
										$remedyArray[] = $remedyReturnArr['data'][$remedyReturnKey];
								}
							}
						}
						// Setting last operations approval status to main approval checking variable 
						$needApproval = $checkRemedyApprovalStatus; 
						/* REMEDY END */

						/* REFERENCE START */
						if($needApproval == 1){
							$referenceReturnArr = lookupLiteratureReference($workingString);
							if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){

								if(!empty($referenceReturnArr['data'])){
									foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true)
											$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
									}
								}
								else{
									$fullReferenceInArray = explode(",", $workingString);
									if(count($fullReferenceInArray) >= 2){
										$referenceAutor = trim($fullReferenceInArray[0]);
						        		array_shift($fullReferenceInArray);
						        		$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
									}else{
										$referenceAutor = "";
										$referenceTxt = $workingString;
									}
									
									$dataArr = array();
									$dataArr['reference_id'] = null;
									$dataArr['full_reference'] = $workingString;
									$dataArr['autor'] = $referenceAutor;
									$dataArr['reference'] = $referenceTxt;
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($dataArr['full_reference'], 'full_reference', $referenceArray) != true)
										$referenceArray[] = $dataArr;
								}

							}else{
								$needApproval = 0;
								$remedyArray = array();
								foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
										$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
										$aLiteraturquellen [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
									}	
								}
							}
						}
						/* REFERENCE END */

						/* PRUEFER START */
						if($needApproval == 1){
							$checkPrueferApprovalStatus = 0;
							$expectedPruefersArray = explode($separator, $workingString);
							foreach ($expectedPruefersArray as $expectedPrueferKey => $expectedPrueferVal) {
								if($expectedPrueferVal == "")
									continue;

								$cleanPrueferString = trim($expectedPrueferVal); 
								$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
								$prueferReturnArr = lookupPruefer($cleanPrueferString);
								if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
									$checkPrueferApprovalStatus = 1;
									if(!empty($prueferReturnArr['data'])){
										foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
												$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
										}
									}
									else{
										$dataArr = array();
										$dataArr['pruefer_id'] = null;
										$dataArr['kuerzel'] = null;
										$dataArr['suchname'] = $cleanPrueferString;
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($dataArr['suchname'], 'suchname', $prueferArray) != true)
											$prueferArray[] = $dataArr;
									}
								}
								else{
									$remedyArray = array();
									$referenceArray = array();
									$aLiteraturquellen = array();
									foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
											$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
									}
								}	
							}

							$needApproval = $checkPrueferApprovalStatus; 
						}
						/* PRUEFER END */
						/*
						* COMMON LOOKUP SECTION END
						*/

						/* Rule 2 Conditions START */
						if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString != 0 AND $isDotExistInAfterTheCommaString !=0){
							/*
							* 2.1 Single word + dot before the comma and one or more words + dot after comma (no matter if upper or lower case)
							*
							* 1 = chcek for remedis by spliting by comma
							*/

							if($needApproval == 1){
								$referenceWithNoAuthorPriority = 0;
								$aaoHyphenPriority = 0;
								$hyphenPrueferPriority = 0;
								$hyphenReferencePriority = 0;
								$moreThanOneTagStringPriority = 0;
								$remedyWithSymptomPriority = 0;
								$prueferPriority = 0;
								$partOfSymptomPriority = 0;
								$referencePriority = 0;
								$remedyPriority = 10;
							}

						}else if($isCommaExist == 1 AND ((count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 1) OR (count($afterTheCommaStringInArray) == 1 AND $isDotExistInAfterTheCommaString == 1))){
							/*
							* 2.2. Single word + dot before the comma or after a comma (only one dot and one comma)
							*
							* 1 = check for remedy with symptom text (Eg: Opi., during the day)(Eg: small boils in crops, Sulph.)
							* 2 = part of symptom
							*/
							if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 1){
								$similarRemedyString = $beforeTheCommaString;
								$similarSymptomString = $afterTheCommaString;	
							}else{
								$similarRemedyString = $afterTheCommaString;
								$similarSymptomString = $beforeTheCommaString;
							}
							$cleanRemedyWithSymptomString = (mb_substr ( $workingString, mb_strlen ( $workingString ) - 1, 1 ) == '.') ? $workingString : $workingString.'.'; 
							$remedyWithSymptomReturnArr = newLookupRemedyWithSymptom($cleanRemedyWithSymptomString, $similarRemedyString, $similarSymptomString);
							if(isset($remedyWithSymptomReturnArr['need_approval']) AND $remedyWithSymptomReturnArr['need_approval'] == 0){
								$needApproval = 0;
								$remedyArray = array();
								$referenceArray = array();
								$aLiteraturquellen = array();
								$prueferArray = array();
								if(isset($remedyWithSymptomReturnArr['data'][0]['remedy']))
									$remedyArray = $remedyWithSymptomReturnArr['data'][0]['remedy'];
								$symptomOfDifferentRemedy = (isset($remedyWithSymptomReturnArr['data'][0]['symptom_of_different_remedy'])) ? $remedyWithSymptomReturnArr['data'][0]['symptom_of_different_remedy'] : "";
							}else{
								$needApproval = 1;
							}

							if($needApproval == 1){
								$referenceWithNoAuthorPriority = 0;
								$aaoHyphenPriority = 0;
								$hyphenPrueferPriority = 0;
								$hyphenReferencePriority = 0;
								$moreThanOneTagStringPriority = 0;
								$prueferPriority = 0;
								$referencePriority = 0;
								$remedyPriority = 0;
								$remedyWithSymptomPriority = 9;
								$partOfSymptomPriority = 10;
							}

						}else if(count($beforeTheCommaStringInArray) > 1 AND $upperCaseCheckInBeforeTheCommaStr === false AND $isDotExist == 0 AND count($afterTheCommaStringInArray) > 1){
							/*
							* 2.3. More than one word before comma in lower case (no dots) and no single word + dot in the bracket
							*
							* 1 = part of symptom
							*/

							if($needApproval == 1){
								$referenceWithNoAuthorPriority = 0;
								$aaoHyphenPriority = 0;
								$hyphenPrueferPriority = 0;
								$hyphenReferencePriority = 0;
								$moreThanOneTagStringPriority = 0;
								$prueferPriority = 0;
								$referencePriority = 0;
								$remedyPriority = 0;
								$remedyWithSymptomPriority = 0;
								$partOfSymptomPriority = 10;
							}
						}else if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 0 AND $isFirstCharUpperBeforeTheCommaStr === true){ 
							/*
							* 2.4. Single word upper case without dot before the comma
							*
							* 1 = check for reference
							* 2 = part of symptom
							* 3 = chcek for remedis by spliting by comma
							* 4 = pruefer
							*/

							if($needApproval == 1){
								$referenceWithNoAuthorPriority = 0;
								$aaoHyphenPriority = 0;
								$hyphenPrueferPriority = 0;
								$hyphenReferencePriority = 0;
								$moreThanOneTagStringPriority = 0;
								$remedyWithSymptomPriority = 0;
								$referencePriority = 7;
								$partOfSymptomPriority = 8;
								$remedyPriority = 9;
								$prueferPriority = 10;
							}
						}else if($upperCaseCheckInBeforeTheCommaStr === false AND $isDotExist == 0){
							/*
							* 2.5. One or more words lower case without dot before the comma (no dot in the bracket part)
							*
							* 1 = part of symptom
							*/

							if($needApproval == 1){
								$referenceWithNoAuthorPriority = 0;
								$aaoHyphenPriority = 0;
								$hyphenPrueferPriority = 0;
								$hyphenReferencePriority = 0;
								$moreThanOneTagStringPriority = 0;
								$prueferPriority = 0;
								$referencePriority = 0;
								$remedyPriority = 0;
								$remedyWithSymptomPriority = 0;
								$partOfSymptomPriority = 10;
							}
						}else if(count($beforeTheCommaStringInArray) > 1 AND $isFirstCharUpperBeforeTheCommaStr === true AND $isDotExistInBeforeTheCommaString != 0 ){
							/*
							* 2.6. More than one word with at least one dot before the comma(all words upper case)
							*
							* 1 = check for reference
							* 2 = check for pruefer
							* 3 = chcek for remedis by spliting by comma
							*/

							if($needApproval == 1){
								$referenceWithNoAuthorPriority = 0;
								$aaoHyphenPriority = 0;
								$hyphenPrueferPriority = 0;
								$hyphenReferencePriority = 0;
								$moreThanOneTagStringPriority = 0;
								$remedyWithSymptomPriority = 0;
								$partOfSymptomPriority = 0;
								$referencePriority = 8;
								$prueferPriority = 9;
								$remedyPriority = 10;
							}
						}else if(count($beforeTheCommaStringInArray) > 1 AND $isFirstCharUpperBeforeTheCommaStr === true AND $isDotExistInBeforeTheCommaString == 0){
							/*
							* 2.7. More than one word (no dots) before comma (all words upper case)
							*
							* 1 = check for reference
							* 2 = check for pruefer
							*/

							if($needApproval == 1){
								$referenceWithNoAuthorPriority = 0;
								$aaoHyphenPriority = 0;
								$hyphenPrueferPriority = 0;
								$hyphenReferencePriority = 0;
								$moreThanOneTagStringPriority = 0;
								$remedyWithSymptomPriority = 0;
								$partOfSymptomPriority = 0;
								$remedyPriority = 0;
								$referencePriority = 9;
								$prueferPriority = 10;
							}
						}else if(count($beforeTheCommaStringInArray) > 1 AND $isDotExistInBeforeTheCommaString == 0 AND $upperCaseCheckInBeforeTheCommaStr === true){
							/*
							* 2.8. More than one word mixed lower & upper case (no dots) before comma(all the words cannot be in one case)
							*
							* 1 = part of symptom
							* 2 = check for reference
							*/
							if($needApproval == 1){
								$referenceWithNoAuthorPriority = 0;
								$aaoHyphenPriority = 0;
								$hyphenPrueferPriority = 0;
								$hyphenReferencePriority = 0;
								$moreThanOneTagStringPriority = 0;
								$remedyWithSymptomPriority = 0;
								$remedyPriority = 0;
								$prueferPriority = 0;
								$partOfSymptomPriority = 9;
								$referencePriority = 10;
							}
						}else if(count($beforeTheCommaStringInArray) > 1 AND $upperCaseCheckInBeforeTheCommaStr === true AND $isDotExistInBeforeTheCommaString != 0){
							/*
							* 2.9. More than one word mixed lower & upper case with at least one dotbefore comma(all the words cannot be in one case)
							*
							* 1 = chcek for remedis by spliting by comma
							* 2 = check for reference
							*/ 

							if($needApproval == 1){
								$referenceWithNoAuthorPriority = 0;
								$aaoHyphenPriority = 0;
								$hyphenPrueferPriority = 0;
								$hyphenReferencePriority = 0;
								$moreThanOneTagStringPriority = 0;
								$remedyWithSymptomPriority = 0;
								$prueferPriority = 0;
								$partOfSymptomPriority = 0;
								$remedyPriority = 9;
								$referencePriority = 10;
							}
						}
						/* Rule 2 Conditions END */

						// With Comma OR Semicolon AND NO Hyphen AND No , a. a. O. END
					}
					else if(($isAaoExist !== false OR $isAaoWithoutSpaceExist !== false OR $isAaoAllLowerWithoutSpaceExist !== false OR $isAaoAllLowerWithSpaceExist !== false) AND $isHyphenExist != 0)
					{
						// When string has both ", a. a. O." and hyphen START
						$workingString = trim($lastBracketedString);
						$eachElement = explode(" - ", $workingString); 
						$referenceArray = array();
						$aLiteraturquellen = array();
						$prueferArray = array();
						$countUnknownElement = 0;
						foreach ($eachElement as $elementKey => $elementVal) {
							$innerApprovalChecking = 0;
							// Lookup in same import data 
							$elementString = str_replace("a. a. O.", "{#^#}", $elementVal);
							$elementString = str_replace("a.a.O.", "{#^#}", $elementString);
							$elementString = str_replace("a.a.o.", "{#^#}", $elementString);
							$elementString = str_replace("a. a. o.", "{#^#}", $elementString);
							$searchAuthorPreName = trim($elementString);
							$aaoPosition = mb_strpos($searchAuthorPreName, '{#^#}');
							if($aaoPosition !== false){
								$searchAuthorPreName = mb_substr($searchAuthorPreName, 0, $aaoPosition);
							}
							$searchAuthorPreName = str_replace("{#^#}", "", $searchAuthorPreName);
							$searchAuthorName = trim($searchAuthorPreName);

							if($searchAuthorName != ""){
								/* 
								* Check the last appearence of this elemet in temp_approved_pruefer and temp_approved_reference table
								* if no match data found than "aao_hyphen_priority" question will be ask
								*/
								// Checking pruefer
								$cleanPrueferString = trim($searchAuthorName); 
								$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
								$prueferReturnArr = lookupPrueferInCurrentImport($cleanPrueferString, $masterId, $tempSymptomId);
								if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
									$innerApprovalChecking = 1;
								}
								else{
									$innerApprovalChecking = 0;
									foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
											$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
									}
								}

								if($innerApprovalChecking == 1){
									// Check reference
									$cleanReferenceString = trim($searchAuthorName);
									$referenceReturnArr = lookupReferenceInCurrentImport($cleanReferenceString, $masterId, $tempSymptomId);
									if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
										$innerApprovalChecking = 1;
									}else{
										$innerApprovalChecking = 0;
										foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
												$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
												$aLiteraturquellen [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
											}	
										}
									}
								}

								// Normal lookup
								// Check pruefer
								if($innerApprovalChecking == 1){
									$cleanPrueferString = trim($searchAuthorName); 
									$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
									$prueferReturnArr = lookupPruefer($cleanPrueferString);
									if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
										$innerApprovalChecking = 1;
										if(!empty($prueferReturnArr['data'])){
											foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
												// custom_in_array(needle, needle_field, array)
												if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true){
													$prueferReturnArr['data'][$prueferReturnKey]['is_one_unknown_element_in_hyphen'] = 1;
													$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
												}
											}
										}
									}
									else{
										$innerApprovalChecking = 0;
										foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
												$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
										}
									}
								}

								// Checking Reference
								if($innerApprovalChecking == 1){
									$cleanReferenceString = trim($searchAuthorName);
									$referenceReturnArr = lookupLiteratureReference($cleanReferenceString);
									if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
										$innerApprovalChecking = 1;
										if(!empty($referenceReturnArr['data'])){
											foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
												// custom_in_array(needle, needle_field, array)
												if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
													$referenceReturnArr['data'][$referenceReturnKey]['is_one_unknown_element_in_hyphen'] = 1;
													$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
												}
											}
										}
									}else{
										$innerApprovalChecking = 0;
										foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
												$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
												$aLiteraturquellen [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
											}	
										}
									}
								}
							}

							// If unknown Data found incrementing the counter and setting the element value to $hyphenApprovalString
							if($innerApprovalChecking == 1){
								$countUnknownElement++;
								$hyphenApprovalString = trim($elementVal);
							}
						}

						// Set need approval value if unknown data found
						if($countUnknownElement > 0){
							$needApproval = 1;
							if($countUnknownElement != 1)
								$hyphenApprovalString = "";
						}

						/*
						* Rule 3 Last bracket words:  â, a. a. O.â or ", a.a.O." and Hyphen (hyphenhasspacebeforeand after ( - )) (whenbothexist)
						*
						* 1 = Unknown data found with a. a. O. or Hyphen( - )
						*/ 
						if($needApproval == 1){
							if($countUnknownElement == 1){
								$referenceWithNoAuthorPriority = 0;
								$moreThanOneTagStringPriority = 0;
								$remedyWithSymptomPriority = 0;
								$prueferPriority = 0;
								$partOfSymptomPriority = 0;
								$remedyPriority = 0;
								$referencePriority = 0;
								$aaoHyphenPriority = 0;
								$hyphenReferencePriority = 9;
								$hyphenPrueferPriority = 10;
							}else{
								// Making pruefer and reference array empty because these elements will be cleared by direct oredr or by correcting the symptom string. Also seting aao_hyphen_priority value for asking the question
								$referenceArray = array();
								$aLiteraturquellen = array();
								$prueferArray = array();

								$referenceWithNoAuthorPriority = 0;
								$moreThanOneTagStringPriority = 0;
								$remedyWithSymptomPriority = 0;
								$prueferPriority = 0;
								$partOfSymptomPriority = 0;
								$remedyPriority = 0;
								$referencePriority = 0;
								$hyphenReferencePriority = 0;
								$hyphenPrueferPriority = 0;
								$aaoHyphenPriority = 10;
							}
						}
						// When string has both ", a. a. O." and hyphen END 
					}
					else if($isHyphenExist != 0)
					{
						// When string has hyphen only START 
						$workingString = trim($lastBracketedString);
						$eachElement = explode(" - ", $workingString);
						$referenceArray = array();
						$aLiteraturquellen = array();
						$prueferArray = array();
						$countUnknownElement = 0;
						foreach ($eachElement as $elementKey => $elementVal) {
							$innerApprovalChecking = 0;
							/* 
							* Check the last appearence of this elemet in temp_approved_pruefer and temp_approved_reference table
							* if no match data found than "aao_hyphen_priority" question will be ask
							*/
							// Checking pruefer
							$cleanPrueferString = trim($elementVal); 
							$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
							$prueferReturnArr = lookupPruefer($cleanPrueferString);
							if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
								$innerApprovalChecking = 1;
								if(!empty($prueferReturnArr['data'])){
									foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true){
											$prueferReturnArr['data'][$prueferReturnKey]['is_one_unknown_element_in_hyphen'] = 1;
											$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
										}
									}
								}
							}
							else{
								$innerApprovalChecking = 0;
								foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
										$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
								}
							}

							if($innerApprovalChecking == 1){
								// Check reference
								$cleanReferenceString = trim($elementVal);
								$referenceReturnArr = lookupLiteratureReference($cleanReferenceString);
								if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
									$innerApprovalChecking = 1;
									if(!empty($referenceReturnArr['data'])){
										foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
												$referenceReturnArr['data'][$referenceReturnKey]['is_one_unknown_element_in_hyphen'] = 1;
												$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
											}
										}
									}
								}else{
									$innerApprovalChecking = 0;
									foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
											$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
											$aLiteraturquellen [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
										}	
									}
								}
							}

							// If unknown Data found incrementing the counter and setting the element value to $hyphenApprovalString
							if($innerApprovalChecking == 1){
								$countUnknownElement++;
								$hyphenApprovalString = trim($elementVal);
							}
						}

						// Set need approval value if unknown data found
						if($countUnknownElement > 0){
							$needApproval = 1;
							if($countUnknownElement != 1)
								$hyphenApprovalString = "";
						}

						/*
						* Rule 4 Last bracket words:  â, a. a. O.â or ", a.a.O." and Hyphen (hyphenhasspacebeforeand after ( - )) (whenbothexist)
						*
						* 1 = Unknown data found with a. a. O. or Hyphen( - )
						*/ 
						if($needApproval == 1){
							if($countUnknownElement == 1){
								$referenceWithNoAuthorPriority = 0;
								$moreThanOneTagStringPriority = 0;
								$remedyWithSymptomPriority = 0;
								$prueferPriority = 0;
								$partOfSymptomPriority = 0;
								$remedyPriority = 0;
								$referencePriority = 0;
								$aaoHyphenPriority = 0;
								$hyphenReferencePriority = 9;
								$hyphenPrueferPriority = 10;
							}else{
								// Making pruefer and reference array empty because these elements will be cleared by direct oredr or by correcting the symptom string. Also seting aao_hyphen_priority value for asking the question
								$referenceArray = array();
								$aLiteraturquellen = array();
								$prueferArray = array();

								$referenceWithNoAuthorPriority = 0;
								$moreThanOneTagStringPriority = 0;
								$remedyWithSymptomPriority = 0;
								$prueferPriority = 0;
								$partOfSymptomPriority = 0;
								$remedyPriority = 0;
								$referencePriority = 0;
								$hyphenReferencePriority = 0;
								$hyphenPrueferPriority = 0;
								$aaoHyphenPriority = 10;
							}
						}
						// When string has hyphen only START 
					}
					else if($isAaoExist !== false OR $isAaoWithoutSpaceExist !== false OR $isAaoAllLowerWithoutSpaceExist !== false OR $isAaoAllLowerWithSpaceExist !== false)
					{
						// When string has "a. a. O." only START 
						/* 
						* Check the last appearence of this elemet in temp_approved_pruefer and temp_approved_reference table
						* if no match data found than "aao_hyphen_priority" question will be ask
						*/
						$workingString = trim($lastBracketedString);

						$elementString = str_replace("a. a. O.", "{#^#}", $workingString);
						$elementString = str_replace("a.a.O.", "{#^#}", $elementString);
						$elementString = str_replace("a.a.o.", "{#^#}", $elementString);
						$elementString = str_replace("a. a. o.", "{#^#}", $elementString);
						$searchAuthorPreName = trim($elementString);
						$aaoPosition = mb_strpos($searchAuthorPreName, '{#^#}');
						if($aaoPosition !== false){
							$searchAuthorPreName = mb_substr($searchAuthorPreName, 0, $aaoPosition);
						}
						$searchAuthorPreName = str_replace("{#^#}", "", $searchAuthorPreName);
						$searchAuthorName = trim($searchAuthorPreName);

						if($searchAuthorName != ""){
							$innerApprovalChecking = 0;
							// Checking pruefer
							$cleanPrueferString = trim($searchAuthorName); 
							$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
							$prueferReturnArr = lookupPrueferInCurrentImport($cleanPrueferString, $masterId, $tempSymptomId);
							if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
								$innerApprovalChecking = 1;
							}
							else{
								$innerApprovalChecking = 0;
								foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
										$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
								}
							}

							if($innerApprovalChecking == 1){
								// Check reference
								$cleanReferenceString = trim($searchAuthorName);
								$referenceReturnArr = lookupReferenceInCurrentImport($cleanReferenceString, $masterId, $tempSymptomId);
								if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
									$innerApprovalChecking = 1;
								}else{
									$innerApprovalChecking = 0;
									foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
											$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
											$aLiteraturquellen [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
										}	
									}
								}
							}

							// Normal lookup
							// Check pruefer
							if($innerApprovalChecking == 1){
								$cleanPrueferString = trim($searchAuthorName); 
								$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
								$prueferReturnArr = lookupPruefer($cleanPrueferString);
								if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
									$prueferArray = array();
									$innerApprovalChecking = 1;
									if(!empty($prueferReturnArr['data'])){
										foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
												$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
										}
									}
								}
								else{
									$innerApprovalChecking = 0;
									foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
											$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
									}
								}
							}

							// Checking Reference
							if($innerApprovalChecking == 1){
								$cleanReferenceString = trim($searchAuthorName);
								$referenceReturnArr = lookupLiteratureReference($cleanReferenceString);
								if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
									$referenceArray = array();
									$aLiteraturquellen = array();
									$innerApprovalChecking = 1;
									if(!empty($referenceReturnArr['data'])){
										foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true)
												$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
										}
									}
								}else{
									$innerApprovalChecking = 0;
									foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
											$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
											$aLiteraturquellen [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
										}	
									}
								}
							}

							if($innerApprovalChecking == 1)
								$needApproval = 1;

							/*
							* Rule 5 Last bracket words:  â, a. a. O.â or ", a.a.O." and Hyphen (hyphenhasspacebeforeand after ( - )) (whenbothexist)
							*
							* 1 = Unknown data found with a. a. O. or Hyphen( - )
							*/ 
							if($needApproval == 1){
								// Making pruefer and reference array empty because these elements will be cleared by direct oredr or by correcting the symptom string. Also seting aao_hyphen_priority value for asking the question
								// $referenceArray = array();
								// $aLiteraturquellen = array();
								// $prueferArray = array();

								$referenceWithNoAuthorPriority = 0;
								$moreThanOneTagStringPriority = 0;
								$remedyWithSymptomPriority = 0;
								$partOfSymptomPriority = 0;
								$remedyPriority = 0;
								$aaoHyphenPriority = 0;
								$hyphenPrueferPriority = 0;
								$hyphenReferencePriority = 0;
								$referencePriority = 9;
								$prueferPriority = 10;
							}
						}
						// When string has "a. a. O." only START 
					}
					/* End bracket approval end */
				}

				$preDefinedaLiteraturquellen = array(); 
				$preDefinedAllenConceptReferenceResult = mysqli_query($db, "SELECT Ref.full_reference FROM temp_pre_defined_symptom_reference AS TPDRef JOIN reference AS Ref ON TPDRef.reference_id = Ref.reference_id WHERE TPDRef.symptom_id = '".$tempSymptomId."'");
                if(mysqli_num_rows($preDefinedAllenConceptReferenceResult) > 0){
                    while($allenReferenceRow = mysqli_fetch_array($preDefinedAllenConceptReferenceResult)){
                    	array_push($preDefinedaLiteraturquellen, $allenReferenceRow['full_reference']);
                    }
                }
                if(!empty($preDefinedaLiteraturquellen)) {
					$aLiteraturquellen = array_merge($aLiteraturquellen,$preDefinedaLiteraturquellen);
				}
				if ($aLiteraturquellen) {
					$EntnommenAus = join ( "\n", $aLiteraturquellen );
				}

				if(isset($needApproval) AND $needApproval == 1){
					if($referenceWithNoAuthorPriority == 0 AND $moreThanOneTagStringPriority == 0 AND $aaoHyphenPriority == 0 AND $hyphenPrueferPriority == 0 AND $hyphenReferencePriority == 0 AND $remedyWithSymptomPriority == 0 AND $prueferPriority == 0 AND $partOfSymptomPriority == 0 AND $referencePriority == 0 AND $remedyPriority == 0)
	            		$data['need_approval'] = 0;
	            	else
	            		$data['need_approval'] = 1;
				}
	            else
	            	$data['need_approval'] = 0;

	            if($hyphenApprovalString != ""){
	            	$data['approval_string'] = ( isset($hyphenApprovalString) AND $hyphenApprovalString != "" ) ? mysqli_real_escape_string($db, $hyphenApprovalString) : null;
	            	$data['full_approval_string_when_hyphen'] = ( isset($approvalString) AND $approvalString != "" ) ? mysqli_real_escape_string($db, $approvalString) : null;
	            	// $data['full_approval_string_when_hyphen_unchanged'] = ( isset($approvalString) AND $approvalString != "" ) ? mysqli_real_escape_string($db, $approvalString) : null;
	            }else{
	            	$data['approval_string'] = ( isset($approvalString) AND $approvalString != "" ) ? mysqli_real_escape_string($db, $approvalString) : null;
	            	$data['full_approval_string_when_hyphen'] = null;
	            	// $data['full_approval_string_when_hyphen_unchanged'] = null;
	            }
	            $data['EntnommenAus'] = mysqli_real_escape_string($db, $EntnommenAus);
				$data['symptom_of_different_remedy'] = ( isset($symptomOfDifferentRemedy) AND $symptomOfDifferentRemedy != "" ) ? mysqli_real_escape_string($db, $symptomOfDifferentRemedy) : null;

				// 0 = end bracket, 1 = middle bracket
				if($approvalFor == 1){
					// If middle bracket approval
					$symptomUpdateQuery="UPDATE temp_quelle_import_test SET need_approval = '".$data['need_approval']."', EntnommenAus = '".$data['EntnommenAus']."', symptom_of_different_remedy = NULLIF('".$data['symptom_of_different_remedy']."', ''), pruefer_priority = ".$prueferPriority.", remedy_priority = ".$remedyPriority.", part_of_symptom_priority = ".$partOfSymptomPriority.", reference_with_no_author_priority = ".$referenceWithNoAuthorPriority.", remedy_with_symptom_priority = ".$remedyWithSymptomPriority.", more_than_one_tag_string_priority = ".$moreThanOneTagStringPriority.", aao_hyphen_priority = ".$aaoHyphenPriority.", hyphen_pruefer_priority = ".$hyphenPrueferPriority.", hyphen_reference_priority = ".$hyphenReferencePriority.", approval_for = '".$approvalFor."', middle_bracket_approval_string = NULLIF('".$data['approval_string']."', ''), full_approval_string_when_hyphen = NULLIF('".$data['full_approval_string_when_hyphen']."', ''), reference_priority = ".$referencePriority.", is_rechecked = 1 WHERE id = '".$tempSymptomId."'";
					$db->query($symptomUpdateQuery);
				}else{
					// If end bracket approval
					$symptomUpdateQuery="UPDATE temp_quelle_import_test SET need_approval = '".$data['need_approval']."', EntnommenAus = '".$data['EntnommenAus']."', symptom_of_different_remedy = NULLIF('".$data['symptom_of_different_remedy']."', ''), pruefer_priority = ".$prueferPriority.", remedy_priority = ".$remedyPriority.", part_of_symptom_priority = ".$partOfSymptomPriority.", reference_with_no_author_priority = ".$referenceWithNoAuthorPriority.", remedy_with_symptom_priority = ".$remedyWithSymptomPriority.", more_than_one_tag_string_priority = ".$moreThanOneTagStringPriority.", aao_hyphen_priority = ".$aaoHyphenPriority.", hyphen_pruefer_priority = ".$hyphenPrueferPriority.", hyphen_reference_priority = ".$hyphenReferencePriority.", approval_for = '".$approvalFor."', approval_string = NULLIF('".$data['approval_string']."', ''), full_approval_string_when_hyphen = NULLIF('".$data['full_approval_string_when_hyphen']."', ''), reference_priority = ".$referencePriority.", is_rechecked = 1 WHERE id = '".$tempSymptomId."'";
					$db->query($symptomUpdateQuery);
				}

				// If there is no more unskipped and unapproved data left than we will make the skipped data as unskipped START
				$unSkippedResult = mysqli_query($db, "SELECT id FROM temp_quelle_import_test WHERE need_approval = 1 AND is_skipped = 0 AND master_id = '".$masterId."'");
				$unSkippedRowCount = mysqli_num_rows($unSkippedResult);
				if( $unSkippedRowCount == 0){
					$makeUnskippedQuery="UPDATE temp_quelle_import_test SET is_skipped = 0 WHERE master_id = '".$masterId."'";
					$db->query($makeUnskippedQuery);
				}
				// If there is no more unskipped and unapproved data left than we will make the skipped data as unskipped END

				/* Pruefer Start */
            	if(!empty($prueferArray)){
        			foreach ($prueferArray as $pruKey => $pruVal) {
        				if(isset($prueferArray[$pruKey]['pruefer_id']) AND $prueferArray[$pruKey]['pruefer_id'] != ""){
        					$isOneUnknownElementInHyphen = (isset($prueferArray[$pruKey]['is_one_unknown_element_in_hyphen']) AND $prueferArray[$pruKey]['is_one_unknown_element_in_hyphen'] != "") ? $prueferArray[$pruKey]['is_one_unknown_element_in_hyphen'] : 0;
		            		$prueferQuery = "INSERT INTO temp_symptom_pruefer (symptom_id, pruefer_id, is_one_unknown_element_in_hyphen) VALUES ('".$tempSymptomId."', '".$prueferArray[$pruKey]['pruefer_id']."', '".$isOneUnknownElementInHyphen."')";
				            $db->query($prueferQuery);

				            if($data['need_approval'] == 0){
				            	// When a symptom needs no approval than storing it's pruefer details in temp_approved_pruefer for using in a. a. O. search process
				            	$tempApprovedPrueferQuery = "INSERT INTO temp_approved_pruefer (master_id, symptom_id, pruefer_id, approval_string) VALUES ('".$masterId."', '".$tempSymptomId."', '".$prueferArray[$pruKey]['pruefer_id']."', NULLIF('".$approvalString."', ''))";
				            	$db->query($tempApprovedPrueferQuery);  
				            }
        				}else{
        					if(isset($prueferArray[$pruKey]['suchname']) AND $prueferArray[$pruKey]['suchname'] != ""){
        						$prueferArray[$pruKey]['suchname'] = mysqli_real_escape_string($db, $prueferArray[$pruKey]['suchname']);
								$prueferInsertQuery = "INSERT INTO temp_pruefer (symptom_id, suchname) VALUES ('".$tempSymptomId."', '".$prueferArray[$pruKey]['suchname']."')";
        						$db->query($prueferInsertQuery);
        						$newPrueferId = mysqli_insert_id($db);
        						
        						$prueferQuery = "INSERT INTO temp_symptom_pruefer (symptom_id, pruefer_id, is_new) VALUES ('".$tempSymptomId."', '".$newPrueferId."', 1)";
				            	$db->query($prueferQuery);
        					}
        				}
        			}
            	}
            	/* Pruefer End */
            	/* Remedy Start */
            	if(!empty($remedyArray)){
            		$remedyText = "";
        			foreach ($remedyArray as $remdKey => $remdVal) {
        				if(isset($needApproval) AND $needApproval == 1){
        					$remedyArray[$remdKey]['name'] = mysqli_real_escape_string($db, $remedyArray[$remdKey]['name']);
        					if(isset($remedyArray[$remdKey]['remedy_id']) AND $remedyArray[$remdKey]['remedy_id'] != ""){
			            		$remedyQuery = "INSERT INTO temp_remedy (symptom_id, main_remedy_id, name) VALUES ('".$tempSymptomId."', '".$remedyArray[$remdKey]['remedy_id']."', '".$remedyArray[$remdKey]['name']."')";
					            $db->query($remedyQuery);
            				}else{

            					// $checkRemedyResult = mysqli_query($db, "SELECT remedy_id, name FROM temp_remedy where name = '".$remedyArray[$remdKey]['name']."'");
								// if(mysqli_num_rows($checkRemedyResult) < 1){
									$remedyQuery = "INSERT INTO temp_remedy (symptom_id, name, is_new) VALUES ('".$tempSymptomId."', '".$remedyArray[$remdKey]['name']."', 1)";
					            	$db->query($remedyQuery);
								// }

            				}
        				}
        				else{
        					$remedyText = $remedyText.$remedyArray[$remdKey]['name'].", ";
        				}
        			}
        			if(isset($remedyText) AND $remedyText != ""){
        				$remedyText = rtrim($remedyText, ", ");
        				$remedyText = mysqli_real_escape_string($db, $remedyText);
						$symptomRemedyUpdateQuery="UPDATE temp_quelle_import_test SET Remedy = '".$remedyText."' WHERE id = '".$tempSymptomId."'";
						$db->query($symptomRemedyUpdateQuery);
					}
            	}
            	/* Remedy End */
            	/* Reference Start */
            	if(!empty($referenceArray)){
        			foreach ($referenceArray as $refKey => $refVal) {
        				if(isset($referenceArray[$refKey]['reference_id']) AND $referenceArray[$refKey]['reference_id'] != ""){
        					$isOneUnknownElementInHyphen = (isset($referenceArray[$refKey]['is_one_unknown_element_in_hyphen']) AND $referenceArray[$refKey]['is_one_unknown_element_in_hyphen'] != "") ? $referenceArray[$refKey]['is_one_unknown_element_in_hyphen'] : 0; 
		            		$referenceQuery = "INSERT INTO temp_symptom_reference (symptom_id, reference_id, is_one_unknown_element_in_hyphen) VALUES ('".$tempSymptomId."', '".$referenceArray[$refKey]['reference_id']."', '".$isOneUnknownElementInHyphen."')";
				            $db->query($referenceQuery);

				            if($data['need_approval'] == 0){
				            	// When a symptom needs no approval than storing it's reference details in temp_approved_reference for using in a. a. O. search process
				            	$tempApprovedReferenceQuery = "INSERT INTO temp_approved_reference (master_id, symptom_id, reference_id, approval_string) VALUES ('".$masterId."', '".$tempSymptomId."', '".$referenceArray[$refKey]['reference_id']."', NULLIF('".$approvalString."', ''))";
				            	$db->query($tempApprovedReferenceQuery); 
				            }
        				}else{
        					if(isset($referenceArray[$refKey]['full_reference']) AND $referenceArray[$refKey]['full_reference'] != ""){
        						$referenceArray[$refKey]['full_reference'] = mysqli_real_escape_string($db, $referenceArray[$refKey]['full_reference']);
        						$referenceArray[$refKey]['autor'] = mysqli_real_escape_string($db, $referenceArray[$refKey]['autor']);
        						$referenceArray[$refKey]['reference'] = mysqli_real_escape_string($db, $referenceArray[$refKey]['reference']);
								$referenceInsertQuery = "INSERT INTO temp_reference (symptom_id, full_reference, autor, reference) VALUES ('".$tempSymptomId."', '".$referenceArray[$refKey]['full_reference']."', '".$referenceArray[$refKey]['autor']."', '".$referenceArray[$refKey]['reference']."')";
        						$db->query($referenceInsertQuery);
        						$newReferenceId = mysqli_insert_id($db);
        						
        						$referenceQuery = "INSERT INTO temp_symptom_reference (symptom_id, reference_id, is_new) VALUES ('".$tempSymptomId."', '".$newReferenceId."', 1)";
				            	$db->query($referenceQuery);
        					}
        				}
        			}
            	}
            	/* Reference End */
				/* applying Rules on the approval string again it may get cleared already in this import process END */


				$returnVal = true;
			}
		}

		return $returnVal;
	}


	function ruleReimplementation($tempSymptomId, $approvalString, $masterId, $approvalFor, $isPreDefinedTagsApprovalGet, $tagParameter){
		global $db;
		$returnVal = false;
		$approvalString = base64_decode($approvalString);
		// Cleaning Previous Data From temp START
		$deleteTempRemedyQuery="DELETE FROM temp_remedy WHERE symptom_id = '".$tempSymptomId."'";
		$db->query($deleteTempRemedyQuery);

		$deleteTempPrueferQuery = "DELETE FROM temp_pruefer WHERE symptom_id = '".$tempSymptomId."'";
		$db->query($deleteTempPrueferQuery);

		$deleteTempSymptomPrueferQuery = "DELETE FROM temp_symptom_pruefer WHERE symptom_id = '".$tempSymptomId."'";
		$db->query($deleteTempSymptomPrueferQuery);

		$deleteTempReferenceQuery = "DELETE FROM temp_reference WHERE symptom_id = '".$tempSymptomId."'";
		$db->query($deleteTempReferenceQuery);

		$deleteTempSymptomReferenceQuery = "DELETE FROM temp_symptom_reference WHERE symptom_id = '".$tempSymptomId."'";
		$db->query($deleteTempSymptomReferenceQuery);

		// Deleting Temp Approved Reference
		$deleteTempApprovedReferenceQuery="DELETE FROM temp_approved_reference WHERE symptom_id = '".$tempSymptomId."'";
		$db->query($deleteTempApprovedReferenceQuery);

		// Deleting Temp Approved Pruefer
		$deleteTempApprovedPrueferQuery="DELETE FROM temp_approved_pruefer WHERE symptom_id = '".$tempSymptomId."'";
		$db->query($deleteTempApprovedPrueferQuery);
		// Cleaning Previous Data From temp END

		$aLiteraturquellen = array ();
		$EntnommenAus='';
		$needApproval = 0;
		$remedyArray = array();
		$prueferArray = array();
		$referenceArray = array();
		$prueferPriority = 0;
		$remedyPriority = 0;
		$partOfSymptomPriority = 0;
		$referenceWithNoAuthorPriority = 0;
		$referencePriority = 0;
		$remedyWithSymptomPriority = 0;
		$moreThanOneTagStringPriority = 0;
		$aaoHyphenPriority = 0;
		$hyphenPrueferPriority = 0;
		$hyphenReferencePriority = 0;
		$hyphenApprovalString = "";
		$directOrderPriority = 0;
		$tagsApprovalString = "";
		$isPreDefinedTagsApproval = 0;
		$symptomOfDifferentRemedy = "";

		// Removing "No Author" form the approval string because i am adding this part for Rule 1 (B1) 
		// reference_with_no_author_priority 
		$lastBracketedString = str_replace("No Author,", "", $approvalString);
		$lastBracketedString = trim($lastBracketedString);
		// Checking the existance of , - . ; and , a. a. O. and , a.a.O.
		$isAaoExist = mb_strpos($lastBracketedString, 'a. a. O.');
		$isAaoWithoutSpaceExist = mb_strpos($lastBracketedString, 'a.a.O.');
		$isAaoAllLowerWithoutSpaceExist = mb_strpos($lastBracketedString, 'a.a.o.');
		$isAaoAllLowerWithSpaceExist = mb_strpos($lastBracketedString, 'a. a. o.');
		$isCommaExist = mb_substr_count($lastBracketedString,",");
		$isHyphenExist = mb_substr_count($lastBracketedString," - ");
		$isDotExist = mb_substr_count($lastBracketedString,".");
		$isSemicolonExist = mb_substr_count($lastBracketedString,";");

		/* applying Rules on the approval string again it may get cleared already in this import process START */
		// 0 = end bracket, 1 = middle bracket
		if($approvalFor == 1){
			/* Middle bracket approval start */
			if($isPreDefinedTagsApprovalGet == 1){
				// This section works when there is unknown data in pre defined tags START
				$approvalStraingArray = explode("{#^#}", $lastBracketedString);
				if($isPreDefinedTagsApprovalGet == 1 AND $tagParameter == "pruefer"){
					$isPreDefinedTagsApproval = 1;
					$ckeckPApproval = 0;
					$tagsApproalStringForPrue = "";
					foreach ($approvalStraingArray as $prueferPkey => $prueferPval) {
						$prueferPval = trim($prueferPval);
						$tagsApproalStringForPrue .= $prueferPval."{#^#}";

						$cleanPrueferString = (mb_substr ( $prueferPval, mb_strlen ( $prueferPval ) - 1, 1 ) == '.') ? $prueferPval : $prueferPval.'.'; 
						$prueferReturnArr = lookupPruefer($cleanPrueferString);
						if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
							$ckeckPApproval = 1;
							
							if(!empty($prueferReturnArr['data'])){
								foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
										$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
								}
							}
							else{
								$dataArr = array();
								$dataArr['pruefer_id'] = null;
								$dataArr['kuerzel'] = null;
								$dataArr['suchname'] = trim($prueferPval);
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($dataArr['suchname'], 'suchname', $prueferArray) != true)
									$prueferArray[] = $dataArr;
							}
						}
						else{
							foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
									$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
							}
						}
					}

					if($ckeckPApproval == 1){
						$needApproval = 1;

						$tagsApprovalString = $tagsApproalStringForPrue;
						$tagsApprovalString = rtrim($tagsApprovalString, "{#^#}");

						$foundPrueferStringArray = explode("{#^#}", $tagsApprovalString);
						if(count($foundPrueferStringArray) > 1){
							$referencePriority = 0;
							$referenceWithNoAuthorPriority = 0;
							$remedyWithSymptomPriority = 0;
							$remedyPriority = 0;
							$partOfSymptomPriority = 0;
							$prueferPriority = 0;
							$aaoHyphenPriority = 0;
							$hyphenPrueferPriority = 0;
							$hyphenReferencePriority = 0;
							$moreThanOneTagStringPriority = 10;
						}else{
							$referencePriority = 0;
							$referenceWithNoAuthorPriority = 0;
							$remedyWithSymptomPriority = 0;
							$remedyPriority = 0;
							$partOfSymptomPriority = 0;
							$aaoHyphenPriority = 0;
							$hyphenPrueferPriority = 0;
							$hyphenReferencePriority = 0;
							$moreThanOneTagStringPriority = 0;
							$prueferPriority = 10;
						}

					}else{
						$needApproval = 0;
					}
				}
				else if($isPreDefinedTagsApprovalGet == 1 AND $tagParameter == "reference"){
					$isPreDefinedTagsApproval = 1;
					$tagsApproalStringForRef = ""; 
					$ckeckRApproval = 0;
					foreach ($approvalStraingArray as $refKey => $refVal) {
						$refVal = trim($refVal);
						$tagsApproalStringForRef .= $refVal."{#^#}";
						$referenceReturnArr = lookupLiteratureReference($refVal);
						
						if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
							$ckeckRApproval = 1;

							if(!empty($referenceReturnArr['data'])){
								foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true)
										$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
								}
							}
							else{
								$fullReferenceInArray = explode(",", $refVal);
								if(count($fullReferenceInArray) >= 2){
									$referenceAutor = trim($fullReferenceInArray[0]);
					        		array_shift($fullReferenceInArray);
					        		$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
								}else{
									$referenceAutor = "";
									$referenceTxt = $refVal;
								}
								
								$dataArr = array();
								$dataArr['reference_id'] = null;
								$dataArr['full_reference'] = $refVal;
								$dataArr['autor'] = $referenceAutor;
								$dataArr['reference'] = $referenceTxt;
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($dataArr['full_reference'], 'full_reference', $referenceArray) != true)
									$referenceArray[] = $dataArr;
							}

						}else{
							foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
									$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
									$aLiteraturquellen [$refKey] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
								}
							}
						}
					}

					if($ckeckRApproval == 1){
						$needApproval = 1;

						$aLiteraturquellen = array(); 
						$tagsApprovalString = $tagsApproalStringForRef;
						$tagsApprovalString = rtrim($tagsApprovalString, "{#^#}");

						$foundReferenceStringArray = explode("{#^#}", $tagsApprovalString);

						if(count($foundReferenceStringArray) > 1){
							$partOfSymptomPriority = 0;
							$remedyWithSymptomPriority = 0;
							$prueferPriority = 0;
							$remedyPriority = 0;
							$referencePriority = 0;
							$referenceWithNoAuthorPriority = 0;
							$aaoHyphenPriority = 0;
							$hyphenPrueferPriority = 0;
							$hyphenReferencePriority = 0;
							$moreThanOneTagStringPriority = 10;
						}else{
							$partOfSymptomPriority = 0;
							$remedyWithSymptomPriority = 0;
							$prueferPriority = 0;
							$remedyPriority = 0;
							$aaoHyphenPriority = 0;
							$hyphenPrueferPriority = 0;
							$hyphenReferencePriority = 0;
							$moreThanOneTagStringPriority = 0;
							$referenceWithNoAuthorPriority = 0;
							$referencePriority = 10;
						}
					}else{
						$needApproval = 0;
					}
				}
				else if($isPreDefinedTagsApprovalGet == 1 AND $tagParameter == "multitag"){
					$isPreDefinedTagsApproval = 1;
					$tagsApproalStringForRef = ""; 
					$ckeckRApproval = 0;
					foreach ($approvalStraingArray as $refKey => $refVal) {
						$refVal = trim($refVal);
						$tagsApproalStringForRef .= $refVal."{#^#}";
						$referenceReturnArr = lookupLiteratureReference($refVal);
						
						if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
							$ckeckRApproval = 1;

							if(!empty($referenceReturnArr['data'])){
								foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true)
										$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
								}
							}
							else{
								$fullReferenceInArray = explode(",", $refVal);
								if(count($fullReferenceInArray) >= 2){
									$referenceAutor = trim($fullReferenceInArray[0]);
					        		array_shift($fullReferenceInArray);
					        		$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
								}else{
									$referenceAutor = "";
									$referenceTxt = $refVal;
								}
								
								$dataArr = array();
								$dataArr['reference_id'] = null;
								$dataArr['full_reference'] = $refVal;
								$dataArr['autor'] = $referenceAutor;
								$dataArr['reference'] = $referenceTxt;
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($dataArr['full_reference'], 'full_reference', $referenceArray) != true)
									$referenceArray[] = $dataArr;
							}

						}else{
							foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
									$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
									$aLiteraturquellen [$refKey] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
								}
							}
						}
					}

					$ckeckPApproval = 0;
					$tagsApproalStringForPrue = "";
					foreach ($approvalStraingArray as $prueferPkey => $prueferPval) {
						$prueferPval = trim($prueferPval);
						$tagsApproalStringForPrue .= $prueferPval."{#^#}";

						$cleanPrueferString = (mb_substr ( $prueferPval, mb_strlen ( $prueferPval ) - 1, 1 ) == '.') ? $prueferPval : $prueferPval.'.'; 
						$prueferReturnArr = lookupPruefer($cleanPrueferString);
						if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
							$ckeckPApproval = 1;
							
							if(!empty($prueferReturnArr['data'])){
								foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
										$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
								}
							}
							else{
								$dataArr = array();
								$dataArr['pruefer_id'] = null;
								$dataArr['kuerzel'] = null;
								$dataArr['suchname'] = trim($prueferPval);
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($dataArr['suchname'], 'suchname', $prueferArray) != true)
									$prueferArray[] = $dataArr;
							}
						}
						else{
							foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
									$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
							}
						}
					}

					if($ckeckPApproval == 1 OR $ckeckRApproval == 1){
						$tagsApprovalString = $tagsApproalStringForPrue.$tagsApproalStringForRef;
						$tagsApprovalString = rtrim($tagsApprovalString, "{#^#}");

						$needApproval = 1;

						$referencePriority = 0;
						$referenceWithNoAuthorPriority = 0;
						$remedyWithSymptomPriority = 0;
						$partOfSymptomPriority = 0;
						$remedyPriority = 0;
						$prueferPriority = 0;
						$aaoHyphenPriority = 0;
						$hyphenPrueferPriority = 0;
						$hyphenReferencePriority = 0;
						$moreThanOneTagStringPriority = 10;
					}else{
						$needApproval = 0;
					}
				}
				// This section works when there is unknown data in pre defined tags END
			}
			else if(($isCommaExist != 0 OR $isSemicolonExist != 0) AND $isDotExist != 0){
				// With Comma OR Semicolon
				if (mb_strpos($lastBracketedString, ',') !== false) 
					$separator = ",";
				else
					$separator = ";";

				$commaFirstOccurrence = mb_stripos ( $lastBracketedString, $separator );
				$beforeTheCommaString = trim( mb_substr ( $lastBracketedString, 0, $commaFirstOccurrence ) );
				$afterTheCommaString = trim( ltrim( mb_substr ( $lastBracketedString, $commaFirstOccurrence ), $separator ));
				$beforeTheCommaStringInArray = explode(" ", $beforeTheCommaString);
				$afterTheCommaStringInArray = explode(" ", $afterTheCommaString);

				$isDotExistInBeforeTheCommaString = mb_substr_count($beforeTheCommaString,".");
				$isDotExistInAfterTheCommaString = mb_substr_count($afterTheCommaString,".");

				$workingString = trim($lastBracketedString);

				/* REMEDY START */
				$checkRemedyApprovalStatus = 0;
				$expectedRemedyArray = explode($separator, $workingString);
				foreach ($expectedRemedyArray as $expectedRemedyKey => $expectedRemedyVal) {
					
					if($expectedRemedyVal == "")
						continue;	

					$cleanExpectedRemedyName = trim($expectedRemedyVal);
					$cleanRemedyString = (mb_substr ( $cleanExpectedRemedyName, mb_strlen ( $cleanExpectedRemedyName ) - 1, 1 ) == '.') ? $cleanExpectedRemedyName : $cleanExpectedRemedyName.'.'; 
					$remedyReturnArr = newLookupRemedy($cleanRemedyString);
					if(isset($remedyReturnArr['need_approval']) AND $remedyReturnArr['need_approval'] == 1){
						$checkRemedyApprovalStatus = 1;
						if(!empty($remedyReturnArr['data'])){
							foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
								// custom_in_array(needle, needle_field, array) 
								if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $remedyArray) != true)
									$remedyArray[] = $remedyReturnArr['data'][$remedyReturnKey];
							}

						}
						else{
							$dataArr = array();
							$dataArr['remedy_id'] = null;
							$dataArr['name'] = $cleanExpectedRemedyName;
							$dataArr['kuerzel'] = "";
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($dataArr['name'], 'name', $remedyArray) != true)
								$remedyArray[] = $dataArr;
						}
					}
					else{
						foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $remedyArray) != true)
								$remedyArray[] = $remedyReturnArr['data'][$remedyReturnKey];
						}
					}
				}
				// Setting last operations approval status to main approval checking variable 
				$needApproval = $checkRemedyApprovalStatus; 
				/* REMEDY END */

				if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString != 0 AND $isDotExistInAfterTheCommaString !=0){
					/*
					* 6.1 Single word + dot before the comma and one or more words + dot after comma (no matter if upper or lower case)
					*
					* 1 = chcek for remedis by spliting by comma
					*/

					if($needApproval == 1){
						$referenceWithNoAuthorPriority = 0;
						$aaoHyphenPriority = 0;
						$hyphenPrueferPriority = 0;
						$hyphenReferencePriority = 0;
						$moreThanOneTagStringPriority = 0;
						$remedyWithSymptomPriority = 0;
						$prueferPriority = 0;
						$partOfSymptomPriority = 0;
						$referencePriority = 0;
						$remedyPriority = 10;
					}
				}
				else if($isCommaExist == 1 AND ((count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 1) OR (count($afterTheCommaStringInArray) == 1 AND $isDotExistInAfterTheCommaString == 1)))
				{
					/*
					* 6.2. Single word + dot before the comma or after a comma (only one dot and one comma)
					*
					* 1 = check for remedy with symptom text (Eg: Opi., during the day)(Eg: small boils in crops, Sulph.)
					* 2 = part of symptom
					*/
					if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 1){
						$similarRemedyString = $beforeTheCommaString;
						$similarSymptomString = $afterTheCommaString;	
					}else{
						$similarRemedyString = $afterTheCommaString;
						$similarSymptomString = $beforeTheCommaString;
					}
					$cleanRemedyWithSymptomString = (mb_substr ( $workingString, mb_strlen ( $workingString ) - 1, 1 ) == '.') ? $workingString : $workingString.'.'; 
					$remedyWithSymptomReturnArr = newLookupRemedyWithSymptom($cleanRemedyWithSymptomString, $similarRemedyString, $similarSymptomString);
					if(isset($remedyWithSymptomReturnArr['need_approval']) AND $remedyWithSymptomReturnArr['need_approval'] == 0){
						$needApproval = 0;
						$remedyArray = array();
						$referenceArray = array();
						$aLiteraturquellen = array();
						$prueferArray = array();
						if(isset($remedyWithSymptomReturnArr['data'][0]['remedy']))
							$remedyArray = $remedyWithSymptomReturnArr['data'][0]['remedy'];
						$symptomOfDifferentRemedy = (isset($remedyWithSymptomReturnArr['data'][0]['symptom_of_different_remedy'])) ? $remedyWithSymptomReturnArr['data'][0]['symptom_of_different_remedy'] : "";
					}else{
						$needApproval = 1;
					}

					if($needApproval == 1){
						$referenceWithNoAuthorPriority = 0;
						$aaoHyphenPriority = 0;
						$hyphenPrueferPriority = 0;
						$hyphenReferencePriority = 0;
						$moreThanOneTagStringPriority = 0;
						$prueferPriority = 0;
						$referencePriority = 0;
						$remedyPriority = 0;
						$remedyWithSymptomPriority = 9;
						$partOfSymptomPriority = 10;
					}
				}
			}
			else if(($isCommaExist != 0 OR $isSemicolonExist != 0) OR $isDotExist == 1){
				/*
				* 6.3. One or more comma OR one dot
				*
				* 1 = part of symptom
				* 2 = chcek for remedis by spliting by comma
				*/
				$workingString = trim($lastBracketedString);
				if($isCommaExist != 0 OR $isSemicolonExist != 0){
      				if (mb_strpos($workingString, ',') !== false)
						$separator = ",";
					else if (mb_strpos($workingString, ';') !== false)
						$separator = ";";
					$expectedRemedyArray = explode($separator, $workingString);
				}else{
					if (mb_strpos($workingString, '.') !== false){
						// Split by dot(.)
						$makeStringToExplode = str_replace('.', '.{#^#}', $workingString);
						$expectedRemedyArray = explode("{#^#}", $makeStringToExplode);
					}
					else
						$expectedRemedyArray[] = $workingString;
				}

				if(!empty($expectedRemedyArray)){
					/* REMEDY START */
					$checkRemedyApprovalStatus = 0;
					foreach ($expectedRemedyArray as $expectedRemedyKey => $expectedRemedyVal) {
						
						if($expectedRemedyVal == "")
							continue;	

						$cleanExpectedRemedyName = trim($expectedRemedyVal);
						$cleanRemedyString = (mb_substr ( $cleanExpectedRemedyName, mb_strlen ( $cleanExpectedRemedyName ) - 1, 1 ) == '.') ? $cleanExpectedRemedyName : $cleanExpectedRemedyName.'.'; 
						$remedyReturnArr = newLookupRemedy($cleanRemedyString);
						if(isset($remedyReturnArr['need_approval']) AND $remedyReturnArr['need_approval'] == 1){
							$checkRemedyApprovalStatus = 1;
							if(!empty($remedyReturnArr['data'])){
								foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
									// custom_in_array(needle, needle_field, array) 
									if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $remedyArray) != true)
										$remedyArray[] = $remedyReturnArr['data'][$remedyReturnKey];
								}

							}
							else{
								$dataArr = array();
								$dataArr['remedy_id'] = null;
								$dataArr['name'] = $cleanExpectedRemedyName;
								$dataArr['kuerzel'] = "";
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($dataArr['name'], 'name', $remedyArray) != true)
									$remedyArray[] = $dataArr;
							}
						}
						else{
							foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $remedyArray) != true)
									$remedyArray[] = $remedyReturnArr['data'][$remedyReturnKey];
							}
						}
					}
					// Setting last operations approval status to main approval checking variable 
					$needApproval = $checkRemedyApprovalStatus; 
					/* REMEDY END */
				}

				if($needApproval == 1){
					$referenceWithNoAuthorPriority = 0;
					$aaoHyphenPriority = 0;
					$hyphenPrueferPriority = 0;
					$hyphenReferencePriority = 0;
					$moreThanOneTagStringPriority = 0;
					$prueferPriority = 0;
					$referencePriority = 0;
					$remedyWithSymptomPriority = 0;
					$partOfSymptomPriority = 9;
					$remedyPriority = 10;
				}
			}
			/* Middle bracket approval end */
		}else{
			/* End bracket approval start */
			if($isPreDefinedTagsApprovalGet == 1){
				// This section works when there is unknown data in pre defined tags START
				$approvalStraingArray = explode("{#^#}", $lastBracketedString);
				if($isPreDefinedTagsApprovalGet == 1 AND $tagParameter == "pruefer"){
					$isPreDefinedTagsApproval = 1;
					$ckeckPApproval = 0;
					$tagsApproalStringForPrue = "";
					foreach ($approvalStraingArray as $prueferPkey => $prueferPval) {
						$prueferPval = trim($prueferPval);
						$tagsApproalStringForPrue .= $prueferPval."{#^#}";

						$cleanPrueferString = (mb_substr ( $prueferPval, mb_strlen ( $prueferPval ) - 1, 1 ) == '.') ? $prueferPval : $prueferPval.'.'; 
						$prueferReturnArr = lookupPruefer($cleanPrueferString);
						if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
							$ckeckPApproval = 1;
							
							if(!empty($prueferReturnArr['data'])){
								foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
										$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
								}
							}
							else{
								$dataArr = array();
								$dataArr['pruefer_id'] = null;
								$dataArr['kuerzel'] = null;
								$dataArr['suchname'] = trim($prueferPval);
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($dataArr['suchname'], 'suchname', $prueferArray) != true)
									$prueferArray[] = $dataArr;
							}
						}
						else{
							foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
									$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
							}
						}
					}

					if($ckeckPApproval == 1){
						$needApproval = 1;

						$tagsApprovalString = $tagsApproalStringForPrue;
						$tagsApprovalString = rtrim($tagsApprovalString, "{#^#}");

						$foundPrueferStringArray = explode("{#^#}", $tagsApprovalString);
						if(count($foundPrueferStringArray) > 1){
							$referencePriority = 0;
							$referenceWithNoAuthorPriority = 0;
							$remedyWithSymptomPriority = 0;
							$remedyPriority = 0;
							$partOfSymptomPriority = 0;
							$prueferPriority = 0;
							$aaoHyphenPriority = 0;
							$hyphenPrueferPriority = 0;
							$hyphenReferencePriority = 0;
							$moreThanOneTagStringPriority = 10;
						}else{
							$referencePriority = 0;
							$referenceWithNoAuthorPriority = 0;
							$remedyWithSymptomPriority = 0;
							$remedyPriority = 0;
							$partOfSymptomPriority = 0;
							$aaoHyphenPriority = 0;
							$hyphenPrueferPriority = 0;
							$hyphenReferencePriority = 0;
							$moreThanOneTagStringPriority = 0;
							$prueferPriority = 10;
						}

					}else{
						$needApproval = 0;
					}
				}
				else if($isPreDefinedTagsApprovalGet == 1 AND $tagParameter == "reference"){
					$isPreDefinedTagsApproval = 1;
					$tagsApproalStringForRef = ""; 
					$ckeckRApproval = 0;
					foreach ($approvalStraingArray as $refKey => $refVal) {
						$refVal = trim($refVal);
						$tagsApproalStringForRef .= $refVal."{#^#}";
						$referenceReturnArr = lookupLiteratureReference($refVal);
						
						if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
							$ckeckRApproval = 1;

							if(!empty($referenceReturnArr['data'])){
								foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true)
										$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
								}
							}
							else{
								$fullReferenceInArray = explode(",", $refVal);
								if(count($fullReferenceInArray) >= 2){
									$referenceAutor = trim($fullReferenceInArray[0]);
					        		array_shift($fullReferenceInArray);
					        		$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
								}else{
									$referenceAutor = "";
									$referenceTxt = $refVal;
								}
								
								$dataArr = array();
								$dataArr['reference_id'] = null;
								$dataArr['full_reference'] = $refVal;
								$dataArr['autor'] = $referenceAutor;
								$dataArr['reference'] = $referenceTxt;
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($dataArr['full_reference'], 'full_reference', $referenceArray) != true)
									$referenceArray[] = $dataArr;
							}

						}else{
							foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
									$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
									$aLiteraturquellen [$refKey] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
								}
							}
						}
					}

					if($ckeckRApproval == 1){
						$needApproval = 1;

						$aLiteraturquellen = array(); 
						$tagsApprovalString = $tagsApproalStringForRef;
						$tagsApprovalString = rtrim($tagsApprovalString, "{#^#}");

						$foundReferenceStringArray = explode("{#^#}", $tagsApprovalString);

						if(count($foundReferenceStringArray) > 1){
							$partOfSymptomPriority = 0;
							$remedyWithSymptomPriority = 0;
							$prueferPriority = 0;
							$remedyPriority = 0;
							$referencePriority = 0;
							$referenceWithNoAuthorPriority = 0;
							$aaoHyphenPriority = 0;
							$hyphenPrueferPriority = 0;
							$hyphenReferencePriority = 0;
							$moreThanOneTagStringPriority = 10;
						}else{
							$partOfSymptomPriority = 0;
							$remedyWithSymptomPriority = 0;
							$prueferPriority = 0;
							$remedyPriority = 0;
							$aaoHyphenPriority = 0;
							$hyphenPrueferPriority = 0;
							$hyphenReferencePriority = 0;
							$moreThanOneTagStringPriority = 0;
							$referenceWithNoAuthorPriority = 0;
							$referencePriority = 10;
						}
					}else{
						$needApproval = 0;
					}
				}
				else if($isPreDefinedTagsApprovalGet == 1 AND $tagParameter == "multitag"){
					$isPreDefinedTagsApproval = 1;
					$tagsApproalStringForRef = ""; 
					$ckeckRApproval = 0;
					foreach ($approvalStraingArray as $refKey => $refVal) {
						$refVal = trim($refVal);
						$tagsApproalStringForRef .= $refVal."{#^#}";
						$referenceReturnArr = lookupLiteratureReference($refVal);
						
						if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
							$ckeckRApproval = 1;

							if(!empty($referenceReturnArr['data'])){
								foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true)
										$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
								}
							}
							else{
								$fullReferenceInArray = explode(",", $refVal);
								if(count($fullReferenceInArray) >= 2){
									$referenceAutor = trim($fullReferenceInArray[0]);
					        		array_shift($fullReferenceInArray);
					        		$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
								}else{
									$referenceAutor = "";
									$referenceTxt = $refVal;
								}
								
								$dataArr = array();
								$dataArr['reference_id'] = null;
								$dataArr['full_reference'] = $refVal;
								$dataArr['autor'] = $referenceAutor;
								$dataArr['reference'] = $referenceTxt;
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($dataArr['full_reference'], 'full_reference', $referenceArray) != true)
									$referenceArray[] = $dataArr;
							}

						}else{
							foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
									$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
									$aLiteraturquellen [$refKey] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
								}
							}
						}
					}

					$ckeckPApproval = 0;
					$tagsApproalStringForPrue = "";
					foreach ($approvalStraingArray as $prueferPkey => $prueferPval) {
						$prueferPval = trim($prueferPval);
						$tagsApproalStringForPrue .= $prueferPval."{#^#}";

						$cleanPrueferString = (mb_substr ( $prueferPval, mb_strlen ( $prueferPval ) - 1, 1 ) == '.') ? $prueferPval : $prueferPval.'.'; 
						$prueferReturnArr = lookupPruefer($cleanPrueferString);
						if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
							$ckeckPApproval = 1;
							
							if(!empty($prueferReturnArr['data'])){
								foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
										$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
								}
							}
							else{
								$dataArr = array();
								$dataArr['pruefer_id'] = null;
								$dataArr['kuerzel'] = null;
								$dataArr['suchname'] = trim($prueferPval);
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($dataArr['suchname'], 'suchname', $prueferArray) != true)
									$prueferArray[] = $dataArr;
							}
						}
						else{
							foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
									$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
							}
						}
					}

					if($ckeckPApproval == 1 OR $ckeckRApproval == 1){
						$tagsApprovalString = $tagsApproalStringForPrue.$tagsApproalStringForRef;
						$tagsApprovalString = rtrim($tagsApprovalString, "{#^#}");

						$needApproval = 1;

						$referencePriority = 0;
						$referenceWithNoAuthorPriority = 0;
						$remedyWithSymptomPriority = 0;
						$partOfSymptomPriority = 0;
						$remedyPriority = 0;
						$prueferPriority = 0;
						$aaoHyphenPriority = 0;
						$hyphenPrueferPriority = 0;
						$hyphenReferencePriority = 0;
						$moreThanOneTagStringPriority = 10;
					}else{
						$needApproval = 0;
					}
				}
				// This section works when there is unknown data in pre defined tags END
			}
			else if($isCommaExist == 0 AND $isSemicolonExist == 0 AND $isHyphenExist == 0 AND $isAaoExist === false AND $isAaoWithoutSpaceExist === false AND $isAaoAllLowerWithoutSpaceExist === false AND $isAaoAllLowerWithSpaceExist === false)
			{
				// No Comma AND No Semicolon AND No Hyphen AND No , a. a. O. START

				$workingString = trim($lastBracketedString);
				$expectedRemedyArray = array();
				/*
				* COMMON LOOKUP SECTION START
				*/
				if (mb_strpos($workingString, '.') !== false){
					// Split by dot(.)
					$makeStringToExplode = str_replace('.', '.{#^#}', $workingString);
					$expectedRemedyArray = explode("{#^#}", $makeStringToExplode);
				}
				else
					$expectedRemedyArray[] = $workingString;

				/* REMEDY START */
				$checkRemedyApprovalStatus = 0;
				foreach ($expectedRemedyArray as $expectedRemedyKey => $expectedRemedyVal) {
					
					if($expectedRemedyVal == "")
						continue;	

					$cleanExpectedRemedyName = trim($expectedRemedyVal);
					$cleanRemedyString = (mb_substr ( $cleanExpectedRemedyName, mb_strlen ( $cleanExpectedRemedyName ) - 1, 1 ) == '.') ? $cleanExpectedRemedyName : $cleanExpectedRemedyName.'.';
					$remedyReturnArr = newLookupRemedy($cleanRemedyString);
					if(isset($remedyReturnArr['need_approval']) AND $remedyReturnArr['need_approval'] == 1){
						$checkRemedyApprovalStatus = 1;
						if(!empty($remedyReturnArr['data'])){
							foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $remedyArray) != true)
									$remedyArray[] = $remedyReturnArr['data'][$remedyReturnKey];
							}
						}
						else{
							$dataArr = array();
							$dataArr['remedy_id'] = null;
							$dataArr['name'] = $cleanExpectedRemedyName;
							$dataArr['kuerzel'] = "";
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($dataArr['name'], 'name', $remedyArray) != true)
								$remedyArray[] = $dataArr;
						}
					}
					else{
						foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $remedyArray) != true)
								$remedyArray[] = $remedyReturnArr['data'][$remedyReturnKey];
						}
					}
				}

				// Setting last operations approval status to main approval checking variable 
				$needApproval = $checkRemedyApprovalStatus; 
				/* REMEDY END */

				/* PRUEFER STRAT */
				if($needApproval == 1){
					$cleanPrueferString = (mb_substr ( $workingString, mb_strlen ( $workingString ) - 1, 1 ) == '.') ? $workingString : $workingString.'.'; 
					$prueferReturnArr = lookupPruefer($cleanPrueferString);
					if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
						if(!empty($prueferReturnArr['data'])){
							foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
									$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
							}
						}else{
							$dataArr = array();
							$dataArr['pruefer_id'] = null;
							$dataArr['kuerzel'] = null;
							$dataArr['suchname'] = $workingString;
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($dataArr['suchname'], 'suchname', $prueferArray) != true)
								$prueferArray[] = $dataArr;
						}
					}
					else{
						$needApproval = 0;
						$remedyArray = array();
						foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
								$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
						}
					}
				}
				/* PRUEFER END */

				/* REFERENCE WITH NO AUTHOR START */
				if($needApproval == 1){
					$noAuthorWorkingString = "No Author, ".trim($workingString);
					$referenceReturnArr = lookupLiteratureReference($noAuthorWorkingString);
					if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){

						if(!empty($referenceReturnArr['data'])){
							foreach ($referenceReturnArr['data'] as $refKey => $refVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($referenceReturnArr['data'][$refKey]['reference_id'], 'reference_id', $referenceArray) != true)
									$referenceArray[] = $referenceReturnArr['data'][$refKey];
							}
						}
						else{
							$fullReferenceInArray = explode(",", $noAuthorWorkingString);
							if(count($fullReferenceInArray) >= 2){
								$referenceAutor = trim($fullReferenceInArray[0]);
				        		array_shift($fullReferenceInArray);
				        		$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
							}else{
								$referenceAutor = "No Author";
								$referenceTxt = $workingString;
							}
							
							$dataArr = array();
							$dataArr['reference_id'] = null;
							$dataArr['full_reference'] = $noAuthorWorkingString;
							$dataArr['autor'] = $referenceAutor;
							$dataArr['reference'] = $referenceTxt;
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($dataArr['full_reference'], 'full_reference', $referenceArray) != true)
								$referenceArray[] = $dataArr;
						}

					}else{
						$needApproval = 0;
						$prueferArray = array();
						$remedyArray = array();
						foreach ($referenceReturnArr['data'] as $refKey => $refVal) {
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($referenceReturnArr['data'][$refKey]['reference_id'], 'reference_id', $referenceArray) != true){
								$referenceArray[] = $referenceReturnArr['data'][$refKey];
								$aLiteraturquellen [] = ($referenceReturnArr['data'][$refKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$refKey]['full_reference']) : "";
							}
						}
					}
				}
				/* REFERENCE WITH NO AUTHOR END */

				/*
				* COMMON LOOKUP SECTION END
				*/

				$wordsInLastString = explode(" ", $lastBracketedString);
				if(!empty($wordsInLastString)){

					if(count($wordsInLastString) == 1){
						/*
						* (A) SINGLE WORD START
						*/
						
						if($isDotExist != 0){
							// Single word has dot START
							if( isFirstCharacterUppercase($workingString) === true){
								/*
								* (A1) If the word + dot has uppercase (I mean only the first character is uppercase)
								*
								* 1 = chcek for remedy
								* 2 = chcek for part of symptom
								* 3 = chcek for pruefer
								*/
								if($needApproval == 1){
									$referencePriority = 0;
									$referenceWithNoAuthorPriority = 0;
									$remedyWithSymptomPriority = 0;
									$aaoHyphenPriority = 0;
									$hyphenPrueferPriority = 0;
									$hyphenReferencePriority = 0;
									$moreThanOneTagStringPriority = 0;
									$remedyPriority = 8;
									$partOfSymptomPriority = 9;
									$prueferPriority = 10;
								}
							}else{
								/*
								* (A2) If the word + dot is lowercase
								*
								* 1 = chcek for part of symptom
								* 2 = chcek for remedy
								*/
								if($needApproval == 1){
									// As we are not going to ask Pruefer Question, making $prueferArray array empty and $prueferPriority = 0
									$prueferArray = array();
									$referencePriority = 0;
									$referenceWithNoAuthorPriority = 0;
									$remedyWithSymptomPriority = 0;
									$prueferPriority = 0;
									$aaoHyphenPriority = 0;
									$hyphenPrueferPriority = 0;
									$hyphenReferencePriority = 0;
									$moreThanOneTagStringPriority = 0;
									$partOfSymptomPriority = 9;
									$remedyPriority = 10;
								}
							}
							// Single word has dot END
						}else{
							// Single word don't have any dot START
							if( isFirstCharacterUppercase($workingString) === true){
								/*
								* (A4) Single word uppercase without dot (I mean only the first character is uppercase)
								*
								* 1 = chcek for remedy
								* 2 = chcek for part of symptom
								* 3 = chcek for pruefer
								*/
								if($needApproval == 1){
									$referencePriority = 0;
									$referenceWithNoAuthorPriority = 0;
									$remedyWithSymptomPriority = 0;
									$aaoHyphenPriority = 0;
									$hyphenPrueferPriority = 0;
									$hyphenReferencePriority = 0;
									$moreThanOneTagStringPriority = 0;
									$remedyPriority = 8;
									$partOfSymptomPriority = 9;
									$prueferPriority = 10;
								}
							}else{
								/*
								* (A3) Single word lowercase without dot
								*
								* 1 = chcek for part of symptom
								* 2 = chcek for remedy
								* 3 = chcek for pruefer
								*/
								if($needApproval == 1){
									$referencePriority = 0;
									$referenceWithNoAuthorPriority = 0;
									$remedyWithSymptomPriority = 0;
									$aaoHyphenPriority = 0;
									$hyphenPrueferPriority = 0;
									$hyphenReferencePriority = 0;
									$moreThanOneTagStringPriority = 0;
									$partOfSymptomPriority = 8;
									$remedyPriority = 9;
									$prueferPriority = 10;
								}
							}
							// Single word don't have any dot END
						}

						/*
						* (A) SINGLE WORD END
						*/
					}
					else
					{
						/* 
						* (B) MORE THAN ONE WORD (case insensitive i.e., upper or lower case does not matter) START 
						*/

						if($isDotExist != 0){
							/*
							* (B1) Words have one or more than one dot(s)
							*
							* 1 = chcek for part of symptom
							* 2 = chcek for n remedies splited by dot(.)
							* 3 = chcek for pruefer
							* 4 = chcek for reference with no author
							*/

							if($needApproval == 1){
								$remedyWithSymptomPriority = 0;
								$aaoHyphenPriority = 0;
								$hyphenPrueferPriority = 0;
								$hyphenReferencePriority = 0;
								$moreThanOneTagStringPriority = 0;
								$referencePriority = 0;
								$partOfSymptomPriority = 7;
								$remedyPriority = 8;
								$prueferPriority = 9;
								$referenceWithNoAuthorPriority = 10;
							}

						}else{
							/*
							* (B1) Words have NO dot(s)
							*
							* 1 = chcek for part of symptom
							* 2 = chcek for remedy
							* 3 = chcek for pruefer
							*/

							if($needApproval == 1){
								$referencePriority = 0;
								$referenceWithNoAuthorPriority = 0;
								$remedyWithSymptomPriority = 0;
								$aaoHyphenPriority = 0;
								$hyphenPrueferPriority = 0;
								$hyphenReferencePriority = 0;
								$moreThanOneTagStringPriority = 0;
								$partOfSymptomPriority = 8;
								$remedyPriority = 9;
								$prueferPriority = 10;
							}
						}

						/* 
						* (B) MORE THAN ONE WORD (case insensitive i.e., upper or lower case does not matter) END 
						*/
					}

				}
				// No Comma AND No Semicolon AND No Hyphen AND No , a. a. O. END
			}
			else if(($isCommaExist != 0 OR $isSemicolonExist != 0) AND $isHyphenExist == 0 AND $isAaoExist === false AND $isAaoWithoutSpaceExist === false AND $isAaoAllLowerWithoutSpaceExist === false AND $isAaoAllLowerWithSpaceExist === false)
			{
				// With Comma OR Semicolon AND NO Hyphen AND No , a. a. O. START
				if (mb_strpos($lastBracketedString, ',') !== false) 
					$separator = ",";
				else
					$separator = ";";

				$commaFirstOccurrence = mb_stripos ( $lastBracketedString, $separator );
				$beforeTheCommaString = trim( mb_substr ( $lastBracketedString, 0, $commaFirstOccurrence ) );
				$afterTheCommaString = trim( ltrim( mb_substr ( $lastBracketedString, $commaFirstOccurrence ), $separator ));
				$beforeTheCommaStringInArray = explode(" ", $beforeTheCommaString);
				$afterTheCommaStringInArray = explode(" ", $afterTheCommaString);

				$isDotExistInBeforeTheCommaString = mb_substr_count($beforeTheCommaString,".");
				$isDotExistInAfterTheCommaString = mb_substr_count($afterTheCommaString,".");
				
				$upperCaseCheckInBeforeTheCommaStr = isThereAnyUppercase($beforeTheCommaString);
				$upperCaseCheckInAfterTheCommaStr = isThereAnyUppercase($afterTheCommaString);
				$isFirstCharUpperBeforeTheCommaStr = isFirstCharacterUppercase($beforeTheCommaString);

				$workingString = trim($lastBracketedString);

				/*
				* COMMON LOOKUP SECTION START
				*/

				/* REMEDY START */
				$checkRemedyApprovalStatus = 0;
				$expectedRemedyArray = explode($separator, $workingString);
				foreach ($expectedRemedyArray as $expectedRemedyKey => $expectedRemedyVal) {
					
					if($expectedRemedyVal == "")
						continue;	

					$cleanExpectedRemedyName = trim($expectedRemedyVal);
					$cleanRemedyString = (mb_substr ( $cleanExpectedRemedyName, mb_strlen ( $cleanExpectedRemedyName ) - 1, 1 ) == '.') ? $cleanExpectedRemedyName : $cleanExpectedRemedyName.'.'; 
					$remedyReturnArr = newLookupRemedy($cleanRemedyString);
					if(isset($remedyReturnArr['need_approval']) AND $remedyReturnArr['need_approval'] == 1){
						$checkRemedyApprovalStatus = 1;
						if(!empty($remedyReturnArr['data'])){
							foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
								// custom_in_array(needle, needle_field, array) 
								if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $remedyArray) != true)
									$remedyArray[] = $remedyReturnArr['data'][$remedyReturnKey];
							}

						}
						else{
							$dataArr = array();
							$dataArr['remedy_id'] = null;
							$dataArr['name'] = $cleanExpectedRemedyName;
							$dataArr['kuerzel'] = "";
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($dataArr['name'], 'name', $remedyArray) != true)
								$remedyArray[] = $dataArr;
						}
					}
					else{
						foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $remedyArray) != true)
								$remedyArray[] = $remedyReturnArr['data'][$remedyReturnKey];
						}
					}
				}
				// Setting last operations approval status to main approval checking variable 
				$needApproval = $checkRemedyApprovalStatus; 
				/* REMEDY END */

				/* REFERENCE START */
				if($needApproval == 1){
					$referenceReturnArr = lookupLiteratureReference($workingString);
					if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){

						if(!empty($referenceReturnArr['data'])){
							foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true)
									$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
							}
						}
						else{
							$fullReferenceInArray = explode(",", $workingString);
							if(count($fullReferenceInArray) >= 2){
								$referenceAutor = trim($fullReferenceInArray[0]);
				        		array_shift($fullReferenceInArray);
				        		$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
							}else{
								$referenceAutor = "";
								$referenceTxt = $workingString;
							}
							
							$dataArr = array();
							$dataArr['reference_id'] = null;
							$dataArr['full_reference'] = $workingString;
							$dataArr['autor'] = $referenceAutor;
							$dataArr['reference'] = $referenceTxt;
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($dataArr['full_reference'], 'full_reference', $referenceArray) != true)
								$referenceArray[] = $dataArr;
						}

					}else{
						$needApproval = 0;
						$remedyArray = array();
						foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
								$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
								$aLiteraturquellen [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
							}	
						}
					}
				}
				/* REFERENCE END */

				/* PRUEFER START */
				if($needApproval == 1){
					$checkPrueferApprovalStatus = 0;
					$expectedPruefersArray = explode($separator, $workingString);
					foreach ($expectedPruefersArray as $expectedPrueferKey => $expectedPrueferVal) {
						if($expectedPrueferVal == "")
							continue;

						$cleanPrueferString = trim($expectedPrueferVal); 
						$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
						$prueferReturnArr = lookupPruefer($cleanPrueferString);
						if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
							$checkPrueferApprovalStatus = 1;
							if(!empty($prueferReturnArr['data'])){
								foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
										$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
								}
							}
							else{
								$dataArr = array();
								$dataArr['pruefer_id'] = null;
								$dataArr['kuerzel'] = null;
								$dataArr['suchname'] = $cleanPrueferString;
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($dataArr['suchname'], 'suchname', $prueferArray) != true)
									$prueferArray[] = $dataArr;
							}
						}
						else{
							$remedyArray = array();
							$referenceArray = array();
							$aLiteraturquellen = array();
							foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
									$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
							}
						}	
					}

					$needApproval = $checkPrueferApprovalStatus; 
				}
				/* PRUEFER END */
				/*
				* COMMON LOOKUP SECTION END
				*/

				/* Rule 2 Conditions START */
				if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString != 0 AND $isDotExistInAfterTheCommaString !=0){
					/*
					* 2.1 Single word + dot before the comma and one or more words + dot after comma (no matter if upper or lower case)
					*
					* 1 = chcek for remedis by spliting by comma
					*/

					if($needApproval == 1){
						$referenceWithNoAuthorPriority = 0;
						$aaoHyphenPriority = 0;
						$hyphenPrueferPriority = 0;
						$hyphenReferencePriority = 0;
						$moreThanOneTagStringPriority = 0;
						$remedyWithSymptomPriority = 0;
						$prueferPriority = 0;
						$partOfSymptomPriority = 0;
						$referencePriority = 0;
						$remedyPriority = 10;
					}

				}else if($isCommaExist == 1 AND ((count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 1) OR (count($afterTheCommaStringInArray) == 1 AND $isDotExistInAfterTheCommaString == 1))){
					/*
					* 2.2. Single word + dot before the comma or after a comma (only one dot and one comma)
					*
					* 1 = check for remedy with symptom text (Eg: Opi., during the day)(Eg: small boils in crops, Sulph.)
					* 2 = part of symptom
					*/
					if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 1){
						$similarRemedyString = $beforeTheCommaString;
						$similarSymptomString = $afterTheCommaString;	
					}else{
						$similarRemedyString = $afterTheCommaString;
						$similarSymptomString = $beforeTheCommaString;
					}
					$cleanRemedyWithSymptomString = (mb_substr ( $workingString, mb_strlen ( $workingString ) - 1, 1 ) == '.') ? $workingString : $workingString.'.'; 
					$remedyWithSymptomReturnArr = newLookupRemedyWithSymptom($cleanRemedyWithSymptomString, $similarRemedyString, $similarSymptomString);
					if(isset($remedyWithSymptomReturnArr['need_approval']) AND $remedyWithSymptomReturnArr['need_approval'] == 0){
						$needApproval = 0;
						$remedyArray = array();
						$referenceArray = array();
						$aLiteraturquellen = array();
						$prueferArray = array();
						if(isset($remedyWithSymptomReturnArr['data'][0]['remedy']))
							$remedyArray = $remedyWithSymptomReturnArr['data'][0]['remedy'];
						$symptomOfDifferentRemedy = (isset($remedyWithSymptomReturnArr['data'][0]['symptom_of_different_remedy'])) ? $remedyWithSymptomReturnArr['data'][0]['symptom_of_different_remedy'] : "";
					}else{
						$needApproval = 1;
					}

					if($needApproval == 1){
						$referenceWithNoAuthorPriority = 0;
						$aaoHyphenPriority = 0;
						$hyphenPrueferPriority = 0;
						$hyphenReferencePriority = 0;
						$moreThanOneTagStringPriority = 0;
						$prueferPriority = 0;
						$referencePriority = 0;
						$remedyPriority = 0;
						$remedyWithSymptomPriority = 9;
						$partOfSymptomPriority = 10;
					}

				}else if(count($beforeTheCommaStringInArray) > 1 AND $upperCaseCheckInBeforeTheCommaStr === false AND $isDotExist == 0 AND count($afterTheCommaStringInArray) > 1){
					/*
					* 2.3. More than one word before comma in lower case (no dots) and no single word + dot in the bracket
					*
					* 1 = part of symptom
					*/

					if($needApproval == 1){
						$referenceWithNoAuthorPriority = 0;
						$aaoHyphenPriority = 0;
						$hyphenPrueferPriority = 0;
						$hyphenReferencePriority = 0;
						$moreThanOneTagStringPriority = 0;
						$prueferPriority = 0;
						$referencePriority = 0;
						$remedyPriority = 0;
						$remedyWithSymptomPriority = 0;
						$partOfSymptomPriority = 10;
					}
				}else if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 0 AND $isFirstCharUpperBeforeTheCommaStr === true){ 
					/*
					* 2.4. Single word upper case without dot before the comma
					*
					* 1 = check for reference
					* 2 = part of symptom
					* 3 = chcek for remedis by spliting by comma
					* 4 = pruefer
					*/

					if($needApproval == 1){
						$referenceWithNoAuthorPriority = 0;
						$aaoHyphenPriority = 0;
						$hyphenPrueferPriority = 0;
						$hyphenReferencePriority = 0;
						$moreThanOneTagStringPriority = 0;
						$remedyWithSymptomPriority = 0;
						$referencePriority = 7;
						$partOfSymptomPriority = 8;
						$remedyPriority = 9;
						$prueferPriority = 10;
					}
				}else if($upperCaseCheckInBeforeTheCommaStr === false AND $isDotExist == 0){
					/*
					* 2.5. One or more words lower case without dot before the comma (no dot in the bracket part)
					*
					* 1 = part of symptom
					*/

					if($needApproval == 1){
						$referenceWithNoAuthorPriority = 0;
						$aaoHyphenPriority = 0;
						$hyphenPrueferPriority = 0;
						$hyphenReferencePriority = 0;
						$moreThanOneTagStringPriority = 0;
						$prueferPriority = 0;
						$referencePriority = 0;
						$remedyPriority = 0;
						$remedyWithSymptomPriority = 0;
						$partOfSymptomPriority = 10;
					}
				}else if(count($beforeTheCommaStringInArray) > 1 AND $isFirstCharUpperBeforeTheCommaStr === true AND $isDotExistInBeforeTheCommaString != 0 ){
					/*
					* 2.6. More than one word with at least one dot before the comma(all words upper case)
					*
					* 1 = check for reference
					* 2 = check for pruefer
					* 3 = chcek for remedis by spliting by comma
					*/

					if($needApproval == 1){
						$referenceWithNoAuthorPriority = 0;
						$aaoHyphenPriority = 0;
						$hyphenPrueferPriority = 0;
						$hyphenReferencePriority = 0;
						$moreThanOneTagStringPriority = 0;
						$remedyWithSymptomPriority = 0;
						$partOfSymptomPriority = 0;
						$referencePriority = 8;
						$prueferPriority = 9;
						$remedyPriority = 10;
					}
				}else if(count($beforeTheCommaStringInArray) > 1 AND $isFirstCharUpperBeforeTheCommaStr === true AND $isDotExistInBeforeTheCommaString == 0){
					/*
					* 2.7. More than one word (no dots) before comma (all words upper case)
					*
					* 1 = check for reference
					* 2 = check for pruefer
					*/

					if($needApproval == 1){
						$referenceWithNoAuthorPriority = 0;
						$aaoHyphenPriority = 0;
						$hyphenPrueferPriority = 0;
						$hyphenReferencePriority = 0;
						$moreThanOneTagStringPriority = 0;
						$remedyWithSymptomPriority = 0;
						$partOfSymptomPriority = 0;
						$remedyPriority = 0;
						$referencePriority = 9;
						$prueferPriority = 10;
					}
				}else if(count($beforeTheCommaStringInArray) > 1 AND $isDotExistInBeforeTheCommaString == 0 AND $upperCaseCheckInBeforeTheCommaStr === true){
					/*
					* 2.8. More than one word mixed lower & upper case (no dots) before comma(all the words cannot be in one case)
					*
					* 1 = part of symptom
					* 2 = check for reference
					*/
					if($needApproval == 1){
						$referenceWithNoAuthorPriority = 0;
						$aaoHyphenPriority = 0;
						$hyphenPrueferPriority = 0;
						$hyphenReferencePriority = 0;
						$moreThanOneTagStringPriority = 0;
						$remedyWithSymptomPriority = 0;
						$remedyPriority = 0;
						$prueferPriority = 0;
						$partOfSymptomPriority = 9;
						$referencePriority = 10;
					}
				}else if(count($beforeTheCommaStringInArray) > 1 AND $upperCaseCheckInBeforeTheCommaStr === true AND $isDotExistInBeforeTheCommaString != 0){
					/*
					* 2.9. More than one word mixed lower & upper case with at least one dotbefore comma(all the words cannot be in one case)
					*
					* 1 = chcek for remedis by spliting by comma
					* 2 = check for reference
					*/ 

					if($needApproval == 1){
						$referenceWithNoAuthorPriority = 0;
						$aaoHyphenPriority = 0;
						$hyphenPrueferPriority = 0;
						$hyphenReferencePriority = 0;
						$moreThanOneTagStringPriority = 0;
						$remedyWithSymptomPriority = 0;
						$prueferPriority = 0;
						$partOfSymptomPriority = 0;
						$remedyPriority = 9;
						$referencePriority = 10;
					}
				}
				/* Rule 2 Conditions END */

				// With Comma OR Semicolon AND NO Hyphen AND No , a. a. O. END
			}
			else if(($isAaoExist !== false OR $isAaoWithoutSpaceExist !== false OR $isAaoAllLowerWithoutSpaceExist !== false OR $isAaoAllLowerWithSpaceExist !== false) AND $isHyphenExist != 0)
			{
				// When string has both ", a. a. O." and hyphen START
				$workingString = trim($lastBracketedString);
				$eachElement = explode(" - ", $workingString); 
				$referenceArray = array();
				$aLiteraturquellen = array();
				$prueferArray = array();
				$countUnknownElement = 0;
				foreach ($eachElement as $elementKey => $elementVal) {
					$innerApprovalChecking = 0;
					// Lookup in same import data 
					$elementString = str_replace("a. a. O.", "{#^#}", $elementVal);
					$elementString = str_replace("a.a.O.", "{#^#}", $elementString);
					$elementString = str_replace("a.a.o.", "{#^#}", $elementString);
					$elementString = str_replace("a. a. o.", "{#^#}", $elementString);
					$searchAuthorPreName = trim($elementString);
					$aaoPosition = mb_strpos($searchAuthorPreName, '{#^#}');
					if($aaoPosition !== false){
						$searchAuthorPreName = mb_substr($searchAuthorPreName, 0, $aaoPosition);
					}
					$searchAuthorPreName = str_replace("{#^#}", "", $searchAuthorPreName);
					$searchAuthorName = trim($searchAuthorPreName);

					if($searchAuthorName != ""){
						/* 
						* Check the last appearence of this elemet in temp_approved_pruefer and temp_approved_reference table
						* if no match data found than "aao_hyphen_priority" question will be ask
						*/
						// Checking pruefer
						$cleanPrueferString = trim($searchAuthorName); 
						$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
						$prueferReturnArr = lookupPrueferInCurrentImport($cleanPrueferString, $masterId, $tempSymptomId);
						if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
							$innerApprovalChecking = 1;
						}
						else{
							$innerApprovalChecking = 0;
							foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
									$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
							}
						}

						if($innerApprovalChecking == 1){
							// Check reference
							$cleanReferenceString = trim($searchAuthorName);
							$referenceReturnArr = lookupReferenceInCurrentImport($cleanReferenceString, $masterId, $tempSymptomId);
							if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
								$innerApprovalChecking = 1;
							}else{
								$innerApprovalChecking = 0;
								foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
										$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
										$aLiteraturquellen [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
									}	
								}
							}
						}

						// Normal lookup
						// Check pruefer
						if($innerApprovalChecking == 1){
							$cleanPrueferString = trim($searchAuthorName); 
							$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
							$prueferReturnArr = lookupPruefer($cleanPrueferString);
							if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
								$innerApprovalChecking = 1;
								if(!empty($prueferReturnArr['data'])){
									foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true){
											$prueferReturnArr['data'][$prueferReturnKey]['is_one_unknown_element_in_hyphen'] = 1;
											$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
										}
									}
								}
							}
							else{
								$innerApprovalChecking = 0;
								foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
										$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
								}
							}
						}

						// Checking Reference
						if($innerApprovalChecking == 1){
							$cleanReferenceString = trim($searchAuthorName);
							$referenceReturnArr = lookupLiteratureReference($cleanReferenceString);
							if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
								$innerApprovalChecking = 1;
								if(!empty($referenceReturnArr['data'])){
									foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
										// custom_in_array(needle, needle_field, array)
										if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
											$referenceReturnArr['data'][$referenceReturnKey]['is_one_unknown_element_in_hyphen'] = 1;
											$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
										}
									}
								}
							}else{
								$innerApprovalChecking = 0;
								foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
										$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
										$aLiteraturquellen [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
									}	
								}
							}
						}
					}

					// If unknown Data found incrementing the counter and setting the element value to $hyphenApprovalString
					if($innerApprovalChecking == 1){
						$countUnknownElement++;
						$hyphenApprovalString = trim($elementVal);
					}
				}

				// Set need approval value if unknown data found
				if($countUnknownElement > 0){
					$needApproval = 1;
					if($countUnknownElement != 1)
						$hyphenApprovalString = "";
				}

				/*
				* Rule 3 Last bracket words:  â, a. a. O.â or ", a.a.O." and Hyphen (hyphenhasspacebeforeand after ( - )) (whenbothexist)
				*
				* 1 = Unknown data found with a. a. O. or Hyphen( - )
				*/ 
				if($needApproval == 1){
					if($countUnknownElement == 1){
						$referenceWithNoAuthorPriority = 0;
						$moreThanOneTagStringPriority = 0;
						$remedyWithSymptomPriority = 0;
						$prueferPriority = 0;
						$partOfSymptomPriority = 0;
						$remedyPriority = 0;
						$referencePriority = 0;
						$aaoHyphenPriority = 0;
						$hyphenReferencePriority = 9;
						$hyphenPrueferPriority = 10;
					}else{
						// Making pruefer and reference array empty because these elements will be cleared by direct oredr or by correcting the symptom string. Also seting aao_hyphen_priority value for asking the question
						$referenceArray = array();
						$aLiteraturquellen = array();
						$prueferArray = array();

						$referenceWithNoAuthorPriority = 0;
						$moreThanOneTagStringPriority = 0;
						$remedyWithSymptomPriority = 0;
						$prueferPriority = 0;
						$partOfSymptomPriority = 0;
						$remedyPriority = 0;
						$referencePriority = 0;
						$hyphenReferencePriority = 0;
						$hyphenPrueferPriority = 0;
						$aaoHyphenPriority = 10;
					}
				}
				// When string has both ", a. a. O." and hyphen END 
			}
			else if($isHyphenExist != 0)
			{
				// When string has hyphen only START 
				$workingString = trim($lastBracketedString);
				$eachElement = explode(" - ", $workingString);
				$referenceArray = array();
				$aLiteraturquellen = array();
				$prueferArray = array();
				$countUnknownElement = 0;
				foreach ($eachElement as $elementKey => $elementVal) {
					$innerApprovalChecking = 0;
					/* 
					* Check the last appearence of this elemet in temp_approved_pruefer and temp_approved_reference table
					* if no match data found than "aao_hyphen_priority" question will be ask
					*/
					// Checking pruefer
					$cleanPrueferString = trim($elementVal); 
					$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
					$prueferReturnArr = lookupPruefer($cleanPrueferString);
					if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
						$innerApprovalChecking = 1;
						if(!empty($prueferReturnArr['data'])){
							foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true){
									$prueferReturnArr['data'][$prueferReturnKey]['is_one_unknown_element_in_hyphen'] = 1;
									$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
								}
							}
						}
					}
					else{
						$innerApprovalChecking = 0;
						foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
								$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
						}
					}

					if($innerApprovalChecking == 1){
						// Check reference
						$cleanReferenceString = trim($elementVal);
						$referenceReturnArr = lookupLiteratureReference($cleanReferenceString);
						if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
							$innerApprovalChecking = 1;
							if(!empty($referenceReturnArr['data'])){
								foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
										$referenceReturnArr['data'][$referenceReturnKey]['is_one_unknown_element_in_hyphen'] = 1;
										$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
									}
								}
							}
						}else{
							$innerApprovalChecking = 0;
							foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
									$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
									$aLiteraturquellen [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
								}	
							}
						}
					}

					// If unknown Data found incrementing the counter and setting the element value to $hyphenApprovalString
					if($innerApprovalChecking == 1){
						$countUnknownElement++;
						$hyphenApprovalString = trim($elementVal);
					}
				}

				// Set need approval value if unknown data found
				if($countUnknownElement > 0){
					$needApproval = 1;
					if($countUnknownElement != 1)
						$hyphenApprovalString = "";
				}

				/*
				* Rule 4 Last bracket words:  â, a. a. O.â or ", a.a.O." and Hyphen (hyphenhasspacebeforeand after ( - )) (whenbothexist)
				*
				* 1 = Unknown data found with a. a. O. or Hyphen( - )
				*/ 
				if($needApproval == 1){
					if($countUnknownElement == 1){
						$referenceWithNoAuthorPriority = 0;
						$moreThanOneTagStringPriority = 0;
						$remedyWithSymptomPriority = 0;
						$prueferPriority = 0;
						$partOfSymptomPriority = 0;
						$remedyPriority = 0;
						$referencePriority = 0;
						$aaoHyphenPriority = 0;
						$hyphenReferencePriority = 9;
						$hyphenPrueferPriority = 10;
					}else{
						// Making pruefer and reference array empty because these elements will be cleared by direct oredr or by correcting the symptom string. Also seting aao_hyphen_priority value for asking the question
						$referenceArray = array();
						$aLiteraturquellen = array();
						$prueferArray = array();

						$referenceWithNoAuthorPriority = 0;
						$moreThanOneTagStringPriority = 0;
						$remedyWithSymptomPriority = 0;
						$prueferPriority = 0;
						$partOfSymptomPriority = 0;
						$remedyPriority = 0;
						$referencePriority = 0;
						$hyphenReferencePriority = 0;
						$hyphenPrueferPriority = 0;
						$aaoHyphenPriority = 10;
					}
				}
				// When string has hyphen only START 
			}
			else if($isAaoExist !== false OR $isAaoWithoutSpaceExist !== false OR $isAaoAllLowerWithoutSpaceExist !== false OR $isAaoAllLowerWithSpaceExist !== false)
			{
				// When string has "a. a. O." only START 
				/* 
				* Check the last appearence of this elemet in temp_approved_pruefer and temp_approved_reference table
				* if no match data found than "aao_hyphen_priority" question will be ask
				*/
				$workingString = trim($lastBracketedString);

				$elementString = str_replace("a. a. O.", "{#^#}", $workingString);
				$elementString = str_replace("a.a.O.", "{#^#}", $elementString);
				$elementString = str_replace("a.a.o.", "{#^#}", $elementString);
				$elementString = str_replace("a. a. o.", "{#^#}", $elementString);
				$searchAuthorPreName = trim($elementString);
				$aaoPosition = mb_strpos($searchAuthorPreName, '{#^#}');
				if($aaoPosition !== false){
					$searchAuthorPreName = mb_substr($searchAuthorPreName, 0, $aaoPosition);
				}
				$searchAuthorPreName = str_replace("{#^#}", "", $searchAuthorPreName);
				$searchAuthorName = trim($searchAuthorPreName);

				if($searchAuthorName != ""){
					$innerApprovalChecking = 0;
					// Checking pruefer
					$cleanPrueferString = trim($searchAuthorName); 
					$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
					$prueferReturnArr = lookupPrueferInCurrentImport($cleanPrueferString, $masterId, $tempSymptomId);
					if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
						$innerApprovalChecking = 1;
					}
					else{
						$innerApprovalChecking = 0;
						foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
								$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
						}
					}

					if($innerApprovalChecking == 1){
						// Check reference
						$cleanReferenceString = trim($searchAuthorName);
						$referenceReturnArr = lookupReferenceInCurrentImport($cleanReferenceString, $masterId, $tempSymptomId);
						if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
							$innerApprovalChecking = 1;
						}else{
							$innerApprovalChecking = 0;
							foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
									$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
									$aLiteraturquellen [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
								}	
							}
						}
					}

					// Normal lookup
					// Check pruefer
					if($innerApprovalChecking == 1){
						$cleanPrueferString = trim($searchAuthorName); 
						$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
						$prueferReturnArr = lookupPruefer($cleanPrueferString);
						if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
							$prueferArray = array();
							$innerApprovalChecking = 1;
							if(!empty($prueferReturnArr['data'])){
								foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
										$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
								}
							}
						}
						else{
							$innerApprovalChecking = 0;
							foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $prueferArray) != true)
									$prueferArray[] = $prueferReturnArr['data'][$prueferReturnKey];
							}
						}
					}

					// Checking Reference
					if($innerApprovalChecking == 1){
						$cleanReferenceString = trim($searchAuthorName);
						$referenceReturnArr = lookupLiteratureReference($cleanReferenceString);
						if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
							$referenceArray = array();
							$aLiteraturquellen = array();
							$innerApprovalChecking = 1;
							if(!empty($referenceReturnArr['data'])){
								foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
									// custom_in_array(needle, needle_field, array)
									if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true)
										$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
								}
							}
						}else{
							$innerApprovalChecking = 0;
							foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $referenceArray) != true){
									$referenceArray[] = $referenceReturnArr['data'][$referenceReturnKey];
									$aLiteraturquellen [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
								}	
							}
						}
					}

					if($innerApprovalChecking == 1)
						$needApproval = 1;

					/*
					* Rule 5 Last bracket words:  â, a. a. O.â or ", a.a.O." and Hyphen (hyphenhasspacebeforeand after ( - )) (whenbothexist)
					*
					* 1 = Unknown data found with a. a. O. or Hyphen( - )
					*/ 
					if($needApproval == 1){
						// Making pruefer and reference array empty because these elements will be cleared by direct oredr or by correcting the symptom string. Also seting aao_hyphen_priority value for asking the question
						// $referenceArray = array();
						// $aLiteraturquellen = array();
						// $prueferArray = array();

						$referenceWithNoAuthorPriority = 0;
						$moreThanOneTagStringPriority = 0;
						$remedyWithSymptomPriority = 0;
						$partOfSymptomPriority = 0;
						$remedyPriority = 0;
						$aaoHyphenPriority = 0;
						$hyphenPrueferPriority = 0;
						$hyphenReferencePriority = 0;
						$referencePriority = 9;
						$prueferPriority = 10;
					}
				}
				// When string has "a. a. O." only START 
			}
			/* End bracket approval end */
		}

		if ($aLiteraturquellen) {
			$EntnommenAus = join ( "\n", $aLiteraturquellen );
		}
		
		if(isset($needApproval) AND $needApproval == 1){
			if($referenceWithNoAuthorPriority == 0 AND $moreThanOneTagStringPriority == 0 AND $aaoHyphenPriority == 0 AND $hyphenPrueferPriority == 0 AND $hyphenReferencePriority == 0 AND $remedyWithSymptomPriority == 0 AND $prueferPriority == 0 AND $partOfSymptomPriority == 0 AND $referencePriority == 0 AND $remedyPriority == 0)
	    		$data['need_approval'] = 0;
	    	else
	    		$data['need_approval'] = 1;
		}
	    else
	    	$data['need_approval'] = 0;

	    if($hyphenApprovalString != ""){
        	$data['approval_string'] = ( isset($hyphenApprovalString) AND $hyphenApprovalString != "" ) ? mysqli_real_escape_string($db, $hyphenApprovalString) : null;
        	$data['full_approval_string_when_hyphen'] = ( isset($approvalString) AND $approvalString != "" ) ? mysqli_real_escape_string($db, $approvalString) : null;
        	// $data['full_approval_string_when_hyphen_unchanged'] = ( isset($approvalString) AND $approvalString != "" ) ? mysqli_real_escape_string($db, $approvalString) : null;
        }else{
        	$data['approval_string'] = ( isset($approvalString) AND $approvalString != "" ) ? mysqli_real_escape_string($db, $approvalString) : null;
        	$data['full_approval_string_when_hyphen'] = ( isset($approvalString) AND $approvalString != "" ) ? mysqli_real_escape_string($db, $approvalString) : null;
        	// $data['full_approval_string_when_hyphen_unchanged'] = null;
        }
	    $data['EntnommenAus'] = mysqli_real_escape_string($db, $EntnommenAus);
		$data['symptom_of_different_remedy'] = ( isset($symptomOfDifferentRemedy) AND $symptomOfDifferentRemedy != "" ) ? mysqli_real_escape_string($db, $symptomOfDifferentRemedy) : null;

		// 0 = end bracket, 1 = middle bracket
		if($approvalFor == 1){
			// If middle bracket approval
			$symptomUpdateQuery="UPDATE temp_quelle_import_test SET need_approval = '".$data['need_approval']."', is_skipped = 0, EntnommenAus = '".$data['EntnommenAus']."', symptom_of_different_remedy = NULLIF('".$data['symptom_of_different_remedy']."', ''), pruefer_priority = ".$prueferPriority.", remedy_priority = ".$remedyPriority.", part_of_symptom_priority = ".$partOfSymptomPriority.", reference_with_no_author_priority = ".$referenceWithNoAuthorPriority.", remedy_with_symptom_priority = ".$remedyWithSymptomPriority.", more_than_one_tag_string_priority = ".$moreThanOneTagStringPriority.", aao_hyphen_priority = ".$aaoHyphenPriority.", hyphen_pruefer_priority = ".$hyphenPrueferPriority.", hyphen_reference_priority = ".$hyphenReferencePriority.", reference_priority = ".$referencePriority.", direct_order_priority = ".$directOrderPriority.", approval_for = '".$approvalFor."', middle_bracket_approval_string = NULLIF('".$data['approval_string']."', ''), full_approval_string_when_hyphen = NULLIF('".$data['full_approval_string_when_hyphen']."', ''), is_rechecked = 1 WHERE id = '".$tempSymptomId."'";
			$db->query($symptomUpdateQuery);
		}else{
			// If end bracket approval
			$symptomUpdateQuery="UPDATE temp_quelle_import_test SET need_approval = '".$data['need_approval']."', is_skipped = 0, EntnommenAus = '".$data['EntnommenAus']."', symptom_of_different_remedy = NULLIF('".$data['symptom_of_different_remedy']."', ''), pruefer_priority = ".$prueferPriority.", remedy_priority = ".$remedyPriority.", part_of_symptom_priority = ".$partOfSymptomPriority.", reference_with_no_author_priority = ".$referenceWithNoAuthorPriority.", remedy_with_symptom_priority = ".$remedyWithSymptomPriority.", more_than_one_tag_string_priority = ".$moreThanOneTagStringPriority.", aao_hyphen_priority = ".$aaoHyphenPriority.", hyphen_pruefer_priority = ".$hyphenPrueferPriority.", hyphen_reference_priority = ".$hyphenReferencePriority.", reference_priority = ".$referencePriority.", direct_order_priority = ".$directOrderPriority.", approval_for = '".$approvalFor."', approval_string = NULLIF('".$data['approval_string']."', ''), full_approval_string_when_hyphen = NULLIF('".$data['full_approval_string_when_hyphen']."', ''), is_rechecked = 1 WHERE id = '".$tempSymptomId."'";
			$db->query($symptomUpdateQuery);
		}
		// If there is no more unskipped and unapproved data left than we will make the skipped data as unskipped START
		$unSkippedResult = mysqli_query($db, "SELECT id FROM temp_quelle_import_test WHERE need_approval = 1 AND is_skipped = 0 AND master_id = '".$masterId."'");
		$unSkippedRowCount = mysqli_num_rows($unSkippedResult);
		if( $unSkippedRowCount == 0){
			$makeUnskippedQuery="UPDATE temp_quelle_import_test SET is_skipped = 0 WHERE master_id = '".$masterId."'";
			$db->query($makeUnskippedQuery);
		}
		// If there is no more unskipped and unapproved data left than we will make the skipped data as unskipped END

		/* Pruefer Start */
		if(!empty($prueferArray)){
			foreach ($prueferArray as $pruKey => $pruVal) {
				if(isset($prueferArray[$pruKey]['pruefer_id']) AND $prueferArray[$pruKey]['pruefer_id'] != ""){
					$isOneUnknownElementInHyphen = (isset($prueferArray[$pruKey]['is_one_unknown_element_in_hyphen']) AND $prueferArray[$pruKey]['is_one_unknown_element_in_hyphen'] != "") ? $prueferArray[$pruKey]['is_one_unknown_element_in_hyphen'] : 0;
	        		$prueferQuery = "INSERT INTO temp_symptom_pruefer (symptom_id, pruefer_id, is_one_unknown_element_in_hyphen) VALUES ('".$tempSymptomId."', '".$prueferArray[$pruKey]['pruefer_id']."', '".$isOneUnknownElementInHyphen."')";
		            $db->query($prueferQuery);

		            if($data['need_approval'] == 0){
		            	// When a symptom needs no approval than storing it's pruefer details in temp_approved_pruefer for using in a. a. O. search process
		            	$tempApprovedPrueferQuery = "INSERT INTO temp_approved_pruefer (master_id, symptom_id, pruefer_id, approval_string) VALUES ('".$masterId."', '".$tempSymptomId."', '".$prueferArray[$pruKey]['pruefer_id']."', NULLIF('".$approvalString."', ''))";
		            	$db->query($tempApprovedPrueferQuery);  
		            }
				}else{
					if(isset($prueferArray[$pruKey]['suchname']) AND $prueferArray[$pruKey]['suchname'] != ""){
						$prueferArray[$pruKey]['suchname'] = mysqli_real_escape_string($db, $prueferArray[$pruKey]['suchname']);
						$prueferInsertQuery = "INSERT INTO temp_pruefer (symptom_id, suchname) VALUES ('".$tempSymptomId."', '".$prueferArray[$pruKey]['suchname']."')";
						$db->query($prueferInsertQuery);
						$newPrueferId = mysqli_insert_id($db);
						
						$prueferQuery = "INSERT INTO temp_symptom_pruefer (symptom_id, pruefer_id, is_new) VALUES ('".$tempSymptomId."', '".$newPrueferId."', 1)";
		            	$db->query($prueferQuery);
					}
				}
			}
		}
		/* Pruefer End */
		/* Remedy Start */
		if(!empty($remedyArray)){
			$remedyText = "";
			foreach ($remedyArray as $remdKey => $remdVal) {
				$remedyArray[$remdKey]['name'] = mysqli_real_escape_string($db, $remedyArray[$remdKey]['name']);
				if(isset($needApproval) AND $needApproval == 1){
					if(isset($remedyArray[$remdKey]['remedy_id']) AND $remedyArray[$remdKey]['remedy_id'] != ""){
	            		$remedyQuery = "INSERT INTO temp_remedy (symptom_id, main_remedy_id, name) VALUES ('".$tempSymptomId."', '".$remedyArray[$remdKey]['remedy_id']."', '".$remedyArray[$remdKey]['name']."')";
			            $db->query($remedyQuery);
					}else{

						// $checkRemedyResult = mysqli_query($db, "SELECT remedy_id, name FROM temp_remedy where name = '".$remedyArray[$remdKey]['name']."'");
						// if(mysqli_num_rows($checkRemedyResult) < 1){
							$remedyQuery = "INSERT INTO temp_remedy (symptom_id, name, is_new) VALUES ('".$tempSymptomId."', '".$remedyArray[$remdKey]['name']."', 1)";
			            	$db->query($remedyQuery);
						// }

					}
				}
				else{
					$remedyText = $remedyText.$remedyArray[$remdKey]['name'].", ";
				}
			}
			if(isset($remedyText) AND $remedyText != ""){
				$remedyText = rtrim($remedyText, ", ");
				$symptomRemedyUpdateQuery="UPDATE temp_quelle_import_test SET Remedy = '".$remedyText."' WHERE id = '".$tempSymptomId."'";
				// mysqli_query($db, $symptomUpdateQuery);
				$db->query($symptomRemedyUpdateQuery);
			}
		}
		/* Remedy End */
		/* Reference Start */
		if(!empty($referenceArray)){
			foreach ($referenceArray as $refKey => $refVal) {
				if(isset($referenceArray[$refKey]['reference_id']) AND $referenceArray[$refKey]['reference_id'] != ""){
					$isOneUnknownElementInHyphen = (isset($referenceArray[$refKey]['is_one_unknown_element_in_hyphen']) AND $referenceArray[$refKey]['is_one_unknown_element_in_hyphen'] != "") ? $referenceArray[$refKey]['is_one_unknown_element_in_hyphen'] : 0;
	        		$referenceQuery = "INSERT INTO temp_symptom_reference (symptom_id, reference_id, is_one_unknown_element_in_hyphen) VALUES ('".$tempSymptomId."', '".$referenceArray[$refKey]['reference_id']."', '".$isOneUnknownElementInHyphen."')";
		            $db->query($referenceQuery);

		            if($data['need_approval'] == 0){
		            	// When a symptom needs no approval than storing it's reference details in temp_approved_reference for using in a. a. O. search process
		            	$tempApprovedReferenceQuery = "INSERT INTO temp_approved_reference (master_id, symptom_id, reference_id, approval_string) VALUES ('".$masterId."', '".$tempSymptomId."', '".$referenceArray[$refKey]['reference_id']."', NULLIF('".$approvalString."', ''))";
		            	$db->query($tempApprovedReferenceQuery); 
		            }
				}else{
					if(isset($referenceArray[$refKey]['full_reference']) AND $referenceArray[$refKey]['full_reference'] != ""){
						$referenceArray[$refKey]['full_reference'] = mysqli_real_escape_string($db, $referenceArray[$refKey]['full_reference']);
						$referenceArray[$refKey]['autor'] = mysqli_real_escape_string($db, $referenceArray[$refKey]['autor']);
						$referenceArray[$refKey]['reference'] = mysqli_real_escape_string($db, $referenceArray[$refKey]['reference']);
						$referenceInsertQuery = "INSERT INTO temp_reference (symptom_id, full_reference, autor, reference) VALUES ('".$tempSymptomId."', '".$referenceArray[$refKey]['full_reference']."', '".$referenceArray[$refKey]['autor']."', '".$referenceArray[$refKey]['reference']."')";
						$db->query($referenceInsertQuery);
						$newReferenceId = mysqli_insert_id($db);
						
						$referenceQuery = "INSERT INTO temp_symptom_reference (symptom_id, reference_id, is_new) VALUES ('".$tempSymptomId."', '".$newReferenceId."', 1)";
		            	$db->query($referenceQuery);
					}
				}
			}
		}
		/* Reference End */
		/* applying Rules on the approval string again it may get cleared already in this import process END */


		$returnVal = true;
		return $returnVal;
	}

	/*
	* Reset OR Edit the Symptom string
	* Regenarating the related data on the basic of the providev full symptom string
	* This function is used in the symptom edit and reset operation 
	* Expected parameters: symptom id, master id, full symptom text and symptom edit comment(when calling for edit operation)
	*/  
	function repopulateDataOnSymptomEditOrReset($tempSymptomId, $masterId, $fullSymptomText, $editComment=NULL){
		global $db;
		global $timeStringEndTagArray;
		global $globalVariablesArray;;
		global $date;
		
		$returnArr = array(
			'status' => false,
			'error_code' => 4
		);
		if($fullSymptomText != ""){
			$fullSymptomText = base64_decode($fullSymptomText);
			try {
			    // First of all, let's begin a transaction
			    $db->begin_transaction();

		    	$line = str_replace ( '</em><em>', '', $fullSymptomText );
	    		$line = str_replace ( array (
					"\r",
					"\t" 
				), '', $line );
				$line = trim ($line);

				$variablesArray = $globalVariablesArray;
				$stringManipulationReturnArray = importedStringManipulationProcess($line, $variablesArray);
				$line = (isset($stringManipulationReturnArray['string']) AND $stringManipulationReturnArray['string'] != "") ? $stringManipulationReturnArray['string'] : $line;
				$variablesArray = (isset($stringManipulationReturnArray['variablesArray']) AND !empty($stringManipulationReturnArray['variablesArray'])) ? $stringManipulationReturnArray['variablesArray'] : $variablesArray;
				$isContinue = (isset($stringManipulationReturnArray['isContinue']) AND !empty($stringManipulationReturnArray['isContinue'])) ? $stringManipulationReturnArray['isContinue'] : 0;
				$isThereMysqlTransactionError = (isset($stringManipulationReturnArray['isThereMysqlTransactionError']) AND !empty($stringManipulationReturnArray['isThereMysqlTransactionError'])) ? $stringManipulationReturnArray['isThereMysqlTransactionError'] : 0;
				$errorStatus = 0;
				if($isContinue == 1)
					$errorStatus = 5;
				if($isThereMysqlTransactionError == 1)
					$errorStatus = 5;

				if ($variablesArray['Beschreibung']) {
					if($errorStatus == 0){
						if($variablesArray['lastBracketedString'] != ""){
							$workingApprovalString = $variablesArray['lastBracketedString'];
						} else if($variablesArray['middleBracketString'] != ""){
							$workingApprovalString = $variablesArray['middleBracketString'];
						}

						if(isset($workingApprovalString) AND $workingApprovalString != "" AND $variablesArray['approvalFor'] !== ""){
							$workingApprovalStringParam = base64_encode($workingApprovalString);
							$ruleResult = ruleReimplementation($tempSymptomId, $workingApprovalStringParam, $masterId, $variablesArray['approvalFor'], 0, null);
						}
						$data['approval_for'] = ($variablesArray['approvalFor'] != "") ? mysqli_real_escape_string($db, $variablesArray['approvalFor']) : 0;
						/* Checking if any pruefer needs approval */
						if(isset($variablesArray['needApproval']) AND $variablesArray['needApproval'] == 1){
							if($variablesArray['referenceWithNoAuthorPriority'] == 0 AND $variablesArray['moreThanOneTagStringPriority'] == 0 AND $variablesArray['aaoHyphenPriority'] == 0 AND $variablesArray['hyphenPrueferPriority'] == 0 AND $variablesArray['hyphenReferencePriority'] == 0 AND $variablesArray['remedyWithSymptomPriority'] == 0 AND $variablesArray['prueferPriority'] == 0 AND $variablesArray['partOfSymptomPriority'] == 0 AND $variablesArray['referencePriority'] == 0 AND $variablesArray['remedyPriority'] == 0)
								$data['need_approval'] = 0;
							else
								$data['need_approval'] = 1;
						}
						else
							$data['need_approval'] = 0;
						if($variablesArray['hyphenApprovalString'] != ""){
							$data['approval_string'] = ( isset($variablesArray['hyphenApprovalString']) AND $variablesArray['hyphenApprovalString'] != "" ) ? mysqli_real_escape_string($db, $variablesArray['hyphenApprovalString']) : null;
							$data['full_approval_string_when_hyphen'] = ( isset($variablesArray['approvableString']) AND $variablesArray['approvableString'] != "" ) ? mysqli_real_escape_string($db, $variablesArray['approvableString']) : null;
							$data['full_approval_string_when_hyphen_unchanged'] = ( isset($variablesArray['approvableString']) AND $variablesArray['approvableString'] != "" ) ? mysqli_real_escape_string($db, $variablesArray['approvableString']) : null;
						}else{
							$data['approval_string'] = ( isset($variablesArray['approvableString']) AND $variablesArray['approvableString'] != "" ) ? mysqli_real_escape_string($db, $variablesArray['approvableString']) : null;
							$data['full_approval_string_when_hyphen'] = ( isset($variablesArray['approvableString']) AND $variablesArray['approvableString'] != "" ) ? mysqli_real_escape_string($db, $variablesArray['approvableString']) : null;
							$data['full_approval_string_when_hyphen_unchanged'] = ( isset($variablesArray['approvableString']) AND $variablesArray['approvableString'] != "" ) ? mysqli_real_escape_string($db, $variablesArray['approvableString']) : null;
						}
						
						$data['Beschreibung']= ($variablesArray['Beschreibung'] != "") ? mysqli_real_escape_string($db, $variablesArray['Beschreibung']) : "";
						$data['BeschreibungOriginal'] = ($variablesArray['BeschreibungOriginal'] != "") ? mysqli_real_escape_string($db, $variablesArray['BeschreibungOriginal']) : "";
						$data['BeschreibungPlain'] = ($variablesArray['BeschreibungPlain'] != "") ? mysqli_real_escape_string($db, $variablesArray['BeschreibungPlain']) : "";
						$data['searchable_text'] = ($variablesArray['searchableText'] != "") ? mysqli_real_escape_string($db, $variablesArray['searchableText']) : "";
						$data['bracketedString'] = ($variablesArray['bracketedString'] != "") ? mysqli_real_escape_string($db, $variablesArray['bracketedString']) : "";
						$data['timeString'] = ($variablesArray['timeString'] != "") ? mysqli_real_escape_string($db, $variablesArray['timeString']) : "";
						$data['symptom_edit_comment'] = (isset($editComment) AND $editComment != "") ? mysqli_real_escape_string($db, $editComment) : null;
						// $data['full_approval_string_when_hyphen_unchanged'] = ( isset($approvableString) AND $approvableString != "" ) ? mysqli_real_escape_string($db, $approvableString) : null;
						
						if($workingApprovalString != ""){
							$symptomUpdateQuery="UPDATE temp_quelle_import_test SET Beschreibung = '".$data['Beschreibung']."', BeschreibungOriginal = '".$data['BeschreibungOriginal']."', BeschreibungPlain = '".$data['BeschreibungPlain']."', searchable_text = NULLIF('".$data['searchable_text']."', ''), bracketedString = '".$data['bracketedString']."', timeString = '".$data['timeString']."', symptom_edit_comment = NULLIF('".$data['symptom_edit_comment']."', ''), full_approval_string_when_hyphen_unchanged = NULLIF('".$data['full_approval_string_when_hyphen_unchanged']."', ''), stand = '".$date."', symptom_edit_priority = 0 WHERE id = '".$tempSymptomId."'";
							$db->query($symptomUpdateQuery);
						}else{
							// Cleaning Previous Data From temp START
							$deleteTempRemedyQuery="DELETE FROM temp_remedy WHERE symptom_id = '".$tempSymptomId."'";
							$db->query($deleteTempRemedyQuery);

							$deleteTempPrueferQuery = "DELETE FROM temp_pruefer WHERE symptom_id = '".$tempSymptomId."'";
							$db->query($deleteTempPrueferQuery);

							$deleteTempSymptomPrueferQuery = "DELETE FROM temp_symptom_pruefer WHERE symptom_id = '".$tempSymptomId."'";
							$db->query($deleteTempSymptomPrueferQuery);

							$deleteTempReferenceQuery = "DELETE FROM temp_reference WHERE symptom_id = '".$tempSymptomId."'";
							$db->query($deleteTempReferenceQuery);

							$deleteTempSymptomReferenceQuery = "DELETE FROM temp_symptom_reference WHERE symptom_id = '".$tempSymptomId."'";
							$db->query($deleteTempSymptomReferenceQuery);
							// Cleaning Previous Data From temp END
							
							$symptomUpdateQuery="UPDATE temp_quelle_import_test SET Beschreibung = '".$data['Beschreibung']."', BeschreibungOriginal = '".$data['BeschreibungOriginal']."', BeschreibungPlain = '".$data['BeschreibungPlain']."', searchable_text = NULLIF('".$data['searchable_text']."', ''), bracketedString = '".$data['bracketedString']."', timeString = '".$data['timeString']."', symptom_edit_comment = NULLIF('".$data['symptom_edit_comment']."', ''), full_approval_string_when_hyphen_unchanged = NULLIF('".$data['full_approval_string_when_hyphen_unchanged']."', ''), stand = '".$date."', symptom_edit_priority = 0, part_of_symptom_priority = 0, remedy_priority = 0, pruefer_priority = 0, reference_with_no_author_priority = 0, remedy_with_symptom_priority = 0, more_than_one_tag_string_priority = 0, aao_hyphen_priority = 0, hyphen_pruefer_priority = 0, hyphen_reference_priority = 0, reference_priority = 0, direct_order_priority = 0, need_approval = 0 WHERE id = '".$tempSymptomId."'";
							$db->query($symptomUpdateQuery);
						}

						$returnArr = array(
							'status' => true,
							'error_code' => 0
						);
					}
					else{
						$returnArr = array(
							'status' => false,
							'error_code' => $errorStatus
						);
					}
				}
			
			 	// If we arrive here, it means that no exception was thrown
			    // i.e. no query has failed, and we can commit the transaction
			    $db->commit();
			} catch (Exception $e) {
			    // An exception has been thrown
			    // We must rollback the transaction
			    $db->rollback();
			    $returnArr = array(
					'status' => false,
					'error_code' => 5
				);
			}	
		}

		return $returnArr;
	}

	// 12-08-2022
	function removeEndingSpecialCharactersForString($string, $lastCharArr = array()){
		$returnArr = array(
			'symptom_string' => $string,
			'last_character_array' => $lastCharArr
		);
		if($string != ""){
			$string = rtrim($string);
			$lastChar = mb_substr( $string, mb_strlen( $string ) - 1 );
			if (preg_match('/[\'^Â£$%&*@#~><>,.;"|=_+Â¬-]/', $lastChar))
			{
				$string = rtrim(mb_substr($string, 0, mb_strlen($string)-mb_strlen($lastChar)));
				$returnArr['symptom_string'] = ($string != "") ? rtrim($string) : "";
				$returnArr['last_character_array'][] = $lastChar;
				if($string != ""){
					$string = rtrim($string);
					return removeEndingSpecialCharactersForString($string, $returnArr['last_character_array']);
				}
			}
		}
		return $returnArr;
	}

	function findTheLastTags($string, $tags = array()){
		if($string != ""){
			$isFound = preg_match_all("/<[^<]+>/",$string, $tagResult); // Finding html tags with this regex
			if($isFound > 0 AND !empty($tagResult[0])){
				$lastEndTag = end($tagResult[0]);
				$lastOpenTagPos = mb_strripos($string, $lastEndTag);
				if($lastOpenTagPos !== False){
					$stringFromOccuranceToEnd = mb_substr($string, $lastOpenTagPos);
					if($stringFromOccuranceToEnd == $lastEndTag){
						// this is a ending tag
						if (mb_substr($string,-mb_strlen($lastEndTag))===$lastEndTag){
							$tags[] = $lastEndTag;
							$newString = rtrim(mb_substr($string, 0, mb_strlen($string)-mb_strlen($lastEndTag)));
							return findTheLastTags($newString, $tags);
						}
					}
				}
			}
		}
		$returnData = (isset($tags) AND !empty($tags)) ? array_reverse($tags) : array();
		return $returnData;
	}

	function isThereAnyTagDifference($originalSymptom, $editedSymptom){
		global $db;
		// $returnArray = array();
		$isMismatchFound = 0;
		if($originalSymptom != "" AND $editedSymptom != ""){
			// For original symptom
			// Replacing Colored sentences's tag to our custom tag "<clr>"
			$originalSymptom = strip_tags ( $originalSymptom, '<b><i><strong><em><u><sup><span>' );
			$originalSymptom = trim ( str_replace ( '&nbsp;', ' ', htmlentities( $originalSymptom ) ) );
			$originalSymptom = html_entity_decode($originalSymptom);
			$coloredTextCnt = 0; 
			do { 
				$originalSymptom = preg_replace("#<span[^>]*style=(\"|')[^>]*color:(.+?);[^>]*(\"|')>(.+?)</span>#is", "<clr style=\"color:$2;\">$4</clr>", $originalSymptom, -1, $coloredTextCnt ); 
			} while ( $coloredTextCnt > 0 );
			// Replacing Spaced sentences's tag to our custom tag "<ss>"
			$letterSpaceCntV1 = 0; 
			do { 
				$originalSymptom = preg_replace("#<span[^>]*style=(\"|')[^>]*letter-spacing:[^>]*>(.+?)</span>#is", "<ss>$2</ss>", $originalSymptom, -1, $letterSpaceCntV1 ); 
			} while ( $letterSpaceCntV1 > 0 );
			$letterSpaceCntV2 = 0; 
			do { 
				$originalSymptom = preg_replace("#<span[^>]*class=(\"|')text-sperrschrift(\"|')>(.+?)</span>#is", "<ss>$3</ss>", $originalSymptom, -1, $letterSpaceCntV2 ); 
			} while ( $letterSpaceCntV2 > 0 );
			$originalSymptom = separateTheApplicableStratingSign($originalSymptom, '*');
			$originalSymptom = separateTheApplicableStratingSign($originalSymptom, 'Â°');
			$originalSymptom = removeBlankTags($originalSymptom);

			$originalSymptom = convertPatternPortions($originalSymptom, '*', 'asterisk');
			$originalSymptom = convertPatternPortions($originalSymptom, 'Â°', 'degree');
			// Structure the non * and Â° portion strings
			$originalSymptom = structureNonAsteriskAndDegreePortions($originalSymptom, 'non-asterisk-degree');

			// For Edited symptom
			// Replacing Colored sentences's tag to our custom tag "<clr>"
			$editedSymptom = strip_tags ( $editedSymptom, '<b><i><strong><em><u><sup><span>' );
			$editedSymptom = trim ( str_replace ( '&nbsp;', ' ', htmlentities( $editedSymptom ) ) );
			$editedSymptom = html_entity_decode($editedSymptom);
			$coloredTextCnt = 0; 
			do { 
				$editedSymptom = preg_replace("#<span[^>]*style=(\"|')[^>]*color:(.+?);[^>]*(\"|')>(.+?)</span>#is", "<clr style=\"color:$2;\">$4</clr>", $editedSymptom, -1, $coloredTextCnt ); 
			} while ( $coloredTextCnt > 0 );
			// Replacing Spaced sentences's tag to our custom tag "<ss>"
			$letterSpaceCntV1 = 0; 
			do { 
				$editedSymptom = preg_replace("#<span[^>]*style=(\"|')[^>]*letter-spacing:[^>]*>(.+?)</span>#is", "<ss>$2</ss>", $editedSymptom, -1, $letterSpaceCntV1 ); 
			} while ( $letterSpaceCntV1 > 0 );
			$letterSpaceCntV2 = 0; 
			do { 
				$editedSymptom = preg_replace("#<span[^>]*class=(\"|')text-sperrschrift(\"|')>(.+?)</span>#is", "<ss>$3</ss>", $editedSymptom, -1, $letterSpaceCntV2 ); 
			} while ( $letterSpaceCntV2 > 0 );
			$editedSymptom = separateTheApplicableStratingSign($editedSymptom, '*');
			$editedSymptom = separateTheApplicableStratingSign($editedSymptom, 'Â°');
			$editedSymptom = removeBlankTags($editedSymptom);

			$editedSymptom = convertPatternPortions($editedSymptom, '*', 'asterisk');
			$editedSymptom = convertPatternPortions($editedSymptom, 'Â°', 'degree');
			// Structure the non * and Â° portion strings
			$editedSymptom = structureNonAsteriskAndDegreePortions($editedSymptom, 'non-asterisk-degree');


			$editedSymptomTagsArray = array();
			mb_preg_match_all("#<[^/>]*>#i", $editedSymptom, $editedSymptomMatches, PREG_OFFSET_CAPTURE);
			if(isset($editedSymptomMatches[0]) AND !empty($editedSymptomMatches[0])){
				foreach ($editedSymptomMatches[0] as $key => $value) {
					$editedSymptomTagsArray[] = $editedSymptomMatches[0][$key][0];
				}
			}
			$editedSymptomTagsArray = (!empty($editedSymptomTagsArray)) ? array_unique($editedSymptomTagsArray) : array();

			$originalSymptomTagsArray = array();
			mb_preg_match_all("#<[^/>]*>#i", $originalSymptom, $originalSymptomMatches, PREG_OFFSET_CAPTURE);
			if(isset($originalSymptomMatches[0]) AND !empty($originalSymptomMatches[0])){
				foreach ($originalSymptomMatches[0] as $key => $value) {
					$originalSymptomTagsArray[] = $originalSymptomMatches[0][$key][0];
				}
			}
			$originalSymptomTagsArray = (!empty($originalSymptomTagsArray)) ? array_unique($originalSymptomTagsArray) : array();

			// $matches['h'] = $originalSymptom;
			// $matches['i'] = $editedSymptom;
			// echo "<pre>";
            // print_r($matches);

			if(!empty($editedSymptomTagsArray)) {
				foreach ($editedSymptomTagsArray as $key => $value) {
					if(!in_array($value, $originalSymptomTagsArray)){
						$isMismatchFound = 1;
						break;
					}
				}
			} else {
				if(!empty($originalSymptomTagsArray))
					$isMismatchFound = 1;
			}
		}
		return $isMismatchFound;
		// return $matches;
	}

	function findTagDifference($originalSymptom, $editedSymptom){
		global $db;
		$returnArray = array();
		if($originalSymptom != "" AND $editedSymptom != ""){
			mb_preg_match_all("#<[^/>]*>#i", $editedSymptom, $matches, PREG_OFFSET_CAPTURE);
			if(isset($matches[0]) AND !empty($matches[0])){
				foreach ($matches[0] as $key => $value) {
					$returnArray[] = htmlentities($matches[0][$key][0]);
				}
			}
            // echo "<pre>";
            // print_r($matches);
		}
		return $returnArray;
	}

	// 25-08-2022
	function removeUnwantedSpacesFromTheEnding($searchableText, $endingFullStopsOrCommasArr){
		$returnString = $searchableText;
		if($searchableText != "" AND !empty($endingFullStopsOrCommasArr) AND !in_array('Â°', $endingFullStopsOrCommasArr)){
			// $stringLastTags = findTheLastTags($searchableText);
			// $lastEndTag = implode("", $stringLastTags);
			// echo htmlentities($lastEndTag)."----<br>";
			$isFound = preg_match_all("/<[^<]+>/",$searchableText, $tagResult); // Finding html tags with this regex
			if($isFound > 0 AND !empty($tagResult[0])){
				// $lastEndTag = end($tagResult[0]);
				$stringLastTags = findTheLastTags($searchableText);
				$lastEndTag = (!empty($stringLastTags)) ? implode("", $stringLastTags) : "";

				$lastOpenTag = str_replace("/", "", end($tagResult[0]));
				$lastOpenTagPos = mb_strripos($searchableText, $lastOpenTag);
				if($lastOpenTagPos !== False AND $lastEndTag != ""){
					$stringFromOccuranceToEnd = mb_substr($searchableText, $lastOpenTagPos);
					$stringFromBeginingToOccurance = mb_substr($searchableText, 0, $lastOpenTagPos);
					$getOnlyTheText = str_replace(
						array(
							$lastOpenTag,
							$lastEndTag
						), array(
							"",
							""
						), $stringFromOccuranceToEnd);
					if($getOnlyTheText != ""){
						$getTextWithinTheTag = removeEndingSpecialCharactersForString($getOnlyTheText);
						$textWithinTheTag = (isset($getTextWithinTheTag['symptom_string']) AND $getTextWithinTheTag['symptom_string'] != "") ? $getTextWithinTheTag['symptom_string'] : "";
						if($textWithinTheTag != ""){
							$fullStopsOrCommasArr = array_reverse($endingFullStopsOrCommasArr);
							$fullStopsOrCommas = implode("", $fullStopsOrCommasArr);
							$textWithinTheTag = rtrim($textWithinTheTag).$fullStopsOrCommas;
							$returnString = $stringFromBeginingToOccurance.$lastOpenTag.$textWithinTheTag.$lastEndTag;
						}else{
							$fullStopsOrCommasArr = array_reverse($endingFullStopsOrCommasArr);
							$fullStopsOrCommas = implode("", $fullStopsOrCommasArr);
							$textWithinTheTag = $fullStopsOrCommas;
							$returnString = $stringFromBeginingToOccurance.$textWithinTheTag;
							// if($stringFromBeginingToOccurance != ""){
							// 	return removeUnwantedSpacesFromTheEnding($stringFromBeginingToOccurance, $endingFullStopsOrCommasArr);
							// }
						}
					}else{
						if($stringFromBeginingToOccurance != ""){
							return removeUnwantedSpacesFromTheEnding($stringFromBeginingToOccurance, $endingFullStopsOrCommasArr);
						}
					}
				}
			}
		}
		return $returnString;
	}

	// formating symptom string before sending it to PhpWord to make the downloadable document.
	// 31-08-2022
	function formatSymptomForDownload($symptom, $processedInitialPartSymptom = NULL){
		
		if($symptom != ""){
			preg_match("#<[^>]*>#", $symptom, $matches, PREG_OFFSET_CAPTURE);
			if(isset($matches[0][1]) AND !empty($matches[0][1])){
				$tag = $matches[0][0];
				$lastOccuranceLt = mb_strripos($tag, '<');
				$tagNameClean = str_replace(array("<",">"), array("", ""), mb_substr($tag, $lastOccuranceLt));
				$openingTag = "<".$tagNameClean.">";
				$closingTag = "</".$tagNameClean.">";
				$fistOpenTagPos = mb_strpos($symptom, $openingTag);
				$firstClosingTagPosition = mb_strpos($symptom, $closingTag);
				$newFirstPart = mb_substr($symptom, 0, $fistOpenTagPos);
				$newSecondPart = mb_substr($symptom, $fistOpenTagPos);
				$firstClosingTagPositionOnSecondPart = mb_strpos($newSecondPart, $closingTag);
				$escapeSpecialCharacterString = str_replace(array("<", ">"), array("&lt;", "&gt;"), $newFirstPart);
				$escapeSpecialCharacterString = htmlspecialchars($escapeSpecialCharacterString);
				$tagedStringPart = mb_substr($newSecondPart, 0, $firstClosingTagPositionOnSecondPart+strlen($closingTag));
				$completeFisrtpart = $escapeSpecialCharacterString.$tagedStringPart;
				$processedInitialPartSymptom = $processedInitialPartSymptom.$completeFisrtpart;

				$remainingPart = mb_substr($newSecondPart, $firstClosingTagPositionOnSecondPart+strlen($closingTag));
				if($remainingPart != "")
					return formatSymptomForDownload($remainingPart, $processedInitialPartSymptom);
				else {
					if(trim($processedInitialPartSymptom) == trim($symptom))
						$symptom = "";
				}

			}
			// if($symptom != strip_tags($symptom)) {
			//     // contains HTML
				

			//     $firstGtSign = mb_strpos($symptom, '>');
			// 	if($firstGtSign !== False){
			// 		$stringTillGtSign = mb_substr($symptom, 0, $firstGtSign+1);
			// 		echo htmlentities($stringTillGtSign)."<br>";
			// 		$lastLtSign = mb_strripos($stringTillGtSign, '<');
			// 		$escapeSpecialCharacterString = mb_substr($symptom, 0, $lastLtSign);
			// 		$escapeSpecialCharacterString = str_replace(array("<", ">"), array("&lt;", "&gt;"), $escapeSpecialCharacterString);
			// 		$escapeSpecialCharacterString = htmlspecialchars($escapeSpecialCharacterString);
			// 		$firstPart = $escapeSpecialCharacterString.mb_substr($symptom, $lastLtSign, $firstGtSign+1);
			// 		echo htmlentities($firstPart); exit;
			// 		$processedSymptom = $processedSymptom.$firstPart;
			// 		$secondPart = mb_substr($symptom, $firstGtSign+1);
			// 		if($secondPart != "")
			// 			return formatSymptomForDownload($secondPart, $processedSymptom);
			// 	}
			// }else{
			// 	$symptom = str_replace(array("<", ">"), array("&lt;", "&gt;"), $symptom);
			// 	$symptom = htmlspecialchars($symptom);
			// 	$returnString = $symptom;
			// }
		}
		$returnString = $processedInitialPartSymptom.$symptom;

		if($returnString != ""){
			$returnString = str_replace(array("&lt;","&gt;","&amp;"), array("&amp;lt;", "&amp;gt;", ""), $returnString);
		}
		return $returnString;
	}

















	function isQuelleAllowedToPerformThisAction($quelle_id){
		global $db;
		$isValid = false;

		if($quelle_id != "") {
			try {
				$quelleResult = mysqli_query($db, "SELECT is_materia_medica FROM quelle WHERE quelle_id = '".$quelle_id."'");
				if(mysqli_num_rows($quelleResult) > 0){
					$quelleData = mysqli_fetch_assoc($quelleResult);
					if($quelleData['is_materia_medica'] == 1)
						$isValid = true;
				} 
			} catch (Exception $e) {
			    $isValid = false;
			}
		}

		return $isValid;
	}

	function getAllComparedSourceIds($comparedSourceIds = array(), $preparedSourceIds = array()){
		global $db;

		$returnArray = array();
		$reSendingSourceIds = array();
		foreach ($comparedSourceIds as $csKey => $csVal) {
			$getComparedSourcesQuery = $db->query("SELECT initial_source_id, comparing_source_ids FROM saved_comparisons WHERE quelle_id = ".$csVal);
			if($getComparedSourcesQuery->num_rows > 0){
				$comparedSourcesData = mysqli_fetch_assoc($getComparedSourcesQuery);
				$initialSource = (isset($comparedSourcesData['initial_source_id']) AND $comparedSourcesData['initial_source_id'] != "") ? trim($comparedSourcesData['initial_source_id']) : null;
				$comparingSources = (isset($comparedSourcesData['comparing_source_ids']) AND $comparedSourcesData['comparing_source_ids'] != "") ? explode(',', $comparedSourcesData['comparing_source_ids']) : array();
				if($initialSource != "") {
					if(!in_array($initialSource, $preparedSourceIds))
						array_push($preparedSourceIds, $initialSource);
					array_push($reSendingSourceIds, $initialSource);
				}

				foreach ($comparingSources as $cSourceKey => $cSourceVal) {
					if(!in_array($cSourceVal, $preparedSourceIds))
						array_push($preparedSourceIds, $cSourceVal);
					array_push($reSendingSourceIds, $cSourceVal);
				}
			}
		}

		if(!empty($reSendingSourceIds))
			return getAllComparedSourceIds($reSendingSourceIds, $preparedSourceIds);
		else
			$returnArray = $preparedSourceIds;

		return $returnArray;
	}

	function getAllComparedSourceIdsFromNewTable($comparedSourceIds = array(), $preparedSourceIds = array())
	{
		global $db;

		$returnArray = array();
		$reSendingSourceIds = array();
		foreach ($comparedSourceIds as $csKey => $csVal) {
			$getComparedSourcesQuery = $db->query("SELECT initial_source, comparing_sources FROM pre_comparison_master_data WHERE quelle_id = ".$csVal);
			if($getComparedSourcesQuery->num_rows > 0){
				$comparedSourcesData = mysqli_fetch_assoc($getComparedSourcesQuery);
				$initialSource = (isset($comparedSourcesData['initial_source']) AND $comparedSourcesData['initial_source'] != "") ? trim($comparedSourcesData['initial_source']) : null;
				$comparingSources = (isset($comparedSourcesData['comparing_sources']) AND $comparedSourcesData['comparing_sources'] != "") ? explode(',', $comparedSourcesData['comparing_sources']) : array();
				if($initialSource != "") {
					if(!in_array($initialSource, $preparedSourceIds))
						array_push($preparedSourceIds, $initialSource);
					array_push($reSendingSourceIds, $initialSource);
				}

				foreach ($comparingSources as $cSourceKey => $cSourceVal) {
					if(!in_array($cSourceVal, $preparedSourceIds))
						array_push($preparedSourceIds, $cSourceVal);
					array_push($reSendingSourceIds, $cSourceVal);
				}
			}else{
				array_push($preparedSourceIds, $csVal);
			}
		}

		if(!empty($reSendingSourceIds))
			return getAllComparedSourceIdsFromNewTable($reSendingSourceIds, $preparedSourceIds);
		else
			$returnArray = $preparedSourceIds;

		return $returnArray;
	}

	// Replacing the conflictable tag words with custom tag name for symptom comparison function.
	function replaceTagsWithCustomtag($string){
		if($string != ""){
			$string = str_replace ( array (
				'<span',
				'</span>' 
			), array (
				"<spn",
				"</spn>" 
			), $string );
			$string = str_replace ( array (
				"<spn class=\"text-sperrschrift\">",
				"<spn class='text-sperrschrift'>" 
			), array (
				"<ss>",
				"<ss>" 
			), $string );
			$string = str_replace ( array (
				"<strong>",
				"</strong>" 
			), array (
				"<stg>",
				"</stg>" 
			), $string );
			$string = str_replace ( array (
				"<bold>",
				"</bold>" 
			), array (
				"<stg>",
				"</stg>" 
			), $string );
		}
		return $string;
	}

	// Replacing the custom tags with original tags in symptom comparison function.
	function revertBackCustomTagWithOriginal($string){
		if($string != ""){
			$string = str_replace ( array (
				'<spn',
				'</spn>' 
			), array (
				"<span",
				"</span>" 
			), $string );
			$string = str_replace ( array (
				"<ss>"
			), array (
				"<span class=\"text-sperrschrift\">"
			), $string );
			$string = str_replace ( array (
				"<stg>",
				"</stg>" 
			), array (
				"<strong>",
				"</strong>" 
			), $string );
		}
		return $string;
	}

	function comareSymptom2($initialSymptom, $comparingSymptom, $initialSymptomStringBeforeConversion = null, $comparingSymptomStringBeforeConversion = null){
		$stopWords = array();
		$stopWords = getStopWords();
		
		$str1 = replaceTagsWithCustomtag(base64_decode($initialSymptom));
		$str2 = replaceTagsWithCustomtag(base64_decode($comparingSymptom));
		
		$initialSymptomStringBeforeConversion = ($initialSymptomStringBeforeConversion != "") ? replaceTagsWithCustomtag(base64_decode($initialSymptomStringBeforeConversion)) : "";
		$comparingSymptomStringBeforeConversion = ($comparingSymptomStringBeforeConversion != "") ? replaceTagsWithCustomtag(base64_decode($comparingSymptomStringBeforeConversion)) : "";

		$cleanSymptomString = str_replace(array(".", ",",":","'",";","!","(",")","[","]","{","}","|", "\\", "/", "?", "<", ">", '*', 'Â°'),'', strip_tags($str1));
		$cleanComparingString = str_replace(array(".", ",",":","'",";","!","(",")","[","]","{","}","|", "\\", "/", "?", "<", ">", '*', 'Â°'),'', strip_tags($str2));
		$cleanSymptomString = trim($cleanSymptomString);
		$cleanComparingString = trim($cleanComparingString);
		$initialStringArray = explode(" ", $cleanSymptomString);
		$initialStringArray = array_map('mb_strtolower', $initialStringArray);
		$compareableIniStrArray = array();
		foreach ($initialStringArray as $iniStrKey => $iniStrVal) {
			if(!in_array($iniStrVal, $stopWords))
				$compareableIniStrArray[] = $iniStrVal;
		}
		$comparingStringArray = explode(" ", $cleanComparingString);
		$comparingStringArray = array_map('mb_strtolower', $comparingStringArray);
		$compareableComStrArray = array();
		foreach ($comparingStringArray as $comStrKey => $comStrVal) {
			if(!in_array($comStrVal, $stopWords))
				$compareableComStrArray[] = $comStrVal;
		}

		$iniStrFilteredWordsArr = array_filter($compareableIniStrArray,'longenough');
		$comStrFilteredWordsArr = array_filter($compareableComStrArray,'longenough');
		$matchedWordsPreArr = array_intersect( $iniStrFilteredWordsArr, $comStrFilteredWordsArr );
		$matchedWordsArr = array_unique($matchedWordsPreArr);
		$numberOfMatches = count($matchedWordsArr);

		$iniRemaningUnMatchWordsArr = array_diff($iniStrFilteredWordsArr, $matchedWordsArr);
		$comRemaningUnMatchWordsArr = array_diff($comStrFilteredWordsArr, $matchedWordsArr);
		$remaningMatchedWords = array();
		$remaningMatchedFullWords = array();
		$countHalfMatches = 0;
		if(!empty($iniRemaningUnMatchWordsArr) AND !empty($comRemaningUnMatchWordsArr)){
			$remaningCheckResult = checkRemainingWords($iniRemaningUnMatchWordsArr, $comRemaningUnMatchWordsArr);
			$remaningMatchedWords = (isset($remaningCheckResult['match_words']) AND !empty($remaningCheckResult['match_words'])) ? $remaningCheckResult['match_words'] : array();
			$remaningMatchedFullWords = (isset($remaningCheckResult['match_full_words']) AND !empty($remaningCheckResult['match_full_words'])) ? $remaningCheckResult['match_full_words'] : array();
			$numberOfMatches = (isset($remaningCheckResult['no_of_words']) AND $remaningCheckResult['no_of_words'] != "") ? $numberOfMatches + $remaningCheckResult['no_of_words'] : $numberOfMatches;
		}

		$finalCommonFullWords = array_unique( array_merge ($matchedWordsArr, $remaningMatchedFullWords) );
		$fullMatchedSynonymsOfInitial = (isset($initialSymptomsAllSynonyms) AND !empty($initialSymptomsAllSynonyms)) ? array_intersect( $initialSymptomsAllSynonyms, $matchedWordsArr ) : array();
		$partialMatchedSynonymsOfInitial = (isset($initialSymptomsAllSynonyms) AND !empty($initialSymptomsAllSynonyms)) ? array_intersect( $initialSymptomsAllSynonyms, $remaningMatchedFullWords ) : array();
		$comparisonMatchedSynonyms = array_unique( array_merge ($fullMatchedSynonymsOfInitial, $partialMatchedSynonymsOfInitial) );
		$finalCommon = array_unique( array_merge ($matchedWordsArr, $remaningMatchedWords) );
		// $finalCommon = array();
		// foreach ($margedCommon as $mKey => $mVal) {
		// 	if(!in_array($mVal, $stopWords))
		// 		$finalCommon[] = $mVal;
		// }
		
		foreach( $finalCommon as $word ){
			$pattern = "/[A-Za-z0-9]/i";
			$newWord = '';
			for($i = 0; $i < strlen($word); $i++) {
			    //if you found the 'special character' then add the \
			    if(!preg_match($pattern, $word[$i])) {
			        $newWord .= '\\' . $word[$i];
			    } else {    
			        //if there is no 'special character' then use the character
			        $newWord .= $word[$i];
			    }   
			}
			// $word = preg_replace('/[^A-Za-z0-9\-]/', '', $word); // Removes special chars.
			if($newWord != ""){
				$countReplaces = 0;
			    $str1=preg_replace( "@($newWord)@i",'<cite style="background: #f8d1944d;">$1</cite>', $str1 );
			    $str2=preg_replace( "@($newWord)@i",'<cite style="background: #f8d1944d;">$1</cite>', $str2, -1 , $countReplaces );
			    if($initialSymptomStringBeforeConversion != "" AND $comparingSymptomStringBeforeConversion != ""){
			    	$initialSymptomStringBeforeConversion=preg_replace( "@($newWord)@i",'<cite style="background: #f8d1944d;">$1</cite>', $initialSymptomStringBeforeConversion );
			    	$comparingSymptomStringBeforeConversion=preg_replace( "@($newWord)@i",'<cite style="background: #f8d1944d;">$1</cite>', $comparingSymptomStringBeforeConversion );
			    }
			}
		}
		
		$numberOfMatchInStr2 = mb_substr_count($str2, "background: #f7c77b;");
		// $numberOfMatchInStr2 = mb_substr_count($str2, "background: #dceaf9;");

		$intialWordCount = count($initialStringArray);
		$comparingWordCount = count($comparingStringArray);
		$totalNumofWords = $intialWordCount + $comparingWordCount;
		$numForSubtraction = $numberOfMatches * 2;
		$remainingNumOfWords = $totalNumofWords - $numForSubtraction;
		$differenceInPercent = ($remainingNumOfWords / $totalNumofWords) * 100;
		$similarityInPercent = ($differenceInPercent > 100) ? 0 : 100 - $differenceInPercent;
		$percentage = round($similarityInPercent);

		$returnArray = array(
			"no_of_match" => $numberOfMatchInStr2,
			"percentage" => $percentage,
			"comparison_matched_synonyms" => $comparisonMatchedSynonyms,
			"initial_source_symptom_highlighted" => base64_encode(revertBackCustomTagWithOriginal($str1)),
			"comparing_source_symptom_highlighted" => base64_encode(revertBackCustomTagWithOriginal($str2)),
			"initial_source_symptom_before_conversion_highlighted" => ($initialSymptomStringBeforeConversion != "") ? base64_encode(revertBackCustomTagWithOriginal($initialSymptomStringBeforeConversion)) : "",
			"comparing_source_symptom_before_conversion_highlighted" => ($comparingSymptomStringBeforeConversion != "") ? base64_encode(revertBackCustomTagWithOriginal($comparingSymptomStringBeforeConversion)) : ""
		);

		return $returnArray;
	}

	function newComareSymptom($initialSymptom, $comparingSymptom, $initialSymptomStringBeforeConversion = null, $comparingSymptomStringBeforeConversion = null){
		$stopWords = array();
		$stopWords = getStopWords();
		
		$str1 = replaceTagsWithCustomtag($initialSymptom);
		$str2 = replaceTagsWithCustomtag($comparingSymptom);
		
		$initialSymptomStringBeforeConversion = ($initialSymptomStringBeforeConversion != "") ? replaceTagsWithCustomtag($initialSymptomStringBeforeConversion) : "";
		$comparingSymptomStringBeforeConversion = ($comparingSymptomStringBeforeConversion != "") ? replaceTagsWithCustomtag($comparingSymptomStringBeforeConversion) : "";

		$cleanSymptomString = str_replace(array(".", ",",":","'",";","!","(",")","[","]","{","}","|", "\\", "/", "?", "<", ">", '*', 'Â°'),'', strip_tags($str1));
		$cleanComparingString = str_replace(array(".", ",",":","'",";","!","(",")","[","]","{","}","|", "\\", "/", "?", "<", ">", '*', 'Â°'),'', strip_tags($str2));
		$cleanSymptomString = trim($cleanSymptomString);
		$cleanComparingString = trim($cleanComparingString);
		$initialStringArray = explode(" ", $cleanSymptomString);
		$initialStringArray = array_map('mb_strtolower', $initialStringArray);
		$compareableIniStrArray = array();
		foreach ($initialStringArray as $iniStrKey => $iniStrVal) {
			if(!in_array($iniStrVal, $stopWords))
				$compareableIniStrArray[] = $iniStrVal;
		}
		$comparingStringArray = explode(" ", $cleanComparingString);
		$comparingStringArray = array_map('mb_strtolower', $comparingStringArray);
		$compareableComStrArray = array();
		foreach ($comparingStringArray as $comStrKey => $comStrVal) {
			if(!in_array($comStrVal, $stopWords))
				$compareableComStrArray[] = $comStrVal;
		}

		$iniStrFilteredWordsArr = array_filter($compareableIniStrArray,'longenough');
		$comStrFilteredWordsArr = array_filter($compareableComStrArray,'longenough');
		$matchedWordsPreArr = array_intersect( $iniStrFilteredWordsArr, $comStrFilteredWordsArr );
		$matchedWordsArr = array_unique($matchedWordsPreArr);
		$numberOfMatches = count($matchedWordsArr);

		$iniRemaningUnMatchWordsArr = array_diff($iniStrFilteredWordsArr, $matchedWordsArr);
		$comRemaningUnMatchWordsArr = array_diff($comStrFilteredWordsArr, $matchedWordsArr);
		$remaningMatchedWords = array();
		$remaningMatchedFullWords = array();
		$countHalfMatches = 0;
		if(!empty($iniRemaningUnMatchWordsArr) AND !empty($comRemaningUnMatchWordsArr)){
			$remaningCheckResult = checkRemainingWords($iniRemaningUnMatchWordsArr, $comRemaningUnMatchWordsArr);
			$remaningMatchedWords = (isset($remaningCheckResult['match_words']) AND !empty($remaningCheckResult['match_words'])) ? $remaningCheckResult['match_words'] : array();
			$remaningMatchedFullWords = (isset($remaningCheckResult['match_full_words']) AND !empty($remaningCheckResult['match_full_words'])) ? $remaningCheckResult['match_full_words'] : array();
			$numberOfMatches = (isset($remaningCheckResult['no_of_words']) AND $remaningCheckResult['no_of_words'] != "") ? $numberOfMatches + $remaningCheckResult['no_of_words'] : $numberOfMatches;
		}

		$finalCommonFullWords = array_unique( array_merge ($matchedWordsArr, $remaningMatchedFullWords) );
		$fullMatchedSynonymsOfInitial = (isset($initialSymptomsAllSynonyms) AND !empty($initialSymptomsAllSynonyms)) ? array_intersect( $initialSymptomsAllSynonyms, $matchedWordsArr ) : array();
		$partialMatchedSynonymsOfInitial = (isset($initialSymptomsAllSynonyms) AND !empty($initialSymptomsAllSynonyms)) ? array_intersect( $initialSymptomsAllSynonyms, $remaningMatchedFullWords ) : array();
		$comparisonMatchedSynonyms = array_unique( array_merge ($fullMatchedSynonymsOfInitial, $partialMatchedSynonymsOfInitial) );
		$finalCommon = array_unique( array_merge ($matchedWordsArr, $remaningMatchedWords) );
		// $finalCommon = array();
		// foreach ($margedCommon as $mKey => $mVal) {
		// 	if(!in_array($mVal, $stopWords))
		// 		$finalCommon[] = $mVal;
		// }
		
		foreach( $finalCommon as $word ){
			$pattern = "/[A-Za-z0-9]/i";
			$newWord = '';
			for($i = 0; $i < strlen($word); $i++) {
			    //if you found the 'special character' then add the \
			    if(!preg_match($pattern, $word[$i])) {
			        $newWord .= '\\' . $word[$i];
			    } else {    
			        //if there is no 'special character' then use the character
			        $newWord .= $word[$i];
			    }   
			}
			// $word = preg_replace('/[^A-Za-z0-9\-]/', '', $word); // Removes special chars.
			if($newWord != ""){
				$countReplaces = 0;
			    $str1=preg_replace( "@($newWord)@i",'<cite style="background: #f8d1944d;">$1</cite>', $str1 );
			    $str2=preg_replace( "@($newWord)@i",'<cite style="background: #f8d1944d;">$1</cite>', $str2, -1 , $countReplaces );
			    if($initialSymptomStringBeforeConversion != "" AND $comparingSymptomStringBeforeConversion != ""){
			    	$initialSymptomStringBeforeConversion=preg_replace( "@($newWord)@i",'<cite style="background: #f8d1944d;">$1</cite>', $initialSymptomStringBeforeConversion );
			    	$comparingSymptomStringBeforeConversion=preg_replace( "@($newWord)@i",'<cite style="background: #f8d1944d;">$1</cite>', $comparingSymptomStringBeforeConversion );
			    }
			}
		}
		
		$numberOfMatchInStr2 = mb_substr_count($str2, "background: #f7c77b;");
		// $numberOfMatchInStr2 = mb_substr_count($str2, "background: #dceaf9;");

		$intialWordCount = count($initialStringArray);
		$comparingWordCount = count($comparingStringArray);
		$totalNumofWords = $intialWordCount + $comparingWordCount;
		$numForSubtraction = $numberOfMatches * 2;
		$remainingNumOfWords = $totalNumofWords - $numForSubtraction;
		$differenceInPercent = ($remainingNumOfWords / $totalNumofWords) * 100;
		$similarityInPercent = ($differenceInPercent > 100) ? 0 : 100 - $differenceInPercent;
		$percentage = round($similarityInPercent);

		$returnArray = array(
			"no_of_match" => $numberOfMatchInStr2,
			"percentage" => $percentage,
			"comparison_matched_synonyms" => $comparisonMatchedSynonyms,
			"initial_source_symptom_highlighted" => revertBackCustomTagWithOriginal($str1),
			"comparing_source_symptom_highlighted" => revertBackCustomTagWithOriginal($str2),
			"initial_source_symptom_before_conversion_highlighted" => ($initialSymptomStringBeforeConversion != "") ? revertBackCustomTagWithOriginal($initialSymptomStringBeforeConversion) : "",
			"comparing_source_symptom_before_conversion_highlighted" => ($comparingSymptomStringBeforeConversion != "") ? revertBackCustomTagWithOriginal($comparingSymptomStringBeforeConversion) : ""
		);

		return $returnArray;
	}

	function compareSymptomWithSynonyms($initialSymptom, $comparingSymptom, &$stopWords = array(), $initialSymptomsAllSynonyms = array(), $initialSymptomStringBeforeConversion = null, $comparingSymptomStringBeforeConversion = null){
		$str1 = replaceTagsWithCustomtag($initialSymptom);
		$str2 = replaceTagsWithCustomtag($comparingSymptom);
		
		$initialSymptomStringBeforeConversion = ($initialSymptomStringBeforeConversion != "") ? replaceTagsWithCustomtag($initialSymptomStringBeforeConversion) : "";
		$comparingSymptomStringBeforeConversion = ($comparingSymptomStringBeforeConversion != "") ? replaceTagsWithCustomtag($comparingSymptomStringBeforeConversion) : "";

		$cleanSymptomString = str_replace(array(".", ",",":","'",";","!","(",")","[","]","{","}","|", "\\", "/", "?", "<", ">", '*', 'Â°', 'â¢'),'', strip_tags($str1));
		$cleanComparingString = str_replace(array(".", ",",":","'",";","!","(",")","[","]","{","}","|", "\\", "/", "?", "<", ">", '*', 'Â°', 'â¢'),'', strip_tags($str2));
		$cleanSymptomString = trim($cleanSymptomString);
		$cleanComparingString = trim($cleanComparingString);
		$initialStringArray = explode(" ", $cleanSymptomString);
		$compareableIniStrArray = array();
		foreach ($initialStringArray as $iniStrKey => $iniStrVal) {
			if(!in_array(mb_strtolower($iniStrVal), $stopWords))
				$compareableIniStrArray[] = $iniStrVal;
		}
		$comparingStringArray = explode(" ", $cleanComparingString);
		$compareableComStrArray = array();
		foreach ($comparingStringArray as $comStrKey => $comStrVal) {
			if(!in_array(mb_strtolower($comStrVal), $stopWords))
				$compareableComStrArray[] = $comStrVal;
		}

		// Excluding words less than 3 character words through 'longenough' function. feature off on Carl's request 
		$iniStrFilteredWordsArr = array_filter($compareableIniStrArray,'longenough');
		$comStrFilteredWordsArr = array_filter($compareableComStrArray,'longenough');
		// Adding synonyms in initial string array
		$iniStrFilteredWordsArr = array_merge($iniStrFilteredWordsArr, $initialSymptomsAllSynonyms);
		$iniStrFilteredWordsArr = array_unique($iniStrFilteredWordsArr);
		
		$matchedWordsPreArr = array_intersect( $iniStrFilteredWordsArr, $comStrFilteredWordsArr );
		$matchedWordsArr = array_unique($matchedWordsPreArr);
		$numberOfMatches = count($matchedWordsArr);

		$iniRemaningUnMatchWordsArr = array_diff($iniStrFilteredWordsArr, $matchedWordsArr);
		$comRemaningUnMatchWordsArr = array_diff($comStrFilteredWordsArr, $matchedWordsArr);
		$remaningMatchedWords = array();
		$remaningMatchedFullWords = array();
		$countHalfMatches = 0;
		if(!empty($iniRemaningUnMatchWordsArr) AND !empty($comRemaningUnMatchWordsArr)){
			$remaningCheckResult = checkRemainingWords($iniRemaningUnMatchWordsArr, $comRemaningUnMatchWordsArr);
			$remaningMatchedWords = (isset($remaningCheckResult['match_words']) AND !empty($remaningCheckResult['match_words'])) ? $remaningCheckResult['match_words'] : array();
			$remaningMatchedFullWords = (isset($remaningCheckResult['match_full_words']) AND !empty($remaningCheckResult['match_full_words'])) ? $remaningCheckResult['match_full_words'] : array();
			$numberOfMatches = (isset($remaningCheckResult['no_of_words']) AND $remaningCheckResult['no_of_words'] != "") ? $numberOfMatches + $remaningCheckResult['no_of_words'] : $numberOfMatches;
		}
		$finalCommonFullWords = array_unique( array_merge ($matchedWordsArr, $remaningMatchedFullWords) );
		$fullMatchedSynonymsOfInitial = array_intersect( $initialSymptomsAllSynonyms, $matchedWordsArr );
		$partialMatchedSynonymsOfInitial = array_intersect( $initialSymptomsAllSynonyms, $remaningMatchedFullWords );
		$comparisonMatchedSynonyms = array_unique( array_merge ($fullMatchedSynonymsOfInitial, $partialMatchedSynonymsOfInitial) );
		$finalCommon = array_unique( array_merge ($matchedWordsArr, $remaningMatchedWords) );
		usort($finalCommon,'sortByLength');
		// $finalCommon = array();
		// foreach ($margedCommon as $mKey => $mVal) {
		// 	if(!in_array($mVal, $stopWords))
		// 		$finalCommon[] = $mVal;
		// }
		$count = 1;
		$str1replacementArray = array();
		$str2replacementArray = array();
		foreach( $finalCommon as $word ){
			$pattern = "/[A-Za-z0-9]/i";
			$newWord = '';
			for($i = 0; $i < strlen($word); $i++) {
			    //if you found the 'special character' then add the \
			    if(!preg_match($pattern, $word[$i])) {
			        $newWord .= '\\' . $word[$i];
			    } else {    
			        //if there is no 'special character' then use the character
			        $newWord .= $word[$i];
			    }   
			}
			// $word = preg_replace('/[^A-Za-z0-9\-]/', '', $word); // Removes special chars.
			if($newWord != ""){
				$countReplaces = 0;
				// Here I am using "bg-nd: #f7c77b;" in the palce of "background: #f7c77b;" and replacing it again in lower part because if any string has the word "back" or "round" or "background" then this replace process replaces everywhere even within the tags
			    $str1=preg_replace( "@($newWord)@i",'<cite style="bg-nd: #f7c77b;">$1</cite>', $str1 );
			    $extract = getTagWithItsContent('cite', 'style', 'bg-nd: #f7c77b;', $str1);
			    if(!empty($extract)){
			    	foreach($extract as $val){
			    		$str1 = str_replace($val, '{$#'.$count.'#$}', $str1);
			    		$tempArr = array();
			    		$tempArr['identifier'] = '{$#'.$count.'#$}';
			    		// below removing the parent tag and getting only the content of the parent tag.
						$val = preg_replace('/<cite[^>]*style="bg-nd: #f7c77b;">/i', '', $val);
						$val = preg_replace('/<\\/cite>/i', '', $val);
			    		$tempArr['replacement_for_identifier'] = $val;
			    		array_push($str1replacementArray, $tempArr);
			    	}
			    }
			    $str2=preg_replace( "@($newWord)@i",'<cite style="bg-nd: #f7c77b;">$1</cite>', $str2, -1 , $countReplaces );
			    $extract = getTagWithItsContent('cite', 'style', 'bg-nd: #f7c77b;', $str2);
			    if(!empty($extract)){
			    	foreach($extract as $val){
			    		$str2 = str_replace($val, '{$#'.$count.'#$}', $str2);
			    		$tempArr = array();
			    		$tempArr['identifier'] = '{$#'.$count.'#$}';
			    		// below removing the parent tag and getting only the content of the parent tag.
						$val = preg_replace('/<cite[^>]*style="bg-nd: #f7c77b;">/i', '', $val);
						$val = preg_replace('/<\\/cite>/i', '', $val);
			    		$tempArr['replacement_for_identifier'] = $val;
			    		array_push($str2replacementArray, $tempArr);
			    	}
			    }
			    if($initialSymptomStringBeforeConversion != "" AND $comparingSymptomStringBeforeConversion != ""){
			    	$initialSymptomStringBeforeConversion=preg_replace( "@($newWord)@i",'<cite style="bg-nd: #f7c77b;">$1</cite>', $initialSymptomStringBeforeConversion );
			    	$comparingSymptomStringBeforeConversion=preg_replace( "@($newWord)@i",'<cite style="bg-nd: #f7c77b;">$1</cite>', $comparingSymptomStringBeforeConversion );
			    }
			}
			$count++;
		}
		foreach ($str1replacementArray as $valueArray) {
			if($valueArray['identifier'] != "" AND $valueArray['replacement_for_identifier'] != ""){
				$str1 = str_replace($valueArray['identifier'], '<cite style="background: #f8d1944d;">'.$valueArray['replacement_for_identifier'].'</cite>', $str1 );
			}
		}
		foreach ($str2replacementArray as $valueArray) {
			if($valueArray['identifier'] != "" AND $valueArray['replacement_for_identifier'] != ""){
				$str2 = str_replace($valueArray['identifier'], '<cite style="background: #f8d1944d;">'.$valueArray['replacement_for_identifier'].'</cite>', $str2 );
			}
		}
		
		$numberOfMatchInStr2 = mb_substr_count($str2, "bg-nd: #f7c77b;");
		// $numberOfMatchInStr2 = mb_substr_count($str2, "background: #dceaf9;");

		// $str1 = str_replace('<cite style="bg-nd: #f7c77b;">', '<cite style="background: #f8d1944d;">', $str1 );
		// $str2 = str_replace('<cite style="bg-nd: #f7c77b;">', '<cite style="background: #f8d1944d;">', $str2 );
		if($initialSymptomStringBeforeConversion != "" AND $comparingSymptomStringBeforeConversion != ""){
			$initialSymptomStringBeforeConversion = str_replace('<cite style="bg-nd: #f7c77b;">', '<cite style="background: #f8d1944d;">', $initialSymptomStringBeforeConversion );
			$comparingSymptomStringBeforeConversion = str_replace('<cite style="bg-nd: #f7c77b;">', '<cite style="background: #f8d1944d;">', $comparingSymptomStringBeforeConversion );
		}

		$intialWordCount = count($initialStringArray);
		$comparingWordCount = count($comparingStringArray);
		$totalNumofWords = $intialWordCount + $comparingWordCount;
		$numForSubtraction = $numberOfMatches * 2;
		$remainingNumOfWords = $totalNumofWords - $numForSubtraction;
		$differenceInPercent = ($remainingNumOfWords / $totalNumofWords) * 100;
		$similarityInPercent = ($differenceInPercent > 100) ? 0 : 100 - $differenceInPercent;
		$percentage = round($similarityInPercent);

		$returnArray = array(
			"no_of_match" => $numberOfMatchInStr2,
			"percentage" => $percentage,
			"comparison_matched_synonyms" => $comparisonMatchedSynonyms,
			"initial_source_symptom_highlighted" => revertBackCustomTagWithOriginal($str1),
			"comparing_source_symptom_highlighted" => revertBackCustomTagWithOriginal($str2),
			"initial_source_symptom_before_conversion_highlighted" => ($initialSymptomStringBeforeConversion != "") ? revertBackCustomTagWithOriginal($initialSymptomStringBeforeConversion) : "",
			"comparing_source_symptom_before_conversion_highlighted" => ($comparingSymptomStringBeforeConversion != "") ? revertBackCustomTagWithOriginal($comparingSymptomStringBeforeConversion) : ""
		);

		return $returnArray;
	}

	function sortByLength($a,$b){
	    return strlen($b)-strlen($a);
	}

	/*
	Example call: 
	$yourentirehtml = 'er <cite style="bg-nd: #f7c77b;">Aufmerksamkeit</cite> <cite style="bg-nd: #f7c77b;">nicht</cite> <cite style="bg-nd: #f7c77b;">Aufmerksamkeit</cite>.';
    $extract = getTagWithItsContent('cite', 'style', 'bg-nd: #f7c77b;', $yourentirehtml);
    Date: 22-03-2024
	*/
	function getTagWithItsContent( $htmlTag, $attr, $value, $str ) {
		/*
		Use preg_quote() to safely use special characters in a regular expression:
		The preg_quote() function adds a backslash to characters that have a special meaning in regular expressions so that searches for the literal characters can be done. This function is useful when using user input in regular expressions.
		*/
        $htmlTag = preg_quote($htmlTag);
        $attr = preg_quote($attr);
        $value = preg_quote($value);
        // $tag_regex = '/<cite[^>]*'.$attr.'="'.$value.'">(.*?)<\\/cite>/si';
        $tag_regex = '/<'.$htmlTag.'[^>]*'.$attr.'="'.$value.'">(.*?)<\\/'.$htmlTag.'>/si';
		$returnData = array();
		if(preg_match_all($tag_regex, $str, $matches)) {
	        if(isset($matches[0]) AND !empty($matches[0])){
	          	foreach($matches[0] as $val){
	            	$returnData[] = $val;
	            }
	        }
        }
        return $returnData;
    }


	// Adding the translation div in symptom before displaying it to user in comparison
	function addingTranslationDivInSymptom($comparisonLanguage, $sourceOriginalLanguage, $symptomString_en = null, $symptomString_de = null){
		$displayingSymptomString = "";
		if($comparisonLanguage == "en"){
			$displayingSymptomString = $symptomString_en;
			
			if($sourceOriginalLanguage == "en"){
				$tmpString = "";
				$tmpString .= ($symptomString_en != "") ? '<div class="table-symptom-cnr table-symptom-visible table-symptom-en table-original-symptom">'.$symptomString_en.'</div>' : "";
				$tmpString .= ($symptomString_de != "") ? '<div class="table-symptom-cnr table-symptom-hidden table-symptom-de hidden">'.$symptomString_de.'</div>' : "";
				
				$displayingSymptomString = $tmpString;
			}else{
				$tmpString = "";
				$tmpString .= ($symptomString_de != "") ? '<div class="table-symptom-cnr table-symptom-hidden table-symptom-de table-original-symptom hidden">'.$symptomString_de.'</div>' : "";
				$tmpString .= ($symptomString_en != "") ? '<div class="table-symptom-cnr table-symptom-visible table-symptom-en">'.$symptomString_en.'</div>' : "";
				
				$displayingSymptomString = $tmpString;
			}
		}else if($comparisonLanguage == "de") {
			$displayingSymptomString = $symptomString_de;

			if($sourceOriginalLanguage == "de"){
				$tmpString = "";
				$tmpString .= ($symptomString_de != "") ? '<div class="table-symptom-cnr table-symptom-visible table-symptom-de table-original-symptom">'.$symptomString_de.'</div>' : "";
				$tmpString .= ($symptomString_en != "") ? '<div class="table-symptom-cnr table-symptom-hidden table-symptom-en hidden">'.$symptomString_en.'</div>' : "";
				
				$displayingSymptomString = $tmpString;
			}else{
				$tmpString = "";
				$tmpString .= ($symptomString_en != "") ? '<div class="table-symptom-cnr table-symptom-hidden table-symptom-en table-original-symptom hidden">'.$symptomString_en.'</div>' : "";
				$tmpString .= ($symptomString_de != "") ? '<div class="table-symptom-cnr table-symptom-visible table-symptom-de">'.$symptomString_de.'</div>' : "";

				$displayingSymptomString = $tmpString;
			}
		}
		return $displayingSymptomString;
	}

	function checkRemainingWords($iniRemaningUnMatchWordsArr, $comRemaningUnMatchWordsArr)
	{
		$numberOfMatches = 0;
		$matchedWords = array();
		$matchedFullWords = array();
		foreach ($iniRemaningUnMatchWordsArr as $unMatchKey1 => $unMatchVal1) {
			$initialWord = $unMatchVal1;
			$multipleOccuranceCheck = "";
			foreach ($comRemaningUnMatchWordsArr as $unMatchKey2 => $unMatchVal2) {
				$comparingWord = $unMatchVal2;
				$comparingWordLen = mb_strlen($unMatchVal2);
				$matchedPart = "";
				$isFullMatch = 0;
				for ($i=3; $i <= mb_strlen($initialWord) ; $i++) {
					if($comparingWordLen >= $i)
					{
						if(strtolower($initialWord ) == strtolower($comparingWord)){
							$matchedPart = $initialWord;
							$isFullMatch  = 1;
							break;
						} else if (strtolower(mb_substr( $initialWord, 0, $i )) == strtolower(mb_substr( $comparingWord, 0, $i ))){
							$matchedPart = mb_substr( $initialWord, 0, $i );
						} else {
							break;
						}
					}
				}
				if($matchedPart != "" AND mb_strlen($matchedPart) > 2){
					if(!in_array($matchedPart, $matchedWords)){
						$matchedWords[] = $matchedPart;
						$matchedFullWords[] = $initialWord;
						if($multipleOccuranceCheck != $initialWord){
							if($isFullMatch == 1)
								$numberOfMatches = $numberOfMatches + 1;
							else
								$numberOfMatches = $numberOfMatches + 0.5;
							$multipleOccuranceCheck = $initialWord;
						}
					}
				}
			}
		}

		$returnArray = array(
			"match_words" => $matchedWords,
			"match_full_words" => $matchedFullWords,
			"no_of_words" => $numberOfMatches
		);
		return $returnArray;
	}

	// function longenough($word){
	// 	if(mb_strlen( $word ) > 3){
	// 		$returnWord = mb_substr ($word, 0, 4);
	// 		return $returnWord;
	// 	}
	// }

	function longenough($word){
		if(mb_strlen( $word ) > 2){
			$returnWord = mb_substr ($word, 0, 3);
			return $returnWord;
		}
	}

	function longenough_for_synonym($word){
		if(mb_strlen( $word ) > 2){
			$returnWord = mb_substr ($word, 0, 3);
			return $returnWord;
		}
	}

	function possibilityCheck($word){
		return mb_substr ($word, 0, 4);
	}

	function getAllRelatedQuelle($quelle_ids, $returnArray = array()){
		global $db;
		$newIds = array();

		foreach ($quelle_ids as $key => $value) {
			$masterResult = $db->query("SELECT quelle_id FROM saved_comparisons WHERE initial_source_id = '".$value."' OR FIND_IN_SET('".$value."', comparing_source_ids)");
			if($masterResult->num_rows > 0){
				while($masterData = mysqli_fetch_array($masterResult)){
					$returnArray[] = $masterData['quelle_id'];
					$newIds[] = $masterData['quelle_id'];
				}
			}
			
		}

		if(!empty($newIds)) 
			return getAllRelatedQuelle($newIds, $returnArray);

		return $returnArray;
	}

	function getAllRelatedQuelleNew($arznei_id, $quelle_ids, $returnArray = array()){
		global $db;
		$newIds = array();

		foreach ($quelle_ids as $key => $value) {
			$masterResult = $db->query("SELECT quelle_id FROM pre_comparison_master_data WHERE arznei_id = '".$arznei_id."' AND (initial_source = '".$value."' OR FIND_IN_SET('".$value."', comparing_sources))");
			if($masterResult->num_rows > 0){
				while($masterData = mysqli_fetch_array($masterResult)){
					$returnArray[] = $masterData['quelle_id'];
					$newIds[] = $masterData['quelle_id'];
				}
			}
			
		}

		if(!empty($newIds)) 
			return getAllRelatedQuelleNew($arznei_id, $newIds, $returnArray);

		return $returnArray;
	}

	// 09-01-2024
	function getAllRelatedQuelleDetails($quelle_ids, $returnArray = array()){
		global $db;
		$newIds = array();

		foreach ($quelle_ids as $key => $value) {
			$masterResult = $db->query("SELECT quelle_id, table_name FROM pre_comparison_master_data WHERE initial_source = '".$value."' OR FIND_IN_SET('".$value."', comparing_sources)");
			if($masterResult->num_rows > 0){
				while($masterData = mysqli_fetch_array($masterResult)){
					$returnArray[] = $masterData['table_name'];
					$newIds[] = $masterData['quelle_id'];
				}
			}
			
		}

		if(!empty($newIds)) 
			return getAllRelatedQuelleDetails($newIds, $returnArray);

		return $returnArray;
	}

	function getAllRelatedIndividualSourcesNew($quelle_ids, $returnArray = array()){
		global $db;
		$newIds = array();

		foreach ($quelle_ids as $key => $value) {
			$masterResult = $db->query("SELECT quelle_id, initial_source, comparing_sources FROM pre_comparison_master_data WHERE quelle_id = '".$value."'");
			if($masterResult->num_rows > 0){
				while($masterData = mysqli_fetch_array($masterResult)){
					// For initial source checking
					$initialSourceData = $db->query("SELECT id FROM pre_comparison_master_data WHERE quelle_id = ".$masterData['initial_source']);
					if($initialSourceData->num_rows > 0){
						$newIds[] = $masterData['initial_source'];
					}else{
						$returnArray[] = $masterData['initial_source'];
					}

					// For comparing source checking
					$comparingSourceArr = ($masterData['comparing_sources'] != "") ? explode(',', $masterData['comparing_sources']) : array();
					foreach($comparingSourceArr as $comKey => $comVal){
						$comparingSourceData = $db->query("SELECT id FROM pre_comparison_master_data WHERE quelle_id = ".$comVal);
						if($comparingSourceData->num_rows > 0){
							$newIds[] = $comVal;
						}else{
							$returnArray[] = $comVal;
						}
					}
				}
			}
		}

		if(!empty($newIds)) 
			return getAllRelatedIndividualSourcesNew($newIds, $returnArray);

		return $returnArray;
	}

	// This function is used in update-comparison-name.php page
	function addTheSymptomInOnlyBackTable($symptomId, $quelleSymptomsMasterBackupId, $newQuelleId)
	{
		global $db;
		global $date;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Symptom add operation failed'
		);
		
		/* MySQL Transaction START */
		try{
			if($symptomId != ""){
				$db->begin_transaction();
				$symptomResult = $db->query("SELECT * FROM quelle_import_test WHERE id = ".$symptomId);
				if($symptomResult->num_rows > 0){
					$symptomData = mysqli_fetch_assoc($symptomResult);

					$symptomData['arznei_id'] = ($symptomData['arznei_id'] != "") ? mysqli_real_escape_string($db, $symptomData['arznei_id']) : null;
					// $symptomData['quelle_id'] = ($symptomData['quelle_id'] != "") ? mysqli_real_escape_string($db, $symptomData['quelle_id']) : null;
					$symptomData['original_quelle_id'] = ($symptomData['original_quelle_id'] != "") ? mysqli_real_escape_string($db, $symptomData['original_quelle_id']) : null;
					$symptomData['quelle_code'] = ($symptomData['quelle_code'] != "") ? mysqli_real_escape_string($db, $symptomData['quelle_code']) : null;
					$symptomData['Symptomnummer'] = mysqli_real_escape_string($db, $symptomData['Symptomnummer']);
					$symptomData['SeiteOriginalVon'] = mysqli_real_escape_string($db, $symptomData['SeiteOriginalVon']);
					$symptomData['SeiteOriginalBis'] = mysqli_real_escape_string($db, $symptomData['SeiteOriginalBis']);
					$symptomData['final_version_de'] = mysqli_real_escape_string($db, $symptomData['final_version_de']);
					$symptomData['final_version_en'] = mysqli_real_escape_string($db, $symptomData['final_version_en']);
					$symptomData['Beschreibung_de'] = mysqli_real_escape_string($db, $symptomData['Beschreibung_de']);
					$symptomData['Beschreibung_en'] = mysqli_real_escape_string($db, $symptomData['Beschreibung_en']);
					$symptomData['BeschreibungOriginal_de'] = mysqli_real_escape_string($db, $symptomData['BeschreibungOriginal_de']);
					$symptomData['BeschreibungOriginal_en'] = mysqli_real_escape_string($db, $symptomData['BeschreibungOriginal_en']);
					$symptomData['BeschreibungFull_de'] = mysqli_real_escape_string($db, $symptomData['BeschreibungFull_de']);
					$symptomData['BeschreibungFull_en'] = mysqli_real_escape_string($db, $symptomData['BeschreibungFull_en']);
					$symptomData['BeschreibungPlain_de'] = mysqli_real_escape_string($db, $symptomData['BeschreibungPlain_de']);
					$symptomData['BeschreibungPlain_en'] = mysqli_real_escape_string($db, $symptomData['BeschreibungPlain_en']);
					$symptomData['searchable_text_de'] = mysqli_real_escape_string($db, $symptomData['searchable_text_de']);
					$symptomData['searchable_text_en'] = mysqli_real_escape_string($db, $symptomData['searchable_text_en']);
					$symptomData['bracketedString_de'] = mysqli_real_escape_string($db, $symptomData['bracketedString_de']);
					$symptomData['bracketedString_en'] = mysqli_real_escape_string($db, $symptomData['bracketedString_en']);
					$symptomData['timeString_de'] = mysqli_real_escape_string($db, $symptomData['timeString_de']);
					$symptomData['timeString_en'] = mysqli_real_escape_string($db, $symptomData['timeString_en']);
					$symptomData['Fussnote'] = mysqli_real_escape_string($db, $symptomData['Fussnote']);
					$symptomData['EntnommenAus'] = mysqli_real_escape_string($db, $symptomData['EntnommenAus']);
					$symptomData['Verweiss'] = mysqli_real_escape_string($db, $symptomData['Verweiss']);
					$symptomData['Graduierung'] = mysqli_real_escape_string($db, $symptomData['Graduierung']);
					$symptomData['BereichID'] = mysqli_real_escape_string($db, $symptomData['BereichID']);
					$symptomData['Kommentar'] = mysqli_real_escape_string($db, $symptomData['Kommentar']);
					$symptomData['Unklarheiten'] = mysqli_real_escape_string($db, $symptomData['Unklarheiten']);
					$symptomData['Remedy'] = mysqli_real_escape_string($db, $symptomData['Remedy']);
					$symptomData['symptom_of_different_remedy'] = mysqli_real_escape_string($db, $symptomData['symptom_of_different_remedy']);
					$symptomData['subChapter'] = mysqli_real_escape_string($db, $symptomData['subChapter']);
					$symptomData['subSubChapter'] = mysqli_real_escape_string($db, $symptomData['subSubChapter']);
					$symptomData['symptom_edit_comment'] = mysqli_real_escape_string($db, $symptomData['symptom_edit_comment']);
					$symptomData['is_final_version_available'] = mysqli_real_escape_string($db, $symptomData['is_final_version_available']);
					$symptomData['is_symptom_number_mismatch'] = mysqli_real_escape_string($db, $symptomData['is_symptom_number_mismatch']);
					$symptomData['is_symptom_appended'] = mysqli_real_escape_string($db, $symptomData['is_symptom_appended']);
					$symptomData['is_appended_symptom_active'] = mysqli_real_escape_string($db, $symptomData['is_appended_symptom_active']);

					$mainSymptomBackupInsertQuery="INSERT INTO quelle_import_backup (original_symptom_id, master_id, arznei_id, quelle_id, original_quelle_id, quelle_code, Symptomnummer, SeiteOriginalVon, SeiteOriginalBis, final_version_de, final_version_en, Beschreibung_de, Beschreibung_en, BeschreibungOriginal_de, BeschreibungOriginal_en, BeschreibungFull_de, BeschreibungFull_en, BeschreibungPlain_de, BeschreibungPlain_en, searchable_text_de, searchable_text_en, bracketedString_de, bracketedString_en, timeString_de, timeString_en, Fussnote, EntnommenAus, Verweiss, Graduierung, BereichID, Kommentar, Unklarheiten, Remedy, symptom_of_different_remedy, subChapter, subSubChapter, symptom_edit_comment, is_final_version_available, is_symptom_number_mismatch, is_symptom_appended, is_appended_symptom_active) VALUES (".$symptomId.", ".$quelleSymptomsMasterBackupId.", NULLIF('".$symptomData['arznei_id']."', ''), NULLIF('".$newQuelleId."', ''), NULLIF('".$symptomData['original_quelle_id']."', ''), NULLIF('".$symptomData['quelle_code']."', ''), NULLIF('".$symptomData['Symptomnummer']."', ''), NULLIF('".$symptomData['SeiteOriginalVon']."', ''), NULLIF('".$symptomData['SeiteOriginalBis']."', ''), NULLIF('".$symptomData['final_version_de']."', ''), NULLIF('".$symptomData['final_version_en']."', ''), NULLIF('".$symptomData['Beschreibung_de']."', ''), NULLIF('".$symptomData['Beschreibung_en']."', ''), NULLIF('".$symptomData['BeschreibungOriginal_de']."', ''), NULLIF('".$symptomData['BeschreibungOriginal_en']."', ''), NULLIF('".$symptomData['BeschreibungFull_de']."', ''), NULLIF('".$symptomData['BeschreibungFull_en']."', ''), NULLIF('".$symptomData['BeschreibungPlain_de']."', ''), NULLIF('".$symptomData['BeschreibungPlain_en']."', ''), NULLIF('".$symptomData['searchable_text_de']."', ''), NULLIF('".$symptomData['searchable_text_en']."', ''), NULLIF('".$symptomData['bracketedString_de']."', ''), NULLIF('".$symptomData['bracketedString_en']."', ''), NULLIF('".$symptomData['timeString_de']."', ''), NULLIF('".$symptomData['timeString_en']."', ''), NULLIF('".$symptomData['Fussnote']."', ''), NULLIF('".$symptomData['EntnommenAus']."', ''), NULLIF('".$symptomData['Verweiss']."', ''), NULLIF('".$symptomData['Graduierung']."', ''), NULLIF('".$symptomData['BereichID']."', ''), NULLIF('".$symptomData['Kommentar']."', ''), NULLIF('".$symptomData['Unklarheiten']."', ''), NULLIF('".$symptomData['Remedy']."', ''), NULLIF('".$symptomData['symptom_of_different_remedy']."', ''), NULLIF('".$symptomData['subChapter']."', ''), NULLIF('".$symptomData['subSubChapter']."', ''), NULLIF('".$symptomData['symptom_edit_comment']."', ''), NULLIF('".$symptomData['is_final_version_available']."', ''), '".$symptomData['is_symptom_number_mismatch']."', NULLIF('".$symptomData['is_symptom_appended']."', ''), NULLIF('".$symptomData['is_appended_symptom_active']."', ''))";
		            $db->query($mainSymptomBackupInsertQuery);
		            $mainSymtomBackupId = $db->insert_id;

		            $symptomPrueferResult = $db->query("SELECT symptom_id, pruefer_id FROM symptom_pruefer where symptom_id = '".$symptomData['id']."'");
					if($symptomPrueferResult->num_rows > 0){
						while($symptomPrueferData = mysqli_fetch_array($symptomPrueferResult)){
			            	$mainSymptomPrueferBackupInsertQuery = "INSERT INTO symptom_pruefer_backup (symptom_id, pruefer_id, ersteller_datum) VALUES ('".$mainSymtomBackupId."', '".$symptomPrueferData['pruefer_id']."', '".$date."')";
			            	$db->query($mainSymptomPrueferBackupInsertQuery);
						}
					}

					$symptomReferenceResult = $db->query("SELECT symptom_id, reference_id FROM symptom_reference where symptom_id = '".$symptomData['id']."'");
					if($symptomReferenceResult->num_rows > 0){
						while($symptomReferenceData = mysqli_fetch_array($symptomReferenceResult)){
			            	$mainSymptomReferenceBackupInsertQuery = "INSERT INTO symptom_reference_backup (symptom_id, reference_id, ersteller_datum) VALUES ('".$mainSymtomBackupId."', '".$symptomReferenceData['reference_id']."', '".$date."')";
			            	$db->query($mainSymptomReferenceBackupInsertQuery);
						}
					}
				}	
			}
			$db->commit();
			if(isset($mainSymtomBackupId) AND $mainSymtomBackupId != "")
			{
				$returnArr['status'] = true;
				$returnArr['return_data']['backup_symptom_id'] = $mainSymtomBackupId;
		    	$returnArr['message'] = "Success";
			}
		}catch (Exception $e) {
	    	$db->rollback();
		    $returnArr['message'] = $e->getMessage();
		}
		/* MySQL Transaction END */
		

		return $returnArr;
	}

	// This function is for adding symptom, there are other same type of functions available here one is adding symptom in backup table only and another one is adding in both backup and normal table   
	// This function is used in symptom connection operations pages.
	function addTheSymptomInConnectionOperation($symptomId, $quelleSymptomsMasterId, $newQuelleId)
	{
		global $db;
		global $date;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Symptom add operation failed'
		);
		
		/* MySQL Transaction START */
		try{
			if($symptomId != ""){
				$db->begin_transaction();
				$symptomResult = $db->query("SELECT * FROM quelle_import_test WHERE id = ".$symptomId);
				if($symptomResult->num_rows > 0){
					$symptomData = mysqli_fetch_assoc($symptomResult);

					$sourceResult = mysqli_query($db,"SELECT Q.quelle_type_id FROM quelle AS Q WHERE Q.quelle_id = '".$newQuelleId."'");
					if(mysqli_num_rows($sourceResult) > 0){
						$sourceRow = mysqli_fetch_assoc($sourceResult);
						$sourceType = $sourceRow['quelle_type_id'];
					}

					$symptomData['original_symptom_id'] = (isset($sourceType) AND $sourceType == 3) ? $symptomId : null;
					$symptomData['arznei_id'] = ($symptomData['arznei_id'] != "") ? mysqli_real_escape_string($db, $symptomData['arznei_id']) : null;
					// $symptomData['quelle_id'] = ($symptomData['quelle_id'] != "") ? mysqli_real_escape_string($db, $symptomData['quelle_id']) : null;
					$symptomData['original_quelle_id'] = ($symptomData['original_quelle_id'] != "") ? mysqli_real_escape_string($db, $symptomData['original_quelle_id']) : null;
					$symptomData['quelle_code'] = ($symptomData['quelle_code'] != "") ? mysqli_real_escape_string($db, $symptomData['quelle_code']) : null;
					$symptomData['Symptomnummer'] = mysqli_real_escape_string($db, $symptomData['Symptomnummer']);
					$symptomData['SeiteOriginalVon'] = mysqli_real_escape_string($db, $symptomData['SeiteOriginalVon']);
					$symptomData['SeiteOriginalBis'] = mysqli_real_escape_string($db, $symptomData['SeiteOriginalBis']);
					$symptomData['final_version_de'] = mysqli_real_escape_string($db, $symptomData['final_version_de']);
					$symptomData['final_version_en'] = mysqli_real_escape_string($db, $symptomData['final_version_en']);
					$symptomData['Beschreibung_de'] = mysqli_real_escape_string($db, $symptomData['Beschreibung_de']);
					$symptomData['Beschreibung_en'] = mysqli_real_escape_string($db, $symptomData['Beschreibung_en']);
					$symptomData['BeschreibungOriginal_de'] = mysqli_real_escape_string($db, $symptomData['BeschreibungOriginal_de']);
					$symptomData['BeschreibungOriginal_en'] = mysqli_real_escape_string($db, $symptomData['BeschreibungOriginal_en']);
					$symptomData['BeschreibungFull_de'] = mysqli_real_escape_string($db, $symptomData['BeschreibungFull_de']);
					$symptomData['BeschreibungFull_en'] = mysqli_real_escape_string($db, $symptomData['BeschreibungFull_en']);
					$symptomData['BeschreibungPlain_de'] = mysqli_real_escape_string($db, $symptomData['BeschreibungPlain_de']);
					$symptomData['BeschreibungPlain_en'] = mysqli_real_escape_string($db, $symptomData['BeschreibungPlain_en']);
					$symptomData['searchable_text_de'] = mysqli_real_escape_string($db, $symptomData['searchable_text_de']);
					$symptomData['searchable_text_en'] = mysqli_real_escape_string($db, $symptomData['searchable_text_en']);
					$symptomData['bracketedString_de'] = mysqli_real_escape_string($db, $symptomData['bracketedString_de']);
					$symptomData['bracketedString_en'] = mysqli_real_escape_string($db, $symptomData['bracketedString_en']);
					$symptomData['timeString_de'] = mysqli_real_escape_string($db, $symptomData['timeString_de']);
					$symptomData['timeString_en'] = mysqli_real_escape_string($db, $symptomData['timeString_en']);
					$symptomData['Fussnote'] = mysqli_real_escape_string($db, $symptomData['Fussnote']);
					$symptomData['EntnommenAus'] = mysqli_real_escape_string($db, $symptomData['EntnommenAus']);
					$symptomData['Verweiss'] = mysqli_real_escape_string($db, $symptomData['Verweiss']);
					$symptomData['Graduierung'] = mysqli_real_escape_string($db, $symptomData['Graduierung']);
					$symptomData['BereichID'] = mysqli_real_escape_string($db, $symptomData['BereichID']);
					$symptomData['Kommentar'] = mysqli_real_escape_string($db, $symptomData['Kommentar']);
					$symptomData['Unklarheiten'] = mysqli_real_escape_string($db, $symptomData['Unklarheiten']);
					$symptomData['Remedy'] = mysqli_real_escape_string($db, $symptomData['Remedy']);
					$symptomData['symptom_of_different_remedy'] = mysqli_real_escape_string($db, $symptomData['symptom_of_different_remedy']);
					$symptomData['is_final_version_available'] = mysqli_real_escape_string($db, $symptomData['is_final_version_available']);
					$symptomData['is_symptom_number_mismatch'] = mysqli_real_escape_string($db, $symptomData['is_symptom_number_mismatch']);
					$mainSymptomInsertQuery="INSERT INTO quelle_import_test (original_symptom_id, master_id, arznei_id, quelle_id, original_quelle_id, quelle_code, Symptomnummer, SeiteOriginalVon, SeiteOriginalBis, final_version_de, final_version_en, Beschreibung_de, Beschreibung_en, BeschreibungOriginal_de, BeschreibungOriginal_en, BeschreibungFull_de, BeschreibungFull_en, BeschreibungPlain_de, BeschreibungPlain_en, searchable_text_de, searchable_text_en, bracketedString_de, bracketedString_en, timeString_de, timeString_en, Fussnote, EntnommenAus, Verweiss, Graduierung, BereichID, Kommentar, Unklarheiten, Remedy, symptom_of_different_remedy, is_final_version_available, is_symptom_number_mismatch) VALUES (NULLIF('".$symptomData['original_symptom_id']."', ''), ".$quelleSymptomsMasterId.", NULLIF('".$symptomData['arznei_id']."', ''), NULLIF('".$newQuelleId."', ''), NULLIF('".$symptomData['original_quelle_id']."', ''), NULLIF('".$symptomData['quelle_code']."', ''), NULLIF('".$symptomData['Symptomnummer']."', ''), NULLIF('".$symptomData['SeiteOriginalVon']."', ''), NULLIF('".$symptomData['SeiteOriginalBis']."', ''), NULLIF('".$symptomData['final_version_de']."', ''), NULLIF('".$symptomData['final_version_en']."', ''), NULLIF('".$symptomData['Beschreibung_de']."', ''), NULLIF('".$symptomData['Beschreibung_en']."', ''), NULLIF('".$symptomData['BeschreibungOriginal_de']."', ''), NULLIF('".$symptomData['BeschreibungOriginal_en']."', ''), NULLIF('".$symptomData['BeschreibungFull_de']."', ''), NULLIF('".$symptomData['BeschreibungFull_en']."', ''), NULLIF('".$symptomData['BeschreibungPlain_de']."', ''), NULLIF('".$symptomData['BeschreibungPlain_en']."', ''), NULLIF('".$symptomData['searchable_text_de']."', ''), NULLIF('".$symptomData['searchable_text_en']."', ''), NULLIF('".$symptomData['bracketedString_de']."', ''), NULLIF('".$symptomData['bracketedString_en']."', ''), NULLIF('".$symptomData['timeString_de']."', ''), NULLIF('".$symptomData['timeString_en']."', ''), NULLIF('".$symptomData['Fussnote']."', ''), NULLIF('".$symptomData['EntnommenAus']."', ''), NULLIF('".$symptomData['Verweiss']."', ''), NULLIF('".$symptomData['Graduierung']."', ''), NULLIF('".$symptomData['BereichID']."', ''), NULLIF('".$symptomData['Kommentar']."', ''), NULLIF('".$symptomData['Unklarheiten']."', ''), NULLIF('".$symptomData['Remedy']."', ''), NULLIF('".$symptomData['symptom_of_different_remedy']."', ''), NULLIF('".$symptomData['is_final_version_available']."', ''), '".$symptomData['is_symptom_number_mismatch']."')";
			
		            $db->query($mainSymptomInsertQuery);
		            $mainSymtomId = $db->insert_id;

		            /* Insert Symptom_pruefer relation START */
		            $symptomPrueferResult = $db->query("SELECT symptom_id, pruefer_id FROM symptom_pruefer where symptom_id = '".$symptomData['id']."'");
					if($symptomPrueferResult->num_rows > 0){
						while($symptomPrueferData = mysqli_fetch_array($symptomPrueferResult)){
							$mainSymptomPrueferInsertQuery = "INSERT INTO symptom_pruefer (symptom_id, pruefer_id, ersteller_datum) VALUES ('".$mainSymtomId."', '".$symptomPrueferData['pruefer_id']."', '".$date."')";
			            	$db->query($mainSymptomPrueferInsertQuery);
						}
					}
					/* Insert Symptom_pruefer relation END */

					/* Insert symptom_reference relation START */
		            $symptomReferenceResult = $db->query("SELECT symptom_id, reference_id FROM symptom_reference where symptom_id = '".$symptomData['id']."'");
					if($symptomReferenceResult->num_rows > 0){
						while($symptomReferenceData = mysqli_fetch_array($symptomReferenceResult)){
							$mainSymptomReferenceInsertQuery = "INSERT INTO symptom_reference (symptom_id, reference_id, ersteller_datum) VALUES ('".$mainSymtomId."', '".$symptomReferenceData['reference_id']."', '".$date."')";
			            	$db->query($mainSymptomReferenceInsertQuery);
						}
					}
					/* Insert symptom_reference relation END */
				}	
			}
			$db->commit();
			if(isset($mainSymtomId) AND $mainSymtomId != "")
			{
				$returnArr['status'] = true;
				$returnArr['return_data']['symptom_id'] = $mainSymtomId;
		    	$returnArr['message'] = "Success";
			}
		}catch (Exception $e) {
	    	$db->rollback();
		    $returnArr['message'] = $e->getMessage();
		}
		/* MySQL Transaction END */
		

		return $returnArr;
	}

	// This function is for working with the sublevel connections
	// This function is used in symptom connection operations pages.
	function sublevelConnectOperations($subConnetionsArray, $updateableSymptomIds = array(), $removable_sets = array(), $main_parent_initial_symptom_id, $mainInitialSourceId, $comparison_option, $comparing_source_ids, $initial_source_symptom_id, $comparing_source_symptom_id, $source_arznei_id)
	{
		global $db;
		
		$newSubConnetionsArray = array();
		// $removableSetsArray = array();
		if(!empty($subConnetionsArray)){
			foreach ($subConnetionsArray as $subConKey => $subConVal) {
				$activeSymptomId = $subConVal['active_symptom_id'];
				$oppositeSymptomId = $subConVal['opposite_symptom_id'];

				if(!in_array($activeSymptomId, $updateableSymptomIds))
					array_push($updateableSymptomIds, $activeSymptomId);
				if(!in_array($oppositeSymptomId, $updateableSymptomIds))
					array_push($updateableSymptomIds, $oppositeSymptomId);		

				// $removableDataArray = array();
				// $removableDataArray['active_symptom_id'] = $activeSymptomId;
				// $removableDataArray['opposite_symptom_id'] = $oppositeSymptomId;
				// $removableSetsArray[] = $removableDataArray;

				$connectedSymptomResult = mysqli_query($db, "SELECT id, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, is_initial_source, connection_language FROM symptom_connections WHERE ((initial_source_symptom_id = '".$activeSymptomId."' OR comparing_source_symptom_id = '".$activeSymptomId."') AND (initial_source_symptom_id = '".$oppositeSymptomId."' OR comparing_source_symptom_id = '".$oppositeSymptomId."')) AND source_arznei_id = '".$source_arznei_id."'");
				if(mysqli_num_rows($connectedSymptomResult) > 0){
					$connectedRow = mysqli_fetch_assoc($connectedSymptomResult);

					if($subConVal['active_symptom_source_id'] != $mainInitialSourceId){

						$iniSymptomString = "";
						$compSymptomString = "";
						$is_initial_source = (isset($connectedRow['is_initial_source']) AND $connectedRow['is_initial_source'] != "") ? $connectedRow['is_initial_source'] : 1;
						$initial_source_id = null;
						$initial_original_source_id = null;
						$comparing_source_id = null;
						$comparing_original_source_id = null;
						$initial_source_code = null;
						$is_connected = (isset($connectedRow['is_connected']) AND $connectedRow['is_connected'] != "") ? $connectedRow['is_connected'] : null;
						$is_ns_connect = (isset($connectedRow['is_ns_connect']) AND $connectedRow['is_ns_connect'] != "") ? $connectedRow['is_ns_connect'] : 0;
						$ns_connect_note = (isset($connectedRow['ns_connect_note']) AND $connectedRow['ns_connect_note'] != "") ? mysqli_real_escape_string($db, $connectedRow['ns_connect_note']) : null;
						$is_pasted = (isset($connectedRow['is_pasted']) AND $connectedRow['is_pasted'] != "") ? $connectedRow['is_pasted'] : 0;
						$is_ns_paste = (isset($connectedRow['is_ns_paste']) AND $connectedRow['is_ns_paste'] != "") ? $connectedRow['is_ns_paste'] : 0;
						$ns_paste_note = (isset($connectedRow['ns_paste_note']) AND $connectedRow['ns_paste_note'] != "") ? mysqli_real_escape_string($db, $connectedRow['ns_paste_note']) : null;
						$connection_language = (isset($connectedRow['connection_language']) AND $connectedRow['connection_language'] != "") ? mysqli_real_escape_string($db, $connectedRow['connection_language']) : null;

						$InitialSymptomResult = mysqli_query($db,"SELECT quelle_import_test.quelle_code, quelle_import_test.original_quelle_id, quelle_import_test.arznei_id, quelle_import_test.final_version_de, quelle_import_test.final_version_en, quelle_import_test.BeschreibungPlain_de, quelle_import_test.BeschreibungPlain_en, quelle_import_test.BeschreibungOriginal_de, quelle_import_test.BeschreibungOriginal_en, quelle_import_test.BeschreibungFull_de, quelle_import_test.BeschreibungFull_en, quelle_import_test.searchable_text_de, quelle_import_test.searchable_text_en, quelle_import_test.is_final_version_available, quelle_import_test.id, quelle_import_test.original_symptom_id, quelle_import_test.Kommentar, quelle_import_test.Fussnote, quelle_import_test.quelle_id FROM quelle_import_test WHERE quelle_import_test.id = '".$main_parent_initial_symptom_id."'");
						if(mysqli_num_rows($InitialSymptomResult) > 0){
							$iniSymRow = mysqli_fetch_assoc($InitialSymptomResult);
							// is_final_version_available values (0 = No, 1 = Connect edit, 2 = Paste edit)
							if($iniSymRow['is_final_version_available'] != 0){
								$iniSymptomString_de =  $iniSymRow['final_version_de'];
								$iniSymptomString_en =  $iniSymRow['final_version_en'];
							} else {
								if($comparison_option == 1){
									$iniSymptomString_de =  $iniSymRow['searchable_text_de'];
									$iniSymptomString_en =  $iniSymRow['searchable_text_en'];
								}
								else{
									$iniSymptomString_de =  $iniSymRow['BeschreibungFull_de'];
									$iniSymptomString_en =  $iniSymRow['BeschreibungFull_en'];
								}
							}


							// initial source symptom string Bfore convertion(this string is used to store in the connecteion table)  
							$iniSymptomStringBeforeConversion_de = base64_encode($iniSymptomString_de);
							$iniSymptomStringBeforeConversion_en = base64_encode($iniSymptomString_en);

							// Apply dynamic conversion
							if($iniSymptomString_de != ""){
								$iniSymptomString_de = convertTheSymptom(0, $iniSymptomString_de, $iniSymRow['original_quelle_id'], $iniSymRow['arznei_id'], $iniSymRow['is_final_version_available'], 0, $iniSymRow['id'], $iniSymRow['original_symptom_id']);
								$iniSymptomString_de = base64_encode($iniSymptomString_de);
							}
							if($iniSymptomString_en != ""){
								$iniSymptomString_en = convertTheSymptom(0, $iniSymptomString_en, $iniSymRow['original_quelle_id'], $iniSymRow['arznei_id'], $iniSymRow['is_final_version_available'], 0, $iniSymRow['id'], $iniSymRow['original_symptom_id']);
								$iniSymptomString_en = base64_encode($iniSymptomString_en);
							}

							$initial_source_id = (isset($iniSymRow['quelle_id']) AND $iniSymRow['quelle_id'] !="") ? mysqli_real_escape_string($db, $iniSymRow['quelle_id']) : null;
							$initial_original_source_id = (isset($iniSymRow['original_quelle_id']) AND $iniSymRow['original_quelle_id'] !="") ? mysqli_real_escape_string($db, $iniSymRow['original_quelle_id']) : null;
							$initial_source_code = (isset($iniSymRow['quelle_code']) AND $iniSymRow['quelle_code'] != "") ? mysqli_real_escape_string($db, trim($iniSymRow['quelle_code'])) : null;
						}

						$comparingSymptomResult = mysqli_query($db,"SELECT quelle_import_test.quelle_code, quelle_import_test.original_quelle_id, quelle_import_test.arznei_id, quelle_import_test.final_version_de, quelle_import_test.final_version_en, quelle_import_test.BeschreibungPlain_de, quelle_import_test.BeschreibungPlain_en, quelle_import_test.BeschreibungOriginal_de, quelle_import_test.BeschreibungOriginal_en, quelle_import_test.BeschreibungFull_de, quelle_import_test.BeschreibungFull_en, quelle_import_test.searchable_text_de, quelle_import_test.searchable_text_en, quelle_import_test.is_final_version_available, quelle_import_test.id, quelle_import_test.original_symptom_id, quelle_import_test.Kommentar, quelle_import_test.Fussnote, quelle_import_test.quelle_id FROM quelle_import_test WHERE quelle_import_test.id = '".$activeSymptomId."'");
						if(mysqli_num_rows($comparingSymptomResult) > 0){
							$comparingSymptomRow = mysqli_fetch_assoc($comparingSymptomResult);
							// is_final_version_available values (0 = No, 1 = Connect edit, 2 = Paste edit)
							if($comparingSymptomRow['is_final_version_available'] != 0){
								$compSymptomString_de =  $comparingSymptomRow['final_version_de'];
								$compSymptomString_en =  $comparingSymptomRow['final_version_en'];
							}else{
								if($comparison_option == 1){
									$compSymptomString_de =  $comparingSymptomRow['searchable_text_de'];
									$compSymptomString_en =  $comparingSymptomRow['searchable_text_en'];
								}
								else{
									$compSymptomString_de =  $comparingSymptomRow['BeschreibungFull_de'];
									$compSymptomString_en =  $comparingSymptomRow['BeschreibungFull_en'];
								}
							}

							// comparing source symptom string Bfore convertion(this string is used to store in the connecteion table)  
							$compSymptomStringBeforeConversion_de = base64_encode($compSymptomString_de);
							$compSymptomStringBeforeConversion_en = base64_encode($compSymptomString_en);

							// Apply dynamic conversion
							if($compSymptomString_de != ""){
								$compSymptomString_de = convertTheSymptom(0, $compSymptomString_de, $comparingSymptomRow['original_quelle_id'], $comparingSymptomRow['arznei_id'], $comparingSymptomRow['is_final_version_available'], 0, $comparingSymptomRow['id'], $comparingSymptomRow['original_symptom_id']);
								$compSymptomString_de = base64_encode($compSymptomString_de);	
							}
							if($compSymptomString_en != ""){
								$compSymptomString_en = convertTheSymptom(0, $compSymptomString_en, $comparingSymptomRow['original_quelle_id'], $comparingSymptomRow['arznei_id'], $comparingSymptomRow['is_final_version_available'], 0, $comparingSymptomRow['id'], $comparingSymptomRow['original_symptom_id']);
								$compSymptomString_en = base64_encode($compSymptomString_en);	
							}
							

							$comparing_source_id = (isset($comparingSymptomRow['quelle_id']) AND $comparingSymptomRow['quelle_id'] != "") ? mysqli_real_escape_string($db, $comparingSymptomRow['quelle_id']) : null;
							$comparing_original_source_id = (isset($comparingSymptomRow['original_quelle_id']) AND $comparingSymptomRow['original_quelle_id'] != "") ? mysqli_real_escape_string($db, $comparingSymptomRow['original_quelle_id']) : null;
							$comparing_source_code = (isset($comparingSymptomRow['quelle_code']) AND $comparingSymptomRow['quelle_code'] != "") ? mysqli_real_escape_string($db, trim($comparingSymptomRow['quelle_code'])) : null;
						}


						if($connection_language == "en"){

							// Preparing the English version data
							if($iniSymptomString_en != "" AND $compSymptomString_en != "")
							{
								$resultArray = comareSymptom2($iniSymptomString_en, $compSymptomString_en, $iniSymptomStringBeforeConversion_en, $compSymptomStringBeforeConversion_en);
								$no_of_match = (isset($resultArray['no_of_match'])) ? mysqli_real_escape_string($db, $resultArray['no_of_match']) : 0;
								$matching_percentage = (isset($resultArray['percentage'])) ? mysqli_real_escape_string($db, $resultArray['percentage']) : 0;
								$initial_source_symptom_highlighted_en = (isset($resultArray['initial_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_highlighted'])) : null;
								//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
								$comparing_source_symptom_highlighted_en = (isset($resultArray['comparing_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_highlighted'])) : null;
								//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
								$initial_source_symptom_before_conversion_highlighted_en = (isset($resultArray['initial_source_symptom_before_conversion_highlighted']) AND $resultArray['initial_source_symptom_before_conversion_highlighted'] != "") ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_before_conversion_highlighted'])) : null;
								$comparing_source_symptom_before_conversion_highlighted_en = (isset($resultArray['comparing_source_symptom_before_conversion_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_before_conversion_highlighted'])) : null;
								
								// Decoding the symptoms
								$iniSymptomStringDecoded_en = ($iniSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($iniSymptomStringBeforeConversion_en)) : null;
								$compSymptomStringDecoded_en = ($compSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($compSymptomStringBeforeConversion_en)) : null;
							} else {
								$no_of_match = 0;
								$matching_percentage = 0;
								$initial_source_symptom_highlighted_en = (isset($iniSymptomString_en) AND $iniSymptomString_en != "") ? mysqli_real_escape_string($db, base64_decode($iniSymptomString_en)) : null;
								//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
								$comparing_source_symptom_highlighted_en = (isset($compSymptomString_en) AND $compSymptomString_en != "") ? mysqli_real_escape_string($db, base64_decode($compSymptomString_en)) : null;
								//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
								$initial_source_symptom_before_conversion_highlighted_en = (isset($iniSymptomStringBeforeConversion_en) AND $iniSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($iniSymptomStringBeforeConversion_en)) : null;
								$comparing_source_symptom_before_conversion_highlighted_en = (isset($compSymptomStringBeforeConversion_en) AND $compSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($compSymptomStringBeforeConversion_en)) : null;
								
								// Decoding the symptoms
								$iniSymptomStringDecoded_en = ($iniSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($iniSymptomStringBeforeConversion_en)) : null;
								$compSymptomStringDecoded_en = ($compSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($compSymptomStringBeforeConversion_en)) : null;
							}

							// German
							$initial_source_symptom_highlighted_de = (isset($iniSymptomString_de)) ? mysqli_real_escape_string($db, base64_decode($iniSymptomString_de)) : null;
							$comparing_source_symptom_highlighted_de = (isset($compSymptomString_de)) ? mysqli_real_escape_string($db, base64_decode($compSymptomString_de)) : null;
							$initial_source_symptom_before_conversion_highlighted_de = (isset($iniSymptomString_de)) ? mysqli_real_escape_string($db, base64_decode($iniSymptomString_de)) : null;
							$comparing_source_symptom_before_conversion_highlighted_de = (isset($compSymptomString_de)) ? mysqli_real_escape_string($db, base64_decode($compSymptomString_de)) : null;
							// Decoding the symptoms
							$iniSymptomStringDecoded_de = ($iniSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($iniSymptomStringBeforeConversion_de)) : null;
							$compSymptomStringDecoded_de = ($compSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($compSymptomStringBeforeConversion_de)) : null;
						} else {
							// Preparing the German version data
							if($iniSymptomString_de != "" AND $compSymptomString_de != "")
							{
								$resultArray = comareSymptom2($iniSymptomString_de, $compSymptomString_de, $iniSymptomStringBeforeConversion_de, $compSymptomStringBeforeConversion_de);
								$no_of_match = (isset($resultArray['no_of_match'])) ? mysqli_real_escape_string($db, $resultArray['no_of_match']) : 0;
								$matching_percentage = (isset($resultArray['percentage'])) ? mysqli_real_escape_string($db, $resultArray['percentage']) : 0;
								$initial_source_symptom_highlighted_de = (isset($resultArray['initial_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_highlighted'])) : null;
								//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
								$comparing_source_symptom_highlighted_de = (isset($resultArray['comparing_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_highlighted'])) : null;
								//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
								$initial_source_symptom_before_conversion_highlighted_de = (isset($resultArray['initial_source_symptom_before_conversion_highlighted']) AND $resultArray['initial_source_symptom_before_conversion_highlighted'] != "") ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_before_conversion_highlighted'])) : null;
								$comparing_source_symptom_before_conversion_highlighted_de = (isset($resultArray['comparing_source_symptom_before_conversion_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_before_conversion_highlighted'])) : null;
								
								// Decoding the symptoms
								$iniSymptomStringDecoded_de = ($iniSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($iniSymptomStringBeforeConversion_de)) : null;
								$compSymptomStringDecoded_de = ($compSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($compSymptomStringBeforeConversion_de)) : null;
							} else {
								$no_of_match = 0;
								$matching_percentage = 0;
								$initial_source_symptom_highlighted_de = (isset($iniSymptomString_de) AND $iniSymptomString_de != "") ? mysqli_real_escape_string($db, base64_decode($iniSymptomString_de)) : null;
								//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
								$comparing_source_symptom_highlighted_de = (isset($compSymptomString_de) AND $compSymptomString_de != "") ? mysqli_real_escape_string($db, base64_decode($compSymptomString_de)) : null;
								//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
								$initial_source_symptom_before_conversion_highlighted_de = (isset($iniSymptomStringBeforeConversion_de) AND $iniSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($iniSymptomStringBeforeConversion_de)) : null;
								$comparing_source_symptom_before_conversion_highlighted_de = (isset($compSymptomStringBeforeConversion_de) AND $compSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($compSymptomStringBeforeConversion_de)) : null;
								
								// Decoding the symptoms
								$iniSymptomStringDecoded_de = ($iniSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($iniSymptomStringBeforeConversion_de)) : null;
								$compSymptomStringDecoded_de = ($compSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($compSymptomStringBeforeConversion_de)) : null;
							}

							// English
							$initial_source_symptom_highlighted_en = (isset($iniSymptomString_en)) ? mysqli_real_escape_string($db, base64_decode($iniSymptomString_en)) : null;
							$comparing_source_symptom_highlighted_en = (isset($compSymptomString_en)) ? mysqli_real_escape_string($db, base64_decode($compSymptomString_en)) : null;
							$initial_source_symptom_before_conversion_highlighted_en = (isset($iniSymptomString_en)) ? mysqli_real_escape_string($db, base64_decode($iniSymptomString_en)) : null;
							$comparing_source_symptom_before_conversion_highlighted_en = (isset($compSymptomString_en)) ? mysqli_real_escape_string($db, base64_decode($compSymptomString_en)) : null;
							// Decoding the symptoms
							$iniSymptomStringDecoded_en = ($iniSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($iniSymptomStringBeforeConversion_en)) : null;
							$compSymptomStringDecoded_en = ($compSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($compSymptomStringBeforeConversion_en)) : null;
						}

						$connectedSymptomResult = mysqli_query($db, "SELECT id FROM symptom_connections WHERE ((initial_source_symptom_id = '".$activeSymptomId."' OR comparing_source_symptom_id = '".$activeSymptomId."') AND (initial_source_symptom_id = '".$main_parent_initial_symptom_id."' OR comparing_source_symptom_id = '".$main_parent_initial_symptom_id."')) AND source_arznei_id = '".$source_arznei_id."'");
						if(mysqli_num_rows($connectedSymptomResult) == 0){
							$query="INSERT INTO symptom_connections (source_arznei_id, is_initial_source, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note) VALUES (NULLIF('".$source_arznei_id."', ''), '".$is_initial_source."', NULLIF('".$initial_source_id."', ''), NULLIF('".$comparing_source_id."', ''), NULLIF('".$initial_original_source_id."', ''), NULLIF('".$comparing_original_source_id."', ''), NULLIF('".$initial_source_code."', ''), NULLIF('".$comparing_source_code."', ''), NULLIF('".$main_parent_initial_symptom_id."', ''), NULLIF('".$activeSymptomId."', ''), NULLIF('".$initial_source_symptom_before_conversion_highlighted_de."', ''), NULLIF('".$initial_source_symptom_before_conversion_highlighted_en."', ''), NULLIF('".$comparing_source_symptom_before_conversion_highlighted_de."', ''), NULLIF('".$comparing_source_symptom_before_conversion_highlighted_en."', ''), NULLIF('".$iniSymptomStringDecoded_de."', ''), NULLIF('".$iniSymptomStringDecoded_en."', ''), NULLIF('".$compSymptomStringDecoded_de."', ''), NULLIF('".$compSymptomStringDecoded_en."', ''), NULLIF('".$connection_language."', ''), '".$matching_percentage."', '".$is_connected."', '".$is_ns_connect."', NULLIF('".$ns_connect_note."', ''), '".$is_pasted."', '".$is_ns_paste."', NULLIF('".$ns_paste_note."', ''))";
							$db->query($query);
							$rowId = mysqli_insert_id($db);
						}

						if($subConVal['active_symptom_source_id'] != $mainInitialSourceId AND $subConVal['opposite_symptom_source_id'] != $mainInitialSourceId){
							// Remove the current connection
							$deleteQuery="DELETE FROM symptom_connections WHERE ((initial_source_symptom_id = '".$activeSymptomId."' OR comparing_source_symptom_id = '".$activeSymptomId."') AND (initial_source_symptom_id = '".$oppositeSymptomId."' OR comparing_source_symptom_id = '".$oppositeSymptomId."')) AND source_arznei_id = '".$source_arznei_id."'";
							$db->query($deleteQuery);
						}
						
					}

				}
			}
		}

		$data = array();
		$data['sub_connetions_array'] = $newSubConnetionsArray;
		$data['updateable_symptom_ids'] = $updateableSymptomIds;
		// $data['removable_sets'] = $removableSetsArray;
		$returnData = $data;

		return $returnData;
	}

	// This function is used in comparison save operations pages.
	function removeExistingQuelleData($savedComparisonQuelleIdArr, $arzneiId)
	{
		global $db;
		global $date;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Operation failed'
		);
		try{
			$db->begin_transaction();

			$newQuelleIds = array();
			foreach ($savedComparisonQuelleIdArr as $savedComparisonQuelleId) {
				$masterResult = $db->query("SELECT id, quelle_id FROM quelle_import_master WHERE quelle_id = '".$savedComparisonQuelleId."' AND arznei_id = '".$arzneiId."'");
				if($masterResult->num_rows > 0){
					while($masterData = mysqli_fetch_array($masterResult)){
						$symptomResult = $db->query("SELECT id FROM quelle_import_test WHERE master_id = ".$masterData['id']);
						if($symptomResult->num_rows > 0){
							while($symptomData = mysqli_fetch_array($symptomResult)){
								$symPrueferDeleteQuery="DELETE FROM symptom_pruefer WHERE symptom_id = ".$symptomData['id'];
		            			$db->query($symPrueferDeleteQuery);

		            			$symRefDeleteQuery="DELETE FROM symptom_reference WHERE symptom_id = ".$symptomData['id'];
		            			$db->query($symRefDeleteQuery);

		            			// Delete if it is there in appended_symptoms
		            			$appendedSymptomDeleteQuery="DELETE FROM appended_symptoms WHERE symptom_id = ".$symptomData['id'];
			            		$db->query($appendedSymptomDeleteQuery); 
		            		}
						}
						$symDeleteQuery="DELETE FROM quelle_import_test WHERE master_id = ".$masterData['id'];
		            	$db->query($symDeleteQuery);

		            	$workingQuelleId = $masterData['quelle_id'];

		            	$arzneiQuelleDeleteQuery="DELETE FROM arznei_quelle WHERE quelle_id = '".$workingQuelleId."' AND arznei_id = '".$arzneiId."'";
			            $db->query($arzneiQuelleDeleteQuery);

			            $quelleConnDeleteQuery="DELETE FROM symptom_connections WHERE (initial_source_id = '".$workingQuelleId."' OR comparing_source_id = '".$workingQuelleId."') AND source_arznei_id = '".$arzneiId."'";
			            $db->query($quelleConnDeleteQuery);

			            $quelleDeleteQuery="DELETE FROM quelle WHERE quelle_id = '".$workingQuelleId."' AND quelle_type_id = 3";
			            $db->query($quelleDeleteQuery);

			            $fetchSavedComQuery=$db->query("SELECT initial_source_id, comparing_source_ids FROM saved_comparisons WHERE quelle_id = ".$workingQuelleId);
			            if($fetchSavedComQuery->num_rows > 0){
			            	$fetchSavedComData = mysqli_fetch_assoc($fetchSavedComQuery);
							$savedComparisonInitialSourceId = (isset($fetchSavedComData['initial_source_id']) AND $fetchSavedComData['initial_source_id'] != "") ? $fetchSavedComData['initial_source_id'] : null;
							$savedComparisonComparingSourceIds = (isset($fetchSavedComData['comparing_source_ids']) AND $fetchSavedComData['comparing_source_ids'] != "") ? explode(',', $fetchSavedComData['comparing_source_ids']) : null;

							
							// Collecting initial source's compared sources chain 
							$initialSourceComparedChainIds = array();

							if($savedComparisonInitialSourceId != "") {
								$initialSourceIdInArr = explode(',', $savedComparisonInitialSourceId);
								if(!empty($initialSourceIdInArr)){
									if(!in_array($savedComparisonInitialSourceId, $initialSourceComparedChainIds))
										array_push($initialSourceComparedChainIds, $savedComparisonInitialSourceId);
									$returnedIds = getAllComparedSourceIds($initialSourceIdInArr);
									if(!empty($returnedIds)){
										foreach ($returnedIds as $IdVal) {
											if(!in_array($IdVal, $initialSourceComparedChainIds))
												array_push($initialSourceComparedChainIds, $IdVal);
										}
									}	
								}

								$updQuelleQuery="UPDATE quelle SET is_materia_medica = 1 WHERE quelle_id = ".$savedComparisonInitialSourceId;
		            			$db->query($updQuelleQuery);
							}

							// Collecting comparing sources compared sources chain
							$comparingSourceComparedChainIds = array();

							if(!empty($savedComparisonComparingSourceIds)){
								foreach ($savedComparisonComparingSourceIds as $allSourcesKey => $allSourcesVal) {
									$comparingSourceIdInArr = explode(',', $allSourcesVal);
									if(!empty($comparingSourceIdInArr)){
										if(!in_array($allSourcesVal, $comparingSourceComparedChainIds))
											array_push($comparingSourceComparedChainIds, $allSourcesVal);
										$returnedIds = getAllComparedSourceIds($comparingSourceIdInArr);
										if(!empty($returnedIds)){
											foreach ($returnedIds as $IdVal) {
												if(!in_array($IdVal, $comparingSourceComparedChainIds))
													array_push($comparingSourceComparedChainIds, $IdVal);
											}
										}	
									}

									$updQuelleQuery="UPDATE quelle SET is_materia_medica = 1 WHERE quelle_id = ".$allSourcesVal;
		        					$db->query($updQuelleQuery);
								}
							}
							// Collect all involved source ids till this comparison and remove other connections which are not from this source ids.
							$getAllInvolvedSourcesIds = array();
							foreach ($initialSourceComparedChainIds as $iniKey => $iniVal) {
								if(!in_array($iniVal, $getAllInvolvedSourcesIds))
									array_push($getAllInvolvedSourcesIds, $iniVal);
							}
							foreach ($comparingSourceComparedChainIds as $comKey => $comVal) {
								if(!in_array($comVal, $getAllInvolvedSourcesIds))
									array_push($getAllInvolvedSourcesIds, $comVal);
							}

							$allComparedSources = (!empty($getAllInvolvedSourcesIds)) ? implode(',', $getAllInvolvedSourcesIds) : "";

							// Deleteing unwanted connections
							$deleteUnwantedConQuery = "DELETE FROM symptom_connections WHERE ((FIND_IN_SET(initial_source_id, '".$allComparedSources."') AND comparing_source_id NOT IN (".$allComparedSources.")) OR (FIND_IN_SET(comparing_source_id, '".$allComparedSources."') AND initial_source_id NOT IN (".$allComparedSources."))) AND source_arznei_id = '".$arzneiId."'";
			           		$db->query($deleteUnwantedConQuery);
			            }


			            $savedComDeleteQuery="DELETE FROM saved_comparisons WHERE quelle_id = ".$workingQuelleId."";
			            $db->query($savedComDeleteQuery);

			            $savedComQuery=$db->query("SELECT id, quelle_id FROM saved_comparisons WHERE initial_source_id = '".$workingQuelleId."' OR FIND_IN_SET('".$workingQuelleId."', comparing_source_ids)");
			            if($savedComQuery->num_rows > 0){
							while($savedComData = mysqli_fetch_array($savedComQuery)){
								$newQuelleIds[] = $savedComData['quelle_id'];
							}
						}

	            	}
				}
				$masterDeleteQuery="DELETE FROM quelle_import_master WHERE quelle_id = '".$savedComparisonQuelleId."' AND arznei_id ='".$arzneiId."'";
	            $db->query($masterDeleteQuery);

			}

			$db->commit();

			if(!empty($newQuelleIds)){
				return removeExistingQuelleData($newQuelleIds);
			}

		    $returnArr['status'] = true;
		    $returnArr['message'] = "Success";
		}catch (Exception $e) {
	    	$db->rollback();
	    	$returnArr['status'] = false;
		    $returnArr['message'] = $e->getMessage();
		}
		

		return $returnArr;
	}

	// This function is used in comparison save operations pages.
	function addQuelleDetailsInSaveOperation($saved_comparison_master_id, $bckup_saved_comparison_master_id, $formData, $savedComparisonQuelleId = null)
	{
		global $db;
		global $date;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Operation failed'
		);
		$arzneiId = (isset($formData['arznei_id']) AND $formData['arznei_id'] != "") ? trim($formData['arznei_id']) : null;
		$initialSource = (isset($formData['initial_source']) AND $formData['initial_source'] != "") ? trim($formData['initial_source']) : null;
		$comparingSources = (isset($formData['comparing_sources']) AND $formData['comparing_sources'] != "") ? $formData['comparing_sources'] : array();
		$similarityRate = (isset($formData['similarity_rate']) AND $formData['similarity_rate'] != "") ? trim($formData['similarity_rate']) : null;
		$comparisonOption = (isset($formData['comparison_option']) AND $formData['comparison_option'] != "") ? trim($formData['comparison_option']) : null;
		$comparisonName = (isset($formData['comparison_name']) AND $formData['comparison_name'] != "") ? trim($formData['comparison_name']) : null;
		$comparison_language = (isset($formData['comparison_language']) AND $formData['comparison_language'] != "") ? trim($formData['comparison_language']) : null;
		$allSourcers = array();
		$escapeSymptomIds = array();

		$comparedSourcersOfInitialSource = array();
		$symptomConQueryCondition = '';
		$comparison_initial_source_id = $initialSource;
		if($comparison_initial_source_id != "")
			array_push($allSourcers, $comparison_initial_source_id);
		foreach ($comparingSources as $cSourceKey => $cSourceVal) {
			$cSourceVal = explode(',', $cSourceVal);
			foreach ($cSourceVal as $key => $value) {
				array_push($allSourcers, $value);
			}
		}

		if(!empty($allSourcers)){
			$returnedIds = getAllComparedSourceIds($allSourcers);
			if(!empty($returnedIds)){
				foreach ($returnedIds as $IdVal) {
					if(!in_array($IdVal, $allSourcers))
						array_push($allSourcers, $IdVal);
				}
			}	
		}

		// Collecting initial source's already compared sources ids of initial source
		$initialQuelleIdInArr = explode(',', $comparison_initial_source_id);
		if(!empty($initialQuelleIdInArr)){
			$returnedIds = getAllComparedSourceIds($initialQuelleIdInArr);
			if(!empty($returnedIds)){
				foreach ($returnedIds as $IdVal) {
					if(!in_array($IdVal, $comparedSourcersOfInitialSource))
						array_push($comparedSourcersOfInitialSource, $IdVal);
				}
			}	
		}

		$conditionIds = (!empty($allSourcers)) ? rtrim(implode(',', $allSourcers), ',') : null;
		if($conditionIds != "")
			$symptomConQueryCondition = " AND (initial_source_id IN (".$conditionIds.") AND comparing_source_id IN (".$conditionIds."))";
		if($arzneiId != "")
			$symptomConQueryCondition .= " AND source_arznei_id = '".$arzneiId."'"; 
		
		$comparing_source_ids = "";
		if(!empty($comparingSources))
			$comparing_source_ids = implode(",", $comparingSources);
		$comparison_name = mysqli_real_escape_string($db, $comparisonName);
		$isThereAnyTransactionError = 0;
		/* MySQL Transaction START */
		try{
			$db->begin_transaction();
			$newQuelleJahr = null;
			$iniSourceInfoQuery = $db->query("SELECT jahr FROM quelle WHERE quelle_id = ".$comparison_initial_source_id);
			if($iniSourceInfoQuery->num_rows > 0){
				$iniSourceInfoData = mysqli_fetch_assoc($iniSourceInfoQuery);
				$newQuelleJahr = (isset($iniSourceInfoData['jahr']) AND $iniSourceInfoData['jahr'] != "") ? mysqli_real_escape_string($db, trim($iniSourceInfoData['jahr'])) : null;
			}

			// quelle_type_id = 3 means Saved comparison/Materia Medica
			$quelleInsertQuery="INSERT INTO quelle (quelle_type_id, code, titel, jahr, ersteller_datum) VALUES (3, NULLIF('".$comparison_name."', ''), NULLIF('".$comparison_name."', ''), NULLIF('".$newQuelleJahr."', ''), NULLIF('".$date."', ''))";
			$db->query($quelleInsertQuery);
			$newQuelleId = $db->insert_id;
			// ADD IN THE BACKUP
			$backupQuelleInsertQuery="INSERT INTO quelle_backup (quelle_type_id, code, titel, jahr, ersteller_datum) VALUES (3, NULLIF('".$comparison_name."', ''), NULLIF('".$comparison_name."', ''), NULLIF('".$newQuelleJahr."', ''), NULLIF('".$date."', ''))";
			$db->query($backupQuelleInsertQuery);
			$backupNewQuelleId = $db->insert_id;

			if($comparison_language == "en"){
				$importing_language = "en";
				$is_symptoms_available_in_de = 0;
				$is_symptoms_available_in_en = 1;
			} else {
				$importing_language = "de";
				$is_symptoms_available_in_de = 1;
				$is_symptoms_available_in_en = 0;
			} 
			$quelleSymptomsMasterInsertQuery="INSERT INTO quelle_import_master (import_rule, importing_language, is_symptoms_available_in_de, is_symptoms_available_in_en, arznei_id, quelle_id, ersteller_datum) VALUES ('default_setting', NULLIF('".$importing_language."', ''), NULLIF('".$is_symptoms_available_in_de."', ''), NULLIF('".$is_symptoms_available_in_en."', ''), NULLIF('".$arzneiId."', ''), NULLIF('".$newQuelleId."', ''), '".$date."')";
            $db->query($quelleSymptomsMasterInsertQuery);
            $quelleSymptomsMasterId = $db->insert_id;
            // ADD IN THE BACKUP
            $quelleSymptomsMasterBackupInsertQuery="INSERT INTO quelle_import_master_backup (import_rule, importing_language, is_symptoms_available_in_de, is_symptoms_available_in_en, arznei_id, quelle_id, original_quelle_id, ersteller_datum) VALUES ('default_setting', NULLIF('".$importing_language."', ''), NULLIF('".$is_symptoms_available_in_de."', ''), NULLIF('".$is_symptoms_available_in_en."', ''), NULLIF('".$arzneiId."', ''), NULLIF('".$backupNewQuelleId."', ''), NULLIF('".$newQuelleId."', ''), '".$date."')";
            $db->query($quelleSymptomsMasterBackupInsertQuery);
            $quelleSymptomsMasterBackupId = $db->insert_id;

            
            // Making arznei quelle relationship
        	$arzneiQuelleResult = $db->query("SELECT arznei_id FROM arznei_quelle where arznei_id = '".$arzneiId."' AND quelle_id = '".$newQuelleId."'");
			if($arzneiQuelleResult->num_rows == 0){
				$arzneiQuelleInsertQuery="INSERT INTO arznei_quelle (arznei_id, quelle_id, ersteller_datum) VALUES ('".$arzneiId."', '".$newQuelleId."', '".$date."')";
        		$db->query($arzneiQuelleInsertQuery);  
			} 

			/* Insert Symptoms START */
            $symptomResult = $db->query("SELECT id, final_version_de, final_version_en, is_final_version_available FROM quelle_import_test WHERE quelle_id = '".$comparison_initial_source_id."' AND arznei_id = '".$arzneiId."' AND is_appended_symptom_active = 1");
			if($symptomResult->num_rows > 0){
				while($symptomData = mysqli_fetch_array($symptomResult)){
					$mainSymtomId = "";
					$addResult = addTheSymptomInSaveOperation($symptomData['id'], $quelleSymptomsMasterId, $quelleSymptomsMasterBackupId, $newQuelleId, $backupNewQuelleId);
					if($addResult['status'] === true)
					{
						$mainSymtomId = $addResult['return_data']['symptom_id'];
						$mainBackupSymtomId = $addResult['return_data']['backup_symptom_id'];
					}
					else
					{
						$db->rollback();
						$returnArr['status'] = false;
		    			$returnArr['message'] = $addResult['message'];
		    			return $returnArr;
					}
					if($mainSymtomId != "")
					{
						// If the the symptom has final version then adding that FV info in a separate table to use in the backup sets
						if($symptomData['is_final_version_available'] != 0){
							$checkExistanceQuery = $db->query("SELECT id FROM final_version_symptoms_info_for_backups WHERE symptom_id = '".$symptomData['id']."' AND saved_comparisons_backup_id = '".$bckup_saved_comparison_master_id."'");
							if($checkExistanceQuery->num_rows == 0){
								$FVinfoInsertQuery="INSERT INTO final_version_symptoms_info_for_backups (saved_comparisons_backup_id, symptom_id, final_version_de, final_version_en, is_final_version_available) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$symptomData['id']."', ''), NULLIF('".$symptomData['final_version_de']."', ''), NULLIF('".$symptomData['final_version_en']."', ''), '".$symptomData['is_final_version_available']."')";
					            $db->query($FVinfoInsertQuery);
							}
						} 

						// Adding the newly appended symptoms details
						$checkAppendSymptomArr = array($symptomData['id'], $mainSymtomId);
						foreach ($checkAppendSymptomArr as $appendedSymKey => $appendSymVal) {
							$isSymptomAppendedResult = $db->query("SELECT * FROM appended_symptoms WHERE symptom_id = '".$appendSymVal."'");
							if($isSymptomAppendedResult->num_rows > 0){
								$appendedSymptomInsertQuery="INSERT INTO appended_symptoms_backup (saved_comparisons_backup_id, symptom_id) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$appendSymVal."', ''))";
				            	$db->query($appendedSymptomInsertQuery);
							}
						}

						/* Now adding all connected symptoms in escapeSymptomIds array and also insert the paste connection one's */
						$connectedSymptomResult = $db->query("SELECT id, source_arznei_id, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, connection_or_paste_type FROM symptom_connections WHERE (initial_source_symptom_id = '".$symptomData['id']."' OR comparing_source_symptom_id = '".$symptomData['id']."') AND (is_connected = 1 OR is_pasted = 1)".$symptomConQueryCondition);
						if($connectedSymptomResult->num_rows > 0){
							while($conRow = mysqli_fetch_array($connectedSymptomResult)){


								// If this Symptom is an earalierly appended symptom then we have add this information in "appended_symptoms" table
								$iniSymptomAppendedInfo = $db->query("SELECT * FROM quelle_import_test WHERE id = ".$conRow['initial_source_symptom_id']);
								if($iniSymptomAppendedInfo->num_rows > 0){
									$iniSymptomAppendedData = mysqli_fetch_assoc($iniSymptomAppendedInfo);
									if($iniSymptomAppendedData['is_symptom_appended'] == 1 AND $iniSymptomAppendedData['is_appended_symptom_active'] == 1) {
										$iniAppendedSymptomsQuery=$db->query("SELECT id FROM appended_symptoms WHERE symptom_id = '".$conRow['initial_source_symptom_id']."'");
						            	if($iniAppendedSymptomsQuery->num_rows == 0){
						            		$iniAppendedSymptomInsertQuery = "INSERT INTO appended_symptoms (symptom_id) VALUES (NULLIF('".$conRow['initial_source_symptom_id']."', ''))";
				            				$db->query($iniAppendedSymptomInsertQuery);
				            			}
				            			$iniAppendedSymptomsQueryInBackup=$db->query("SELECT id FROM appended_symptoms_backup WHERE symptom_id = '".$conRow['initial_source_symptom_id']."' AND saved_comparisons_backup_id ='".$bckup_saved_comparison_master_id."'");
						            	if($iniAppendedSymptomsQueryInBackup->num_rows == 0){
				            				$iniAppendedSymptomInsertQueryInBackup="INSERT INTO appended_symptoms_backup (saved_comparisons_backup_id, symptom_id) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$conRow['initial_source_symptom_id']."', ''))";
				            				$db->query($iniAppendedSymptomInsertQueryInBackup);
						            	}
									}
								}
								// If this Symptom is an earalierly appended symptom then we have add this information in "appended_symptoms" table
								$comSymptomAppendedInfo = $db->query("SELECT * FROM quelle_import_test WHERE id = ".$conRow['comparing_source_symptom_id']);
								if($comSymptomAppendedInfo->num_rows > 0){
									$comSymptomAppendedData = mysqli_fetch_assoc($comSymptomAppendedInfo);
									if($comSymptomAppendedData['is_symptom_appended'] == 1 AND $comSymptomAppendedData['is_appended_symptom_active'] == 1) {
										$comAppendedSymptomsQuery=$db->query("SELECT id FROM appended_symptoms WHERE symptom_id = '".$conRow['comparing_source_symptom_id']."'");
						            	if($comAppendedSymptomsQuery->num_rows == 0){
						            		$comAppendedSymptomInsertQuery = "INSERT INTO appended_symptoms (symptom_id) VALUES (NULLIF('".$conRow['comparing_source_symptom_id']."', ''))";
				            				$db->query($comAppendedSymptomInsertQuery);
				            			}
				            			$comAppendedSymptomsQueryInBackup=$db->query("SELECT id FROM appended_symptoms_backup WHERE symptom_id = '".$conRow['comparing_source_symptom_id']."' AND saved_comparisons_backup_id ='".$bckup_saved_comparison_master_id."'");
						            	if($comAppendedSymptomsQueryInBackup->num_rows == 0){
				            				$comAppendedSymptomInsertQueryInBackup="INSERT INTO appended_symptoms_backup (saved_comparisons_backup_id, symptom_id) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$conRow['comparing_source_symptom_id']."', ''))";
				            				$db->query($comAppendedSymptomInsertQueryInBackup);
						            	}
									}
								}

								$source_arznei_id = (isset($conRow['source_arznei_id']) AND $conRow['source_arznei_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['source_arznei_id']) : null;
								$conversion_initial_source_id = (isset($conRow['conversion_initial_source_id']) AND $conRow['conversion_initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['conversion_initial_source_id']) : null;
								$conversion_comparing_source_id = (isset($conRow['conversion_comparing_source_id']) AND $conRow['conversion_comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['conversion_comparing_source_id']) : null;
								$connection_language = (isset($conRow['connection_language']) AND $conRow['connection_language'] !="" ) ? mysqli_real_escape_string($db, $conRow['connection_language']) : null;

								if($conRow['initial_source_symptom_id'] == $symptomData['id']){
									$oppositeSymptomId = $conRow['comparing_source_symptom_id'];

									$is_initial_source = 1;
									$initial_source_type = 'backup';
									$comparing_source_type = 'original';
									$initial_source_id = (isset($newQuelleId) AND $newQuelleId !="" ) ? mysqli_real_escape_string($db, $newQuelleId) : null;
									$comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
									// FOR BACKUP TABLE QUERY
									$backup_initial_source_id = (isset($backupNewQuelleId) AND $backupNewQuelleId !="" ) ? mysqli_real_escape_string($db, $backupNewQuelleId) : null;
									$backup_comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
									// FOR BACKUP TABLE QUERY
									// RAW COMPARISON CONNECTIONS FOR BACKUP
									$raw_initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
									$raw_comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
									$raw_initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
									$raw_comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;
									// RAW COMPARISON CONNECTIONS FOR BACKUP

									$initial_source_code = (isset($comparison_name) AND $comparison_name !="" ) ? mysqli_real_escape_string($db, $comparison_name) : null;
									$comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;

									$initial_source_symptom_id = (isset($mainSymtomId) AND $mainSymtomId !="" ) ? mysqli_real_escape_string($db, $mainSymtomId) : null;
									$comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
									// FOR BACKUP TABLE QUERY
									$backup_initial_source_symptom_id = (isset($mainBackupSymtomId) AND $mainBackupSymtomId !="" ) ? mysqli_real_escape_string($db, $mainBackupSymtomId) : null;
									$backup_comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
									// FOR BACKUP TABLE QUERY
									// RAW COMPARISON CONNECTIONS FOR BACKUP
									$raw_initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
									$raw_comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
									// RAW COMPARISON CONNECTIONS FOR BACKUP
									$initial_source_symptom_highlighted_de = (isset($conRow['initial_source_symptom_highlighted_de']) AND $conRow['initial_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_de']) : null;
									$initial_source_symptom_highlighted_en = (isset($conRow['initial_source_symptom_highlighted_en']) AND $conRow['initial_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_en']) : null;
									$comparing_source_symptom_highlighted_de = (isset($conRow['comparing_source_symptom_highlighted_de']) AND $conRow['comparing_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_de']) : null;
									$comparing_source_symptom_highlighted_en = (isset($conRow['comparing_source_symptom_highlighted_en']) AND $conRow['comparing_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_en']) : null;
									$initial_source_symptom_de = (isset($conRow['initial_source_symptom_de']) AND $conRow['initial_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_de']) : null;
									$initial_source_symptom_en = (isset($conRow['initial_source_symptom_en']) AND $conRow['initial_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_en']) : null;
									$comparing_source_symptom_de = (isset($conRow['comparing_source_symptom_de']) AND $conRow['comparing_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_de']) : null;
									$comparing_source_symptom_en = (isset($conRow['comparing_source_symptom_en']) AND $conRow['comparing_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_en']) : null;
									$matching_percentage = (isset($conRow['matching_percentage']) AND $conRow['matching_percentage'] !="" ) ? mysqli_real_escape_string($db, $conRow['matching_percentage']) : null;
									$is_connected = $conRow['is_connected'];
									$is_ns_connect = $conRow['is_ns_connect'];
									$ns_connect_note = (isset($conRow['ns_connect_note']) AND $conRow['ns_connect_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_connect_note']) : null;
									$is_pasted = $conRow['is_pasted'];
									$is_ns_paste = $conRow['is_ns_paste'];
									$ns_paste_note = (isset($conRow['ns_paste_note']) AND $conRow['ns_paste_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_paste_note']) : null;
									$connection_or_paste_type = (isset($conRow['connection_or_paste_type']) AND $conRow['connection_or_paste_type'] !="" ) ? mysqli_real_escape_string($db, $conRow['connection_or_paste_type']) : null;
								}
								else
								{
									$oppositeSymptomId = $conRow['initial_source_symptom_id'];

									$is_initial_source = 0;
									$comparing_source_type = "backup";
									$initial_source_type = "original";
									$initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
									$comparing_source_id = (isset($newQuelleId) AND $newQuelleId !="" ) ? mysqli_real_escape_string($db, $newQuelleId) : null;
									// FOR BACKUP TABLE QUERY
									$backup_initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
									$backup_comparing_source_id = (isset($backupNewQuelleId) AND $backupNewQuelleId !="" ) ? mysqli_real_escape_string($db, $backupNewQuelleId) : null;
									// RAW COMPARISON CONNECTIONS FOR BACKUP
									$raw_initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
									$raw_comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
									$raw_initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
									$raw_comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;
									// RAW COMPARISON CONNECTIONS FOR BACKUP

									$initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
									$comparing_source_code = (isset($comparison_name) AND $comparison_name !="" ) ? mysqli_real_escape_string($db, $comparison_name) : null;
									$initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
									$comparing_source_symptom_id = (isset($mainSymtomId) AND $mainSymtomId !="" ) ? mysqli_real_escape_string($db, $mainSymtomId) : null;
									// FOR BACKUP TABLE QUERY
									$backup_initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
									$backup_comparing_source_symptom_id = (isset($mainBackupSymtomId) AND $mainBackupSymtomId !="" ) ? mysqli_real_escape_string($db, $mainBackupSymtomId) : null;
									// FOR BACKUP TABLE QUERY
									// RAW COMPARISON CONNECTIONS FOR BACKUP
									$raw_initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
									$raw_comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
									// RAW COMPARISON CONNECTIONS FOR BACKUP
									$initial_source_symptom_highlighted_de = (isset($conRow['initial_source_symptom_highlighted_de']) AND $conRow['initial_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_de']) : null;
									$initial_source_symptom_highlighted_en = (isset($conRow['initial_source_symptom_highlighted_en']) AND $conRow['initial_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_en']) : null;
									$comparing_source_symptom_highlighted_de = (isset($conRow['comparing_source_symptom_highlighted_de']) AND $conRow['comparing_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_de']) : null;
									$comparing_source_symptom_highlighted_en = (isset($conRow['comparing_source_symptom_highlighted_en']) AND $conRow['comparing_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_en']) : null;
									$initial_source_symptom_de = (isset($conRow['initial_source_symptom_de']) AND $conRow['initial_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_de']) : null;
									$initial_source_symptom_en = (isset($conRow['initial_source_symptom_en']) AND $conRow['initial_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_en']) : null;
									$comparing_source_symptom_de = (isset($conRow['comparing_source_symptom_de']) AND $conRow['comparing_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_de']) : null;
									$comparing_source_symptom_en = (isset($conRow['comparing_source_symptom_en']) AND $conRow['comparing_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_en']) : null;
									$matching_percentage = (isset($conRow['matching_percentage']) AND $conRow['matching_percentage'] !="" ) ? mysqli_real_escape_string($db, $conRow['matching_percentage']) : null;
									$is_connected = $conRow['is_connected'];
									$is_ns_connect = $conRow['is_ns_connect'];
									$ns_connect_note = (isset($conRow['ns_connect_note']) AND $conRow['ns_connect_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_connect_note']) : null;
									$is_pasted = $conRow['is_pasted'];
									$is_ns_paste = $conRow['is_ns_paste'];
									$ns_paste_note = (isset($conRow['ns_paste_note']) AND $conRow['ns_paste_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_paste_note']) : null;
									$connection_or_paste_type = (isset($conRow['connection_or_paste_type']) AND $conRow['connection_or_paste_type'] !="" ) ? mysqli_real_escape_string($db, $conRow['connection_or_paste_type']) : null;
								}

								if(!in_array($oppositeSymptomId, $escapeSymptomIds))
									array_push($escapeSymptomIds, $oppositeSymptomId);

								if($oppositeSymptomId != ""){
									$oppositeSymptomResult = $db->query("SELECT id, final_version_de, final_version_en, is_final_version_available FROM quelle_import_test WHERE id = '".$oppositeSymptomId."' AND arznei_id = '".$arzneiId."'");
									if($oppositeSymptomResult->num_rows > 0){
										$oppositeSymptomData = mysqli_fetch_assoc($oppositeSymptomResult);
										// If the the symptom has final version then adding that FV info in a separate table to use in the backup sets
										if($oppositeSymptomData['id'] != "" AND $oppositeSymptomData['is_final_version_available'] != 0){
											$checkExistanceQuery = $db->query("SELECT id FROM final_version_symptoms_info_for_backups WHERE symptom_id = '".$oppositeSymptomId."' AND saved_comparisons_backup_id = '".$bckup_saved_comparison_master_id."'");
											if($checkExistanceQuery->num_rows == 0){
												$FVinfoInsertQuery="INSERT INTO final_version_symptoms_info_for_backups (saved_comparisons_backup_id, symptom_id, final_version_de, final_version_en, is_final_version_available) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$oppositeSymptomId."', ''), NULLIF('".$oppositeSymptomData['final_version_de']."', ''), NULLIF('".$oppositeSymptomData['final_version_en']."', ''), '".$oppositeSymptomData['is_final_version_available']."')";
									            $db->query($FVinfoInsertQuery);
											}
										}
									}
								}

								if($conRow['is_pasted'] == 1) 
								{
									if($conRow['initial_source_symptom_id'] == $symptomData['id'])
										$examining_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
									else
										$examining_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;

									// Add pasted symptom separately as initial symptom only when it is not from previously saved comparison sources of the initial source 
									if(!in_array($examining_source_id, $comparedSourcersOfInitialSource)){
										// For pasted symptoms
										$addedSymtomId = "";
										$addResult2 = addTheSymptomInSaveOperation($oppositeSymptomId, $quelleSymptomsMasterId, $quelleSymptomsMasterBackupId, $newQuelleId, $backupNewQuelleId);
										if($addResult2['status'] === true){
											$addedSymtomId = $addResult2['return_data']['symptom_id'];
											$backupAddedSymtomId = $addResult2['return_data']['backup_symptom_id'];
										}
										else
										{
											$db->rollback();
											$returnArr['status'] = false;
							    			$returnArr['message'] = $addResult2['message'];
							    			return $returnArr;
										}
										if($addedSymtomId != ""){

											// Adding the newly appended symptoms details
											$checkAppendSymptomArr = array($oppositeSymptomId, $addedSymtomId);
											foreach ($checkAppendSymptomArr as $appendedSymKey => $appendSymVal) {
												$isSymptomAppendedResult = $db->query("SELECT * FROM appended_symptoms WHERE symptom_id = '".$appendSymVal."'");
												if($isSymptomAppendedResult->num_rows > 0){
													$appendedSymptomInsertQuery="INSERT INTO appended_symptoms_backup (saved_comparisons_backup_id, symptom_id) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$appendSymVal."', ''))";
									            	$db->query($appendedSymptomInsertQuery);
												}
											}

											if($conRow['initial_source_symptom_id'] == $symptomData['id']){
												$initial_source_type = 'original';
												$comparing_source_type = 'backup';
												$initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
												$comparing_source_symptom_id = (isset($addedSymtomId) AND $addedSymtomId !="" ) ? mysqli_real_escape_string($db, $addedSymtomId) : null;
												// FOR BACKUP TABLE QUERY
												$backup_initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
												$backup_comparing_source_symptom_id = (isset($backupAddedSymtomId) AND $backupAddedSymtomId !="" ) ? mysqli_real_escape_string($db, $backupAddedSymtomId) : null;
												// FOR BACKUP TABLE QUERY
												// RAW COMPARISON CONNECTIONS FOR BACKUP
												$raw_initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
												$raw_comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
												$raw_initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
												$raw_comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;
												// RAW COMPARISON CONNECTIONS FOR BACKUP
												$comparing_source_code = (isset($comparison_name) AND $comparison_name !="" ) ? mysqli_real_escape_string($db, $comparison_name) : null;
												$initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
												$initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
												$comparing_source_id = (isset($newQuelleId) AND $newQuelleId !="" ) ? mysqli_real_escape_string($db, $newQuelleId) : null;
												// FOR BACKUP TABLE QUERY
												$backup_initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
												$backup_comparing_source_id = (isset($backupNewQuelleId) AND $backupNewQuelleId !="" ) ? mysqli_real_escape_string($db, $backupNewQuelleId) : null;
												// FOR BACKUP TABLE QUERY
												// RAW COMPARISON CONNECTIONS FOR BACKUP
												$raw_initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
												$raw_comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
												// RAW COMPARISON CONNECTIONS FOR BACKUP

											}
											else{
												$initial_source_type = 'backup';
												$comparing_source_type = 'original';
												$initial_source_symptom_id = (isset($addedSymtomId) AND $addedSymtomId !="" ) ? mysqli_real_escape_string($db, $addedSymtomId) : null;
												$comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
												// FOR BACKUP TABLE QUERY
												$backup_initial_source_symptom_id = (isset($backupAddedSymtomId) AND $backupAddedSymtomId !="" ) ? mysqli_real_escape_string($db, $backupAddedSymtomId) : null;
												$backup_comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
												// FOR BACKUP TABLE QUERY
												// RAW COMPARISON CONNECTIONS FOR BACKUP
												$raw_initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
												$raw_comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
												$raw_initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
												$raw_comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;
												// RAW COMPARISON CONNECTIONS FOR BACKUP
												$initial_source_code = (isset($comparison_name) AND $comparison_name !="" ) ? mysqli_real_escape_string($db, $comparison_name) : null;
												$comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;
												$initial_source_id = (isset($newQuelleId) AND $newQuelleId !="" ) ? mysqli_real_escape_string($db, $newQuelleId) : null;
												$comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
												// FOR BACKUP TABLE QUERY
												$backup_initial_source_id = (isset($backupNewQuelleId) AND $backupNewQuelleId !="" ) ? mysqli_real_escape_string($db, $backupNewQuelleId) : null;
												$backup_comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
												// FOR BACKUP TABLE QUERY
												// RAW COMPARISON CONNECTIONS FOR BACKUP
												$raw_initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
												$raw_comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
												// RAW COMPARISON CONNECTIONS FOR BACKUP
											}
										}
									}
								}

								$query = "INSERT INTO symptom_connections (source_arznei_id, is_initial_source, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, is_saved, connection_or_paste_type) VALUES (NULLIF('".$source_arznei_id."', ''), '".$is_initial_source."', NULLIF('".$initial_source_id."', ''), NULLIF('".$comparing_source_id."', ''), NULLIF('".$conversion_initial_source_id."', ''), NULLIF('".$conversion_comparing_source_id."', ''), NULLIF('".$initial_source_code."', ''), NULLIF('".$comparing_source_code."', ''), NULLIF('".$initial_source_symptom_id."', ''), NULLIF('".$comparing_source_symptom_id."', ''), NULLIF('".$initial_source_symptom_highlighted_de."', ''), NULLIF('".$initial_source_symptom_highlighted_en."', ''), NULLIF('".$comparing_source_symptom_highlighted_de."', ''), NULLIF('".$comparing_source_symptom_highlighted_en."', ''), NULLIF('".$initial_source_symptom_de."', ''), NULLIF('".$initial_source_symptom_en."', ''), NULLIF('".$comparing_source_symptom_de."', ''), NULLIF('".$comparing_source_symptom_en."', ''), NULLIF('".$connection_language."', ''), '".$matching_percentage."', '".$is_connected."', '".$is_ns_connect."', NULLIF('".$ns_connect_note."', ''), '".$is_pasted."', '".$is_ns_paste."', NULLIF('".$ns_paste_note."', ''), 1, NULLIF('".$connection_or_paste_type."', ''))";
								$db->query($query);
								
								// FOR BACKUP TABLE QUERY
								$backupQuery = "INSERT INTO symptom_connections_backup (saved_comparisons_backup_id, initial_source_type, comparing_source_type, source_arznei_id, is_initial_source, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, is_saved, connection_or_paste_type) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), '".$initial_source_type."', '".$comparing_source_type."', NULLIF('".$source_arznei_id."', ''), '".$is_initial_source."', NULLIF('".$backup_initial_source_id."', ''), NULLIF('".$backup_comparing_source_id."', ''), NULLIF('".$conversion_initial_source_id."', ''), NULLIF('".$conversion_comparing_source_id."', ''), NULLIF('".$initial_source_code."', ''), NULLIF('".$comparing_source_code."', ''), NULLIF('".$backup_initial_source_symptom_id."', ''), NULLIF('".$backup_comparing_source_symptom_id."', ''), NULLIF('".$initial_source_symptom_highlighted_de."', ''), NULLIF('".$initial_source_symptom_highlighted_en."', ''), NULLIF('".$comparing_source_symptom_highlighted_de."', ''), NULLIF('".$comparing_source_symptom_highlighted_en."', ''), NULLIF('".$initial_source_symptom_de."', ''), NULLIF('".$initial_source_symptom_en."', ''), NULLIF('".$comparing_source_symptom_de."', ''), NULLIF('".$comparing_source_symptom_en."', ''), NULLIF('".$connection_language."', ''), '".$matching_percentage."', '".$is_connected."', '".$is_ns_connect."', NULLIF('".$ns_connect_note."', ''), '".$is_pasted."', '".$is_ns_paste."', NULLIF('".$ns_paste_note."', ''), 1, NULLIF('".$connection_or_paste_type."', ''))";
								$db->query($backupQuery);
								
								// RAW COMPARISON CONNECTIONS FOR BACKUP
								$backupRawConnQuery = "INSERT INTO symptom_connections_backup (saved_comparisons_backup_id, source_arznei_id, is_initial_source, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, is_saved, connection_or_paste_type) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$source_arznei_id."', ''), '".$is_initial_source."', NULLIF('".$raw_initial_source_id."', ''), NULLIF('".$raw_comparing_source_id."', ''), NULLIF('".$conversion_initial_source_id."', ''), NULLIF('".$conversion_comparing_source_id."', ''), NULLIF('".$raw_initial_source_code."', ''), NULLIF('".$raw_comparing_source_code."', ''), NULLIF('".$raw_initial_source_symptom_id."', ''), NULLIF('".$raw_comparing_source_symptom_id."', ''), NULLIF('".$initial_source_symptom_highlighted_de."', ''), NULLIF('".$initial_source_symptom_highlighted_en."', ''), NULLIF('".$comparing_source_symptom_highlighted_de."', ''), NULLIF('".$comparing_source_symptom_highlighted_en."', ''), NULLIF('".$initial_source_symptom_de."', ''), NULLIF('".$initial_source_symptom_en."', ''), NULLIF('".$comparing_source_symptom_de."', ''), NULLIF('".$comparing_source_symptom_en."', ''), NULLIF('".$connection_language."', ''), '".$matching_percentage."', '".$is_connected."', '".$is_ns_connect."', NULLIF('".$ns_connect_note."', ''), '".$is_pasted."', '".$is_ns_paste."', NULLIF('".$ns_paste_note."', ''), 1, NULLIF('".$connection_or_paste_type."', ''))";
								$db->query($backupRawConnQuery);

								$updQuery = "UPDATE symptom_connections SET is_saved = 1 WHERE id = ".$conRow['id'];
            					$db->query($updQuery);

            					// Delete this symptom's previous version in the backup_connected_symptoms_details table and add the current one
	            				deletePreviousAddNewBackupConnectedSymptom($conRow['initial_source_symptom_id'], $bckup_saved_comparison_master_id);
	            				deletePreviousAddNewBackupConnectedSymptom($conRow['comparing_source_symptom_id'], $bckup_saved_comparison_master_id);
							}
						}
					}
				}
			}


			// Add remaining un-matched comparative symptoms
			$escapeSymptomCondition = "";
			if(!empty($escapeSymptomIds)){
				$uniqueMatchedSymptomIds = array_unique($escapeSymptomIds);
				$matchedSymptomIdsString = implode(',', $uniqueMatchedSymptomIds);
				$escapeSymptomCondition = "AND quelle_import_test.id NOT IN (".$matchedSymptomIdsString.")";
			}
			$comparingSourceIds = (!empty($comparingSources)) ? rtrim(implode(',', $comparingSources), ',') : null;
			if($comparingSourceIds != "")
			{
				$restOfComparingSymptomResultCount = $db->query("SELECT quelle_import_test.id, quelle_import_test.final_version_de, quelle_import_test.final_version_en, quelle_import_test.is_final_version_available FROM quelle_import_test WHERE quelle_import_test.arznei_id = '".$arzneiId."' AND quelle_import_test.is_appended_symptom_active = 1 AND quelle_import_test.quelle_id IN (".$comparingSourceIds.") ".$escapeSymptomCondition);
				if($restOfComparingSymptomResultCount->num_rows > 0){
					while($symptomData = mysqli_fetch_array($restOfComparingSymptomResultCount)){
						$mainSymtomId = "";
						$addResult = addTheSymptomInSaveOperation($symptomData['id'], $quelleSymptomsMasterId, $quelleSymptomsMasterBackupId, $newQuelleId, $backupNewQuelleId);
						if($addResult['status'] === true)
						{
							$mainSymtomId = $addResult['return_data']['symptom_id'];
							$mainBackupSymtomId = $addResult['return_data']['backup_symptom_id'];
						}
						else
						{
							$db->rollback();
							$returnArr['status'] = false;
			    			$returnArr['message'] = $addResult['message'];
			    			return $returnArr;
						}
						if($mainSymtomId != "")
						{

							// If the the symptom has final version then adding that FV info in a separate table to use in the backup sets
							if($symptomData['is_final_version_available'] != 0){
								$checkExistanceQuery = $db->query("SELECT id FROM final_version_symptoms_info_for_backups WHERE symptom_id = '".$symptomData['id']."' AND saved_comparisons_backup_id = '".$bckup_saved_comparison_master_id."'");
								if($checkExistanceQuery->num_rows == 0){
									$FVinfoInsertQuery="INSERT INTO final_version_symptoms_info_for_backups (saved_comparisons_backup_id, symptom_id, final_version_de, final_version_en, is_final_version_available) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$symptomData['id']."', ''), NULLIF('".$symptomData['final_version_de']."', ''), NULLIF('".$symptomData['final_version_en']."', ''), '".$symptomData['is_final_version_available']."')";
						            $db->query($FVinfoInsertQuery);
								}
							} 

							// Adding the newly appended symptoms details
							$checkAppendSymptomArr = array($symptomData['id'], $mainSymtomId);
							foreach ($checkAppendSymptomArr as $appendedSymKey => $appendSymVal) {
								$isSymptomAppendedResult = $db->query("SELECT * FROM appended_symptoms WHERE symptom_id = '".$appendSymVal."'");
								if($isSymptomAppendedResult->num_rows > 0){
									$appendedSymptomInsertQuery="INSERT INTO appended_symptoms_backup (saved_comparisons_backup_id, symptom_id) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$appendSymVal."', ''))";
					            	$db->query($appendedSymptomInsertQuery);
								}
							}

							/* Now adding all connected symptoms in escapeSymptomIds array and also insert the paste connection one's */
							$connectedSymptomResult = $db->query("SELECT id, source_arznei_id, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, connection_or_paste_type FROM symptom_connections WHERE (initial_source_symptom_id = '".$symptomData['id']."' OR comparing_source_symptom_id = '".$symptomData['id']."') AND (is_connected = 1 OR is_pasted = 1)".$symptomConQueryCondition);
							if($connectedSymptomResult->num_rows > 0){
								while($conRow = mysqli_fetch_array($connectedSymptomResult)){

									// If this Symptom is an earalierly appended symptom then we have add this information in "appended_symptoms" table
									$iniSymptomAppendedInfo = $db->query("SELECT * FROM quelle_import_test WHERE id = ".$conRow['initial_source_symptom_id']);
									if($iniSymptomAppendedInfo->num_rows > 0){
										$iniSymptomAppendedData = mysqli_fetch_assoc($iniSymptomAppendedInfo);
										if($iniSymptomAppendedData['is_symptom_appended'] == 1 AND $iniSymptomAppendedData['is_appended_symptom_active'] == 1) {
											$iniAppendedSymptomsQuery=$db->query("SELECT id FROM appended_symptoms WHERE symptom_id = '".$conRow['initial_source_symptom_id']."'");
							            	if($iniAppendedSymptomsQuery->num_rows == 0){
							            		$iniAppendedSymptomInsertQuery = "INSERT INTO appended_symptoms (symptom_id) VALUES (NULLIF('".$conRow['initial_source_symptom_id']."', ''))";
					            				$db->query($iniAppendedSymptomInsertQuery);
					            			}
					            			$iniAppendedSymptomsQueryInBackup=$db->query("SELECT id FROM appended_symptoms_backup WHERE symptom_id = '".$conRow['initial_source_symptom_id']."' AND saved_comparisons_backup_id ='".$bckup_saved_comparison_master_id."'");
							            	if($iniAppendedSymptomsQueryInBackup->num_rows == 0){
					            				$iniAppendedSymptomInsertQueryInBackup="INSERT INTO appended_symptoms_backup (saved_comparisons_backup_id, symptom_id) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$conRow['initial_source_symptom_id']."', ''))";
					            				$db->query($iniAppendedSymptomInsertQueryInBackup);
							            	}
										}
									}
									// If this Symptom is an earalierly appended symptom then we have add this information in "appended_symptoms" table
									$comSymptomAppendedInfo = $db->query("SELECT * FROM quelle_import_test WHERE id = ".$conRow['comparing_source_symptom_id']);
									if($comSymptomAppendedInfo->num_rows > 0){
										$comSymptomAppendedData = mysqli_fetch_assoc($comSymptomAppendedInfo);
										if($comSymptomAppendedData['is_symptom_appended'] == 1 AND $comSymptomAppendedData['is_appended_symptom_active'] == 1) {
											$comAppendedSymptomsQuery=$db->query("SELECT id FROM appended_symptoms WHERE symptom_id = '".$conRow['comparing_source_symptom_id']."'");
							            	if($comAppendedSymptomsQuery->num_rows == 0){
							            		$comAppendedSymptomInsertQuery = "INSERT INTO appended_symptoms (symptom_id) VALUES (NULLIF('".$conRow['comparing_source_symptom_id']."', ''))";
					            				$db->query($comAppendedSymptomInsertQuery);
					            			}
					            			$comAppendedSymptomsQueryInBackup=$db->query("SELECT id FROM appended_symptoms_backup WHERE symptom_id = '".$conRow['comparing_source_symptom_id']."' AND saved_comparisons_backup_id ='".$bckup_saved_comparison_master_id."'");
							            	if($comAppendedSymptomsQueryInBackup->num_rows == 0){
					            				$comAppendedSymptomInsertQueryInBackup="INSERT INTO appended_symptoms_backup (saved_comparisons_backup_id, symptom_id) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$conRow['comparing_source_symptom_id']."', ''))";
					            				$db->query($comAppendedSymptomInsertQueryInBackup);
							            	}
										}
									}

									$source_arznei_id = (isset($conRow['source_arznei_id']) AND $conRow['source_arznei_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['source_arznei_id']) : null;
									$conversion_initial_source_id = (isset($conRow['conversion_initial_source_id']) AND $conRow['conversion_initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['conversion_initial_source_id']) : null;
									$conversion_comparing_source_id = (isset($conRow['conversion_comparing_source_id']) AND $conRow['conversion_comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['conversion_comparing_source_id']) : null;
									$connection_language = (isset($conRow['connection_language']) AND $conRow['connection_language'] !="" ) ? mysqli_real_escape_string($db, $conRow['connection_language']) : null;

									if($conRow['initial_source_symptom_id'] == $symptomData['id']){
										$oppositeSymptomId = $conRow['comparing_source_symptom_id'];

										$is_initial_source = 1;
										$initial_source_type = 'backup';
										$comparing_source_type = 'original';
										$initial_source_id = (isset($newQuelleId) AND $newQuelleId !="" ) ? mysqli_real_escape_string($db, $newQuelleId) : null;
										$comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
										// FOR BACKUP TABLE QUERY
										$backup_initial_source_id = (isset($backupNewQuelleId) AND $backupNewQuelleId !="" ) ? mysqli_real_escape_string($db, $backupNewQuelleId) : null;
										$backup_comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
										// FOR BACKUP TABLE QUERY
										// RAW COMPARISON CONNECTIONS FOR BACKUP
										$raw_initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
										$raw_comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
										$raw_initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
										$raw_comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;
										// RAW COMPARISON CONNECTIONS FOR BACKUP

										$initial_source_code = (isset($comparison_name) AND $comparison_name !="" ) ? mysqli_real_escape_string($db, $comparison_name) : null;
										$comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;

										$initial_source_symptom_id = (isset($mainSymtomId) AND $mainSymtomId !="" ) ? mysqli_real_escape_string($db, $mainSymtomId) : null;
										$comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
										// FOR BACKUP TABLE QUERY
										$backup_initial_source_symptom_id = (isset($mainBackupSymtomId) AND $mainBackupSymtomId !="" ) ? mysqli_real_escape_string($db, $mainBackupSymtomId) : null;
										$backup_comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
										// FOR BACKUP TABLE QUERY
										// RAW COMPARISON CONNECTIONS FOR BACKUP
										$raw_initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
										$raw_comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
										// RAW COMPARISON CONNECTIONS FOR BACKUP
										$initial_source_symptom_highlighted_de = (isset($conRow['initial_source_symptom_highlighted_de']) AND $conRow['initial_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_de']) : null;
										$initial_source_symptom_highlighted_en = (isset($conRow['initial_source_symptom_highlighted_en']) AND $conRow['initial_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_en']) : null;
										$comparing_source_symptom_highlighted_de = (isset($conRow['comparing_source_symptom_highlighted_de']) AND $conRow['comparing_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_de']) : null;
										$comparing_source_symptom_highlighted_en = (isset($conRow['comparing_source_symptom_highlighted_en']) AND $conRow['comparing_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_en']) : null;
										$initial_source_symptom_de = (isset($conRow['initial_source_symptom_de']) AND $conRow['initial_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_de']) : null;
										$initial_source_symptom_en = (isset($conRow['initial_source_symptom_en']) AND $conRow['initial_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_en']) : null;
										$comparing_source_symptom_de = (isset($conRow['comparing_source_symptom_de']) AND $conRow['comparing_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_de']) : null;
										$comparing_source_symptom_en = (isset($conRow['comparing_source_symptom_en']) AND $conRow['comparing_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_en']) : null;
										$matching_percentage = (isset($conRow['matching_percentage']) AND $conRow['matching_percentage'] !="" ) ? mysqli_real_escape_string($db, $conRow['matching_percentage']) : null;
										$is_connected = $conRow['is_connected'];
										$is_ns_connect = $conRow['is_ns_connect'];
										$ns_connect_note = (isset($conRow['ns_connect_note']) AND $conRow['ns_connect_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_connect_note']) : null;
										$is_pasted = $conRow['is_pasted'];
										$is_ns_paste = $conRow['is_ns_paste'];
										$ns_paste_note = (isset($conRow['ns_paste_note']) AND $conRow['ns_paste_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_paste_note']) : null;
										$connection_or_paste_type = (isset($conRow['connection_or_paste_type']) AND $conRow['connection_or_paste_type'] !="" ) ? mysqli_real_escape_string($db, $conRow['connection_or_paste_type']) : null;
									}
									else
									{
										$oppositeSymptomId = $conRow['initial_source_symptom_id'];

										$is_initial_source = 0;
										$comparing_source_type = "backup";
										$initial_source_type = "original";
										$initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
										$comparing_source_id = (isset($newQuelleId) AND $newQuelleId !="" ) ? mysqli_real_escape_string($db, $newQuelleId) : null;
										// FOR BACKUP TABLE QUERY
										$backup_initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
										$backup_comparing_source_id = (isset($backupNewQuelleId) AND $backupNewQuelleId !="" ) ? mysqli_real_escape_string($db, $backupNewQuelleId) : null;
										// RAW COMPARISON CONNECTIONS FOR BACKUP
										$raw_initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
										$raw_comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
										$raw_initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
										$raw_comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;
										// RAW COMPARISON CONNECTIONS FOR BACKUP

										$initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
										$comparing_source_code = (isset($comparison_name) AND $comparison_name !="" ) ? mysqli_real_escape_string($db, $comparison_name) : null;
										$initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
										$comparing_source_symptom_id = (isset($mainSymtomId) AND $mainSymtomId !="" ) ? mysqli_real_escape_string($db, $mainSymtomId) : null;
										// FOR BACKUP TABLE QUERY
										$backup_initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
										$backup_comparing_source_symptom_id = (isset($mainBackupSymtomId) AND $mainBackupSymtomId !="" ) ? mysqli_real_escape_string($db, $mainBackupSymtomId) : null;
										// FOR BACKUP TABLE QUERY
										// RAW COMPARISON CONNECTIONS FOR BACKUP
										$raw_initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
										$raw_comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
										// RAW COMPARISON CONNECTIONS FOR BACKUP
										$initial_source_symptom_highlighted_de = (isset($conRow['initial_source_symptom_highlighted_de']) AND $conRow['initial_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_de']) : null;
										$initial_source_symptom_highlighted_en = (isset($conRow['initial_source_symptom_highlighted_en']) AND $conRow['initial_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_en']) : null;
										$comparing_source_symptom_highlighted_de = (isset($conRow['comparing_source_symptom_highlighted_de']) AND $conRow['comparing_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_de']) : null;
										$comparing_source_symptom_highlighted_en = (isset($conRow['comparing_source_symptom_highlighted_en']) AND $conRow['comparing_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_en']) : null;
										$initial_source_symptom_de = (isset($conRow['initial_source_symptom_de']) AND $conRow['initial_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_de']) : null;
										$initial_source_symptom_en = (isset($conRow['initial_source_symptom_en']) AND $conRow['initial_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_en']) : null;
										$comparing_source_symptom_de = (isset($conRow['comparing_source_symptom_de']) AND $conRow['comparing_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_de']) : null;
										$comparing_source_symptom_en = (isset($conRow['comparing_source_symptom_en']) AND $conRow['comparing_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_en']) : null;
										$matching_percentage = (isset($conRow['matching_percentage']) AND $conRow['matching_percentage'] !="" ) ? mysqli_real_escape_string($db, $conRow['matching_percentage']) : null;
										$is_connected = $conRow['is_connected'];
										$is_ns_connect = $conRow['is_ns_connect'];
										$ns_connect_note = (isset($conRow['ns_connect_note']) AND $conRow['ns_connect_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_connect_note']) : null;
										$is_pasted = $conRow['is_pasted'];
										$is_ns_paste = $conRow['is_ns_paste'];
										$ns_paste_note = (isset($conRow['ns_paste_note']) AND $conRow['ns_paste_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_paste_note']) : null;
										$connection_or_paste_type = (isset($conRow['connection_or_paste_type']) AND $conRow['connection_or_paste_type'] !="" ) ? mysqli_real_escape_string($db, $conRow['connection_or_paste_type']) : null;
									}

									$query = "INSERT INTO symptom_connections (source_arznei_id, is_initial_source, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, is_saved, connection_or_paste_type) VALUES (NULLIF('".$source_arznei_id."', ''), '".$is_initial_source."', NULLIF('".$initial_source_id."', ''), NULLIF('".$comparing_source_id."', ''), NULLIF('".$conversion_initial_source_id."', ''), NULLIF('".$conversion_comparing_source_id."', ''), NULLIF('".$initial_source_code."', ''), NULLIF('".$comparing_source_code."', ''), NULLIF('".$initial_source_symptom_id."', ''), NULLIF('".$comparing_source_symptom_id."', ''), NULLIF('".$initial_source_symptom_highlighted_de."', ''), NULLIF('".$initial_source_symptom_highlighted_en."', ''), NULLIF('".$comparing_source_symptom_highlighted_de."', ''), NULLIF('".$comparing_source_symptom_highlighted_en."', ''), NULLIF('".$initial_source_symptom_de."', ''), NULLIF('".$initial_source_symptom_en."', ''), NULLIF('".$comparing_source_symptom_de."', ''), NULLIF('".$comparing_source_symptom_en."', ''), NULLIF('".$connection_language."', ''), '".$matching_percentage."', '".$is_connected."', '".$is_ns_connect."', NULLIF('".$ns_connect_note."', ''), '".$is_pasted."', '".$is_ns_paste."', NULLIF('".$ns_paste_note."', ''), 1, NULLIF('".$connection_or_paste_type."', ''))";
									$db->query($query);
									
									// FOR BACKUP TABLE QUERY
									$backupQuery = "INSERT INTO symptom_connections_backup (saved_comparisons_backup_id, initial_source_type, comparing_source_type, source_arznei_id, is_initial_source, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, is_saved, connection_or_paste_type) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), '".$initial_source_type."', '".$comparing_source_type."', NULLIF('".$source_arznei_id."', ''), '".$is_initial_source."', NULLIF('".$backup_initial_source_id."', ''), NULLIF('".$backup_comparing_source_id."', ''), NULLIF('".$conversion_initial_source_id."', ''), NULLIF('".$conversion_comparing_source_id."', ''), NULLIF('".$initial_source_code."', ''), NULLIF('".$comparing_source_code."', ''), NULLIF('".$backup_initial_source_symptom_id."', ''), NULLIF('".$backup_comparing_source_symptom_id."', ''), NULLIF('".$initial_source_symptom_highlighted_de."', ''), NULLIF('".$initial_source_symptom_highlighted_en."', ''), NULLIF('".$comparing_source_symptom_highlighted_de."', ''), NULLIF('".$comparing_source_symptom_highlighted_en."', ''), NULLIF('".$initial_source_symptom_de."', ''), NULLIF('".$initial_source_symptom_en."', ''), NULLIF('".$comparing_source_symptom_de."', ''), NULLIF('".$comparing_source_symptom_en."', ''), NULLIF('".$connection_language."', ''), '".$matching_percentage."', '".$is_connected."', '".$is_ns_connect."', NULLIF('".$ns_connect_note."', ''), '".$is_pasted."', '".$is_ns_paste."', NULLIF('".$ns_paste_note."', ''), 1, NULLIF('".$connection_or_paste_type."', ''))";
									$db->query($backupQuery);
									
									// RAW COMPARISON CONNECTIONS FOR BACKUP
									$backupRawConnQuery = "INSERT INTO symptom_connections_backup (saved_comparisons_backup_id, source_arznei_id, is_initial_source, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, is_saved, connection_or_paste_type) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$source_arznei_id."', ''), '".$is_initial_source."', NULLIF('".$raw_initial_source_id."', ''), NULLIF('".$raw_comparing_source_id."', ''), NULLIF('".$conversion_initial_source_id."', ''), NULLIF('".$conversion_comparing_source_id."', ''), NULLIF('".$raw_initial_source_code."', ''), NULLIF('".$raw_comparing_source_code."', ''), NULLIF('".$raw_initial_source_symptom_id."', ''), NULLIF('".$raw_comparing_source_symptom_id."', ''), NULLIF('".$initial_source_symptom_highlighted_de."', ''), NULLIF('".$initial_source_symptom_highlighted_en."', ''), NULLIF('".$comparing_source_symptom_highlighted_de."', ''), NULLIF('".$comparing_source_symptom_highlighted_en."', ''), NULLIF('".$initial_source_symptom_de."', ''), NULLIF('".$initial_source_symptom_en."', ''), NULLIF('".$comparing_source_symptom_de."', ''), NULLIF('".$comparing_source_symptom_en."', ''), NULLIF('".$connection_language."', ''), '".$matching_percentage."', '".$is_connected."', '".$is_ns_connect."', NULLIF('".$ns_connect_note."', ''), '".$is_pasted."', '".$is_ns_paste."', NULLIF('".$ns_paste_note."', ''), 1, NULLIF('".$connection_or_paste_type."', ''))";
									$db->query($backupRawConnQuery);

									$updQuery = "UPDATE symptom_connections SET is_saved = 1 WHERE id = ".$conRow['id'];
	            					$db->query($updQuery);

	            					// Delete this symptom's previous version in the backup_connected_symptoms_details table and add the current one
	            					deletePreviousAddNewBackupConnectedSymptom($conRow['initial_source_symptom_id'], $bckup_saved_comparison_master_id);
	            					deletePreviousAddNewBackupConnectedSymptom($conRow['comparing_source_symptom_id'], $bckup_saved_comparison_master_id);
		            				// deletePreviousAddNewBackupConnectedSymptom($initial_source_symptom_id, $bckup_saved_comparison_master_id);
		            				// deletePreviousAddNewBackupConnectedSymptom($comparing_source_symptom_id, $bckup_saved_comparison_master_id);
								}
							}
						}
					}
				} 
			}
            /* Insert Symptoms END */
            $savedComUpdateQuery="UPDATE saved_comparisons SET quelle_id = '".$newQuelleId."' WHERE id = ".$saved_comparison_master_id;
            $db->query($savedComUpdateQuery);
            //  ADD IN THE BACKUP TABLE
            $backupSavedComUpdateQuery="UPDATE saved_comparisons_backup SET quelle_id = '".$backupNewQuelleId."', original_quelle_id = '".$newQuelleId."' WHERE id = ".$bckup_saved_comparison_master_id;
            $db->query($backupSavedComUpdateQuery);

            if($savedComparisonQuelleId != ""){
            	$backupSavedComUpdateQuelleQuery="UPDATE saved_comparisons_backup SET original_quelle_id = '".$newQuelleId."' WHERE original_quelle_id = ".$savedComparisonQuelleId;
            	$db->query($backupSavedComUpdateQuelleQuery);

            	$backupUpdateQuelleMasterQuery="UPDATE quelle_import_master_backup SET original_quelle_id = '".$newQuelleId."' WHERE original_quelle_id = ".$savedComparisonQuelleId;
            	$db->query($backupUpdateQuelleMasterQuery);
            }

		    $db->commit();

		    $returnArr['status'] = true;
		    $returnArr['message'] = "Success";
		}catch (Exception $e) {
	    	$db->rollback();
	    	$savedComDeleteQuery="DELETE FROM saved_comparisons WHERE id = ".$saved_comparison_master_id;
            $db->query($savedComDeleteQuery);
            // BACKUP TABLE QUERY
            $backupSavedComDeleteQuery="DELETE FROM saved_comparisons_backup WHERE id = ".$bckup_saved_comparison_master_id;
            $db->query($backupSavedComDeleteQuery);

            $FVSymptomBackupsDeleteQuery="DELETE FROM final_version_symptoms_info_for_backups WHERE saved_comparisons_backup_id = ".$bckup_saved_comparison_master_id;
			$db->query($FVSymptomBackupsDeleteQuery);
			
	    	$returnArr['status'] = false;
		    $returnArr['message'] = $e->getMessage();
	    	$isThereAnyTransactionError = 1;
		}
		/* MySQL Transaction END */
		

		return $returnArr;
	}

	// This function is used in delete quelle pages.
	function addQuelleDetailsInReSaveOperation($saved_comparison_master_id, $bckup_saved_comparison_master_id, $formData, $savedComparisonQuelleId = null)
	{
		global $db;
		global $date;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Operation failed'
		);
		$arzneiId = (isset($formData['arznei_id']) AND $formData['arznei_id'] != "") ? trim($formData['arznei_id']) : null;
		$initialSource = (isset($formData['initial_source']) AND $formData['initial_source'] != "") ? trim($formData['initial_source']) : null;
		$comparingSources = (isset($formData['comparing_sources']) AND $formData['comparing_sources'] != "") ? explode(',', $formData['comparing_sources']) : array();
		$similarityRate = (isset($formData['similarity_rate']) AND $formData['similarity_rate'] != "") ? trim($formData['similarity_rate']) : null;
		$comparisonOption = (isset($formData['comparison_option']) AND $formData['comparison_option'] != "") ? trim($formData['comparison_option']) : null;
		$comparisonLanguage = (isset($formData['comparison_language']) AND $formData['comparison_language'] != "") ? trim($formData['comparison_language']) : null;
		$comparisonName = (isset($formData['comparison_name']) AND $formData['comparison_name'] != "") ? trim($formData['comparison_name']) : null;

		$importing_language = (isset($formData['importing_language']) AND $formData['importing_language'] != "") ? trim($formData['importing_language']) : null;
		$is_symptoms_available_in_de = (isset($formData['is_symptoms_available_in_de']) AND $formData['is_symptoms_available_in_de'] != "") ? trim($formData['is_symptoms_available_in_de']) : null;
		$is_symptoms_available_in_en = (isset($formData['is_symptoms_available_in_en']) AND $formData['is_symptoms_available_in_en'] != "") ? trim($formData['is_symptoms_available_in_en']) : null;
		$translation_method_of_de = (isset($formData['translation_method_of_de']) AND $formData['translation_method_of_de'] != "") ? trim($formData['translation_method_of_de']) : null;
		$translation_method_of_en = (isset($formData['translation_method_of_en']) AND $formData['translation_method_of_en'] != "") ? trim($formData['translation_method_of_en']) : null;

		$allSourcers = array();
		$escapeSymptomIds = array();

		$comparedSourcersOfInitialSource = array();
		$symptomConQueryCondition = '';
		$comparison_initial_source_id = $initialSource;
		if($comparison_initial_source_id != "")
			array_push($allSourcers, $comparison_initial_source_id);
		foreach ($comparingSources as $cSourceKey => $cSourceVal) {
			$cSourceVal = explode(',', $cSourceVal);
			foreach ($cSourceVal as $key => $value) {
				array_push($allSourcers, $value);
			}
		}

		if(!empty($allSourcers)){
			$returnedIds = getAllComparedSourceIds($allSourcers);
			if(!empty($returnedIds)){
				foreach ($returnedIds as $IdVal) {
					if(!in_array($IdVal, $allSourcers))
						array_push($allSourcers, $IdVal);
				}
			}	
		}

		// Collecting initial source's already compared sources ids of initial source
		$initialQuelleIdInArr = explode(',', $comparison_initial_source_id);
		if(!empty($initialQuelleIdInArr)){
			$returnedIds = getAllComparedSourceIds($initialQuelleIdInArr);
			if(!empty($returnedIds)){
				foreach ($returnedIds as $IdVal) {
					if(!in_array($IdVal, $comparedSourcersOfInitialSource))
						array_push($comparedSourcersOfInitialSource, $IdVal);
				}
			}	
		}

		$conditionIds = (!empty($allSourcers)) ? rtrim(implode(',', $allSourcers), ',') : null;
		if($conditionIds != "")
			$symptomConQueryCondition = " AND (initial_source_id IN (".$conditionIds.") AND comparing_source_id IN (".$conditionIds."))";
		if($arzneiId != "")
			$symptomConQueryCondition .= " AND source_arznei_id = '".$arzneiId."'"; 
		
		$comparing_source_ids = "";
		if(!empty($comparingSources))
			$comparing_source_ids = implode(",", $comparingSources);
		$comparison_name = mysqli_real_escape_string($db, $comparisonName);
		$isThereAnyTransactionError = 0;
		/* MySQL Transaction START */
		try{
			$db->begin_transaction();
			$newQuelleJahr = null;
			$iniSourceInfoQuery = $db->query("SELECT jahr FROM quelle WHERE quelle_id = ".$comparison_initial_source_id);
			if($iniSourceInfoQuery->num_rows > 0){
				$iniSourceInfoData = mysqli_fetch_assoc($iniSourceInfoQuery);
				$newQuelleJahr = (isset($iniSourceInfoData['jahr']) AND $iniSourceInfoData['jahr'] != "") ? mysqli_real_escape_string($db, trim($iniSourceInfoData['jahr'])) : null;
			}

			// quelle_type_id = 3 means Saved comparison/Materia Medica
			$quelleInsertQuery="INSERT INTO quelle (quelle_type_id, code, titel, jahr, ersteller_datum) VALUES (3, NULLIF('".$comparison_name."', ''), NULLIF('".$comparison_name."', ''), NULLIF('".$newQuelleJahr."', ''), NULLIF('".$date."', ''))";
			$db->query($quelleInsertQuery);
			$newQuelleId = $db->insert_id;
			// ADD IN THE BACKUP
			$backupQuelleInsertQuery="INSERT INTO quelle_backup (quelle_type_id, code, titel, jahr, ersteller_datum) VALUES (3, NULLIF('".$comparison_name."', ''), NULLIF('".$comparison_name."', ''), NULLIF('".$newQuelleJahr."', ''), NULLIF('".$date."', ''))";
			$db->query($backupQuelleInsertQuery);
			$backupNewQuelleId = $db->insert_id;

			$quelleSymptomsMasterInsertQuery="INSERT INTO quelle_import_master (import_rule, importing_language, is_symptoms_available_in_de, is_symptoms_available_in_en, translation_method_of_de, translation_method_of_en, arznei_id, quelle_id, ersteller_datum) VALUES ('default_setting', NULLIF('".$importing_language."', ''), NULLIF('".$is_symptoms_available_in_de."', ''), NULLIF('".$is_symptoms_available_in_en."', ''), NULLIF('".$translation_method_of_de."', ''), NULLIF('".$translation_method_of_en."', ''), NULLIF('".$arzneiId."', ''), NULLIF('".$newQuelleId."', ''), '".$date."')";
            $db->query($quelleSymptomsMasterInsertQuery);
            $quelleSymptomsMasterId = $db->insert_id;
            // ADD IN THE BACKUP
            $quelleSymptomsMasterBackupInsertQuery="INSERT INTO quelle_import_master_backup (import_rule, importing_language, is_symptoms_available_in_de, is_symptoms_available_in_en, translation_method_of_de, translation_method_of_en, arznei_id, quelle_id, original_quelle_id, ersteller_datum) VALUES ('default_setting', NULLIF('".$importing_language."', ''), NULLIF('".$is_symptoms_available_in_de."', ''), NULLIF('".$is_symptoms_available_in_en."', ''), NULLIF('".$translation_method_of_de."', ''), NULLIF('".$translation_method_of_en."', ''), NULLIF('".$arzneiId."', ''), NULLIF('".$backupNewQuelleId."', ''), NULLIF('".$newQuelleId."', ''), '".$date."')";
            $db->query($quelleSymptomsMasterBackupInsertQuery);
            $quelleSymptomsMasterBackupId = $db->insert_id;

            
            // Making arznei quelle relationship
        	$arzneiQuelleResult = $db->query("SELECT arznei_id FROM arznei_quelle where arznei_id = '".$arzneiId."' AND quelle_id = '".$newQuelleId."'");
			if($arzneiQuelleResult->num_rows == 0){
				$arzneiQuelleInsertQuery="INSERT INTO arznei_quelle (arznei_id, quelle_id, ersteller_datum) VALUES ('".$arzneiId."', '".$newQuelleId."', '".$date."')";
        		$db->query($arzneiQuelleInsertQuery);  
			} 

			/* Insert Symptoms START */
            $symptomResult = $db->query("SELECT id FROM quelle_import_test WHERE quelle_id = '".$comparison_initial_source_id."' AND arznei_id = '".$arzneiId."' AND is_appended_symptom_active = 1");
			if($symptomResult->num_rows > 0){
				while($symptomData = mysqli_fetch_array($symptomResult)){
					$mainSymtomId = "";
					$addResult = addTheSymptomInSaveOperation($symptomData['id'], $quelleSymptomsMasterId, $quelleSymptomsMasterBackupId, $newQuelleId, $backupNewQuelleId);
					if($addResult['status'] === true)
					{
						$mainSymtomId = $addResult['return_data']['symptom_id'];
						$mainBackupSymtomId = $addResult['return_data']['backup_symptom_id'];
					}
					else
					{
						$db->rollback();
						$returnArr['status'] = false;
		    			$returnArr['message'] = $addResult['message'];
		    			return $returnArr;
					}
					if($mainSymtomId != "")
					{
						// Adding the newly appended symptoms details
						$checkAppendSymptomArr = array($symptomData['id'], $mainSymtomId);
						foreach ($checkAppendSymptomArr as $appendedSymKey => $appendSymVal) {
							$isSymptomAppendedResult = $db->query("SELECT * FROM appended_symptoms WHERE symptom_id = '".$appendSymVal."'");
							if($isSymptomAppendedResult->num_rows > 0){
								$appendedSymptomInsertQuery="INSERT INTO appended_symptoms_backup (saved_comparisons_backup_id, symptom_id) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$appendSymVal."', ''))";
				            	$db->query($appendedSymptomInsertQuery);
							}
						}

						/* Now adding all connected symptoms in escapeSymptomIds array and also insert the paste connection one's */
						$connectedSymptomResult = $db->query("SELECT id, source_arznei_id, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, connection_or_paste_type FROM symptom_connections WHERE (initial_source_symptom_id = '".$symptomData['id']."' OR comparing_source_symptom_id = '".$symptomData['id']."') AND (is_connected = 1 OR is_pasted = 1)".$symptomConQueryCondition);
						if($connectedSymptomResult->num_rows > 0){
							while($conRow = mysqli_fetch_array($connectedSymptomResult)){

								// If this Symptom is an earalierly appended symptom then we have add this information in "appended_symptoms" table
								$iniSymptomAppendedInfo = $db->query("SELECT * FROM quelle_import_test WHERE id = ".$conRow['initial_source_symptom_id']);
								if($iniSymptomAppendedInfo->num_rows > 0){
									$iniSymptomAppendedData = mysqli_fetch_assoc($iniSymptomAppendedInfo);
									if($iniSymptomAppendedData['is_symptom_appended'] == 1 AND $iniSymptomAppendedData['is_appended_symptom_active'] == 1) {
										$iniAppendedSymptomsQuery=$db->query("SELECT id FROM appended_symptoms WHERE symptom_id = '".$conRow['initial_source_symptom_id']."'");
						            	if($iniAppendedSymptomsQuery->num_rows == 0){
						            		$iniAppendedSymptomInsertQuery = "INSERT INTO appended_symptoms (symptom_id) VALUES (NULLIF('".$conRow['initial_source_symptom_id']."', ''))";
				            				$db->query($iniAppendedSymptomInsertQuery);
				            			}
				            			$iniAppendedSymptomsQueryInBackup=$db->query("SELECT id FROM appended_symptoms_backup WHERE symptom_id = '".$conRow['initial_source_symptom_id']."' AND saved_comparisons_backup_id ='".$bckup_saved_comparison_master_id."'");
						            	if($iniAppendedSymptomsQueryInBackup->num_rows == 0){
				            				$iniAppendedSymptomInsertQueryInBackup="INSERT INTO appended_symptoms_backup (saved_comparisons_backup_id, symptom_id) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$conRow['initial_source_symptom_id']."', ''))";
				            				$db->query($iniAppendedSymptomInsertQueryInBackup);
						            	}
									}
								}
								// If this Symptom is an earalierly appended symptom then we have add this information in "appended_symptoms" table
								$comSymptomAppendedInfo = $db->query("SELECT * FROM quelle_import_test WHERE id = ".$conRow['comparing_source_symptom_id']);
								if($comSymptomAppendedInfo->num_rows > 0){
									$comSymptomAppendedData = mysqli_fetch_assoc($comSymptomAppendedInfo);
									if($comSymptomAppendedData['is_symptom_appended'] == 1 AND $comSymptomAppendedData['is_appended_symptom_active'] == 1) {
										$comAppendedSymptomsQuery=$db->query("SELECT id FROM appended_symptoms WHERE symptom_id = '".$conRow['comparing_source_symptom_id']."'");
						            	if($comAppendedSymptomsQuery->num_rows == 0){
						            		$comAppendedSymptomInsertQuery = "INSERT INTO appended_symptoms (symptom_id) VALUES (NULLIF('".$conRow['comparing_source_symptom_id']."', ''))";
				            				$db->query($comAppendedSymptomInsertQuery);
				            			}
				            			$comAppendedSymptomsQueryInBackup=$db->query("SELECT id FROM appended_symptoms_backup WHERE symptom_id = '".$conRow['comparing_source_symptom_id']."' AND saved_comparisons_backup_id ='".$bckup_saved_comparison_master_id."'");
						            	if($comAppendedSymptomsQueryInBackup->num_rows == 0){
				            				$comAppendedSymptomInsertQueryInBackup="INSERT INTO appended_symptoms_backup (saved_comparisons_backup_id, symptom_id) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$conRow['comparing_source_symptom_id']."', ''))";
				            				$db->query($comAppendedSymptomInsertQueryInBackup);
						            	}
									}
								}

								$source_arznei_id = (isset($conRow['source_arznei_id']) AND $conRow['source_arznei_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['source_arznei_id']) : null;
								$conversion_initial_source_id = (isset($conRow['conversion_initial_source_id']) AND $conRow['conversion_initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['conversion_initial_source_id']) : null;
								$conversion_comparing_source_id = (isset($conRow['conversion_comparing_source_id']) AND $conRow['conversion_comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['conversion_comparing_source_id']) : null;
								$connection_language = (isset($conRow['connection_language']) AND $conRow['connection_language'] !="" ) ? mysqli_real_escape_string($db, $conRow['connection_language']) : null;

								if($conRow['initial_source_symptom_id'] == $symptomData['id']){
									$oppositeSymptomId = $conRow['comparing_source_symptom_id'];

									$is_initial_source = 1;
									$initial_source_type = 'backup';
									$comparing_source_type = 'original';
									$initial_source_id = (isset($newQuelleId) AND $newQuelleId !="" ) ? mysqli_real_escape_string($db, $newQuelleId) : null;
									$comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
									// FOR BACKUP TABLE QUERY
									$backup_initial_source_id = (isset($backupNewQuelleId) AND $backupNewQuelleId !="" ) ? mysqli_real_escape_string($db, $backupNewQuelleId) : null;
									$backup_comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
									// FOR BACKUP TABLE QUERY
									// RAW COMPARISON CONNECTIONS FOR BACKUP
									$raw_initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
									$raw_comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
									$raw_initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
									$raw_comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;
									// RAW COMPARISON CONNECTIONS FOR BACKUP

									$initial_source_code = (isset($comparison_name) AND $comparison_name !="" ) ? mysqli_real_escape_string($db, $comparison_name) : null;
									$comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;

									$initial_source_symptom_id = (isset($mainSymtomId) AND $mainSymtomId !="" ) ? mysqli_real_escape_string($db, $mainSymtomId) : null;
									$comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
									// FOR BACKUP TABLE QUERY
									$backup_initial_source_symptom_id = (isset($mainBackupSymtomId) AND $mainBackupSymtomId !="" ) ? mysqli_real_escape_string($db, $mainBackupSymtomId) : null;
									$backup_comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
									// FOR BACKUP TABLE QUERY
									// RAW COMPARISON CONNECTIONS FOR BACKUP
									$raw_initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
									$raw_comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
									// RAW COMPARISON CONNECTIONS FOR BACKUP
									$initial_source_symptom_highlighted_de = (isset($conRow['initial_source_symptom_highlighted_de']) AND $conRow['initial_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_de']) : null;
									$initial_source_symptom_highlighted_en = (isset($conRow['initial_source_symptom_highlighted_en']) AND $conRow['initial_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_en']) : null;
									$comparing_source_symptom_highlighted_de = (isset($conRow['comparing_source_symptom_highlighted_de']) AND $conRow['comparing_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_de']) : null;
									$comparing_source_symptom_highlighted_en = (isset($conRow['comparing_source_symptom_highlighted_en']) AND $conRow['comparing_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_en']) : null;
									$initial_source_symptom_de = (isset($conRow['initial_source_symptom_de']) AND $conRow['initial_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_de']) : null;
									$initial_source_symptom_en = (isset($conRow['initial_source_symptom_en']) AND $conRow['initial_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_en']) : null;
									$comparing_source_symptom_de = (isset($conRow['comparing_source_symptom_de']) AND $conRow['comparing_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_de']) : null;
									$comparing_source_symptom_en = (isset($conRow['comparing_source_symptom_en']) AND $conRow['comparing_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_en']) : null;
									$matching_percentage = (isset($conRow['matching_percentage']) AND $conRow['matching_percentage'] !="" ) ? mysqli_real_escape_string($db, $conRow['matching_percentage']) : null;
									$is_connected = $conRow['is_connected'];
									$is_ns_connect = $conRow['is_ns_connect'];
									$ns_connect_note = (isset($conRow['ns_connect_note']) AND $conRow['ns_connect_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_connect_note']) : null;
									$is_pasted = $conRow['is_pasted'];
									$is_ns_paste = $conRow['is_ns_paste'];
									$ns_paste_note = (isset($conRow['ns_paste_note']) AND $conRow['ns_paste_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_paste_note']) : null;
									$connection_or_paste_type = (isset($conRow['connection_or_paste_type']) AND $conRow['connection_or_paste_type'] !="" ) ? mysqli_real_escape_string($db, $conRow['connection_or_paste_type']) : null;
								}
								else
								{
									$oppositeSymptomId = $conRow['initial_source_symptom_id'];

									$is_initial_source = 0;
									$comparing_source_type = "backup";
									$initial_source_type = "original";
									$initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
									$comparing_source_id = (isset($newQuelleId) AND $newQuelleId !="" ) ? mysqli_real_escape_string($db, $newQuelleId) : null;
									// FOR BACKUP TABLE QUERY
									$backup_initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
									$backup_comparing_source_id = (isset($backupNewQuelleId) AND $backupNewQuelleId !="" ) ? mysqli_real_escape_string($db, $backupNewQuelleId) : null;
									// RAW COMPARISON CONNECTIONS FOR BACKUP
									$raw_initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
									$raw_comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
									$raw_initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
									$raw_comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;
									// RAW COMPARISON CONNECTIONS FOR BACKUP

									$initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
									$comparing_source_code = (isset($comparison_name) AND $comparison_name !="" ) ? mysqli_real_escape_string($db, $comparison_name) : null;
									$initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
									$comparing_source_symptom_id = (isset($mainSymtomId) AND $mainSymtomId !="" ) ? mysqli_real_escape_string($db, $mainSymtomId) : null;
									// FOR BACKUP TABLE QUERY
									$backup_initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
									$backup_comparing_source_symptom_id = (isset($mainBackupSymtomId) AND $mainBackupSymtomId !="" ) ? mysqli_real_escape_string($db, $mainBackupSymtomId) : null;
									// FOR BACKUP TABLE QUERY
									// RAW COMPARISON CONNECTIONS FOR BACKUP
									$raw_initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
									$raw_comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
									// RAW COMPARISON CONNECTIONS FOR BACKUP
									$initial_source_symptom_highlighted_de = (isset($conRow['initial_source_symptom_highlighted_de']) AND $conRow['initial_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_de']) : null;
									$initial_source_symptom_highlighted_en = (isset($conRow['initial_source_symptom_highlighted_en']) AND $conRow['initial_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_en']) : null;
									$comparing_source_symptom_highlighted_de = (isset($conRow['comparing_source_symptom_highlighted_de']) AND $conRow['comparing_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_de']) : null;
									$comparing_source_symptom_highlighted_en = (isset($conRow['comparing_source_symptom_highlighted_en']) AND $conRow['comparing_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_en']) : null;
									$initial_source_symptom_de = (isset($conRow['initial_source_symptom_de']) AND $conRow['initial_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_de']) : null;
									$initial_source_symptom_en = (isset($conRow['initial_source_symptom_en']) AND $conRow['initial_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_en']) : null;
									$comparing_source_symptom_de = (isset($conRow['comparing_source_symptom_de']) AND $conRow['comparing_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_de']) : null;
									$comparing_source_symptom_en = (isset($conRow['comparing_source_symptom_en']) AND $conRow['comparing_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_en']) : null;
									$matching_percentage = (isset($conRow['matching_percentage']) AND $conRow['matching_percentage'] !="" ) ? mysqli_real_escape_string($db, $conRow['matching_percentage']) : null;
									$is_connected = $conRow['is_connected'];
									$is_ns_connect = $conRow['is_ns_connect'];
									$ns_connect_note = (isset($conRow['ns_connect_note']) AND $conRow['ns_connect_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_connect_note']) : null;
									$is_pasted = $conRow['is_pasted'];
									$is_ns_paste = $conRow['is_ns_paste'];
									$ns_paste_note = (isset($conRow['ns_paste_note']) AND $conRow['ns_paste_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_paste_note']) : null;
									$connection_or_paste_type = (isset($conRow['connection_or_paste_type']) AND $conRow['connection_or_paste_type'] !="" ) ? mysqli_real_escape_string($db, $conRow['connection_or_paste_type']) : null;
								}

								if(!in_array($oppositeSymptomId, $escapeSymptomIds))
									array_push($escapeSymptomIds, $oppositeSymptomId);

								if($conRow['is_pasted'] == 1) 
								{
									if($conRow['initial_source_symptom_id'] == $symptomData['id'])
										$examining_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
									else
										$examining_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;

									// Add pasted symptom separately as initial symptom only when it is not from previously saved comparison sources of the initial source 
									if(!in_array($examining_source_id, $comparedSourcersOfInitialSource)){
										// For pasted symptoms
										$addedSymtomId = "";
										$addResult2 = addTheSymptomInSaveOperation($oppositeSymptomId, $quelleSymptomsMasterId, $quelleSymptomsMasterBackupId, $newQuelleId, $backupNewQuelleId);
										if($addResult2['status'] === true){
											$addedSymtomId = $addResult2['return_data']['symptom_id'];
											$backupAddedSymtomId = $addResult2['return_data']['backup_symptom_id'];
										}
										else
										{
											$db->rollback();
											$returnArr['status'] = false;
							    			$returnArr['message'] = $addResult2['message'];
							    			return $returnArr;
										}
										if($addedSymtomId != ""){

											// Adding the newly appended symptoms details
											$checkAppendSymptomArr = array($oppositeSymptomId, $addedSymtomId);
											foreach ($checkAppendSymptomArr as $appendedSymKey => $appendSymVal) {
												$isSymptomAppendedResult = $db->query("SELECT * FROM appended_symptoms WHERE symptom_id = '".$appendSymVal."'");
												if($isSymptomAppendedResult->num_rows > 0){
													$appendedSymptomInsertQuery="INSERT INTO appended_symptoms_backup (saved_comparisons_backup_id, symptom_id) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$appendSymVal."', ''))";
									            	$db->query($appendedSymptomInsertQuery);
												}
											}

											if($conRow['initial_source_symptom_id'] == $symptomData['id']){
												$initial_source_type = 'original';
												$comparing_source_type = 'backup';
												$initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
												$comparing_source_symptom_id = (isset($addedSymtomId) AND $addedSymtomId !="" ) ? mysqli_real_escape_string($db, $addedSymtomId) : null;
												// FOR BACKUP TABLE QUERY
												$backup_initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
												$backup_comparing_source_symptom_id = (isset($backupAddedSymtomId) AND $backupAddedSymtomId !="" ) ? mysqli_real_escape_string($db, $backupAddedSymtomId) : null;
												// FOR BACKUP TABLE QUERY
												// RAW COMPARISON CONNECTIONS FOR BACKUP
												$raw_initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
												$raw_comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
												$raw_initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
												$raw_comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;
												// RAW COMPARISON CONNECTIONS FOR BACKUP
												$comparing_source_code = (isset($comparison_name) AND $comparison_name !="" ) ? mysqli_real_escape_string($db, $comparison_name) : null;
												$initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
												$initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
												$comparing_source_id = (isset($newQuelleId) AND $newQuelleId !="" ) ? mysqli_real_escape_string($db, $newQuelleId) : null;
												// FOR BACKUP TABLE QUERY
												$backup_initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
												$backup_comparing_source_id = (isset($backupNewQuelleId) AND $backupNewQuelleId !="" ) ? mysqli_real_escape_string($db, $backupNewQuelleId) : null;
												// FOR BACKUP TABLE QUERY
												// RAW COMPARISON CONNECTIONS FOR BACKUP
												$raw_initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
												$raw_comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
												// RAW COMPARISON CONNECTIONS FOR BACKUP

											}
											else{
												$initial_source_type = 'backup';
												$comparing_source_type = 'original';
												$initial_source_symptom_id = (isset($addedSymtomId) AND $addedSymtomId !="" ) ? mysqli_real_escape_string($db, $addedSymtomId) : null;
												$comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
												// FOR BACKUP TABLE QUERY
												$backup_initial_source_symptom_id = (isset($backupAddedSymtomId) AND $backupAddedSymtomId !="" ) ? mysqli_real_escape_string($db, $backupAddedSymtomId) : null;
												$backup_comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
												// FOR BACKUP TABLE QUERY
												// RAW COMPARISON CONNECTIONS FOR BACKUP
												$raw_initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
												$raw_comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
												$raw_initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
												$raw_comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;
												// RAW COMPARISON CONNECTIONS FOR BACKUP
												$initial_source_code = (isset($comparison_name) AND $comparison_name !="" ) ? mysqli_real_escape_string($db, $comparison_name) : null;
												$comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;
												$initial_source_id = (isset($newQuelleId) AND $newQuelleId !="" ) ? mysqli_real_escape_string($db, $newQuelleId) : null;
												$comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
												// FOR BACKUP TABLE QUERY
												$backup_initial_source_id = (isset($backupNewQuelleId) AND $backupNewQuelleId !="" ) ? mysqli_real_escape_string($db, $backupNewQuelleId) : null;
												$backup_comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
												// FOR BACKUP TABLE QUERY
												// RAW COMPARISON CONNECTIONS FOR BACKUP
												$raw_initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
												$raw_comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
												// RAW COMPARISON CONNECTIONS FOR BACKUP
											}
										}
									}
								}

								$query = "INSERT INTO symptom_connections (source_arznei_id, is_initial_source, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, connection_or_paste_type, is_saved) VALUES (NULLIF('".$source_arznei_id."', ''), '".$is_initial_source."', NULLIF('".$initial_source_id."', ''), NULLIF('".$comparing_source_id."', ''), NULLIF('".$conversion_initial_source_id."', ''), NULLIF('".$conversion_comparing_source_id."', ''), NULLIF('".$initial_source_code."', ''), NULLIF('".$comparing_source_code."', ''), NULLIF('".$initial_source_symptom_id."', ''), NULLIF('".$comparing_source_symptom_id."', ''), NULLIF('".$initial_source_symptom_highlighted_de."', ''), NULLIF('".$initial_source_symptom_highlighted_en."', ''), NULLIF('".$comparing_source_symptom_highlighted_de."', ''), NULLIF('".$comparing_source_symptom_highlighted_en."', ''), NULLIF('".$initial_source_symptom_de."', ''), NULLIF('".$initial_source_symptom_en."', ''), NULLIF('".$comparing_source_symptom_de."', ''), NULLIF('".$comparing_source_symptom_en."', ''), NULLIF('".$connection_language."', ''), '".$matching_percentage."', '".$is_connected."', '".$is_ns_connect."', NULLIF('".$ns_connect_note."', ''), '".$is_pasted."', '".$is_ns_paste."', NULLIF('".$ns_paste_note."', ''), NULLIF('".$connection_or_paste_type."', ''), 1)";
								$db->query($query);
								
								// FOR BACKUP TABLE QUERY
								$backupQuery = "INSERT INTO symptom_connections_backup (saved_comparisons_backup_id, initial_source_type, comparing_source_type, source_arznei_id, is_initial_source, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, connection_or_paste_type, is_saved) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), '".$initial_source_type."', '".$comparing_source_type."', NULLIF('".$source_arznei_id."', ''), '".$is_initial_source."', NULLIF('".$backup_initial_source_id."', ''), NULLIF('".$backup_comparing_source_id."', ''), NULLIF('".$conversion_initial_source_id."', ''), NULLIF('".$conversion_comparing_source_id."', ''), NULLIF('".$initial_source_code."', ''), NULLIF('".$comparing_source_code."', ''), NULLIF('".$backup_initial_source_symptom_id."', ''), NULLIF('".$backup_comparing_source_symptom_id."', ''), NULLIF('".$initial_source_symptom_highlighted_de."', ''), NULLIF('".$initial_source_symptom_highlighted_en."', ''), NULLIF('".$comparing_source_symptom_highlighted_de."', ''), NULLIF('".$comparing_source_symptom_highlighted_en."', ''), NULLIF('".$initial_source_symptom_de."', ''), NULLIF('".$initial_source_symptom_en."', ''), NULLIF('".$comparing_source_symptom_de."', ''), NULLIF('".$comparing_source_symptom_en."', ''), NULLIF('".$connection_language."', ''), '".$matching_percentage."', '".$is_connected."', '".$is_ns_connect."', NULLIF('".$ns_connect_note."', ''), '".$is_pasted."', '".$is_ns_paste."', NULLIF('".$ns_paste_note."', ''), NULLIF('".$connection_or_paste_type."', ''), 1)";
								$db->query($backupQuery);
								
								// RAW COMPARISON CONNECTIONS FOR BACKUP
								$backupRawConnQuery = "INSERT INTO symptom_connections_backup (saved_comparisons_backup_id, source_arznei_id, is_initial_source, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, connection_or_paste_type, is_saved) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$source_arznei_id."', ''), '".$is_initial_source."', NULLIF('".$raw_initial_source_id."', ''), NULLIF('".$raw_comparing_source_id."', ''), NULLIF('".$conversion_initial_source_id."', ''), NULLIF('".$conversion_comparing_source_id."', ''), NULLIF('".$raw_initial_source_code."', ''), NULLIF('".$raw_comparing_source_code."', ''), NULLIF('".$raw_initial_source_symptom_id."', ''), NULLIF('".$raw_comparing_source_symptom_id."', ''), NULLIF('".$initial_source_symptom_highlighted_de."', ''), NULLIF('".$initial_source_symptom_highlighted_en."', ''), NULLIF('".$comparing_source_symptom_highlighted_de."', ''), NULLIF('".$comparing_source_symptom_highlighted_en."', ''), NULLIF('".$initial_source_symptom_de."', ''), NULLIF('".$initial_source_symptom_en."', ''), NULLIF('".$comparing_source_symptom_de."', ''), NULLIF('".$comparing_source_symptom_en."', ''), NULLIF('".$connection_language."', ''), '".$matching_percentage."', '".$is_connected."', '".$is_ns_connect."', NULLIF('".$ns_connect_note."', ''), '".$is_pasted."', '".$is_ns_paste."', NULLIF('".$ns_paste_note."', ''), NULLIF('".$connection_or_paste_type."', ''), 1)";
								$db->query($backupRawConnQuery);

								$updQuery = "UPDATE symptom_connections SET is_saved = 1 WHERE id = ".$conRow['id'];
            					$db->query($updQuery);

            					// Delete this symptom's previous version in the backup_connected_symptoms_details table and add the current one
	            				deletePreviousAddNewBackupConnectedSymptom($conRow['initial_source_symptom_id'], $bckup_saved_comparison_master_id);
	            				deletePreviousAddNewBackupConnectedSymptom($conRow['comparing_source_symptom_id'], $bckup_saved_comparison_master_id);
							}
						}
					}
				}
			}


			// Add remaining un-matched comparative symptoms
			$escapeSymptomCondition = "";
			if(!empty($escapeSymptomIds)){
				$uniqueMatchedSymptomIds = array_unique($escapeSymptomIds);
				$matchedSymptomIdsString = implode(',', $uniqueMatchedSymptomIds);
				$escapeSymptomCondition = "AND quelle_import_test.id NOT IN (".$matchedSymptomIdsString.")";
			}
			$comparingSourceIds = (!empty($comparingSources)) ? rtrim(implode(',', $comparingSources), ',') : null;
			if($comparingSourceIds != "")
			{
				$restOfComparingSymptomResultCount = $db->query("SELECT quelle_import_test.id FROM quelle_import_test WHERE quelle_import_test.arznei_id = '".$arzneiId."' AND quelle_import_test.is_appended_symptom_active = 1 AND quelle_import_test.quelle_id IN (".$comparingSourceIds.") ".$escapeSymptomCondition);
				if($restOfComparingSymptomResultCount->num_rows > 0){
					while($symptomData = mysqli_fetch_array($restOfComparingSymptomResultCount)){
						$mainSymtomId = "";
						$addResult = addTheSymptomInSaveOperation($symptomData['id'], $quelleSymptomsMasterId, $quelleSymptomsMasterBackupId, $newQuelleId, $backupNewQuelleId);
						if($addResult['status'] === true)
						{
							$mainSymtomId = $addResult['return_data']['symptom_id'];
							$mainBackupSymtomId = $addResult['return_data']['backup_symptom_id'];
						}
						else
						{
							$db->rollback();
							$returnArr['status'] = false;
			    			$returnArr['message'] = $addResult['message'];
			    			return $returnArr;
						}
						if($mainSymtomId != "")
						{
							// Adding the newly appended symptoms details
							$checkAppendSymptomArr = array($symptomData['id'], $mainSymtomId);
							foreach ($checkAppendSymptomArr as $appendedSymKey => $appendSymVal) {
								$isSymptomAppendedResult = $db->query("SELECT * FROM appended_symptoms WHERE symptom_id = '".$appendSymVal."'");
								if($isSymptomAppendedResult->num_rows > 0){
									$appendedSymptomInsertQuery="INSERT INTO appended_symptoms_backup (saved_comparisons_backup_id, symptom_id) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$appendSymVal."', ''))";
					            	$db->query($appendedSymptomInsertQuery);
								}
							}

							/* Now adding all connected symptoms in escapeSymptomIds array and also insert the paste connection one's */
							$connectedSymptomResult = $db->query("SELECT id, source_arznei_id, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, connection_or_paste_type FROM symptom_connections WHERE (initial_source_symptom_id = '".$symptomData['id']."' OR comparing_source_symptom_id = '".$symptomData['id']."') AND (is_connected = 1 OR is_pasted = 1)".$symptomConQueryCondition);
							if($connectedSymptomResult->num_rows > 0){
								while($conRow = mysqli_fetch_array($connectedSymptomResult)){

									// If this Symptom is an earalierly appended symptom then we have add this information in "appended_symptoms" table
									$iniSymptomAppendedInfo = $db->query("SELECT * FROM quelle_import_test WHERE id = ".$conRow['initial_source_symptom_id']);
									if($iniSymptomAppendedInfo->num_rows > 0){
										$iniSymptomAppendedData = mysqli_fetch_assoc($iniSymptomAppendedInfo);
										if($iniSymptomAppendedData['is_symptom_appended'] == 1 AND $iniSymptomAppendedData['is_appended_symptom_active'] == 1) {
											$iniAppendedSymptomsQuery=$db->query("SELECT id FROM appended_symptoms WHERE symptom_id = '".$conRow['initial_source_symptom_id']."'");
							            	if($iniAppendedSymptomsQuery->num_rows == 0){
							            		$iniAppendedSymptomInsertQuery = "INSERT INTO appended_symptoms (symptom_id) VALUES (NULLIF('".$conRow['initial_source_symptom_id']."', ''))";
					            				$db->query($iniAppendedSymptomInsertQuery);
					            			}
					            			$iniAppendedSymptomsQueryInBackup=$db->query("SELECT id FROM appended_symptoms_backup WHERE symptom_id = '".$conRow['initial_source_symptom_id']."' AND saved_comparisons_backup_id ='".$bckup_saved_comparison_master_id."'");
							            	if($iniAppendedSymptomsQueryInBackup->num_rows == 0){
					            				$iniAppendedSymptomInsertQueryInBackup="INSERT INTO appended_symptoms_backup (saved_comparisons_backup_id, symptom_id) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$conRow['initial_source_symptom_id']."', ''))";
					            				$db->query($iniAppendedSymptomInsertQueryInBackup);
							            	}
										}
									}
									// If this Symptom is an earalierly appended symptom then we have add this information in "appended_symptoms" table
									$comSymptomAppendedInfo = $db->query("SELECT * FROM quelle_import_test WHERE id = ".$conRow['comparing_source_symptom_id']);
									if($comSymptomAppendedInfo->num_rows > 0){
										$comSymptomAppendedData = mysqli_fetch_assoc($comSymptomAppendedInfo);
										if($comSymptomAppendedData['is_symptom_appended'] == 1 AND $comSymptomAppendedData['is_appended_symptom_active'] == 1) {
											$comAppendedSymptomsQuery=$db->query("SELECT id FROM appended_symptoms WHERE symptom_id = '".$conRow['comparing_source_symptom_id']."'");
							            	if($comAppendedSymptomsQuery->num_rows == 0){
							            		$comAppendedSymptomInsertQuery = "INSERT INTO appended_symptoms (symptom_id) VALUES (NULLIF('".$conRow['comparing_source_symptom_id']."', ''))";
					            				$db->query($comAppendedSymptomInsertQuery);
					            			}
					            			$comAppendedSymptomsQueryInBackup=$db->query("SELECT id FROM appended_symptoms_backup WHERE symptom_id = '".$conRow['comparing_source_symptom_id']."' AND saved_comparisons_backup_id ='".$bckup_saved_comparison_master_id."'");
							            	if($comAppendedSymptomsQueryInBackup->num_rows == 0){
					            				$comAppendedSymptomInsertQueryInBackup="INSERT INTO appended_symptoms_backup (saved_comparisons_backup_id, symptom_id) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$conRow['comparing_source_symptom_id']."', ''))";
					            				$db->query($comAppendedSymptomInsertQueryInBackup);
							            	}
										}
									}

									$source_arznei_id = (isset($conRow['source_arznei_id']) AND $conRow['source_arznei_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['source_arznei_id']) : null;
									$conversion_initial_source_id = (isset($conRow['conversion_initial_source_id']) AND $conRow['conversion_initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['conversion_initial_source_id']) : null;
									$conversion_comparing_source_id = (isset($conRow['conversion_comparing_source_id']) AND $conRow['conversion_comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['conversion_comparing_source_id']) : null;
									$connection_language = (isset($conRow['connection_language']) AND $conRow['connection_language'] !="" ) ? mysqli_real_escape_string($db, $conRow['connection_language']) : null;

									if($conRow['initial_source_symptom_id'] == $symptomData['id']){
										$oppositeSymptomId = $conRow['comparing_source_symptom_id'];

										$is_initial_source = 1;
										$initial_source_type = 'backup';
										$comparing_source_type = 'original';
										$initial_source_id = (isset($newQuelleId) AND $newQuelleId !="" ) ? mysqli_real_escape_string($db, $newQuelleId) : null;
										$comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
										// FOR BACKUP TABLE QUERY
										$backup_initial_source_id = (isset($backupNewQuelleId) AND $backupNewQuelleId !="" ) ? mysqli_real_escape_string($db, $backupNewQuelleId) : null;
										$backup_comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
										// FOR BACKUP TABLE QUERY
										// RAW COMPARISON CONNECTIONS FOR BACKUP
										$raw_initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
										$raw_comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
										$raw_initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
										$raw_comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;
										// RAW COMPARISON CONNECTIONS FOR BACKUP

										$initial_source_code = (isset($comparison_name) AND $comparison_name !="" ) ? mysqli_real_escape_string($db, $comparison_name) : null;
										$comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;

										$initial_source_symptom_id = (isset($mainSymtomId) AND $mainSymtomId !="" ) ? mysqli_real_escape_string($db, $mainSymtomId) : null;
										$comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
										// FOR BACKUP TABLE QUERY
										$backup_initial_source_symptom_id = (isset($mainBackupSymtomId) AND $mainBackupSymtomId !="" ) ? mysqli_real_escape_string($db, $mainBackupSymtomId) : null;
										$backup_comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
										// FOR BACKUP TABLE QUERY
										// RAW COMPARISON CONNECTIONS FOR BACKUP
										$raw_initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
										$raw_comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
										// RAW COMPARISON CONNECTIONS FOR BACKUP
										$initial_source_symptom_highlighted_de = (isset($conRow['initial_source_symptom_highlighted_de']) AND $conRow['initial_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_de']) : null;
										$initial_source_symptom_highlighted_en = (isset($conRow['initial_source_symptom_highlighted_en']) AND $conRow['initial_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_en']) : null;
										$comparing_source_symptom_highlighted_de = (isset($conRow['comparing_source_symptom_highlighted_de']) AND $conRow['comparing_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_de']) : null;
										$comparing_source_symptom_highlighted_en = (isset($conRow['comparing_source_symptom_highlighted_en']) AND $conRow['comparing_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_en']) : null;
										$initial_source_symptom_de = (isset($conRow['initial_source_symptom_de']) AND $conRow['initial_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_de']) : null;
										$initial_source_symptom_en = (isset($conRow['initial_source_symptom_en']) AND $conRow['initial_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_en']) : null;
										$comparing_source_symptom_de = (isset($conRow['comparing_source_symptom_de']) AND $conRow['comparing_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_de']) : null;
										$comparing_source_symptom_en = (isset($conRow['comparing_source_symptom_en']) AND $conRow['comparing_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_en']) : null;
										$matching_percentage = (isset($conRow['matching_percentage']) AND $conRow['matching_percentage'] !="" ) ? mysqli_real_escape_string($db, $conRow['matching_percentage']) : null;
										$is_connected = $conRow['is_connected'];
										$is_ns_connect = $conRow['is_ns_connect'];
										$ns_connect_note = (isset($conRow['ns_connect_note']) AND $conRow['ns_connect_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_connect_note']) : null;
										$is_pasted = $conRow['is_pasted'];
										$is_ns_paste = $conRow['is_ns_paste'];
										$ns_paste_note = (isset($conRow['ns_paste_note']) AND $conRow['ns_paste_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_paste_note']) : null;
										$connection_or_paste_type = (isset($conRow['connection_or_paste_type']) AND $conRow['connection_or_paste_type'] !="" ) ? mysqli_real_escape_string($db, $conRow['connection_or_paste_type']) : null;
									}
									else
									{
										$oppositeSymptomId = $conRow['initial_source_symptom_id'];

										$is_initial_source = 0;
										$comparing_source_type = "backup";
										$initial_source_type = "original";
										$initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
										$comparing_source_id = (isset($newQuelleId) AND $newQuelleId !="" ) ? mysqli_real_escape_string($db, $newQuelleId) : null;
										// FOR BACKUP TABLE QUERY
										$backup_initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
										$backup_comparing_source_id = (isset($backupNewQuelleId) AND $backupNewQuelleId !="" ) ? mysqli_real_escape_string($db, $backupNewQuelleId) : null;
										// RAW COMPARISON CONNECTIONS FOR BACKUP
										$raw_initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
										$raw_comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
										$raw_initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
										$raw_comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;
										// RAW COMPARISON CONNECTIONS FOR BACKUP

										$initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
										$comparing_source_code = (isset($comparison_name) AND $comparison_name !="" ) ? mysqli_real_escape_string($db, $comparison_name) : null;
										$initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
										$comparing_source_symptom_id = (isset($mainSymtomId) AND $mainSymtomId !="" ) ? mysqli_real_escape_string($db, $mainSymtomId) : null;
										// FOR BACKUP TABLE QUERY
										$backup_initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
										$backup_comparing_source_symptom_id = (isset($mainBackupSymtomId) AND $mainBackupSymtomId !="" ) ? mysqli_real_escape_string($db, $mainBackupSymtomId) : null;
										// FOR BACKUP TABLE QUERY
										// RAW COMPARISON CONNECTIONS FOR BACKUP
										$raw_initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
										$raw_comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
										// RAW COMPARISON CONNECTIONS FOR BACKUP
										$initial_source_symptom_highlighted_de = (isset($conRow['initial_source_symptom_highlighted_de']) AND $conRow['initial_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_de']) : null;
										$initial_source_symptom_highlighted_en = (isset($conRow['initial_source_symptom_highlighted_en']) AND $conRow['initial_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_en']) : null;
										$comparing_source_symptom_highlighted_de = (isset($conRow['comparing_source_symptom_highlighted_de']) AND $conRow['comparing_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_de']) : null;
										$comparing_source_symptom_highlighted_en = (isset($conRow['comparing_source_symptom_highlighted_en']) AND $conRow['comparing_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_en']) : null;
										$initial_source_symptom_de = (isset($conRow['initial_source_symptom_de']) AND $conRow['initial_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_de']) : null;
										$initial_source_symptom_en = (isset($conRow['initial_source_symptom_en']) AND $conRow['initial_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_en']) : null;
										$comparing_source_symptom_de = (isset($conRow['comparing_source_symptom_de']) AND $conRow['comparing_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_de']) : null;
										$comparing_source_symptom_en = (isset($conRow['comparing_source_symptom_en']) AND $conRow['comparing_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_en']) : null;
										$matching_percentage = (isset($conRow['matching_percentage']) AND $conRow['matching_percentage'] !="" ) ? mysqli_real_escape_string($db, $conRow['matching_percentage']) : null;
										$is_connected = $conRow['is_connected'];
										$is_ns_connect = $conRow['is_ns_connect'];
										$ns_connect_note = (isset($conRow['ns_connect_note']) AND $conRow['ns_connect_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_connect_note']) : null;
										$is_pasted = $conRow['is_pasted'];
										$is_ns_paste = $conRow['is_ns_paste'];
										$ns_paste_note = (isset($conRow['ns_paste_note']) AND $conRow['ns_paste_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_paste_note']) : null;
										$connection_or_paste_type = (isset($conRow['connection_or_paste_type']) AND $conRow['connection_or_paste_type'] !="" ) ? mysqli_real_escape_string($db, $conRow['connection_or_paste_type']) : null;
									}

									$query = "INSERT INTO symptom_connections (source_arznei_id, is_initial_source, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, connection_or_paste_type, is_saved) VALUES (NULLIF('".$source_arznei_id."', ''), '".$is_initial_source."', NULLIF('".$initial_source_id."', ''), NULLIF('".$comparing_source_id."', ''), NULLIF('".$conversion_initial_source_id."', ''), NULLIF('".$conversion_comparing_source_id."', ''), NULLIF('".$initial_source_code."', ''), NULLIF('".$comparing_source_code."', ''), NULLIF('".$initial_source_symptom_id."', ''), NULLIF('".$comparing_source_symptom_id."', ''), NULLIF('".$initial_source_symptom_highlighted_de."', ''), NULLIF('".$initial_source_symptom_highlighted_en."', ''), NULLIF('".$comparing_source_symptom_highlighted_de."', ''), NULLIF('".$comparing_source_symptom_highlighted_en."', ''), NULLIF('".$initial_source_symptom_de."', ''), NULLIF('".$initial_source_symptom_en."', ''), NULLIF('".$comparing_source_symptom_de."', ''), NULLIF('".$comparing_source_symptom_en."', ''), NULLIF('".$connection_language."', ''), '".$matching_percentage."', '".$is_connected."', '".$is_ns_connect."', NULLIF('".$ns_connect_note."', ''), '".$is_pasted."', '".$is_ns_paste."', NULLIF('".$ns_paste_note."', ''), NULLIF('".$connection_or_paste_type."', ''), 1)";
									$db->query($query);
									
									// FOR BACKUP TABLE QUERY
									$backupQuery = "INSERT INTO symptom_connections_backup (saved_comparisons_backup_id, initial_source_type, comparing_source_type, source_arznei_id, is_initial_source, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, connection_or_paste_type, is_saved) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), '".$initial_source_type."', '".$comparing_source_type."', NULLIF('".$source_arznei_id."', ''), '".$is_initial_source."', NULLIF('".$backup_initial_source_id."', ''), NULLIF('".$backup_comparing_source_id."', ''), NULLIF('".$conversion_initial_source_id."', ''), NULLIF('".$conversion_comparing_source_id."', ''), NULLIF('".$initial_source_code."', ''), NULLIF('".$comparing_source_code."', ''), NULLIF('".$backup_initial_source_symptom_id."', ''), NULLIF('".$backup_comparing_source_symptom_id."', ''), NULLIF('".$initial_source_symptom_highlighted_de."', ''), NULLIF('".$initial_source_symptom_highlighted_en."', ''), NULLIF('".$comparing_source_symptom_highlighted_de."', ''), NULLIF('".$comparing_source_symptom_highlighted_en."', ''), NULLIF('".$initial_source_symptom_de."', ''), NULLIF('".$initial_source_symptom_en."', ''), NULLIF('".$comparing_source_symptom_de."', ''), NULLIF('".$comparing_source_symptom_en."', ''), NULLIF('".$connection_language."', ''), '".$matching_percentage."', '".$is_connected."', '".$is_ns_connect."', NULLIF('".$ns_connect_note."', ''), '".$is_pasted."', '".$is_ns_paste."', NULLIF('".$ns_paste_note."', ''), NULLIF('".$connection_or_paste_type."', ''), 1)";
									$db->query($backupQuery);
									
									// RAW COMPARISON CONNECTIONS FOR BACKUP
									$backupRawConnQuery = "INSERT INTO symptom_connections_backup (saved_comparisons_backup_id, source_arznei_id, is_initial_source, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, connection_or_paste_type, is_saved) VALUES (NULLIF('".$bckup_saved_comparison_master_id."', ''), NULLIF('".$source_arznei_id."', ''), '".$is_initial_source."', NULLIF('".$raw_initial_source_id."', ''), NULLIF('".$raw_comparing_source_id."', ''), NULLIF('".$conversion_initial_source_id."', ''), NULLIF('".$conversion_comparing_source_id."', ''), NULLIF('".$raw_initial_source_code."', ''), NULLIF('".$raw_comparing_source_code."', ''), NULLIF('".$raw_initial_source_symptom_id."', ''), NULLIF('".$raw_comparing_source_symptom_id."', ''), NULLIF('".$initial_source_symptom_highlighted_de."', ''), NULLIF('".$initial_source_symptom_highlighted_en."', ''), NULLIF('".$comparing_source_symptom_highlighted_de."', ''), NULLIF('".$comparing_source_symptom_highlighted_en."', ''), NULLIF('".$initial_source_symptom_de."', ''), NULLIF('".$initial_source_symptom_en."', ''), NULLIF('".$comparing_source_symptom_de."', ''), NULLIF('".$comparing_source_symptom_en."', ''), NULLIF('".$connection_language."', ''), '".$matching_percentage."', '".$is_connected."', '".$is_ns_connect."', NULLIF('".$ns_connect_note."', ''), '".$is_pasted."', '".$is_ns_paste."', NULLIF('".$ns_paste_note."', ''), NULLIF('".$connection_or_paste_type."', ''), 1)";
									$db->query($backupRawConnQuery);

									$updQuery = "UPDATE symptom_connections SET is_saved = 1 WHERE id = ".$conRow['id'];
	            					$db->query($updQuery);

	            					// Delete this symptom's previous version in the backup_connected_symptoms_details table and add the current one
	            					deletePreviousAddNewBackupConnectedSymptom($conRow['initial_source_symptom_id'], $bckup_saved_comparison_master_id);
	            					deletePreviousAddNewBackupConnectedSymptom($conRow['comparing_source_symptom_id'], $bckup_saved_comparison_master_id);
								}
							}
						}
					}
				} 
			}
            /* Insert Symptoms END */
            $savedComUpdateQuery="UPDATE saved_comparisons SET quelle_id = '".$newQuelleId."' WHERE id = ".$saved_comparison_master_id;
            $db->query($savedComUpdateQuery);
            //  ADD IN THE BACKUP TABLE
            $backupSavedComUpdateQuery="UPDATE saved_comparisons_backup SET quelle_id = '".$backupNewQuelleId."', original_quelle_id = '".$newQuelleId."' WHERE id = ".$bckup_saved_comparison_master_id;
            $db->query($backupSavedComUpdateQuery);

            if($savedComparisonQuelleId != ""){
            	$backupSavedComUpdateQuelleQuery="UPDATE saved_comparisons_backup SET original_quelle_id = '".$newQuelleId."' WHERE original_quelle_id = ".$savedComparisonQuelleId;
            	$db->query($backupSavedComUpdateQuelleQuery);

            	$backupUpdateQuelleMasterQuery="UPDATE quelle_import_master_backup SET original_quelle_id = '".$newQuelleId."' WHERE original_quelle_id = ".$savedComparisonQuelleId;
            	$db->query($backupUpdateQuelleMasterQuery);
            }

		    $db->commit();

		    $returnArr['status'] = true;
		    $returnArr['message'] = "Success";
		}catch (Exception $e) {
	    	$db->rollback();
	    	$savedComDeleteQuery="DELETE FROM saved_comparisons WHERE id = ".$saved_comparison_master_id;
            $db->query($savedComDeleteQuery);
            // BACKUP TABLE QUERY
            $backupSavedComDeleteQuery="DELETE FROM saved_comparisons_backup WHERE id = ".$bckup_saved_comparison_master_id;
            $db->query($backupSavedComDeleteQuery);

            $FVSymptomBackupsDeleteQuery="DELETE FROM final_version_symptoms_info_for_backups WHERE saved_comparisons_backup_id = ".$bckup_saved_comparison_master_id;
			$db->query($FVSymptomBackupsDeleteQuery);

	    	$returnArr['status'] = false;
		    $returnArr['message'] = $e->getMessage();
	    	$isThereAnyTransactionError = 1;
		}
		/* MySQL Transaction END */
		

		return $returnArr;
	}

	// This function is for adding symptom, here it is adding in both backup and normal table
	// This function is used in comparison save operations pages and delete qulle page.
	function addTheSymptomInSaveOperation($symptomId, $quelleSymptomsMasterId, $quelleSymptomsMasterBackupId, $newQuelleId, $backupNewQuelleId)
	{
		global $db;
		global $date;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Symptom add operation failed'
		);
		
		/* MySQL Transaction START */
		try{
			if($symptomId != ""){
				$db->begin_transaction();
				$symptomResult = $db->query("SELECT * FROM quelle_import_test WHERE id = ".$symptomId);
				if($symptomResult->num_rows > 0){
					$symptomData = mysqli_fetch_assoc($symptomResult);

					$sourceResult = mysqli_query($db,"SELECT Q.quelle_type_id FROM quelle AS Q WHERE Q.quelle_id = '".$newQuelleId."'");
					if(mysqli_num_rows($sourceResult) > 0){
						$sourceRow = mysqli_fetch_assoc($sourceResult);
						$sourceType = $sourceRow['quelle_type_id'];
					}

					$symptomData['original_symptom_id'] = (isset($sourceType) AND $sourceType == 3) ? $symptomId : null;
					$symptomData['arznei_id'] = ($symptomData['arznei_id'] != "") ? mysqli_real_escape_string($db, $symptomData['arznei_id']) : null;
					$symptomData['original_quelle_id'] = ($symptomData['original_quelle_id'] != "") ? mysqli_real_escape_string($db, $symptomData['original_quelle_id']) : null;
					$symptomData['quelle_code'] = ($symptomData['quelle_code'] != "") ? mysqli_real_escape_string($db, $symptomData['quelle_code']) : null;
					$symptomData['Symptomnummer'] = mysqli_real_escape_string($db, $symptomData['Symptomnummer']);
					$symptomData['SeiteOriginalVon'] = mysqli_real_escape_string($db, $symptomData['SeiteOriginalVon']);
					$symptomData['SeiteOriginalBis'] = mysqli_real_escape_string($db, $symptomData['SeiteOriginalBis']);
					$symptomData['final_version_de'] = mysqli_real_escape_string($db, $symptomData['final_version_de']);
					$symptomData['final_version_en'] = mysqli_real_escape_string($db, $symptomData['final_version_en']);
					$symptomData['Beschreibung_de'] = mysqli_real_escape_string($db, $symptomData['Beschreibung_de']);
					$symptomData['Beschreibung_en'] = mysqli_real_escape_string($db, $symptomData['Beschreibung_en']);
					$symptomData['BeschreibungOriginal_de'] = mysqli_real_escape_string($db, $symptomData['BeschreibungOriginal_de']);
					$symptomData['BeschreibungOriginal_en'] = mysqli_real_escape_string($db, $symptomData['BeschreibungOriginal_en']);
					$symptomData['BeschreibungFull_de'] = mysqli_real_escape_string($db, $symptomData['BeschreibungFull_de']);
					$symptomData['BeschreibungFull_en'] = mysqli_real_escape_string($db, $symptomData['BeschreibungFull_en']);
					$symptomData['BeschreibungPlain_de'] = mysqli_real_escape_string($db, $symptomData['BeschreibungPlain_de']);
					$symptomData['BeschreibungPlain_en'] = mysqli_real_escape_string($db, $symptomData['BeschreibungPlain_en']);
					$symptomData['searchable_text_de'] = mysqli_real_escape_string($db, $symptomData['searchable_text_de']);
					$symptomData['searchable_text_en'] = mysqli_real_escape_string($db, $symptomData['searchable_text_en']);
					$symptomData['bracketedString_de'] = mysqli_real_escape_string($db, $symptomData['bracketedString_de']);
					$symptomData['bracketedString_en'] = mysqli_real_escape_string($db, $symptomData['bracketedString_en']);
					$symptomData['timeString_de'] = mysqli_real_escape_string($db, $symptomData['timeString_de']);
					$symptomData['timeString_en'] = mysqli_real_escape_string($db, $symptomData['timeString_en']);
					$symptomData['Fussnote'] = mysqli_real_escape_string($db, $symptomData['Fussnote']);
					$symptomData['EntnommenAus'] = mysqli_real_escape_string($db, $symptomData['EntnommenAus']);
					$symptomData['Verweiss'] = mysqli_real_escape_string($db, $symptomData['Verweiss']);
					$symptomData['Graduierung'] = mysqli_real_escape_string($db, $symptomData['Graduierung']);
					$symptomData['BereichID'] = mysqli_real_escape_string($db, $symptomData['BereichID']);
					$symptomData['Kommentar'] = mysqli_real_escape_string($db, $symptomData['Kommentar']);
					$symptomData['Unklarheiten'] = mysqli_real_escape_string($db, $symptomData['Unklarheiten']);
					$symptomData['Remedy'] = mysqli_real_escape_string($db, $symptomData['Remedy']);
					$symptomData['symptom_of_different_remedy'] = mysqli_real_escape_string($db, $symptomData['symptom_of_different_remedy']);
					$symptomData['subChapter'] = mysqli_real_escape_string($db, $symptomData['subChapter']);
					$symptomData['subSubChapter'] = mysqli_real_escape_string($db, $symptomData['subSubChapter']);
					$symptomData['symptom_edit_comment'] = mysqli_real_escape_string($db, $symptomData['symptom_edit_comment']);
					$symptomData['is_final_version_available'] = mysqli_real_escape_string($db, $symptomData['is_final_version_available']);
					$symptomData['is_symptom_number_mismatch'] = mysqli_real_escape_string($db, $symptomData['is_symptom_number_mismatch']);
					$symptomData['is_symptom_appended'] = mysqli_real_escape_string($db, $symptomData['is_symptom_appended']);
					$symptomData['is_appended_symptom_active'] = mysqli_real_escape_string($db, $symptomData['is_appended_symptom_active']);

					$mainSymptomInsertQuery="INSERT INTO quelle_import_test (master_id, original_symptom_id, arznei_id, quelle_id, original_quelle_id, quelle_code, Symptomnummer, SeiteOriginalVon, SeiteOriginalBis, final_version_de, final_version_en, Beschreibung_de, Beschreibung_en, BeschreibungOriginal_de, BeschreibungOriginal_en, BeschreibungFull_de, BeschreibungFull_en, BeschreibungPlain_de, BeschreibungPlain_en, searchable_text_de, searchable_text_en, bracketedString_de, bracketedString_en, timeString_de, timeString_en, Fussnote, EntnommenAus, Verweiss, Graduierung, BereichID, Kommentar, Unklarheiten, Remedy, symptom_of_different_remedy, subChapter, subSubChapter, symptom_edit_comment, is_final_version_available, is_symptom_number_mismatch, is_symptom_appended, is_appended_symptom_active) VALUES (".$quelleSymptomsMasterId.", NULLIF('".$symptomData['original_symptom_id']."', ''), NULLIF('".$symptomData['arznei_id']."', ''), NULLIF('".$newQuelleId."', ''), NULLIF('".$symptomData['original_quelle_id']."', ''), NULLIF('".$symptomData['quelle_code']."', ''), NULLIF('".$symptomData['Symptomnummer']."', ''), NULLIF('".$symptomData['SeiteOriginalVon']."', ''), NULLIF('".$symptomData['SeiteOriginalBis']."', ''), NULLIF('".$symptomData['final_version_de']."', ''), NULLIF('".$symptomData['final_version_en']."', ''), NULLIF('".$symptomData['Beschreibung_de']."', ''), NULLIF('".$symptomData['Beschreibung_en']."', ''), NULLIF('".$symptomData['BeschreibungOriginal_de']."', ''), NULLIF('".$symptomData['BeschreibungOriginal_en']."', ''), NULLIF('".$symptomData['BeschreibungFull_de']."', ''), NULLIF('".$symptomData['BeschreibungFull_en']."', ''), NULLIF('".$symptomData['BeschreibungPlain_de']."', ''), NULLIF('".$symptomData['BeschreibungPlain_en']."', ''), NULLIF('".$symptomData['searchable_text_de']."', ''), NULLIF('".$symptomData['searchable_text_en']."', ''), NULLIF('".$symptomData['bracketedString_de']."', ''), NULLIF('".$symptomData['bracketedString_en']."', ''), NULLIF('".$symptomData['timeString_de']."', ''), NULLIF('".$symptomData['timeString_en']."', ''), NULLIF('".$symptomData['Fussnote']."', ''), NULLIF('".$symptomData['EntnommenAus']."', ''), NULLIF('".$symptomData['Verweiss']."', ''), NULLIF('".$symptomData['Graduierung']."', ''), NULLIF('".$symptomData['BereichID']."', ''), NULLIF('".$symptomData['Kommentar']."', ''), NULLIF('".$symptomData['Unklarheiten']."', ''), NULLIF('".$symptomData['Remedy']."', ''), NULLIF('".$symptomData['symptom_of_different_remedy']."', ''), NULLIF('".$symptomData['subChapter']."', ''), NULLIF('".$symptomData['subSubChapter']."', ''), NULLIF('".$symptomData['symptom_edit_comment']."', ''), NULLIF('".$symptomData['is_final_version_available']."', ''), '".$symptomData['is_symptom_number_mismatch']."', NULLIF('".$symptomData['is_symptom_appended']."', ''), NULLIF('".$symptomData['is_appended_symptom_active']."', ''))";
					$db->query($mainSymptomInsertQuery);
		            $mainSymtomId = $db->insert_id;

		            // if Symptom is appended in earlier comparison and it is active, then that information needs to carry forward in the further comparison so i am adding this symptom's append infromations and from(appended_symptoms) there it will get forwarded to "appended_symptoms_backup" table
		            if($symptomData['is_symptom_appended'] == 1 AND $symptomData['is_appended_symptom_active'] == 1 AND $mainSymtomId != "") {
		            	$appendedSymptomInsertQuery="INSERT INTO appended_symptoms (symptom_id) VALUES (NULLIF('".$mainSymtomId."', ''))";
			            $db->query($appendedSymptomInsertQuery);
		            }

					// ADD IN THE BACKUP
					$mainSymptomBackupInsertQuery="INSERT INTO quelle_import_backup (original_symptom_id, master_id, arznei_id, quelle_id, original_quelle_id, quelle_code, Symptomnummer, SeiteOriginalVon, SeiteOriginalBis, final_version_de, final_version_en, Beschreibung_de, Beschreibung_en, BeschreibungOriginal_de, BeschreibungOriginal_en, BeschreibungFull_de, BeschreibungFull_en, BeschreibungPlain_de, BeschreibungPlain_en, searchable_text_de, searchable_text_en, bracketedString_de, bracketedString_en, timeString_de, timeString_en, Fussnote, EntnommenAus, Verweiss, Graduierung, BereichID, Kommentar, Unklarheiten, Remedy, symptom_of_different_remedy, subChapter, subSubChapter, symptom_edit_comment, is_final_version_available, is_symptom_number_mismatch, is_symptom_appended, is_appended_symptom_active) VALUES (NULLIF('".$symptomData['original_symptom_id']."', ''), ".$quelleSymptomsMasterBackupId.", NULLIF('".$symptomData['arznei_id']."', ''), NULLIF('".$backupNewQuelleId."', ''), NULLIF('".$symptomData['original_quelle_id']."', ''), NULLIF('".$symptomData['quelle_code']."', ''), NULLIF('".$symptomData['Symptomnummer']."', ''), NULLIF('".$symptomData['SeiteOriginalVon']."', ''), NULLIF('".$symptomData['SeiteOriginalBis']."', ''), NULLIF('".$symptomData['final_version_de']."', ''), NULLIF('".$symptomData['final_version_en']."', ''), NULLIF('".$symptomData['Beschreibung_de']."', ''), NULLIF('".$symptomData['Beschreibung_en']."', ''), NULLIF('".$symptomData['BeschreibungOriginal_de']."', ''), NULLIF('".$symptomData['BeschreibungOriginal_en']."', ''), NULLIF('".$symptomData['BeschreibungFull_de']."', ''), NULLIF('".$symptomData['BeschreibungFull_en']."', ''), NULLIF('".$symptomData['BeschreibungPlain_de']."', ''), NULLIF('".$symptomData['BeschreibungPlain_en']."', ''), NULLIF('".$symptomData['searchable_text_de']."', ''), NULLIF('".$symptomData['searchable_text_en']."', ''), NULLIF('".$symptomData['bracketedString_de']."', ''), NULLIF('".$symptomData['bracketedString_en']."', ''), NULLIF('".$symptomData['timeString_de']."', ''), NULLIF('".$symptomData['timeString_en']."', ''), NULLIF('".$symptomData['Fussnote']."', ''), NULLIF('".$symptomData['EntnommenAus']."', ''), NULLIF('".$symptomData['Verweiss']."', ''), NULLIF('".$symptomData['Graduierung']."', ''), NULLIF('".$symptomData['BereichID']."', ''), NULLIF('".$symptomData['Kommentar']."', ''), NULLIF('".$symptomData['Unklarheiten']."', ''), NULLIF('".$symptomData['Remedy']."', ''), NULLIF('".$symptomData['symptom_of_different_remedy']."', ''), NULLIF('".$symptomData['subChapter']."', ''), NULLIF('".$symptomData['subSubChapter']."', ''), NULLIF('".$symptomData['symptom_edit_comment']."', ''), NULLIF('".$symptomData['is_final_version_available']."', ''), '".$symptomData['is_symptom_number_mismatch']."', NULLIF('".$symptomData['is_symptom_appended']."', ''), NULLIF('".$symptomData['is_appended_symptom_active']."', ''))";
		            $db->query($mainSymptomBackupInsertQuery);
		            $mainSymtomBackupId = $db->insert_id;
		            

		            /* Insert Symptom_pruefer relation START */
		            $symptomPrueferResult = $db->query("SELECT symptom_id, pruefer_id FROM symptom_pruefer where symptom_id = '".$symptomData['id']."'");
					if($symptomPrueferResult->num_rows > 0){
						while($symptomPrueferData = mysqli_fetch_array($symptomPrueferResult)){
							$mainSymptomPrueferInsertQuery = "INSERT INTO symptom_pruefer (symptom_id, pruefer_id, ersteller_datum) VALUES ('".$mainSymtomId."', '".$symptomPrueferData['pruefer_id']."', '".$date."')";
			            	$db->query($mainSymptomPrueferInsertQuery);

			            	// ADD IN THE BACKUP
			            	$mainSymptomPrueferBackupInsertQuery = "INSERT INTO symptom_pruefer_backup (symptom_id, pruefer_id, ersteller_datum) VALUES ('".$mainSymtomBackupId."', '".$symptomPrueferData['pruefer_id']."', '".$date."')";
			            	$db->query($mainSymptomPrueferBackupInsertQuery);
						}
					}
					/* Insert Symptom_pruefer relation END */

					/* Insert symptom_reference relation START */
		            $symptomReferenceResult = $db->query("SELECT symptom_id, reference_id FROM symptom_reference where symptom_id = '".$symptomData['id']."'");
					if($symptomReferenceResult->num_rows > 0){
						while($symptomReferenceData = mysqli_fetch_array($symptomReferenceResult)){
							$mainSymptomReferenceInsertQuery = "INSERT INTO symptom_reference (symptom_id, reference_id, ersteller_datum) VALUES ('".$mainSymtomId."', '".$symptomReferenceData['reference_id']."', '".$date."')";
			            	$db->query($mainSymptomReferenceInsertQuery);

			            	// ADD IN THE BACKUP
			            	$mainSymptomReferenceBackupInsertQuery = "INSERT INTO symptom_reference_backup (symptom_id, reference_id, ersteller_datum) VALUES ('".$mainSymtomBackupId."', '".$symptomReferenceData['reference_id']."', '".$date."')";
			            	$db->query($mainSymptomReferenceBackupInsertQuery);
						}
					}
					/* Insert symptom_reference relation END */
				}	
			}
			$db->commit();
			if(isset($mainSymtomId) AND $mainSymtomId != "")
			{
				$returnArr['status'] = true;
				$returnArr['return_data']['symptom_id'] = $mainSymtomId;
				$returnArr['return_data']['backup_symptom_id'] = $mainSymtomBackupId;
		    	$returnArr['message'] = "Success";
			}
		}catch (Exception $e) {
	    	$db->rollback();
		    $returnArr['message'] = $e->getMessage();
		}
		/* MySQL Transaction END */

		return $returnArr;
	}


	function restoreTheDefautImportedSymptoms($quelleId, $arzneiId){
		global $db;
		global $date;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Symptom add operation failed'
		);
		
		/* MySQL Transaction START */
		try{
			if($quelleId != ""){
				$db->begin_transaction();
				
				$currentQuelleImportMasterId = "";
				$fetchQuelleMasterInfoQuery = $db->query("SELECT id FROM quelle_import_master WHERE quelle_id = '".$quelleId."' AND arznei_id = '".$arzneiId."'");
	            if($fetchQuelleMasterInfoQuery->num_rows > 0){
	            	$quelleMasterData = mysqli_fetch_assoc($fetchQuelleMasterInfoQuery);
	            	$currentQuelleImportMasterId = $quelleMasterData['id'];
	            }

	            if($currentQuelleImportMasterId != ""){
	            	// Delete current symptoms
	        		$existingSymptomResult = $db->query("SELECT id FROM quelle_import_test WHERE quelle_id = '".$quelleId."' AND arznei_id = '".$arzneiId."'");
					if($existingSymptomResult->num_rows > 0){
						while($existingSymptomData = mysqli_fetch_array($existingSymptomResult)){
							$symPrueferDeleteQuery="DELETE FROM symptom_pruefer WHERE symptom_id = ".$existingSymptomData['id'];
	            			$db->query($symPrueferDeleteQuery);

	            			$symRefDeleteQuery="DELETE FROM symptom_reference WHERE symptom_id = ".$existingSymptomData['id'];
	            			$db->query($symRefDeleteQuery);

	            			// Deleting the symptom id from swapped_symptoms because here we are restoring source to it's default version and current symptoms will get deleted and so it's swapped information should also get deleted if it has any
	            			$swappedSymDeleteQuery="DELETE FROM swapped_symptoms WHERE symptom_id = ".$existingSymptomData['id'];
			            	$db->query($swappedSymDeleteQuery);

			            	// Delete if it is there in appended_symptoms
	            			$appendedSymptomDeleteQuery="DELETE FROM appended_symptoms WHERE symptom_id = ".$existingSymptomData['id'];
		            		$db->query($appendedSymptomDeleteQuery); 

		            		// Deleteing symptom specific settings
	            			$symTypeSettingDeleteQuery="DELETE FROM symptom_type_setting WHERE symptom_id = ".$existingSymptomData['id'];
	            			$db->query($symTypeSettingDeleteQuery);
	            			$symGradingSettingDeleteQuery="DELETE FROM symptom_grading_settings WHERE symptom_id = ".$existingSymptomData['id'];
	            			$db->query($symGradingSettingDeleteQuery);
	            		}
					}
					$symDeleteQuery="DELETE FROM quelle_import_test WHERE quelle_id = '".$quelleId."' AND arznei_id = '".$arzneiId."'";
	            	$db->query($symDeleteQuery);

	            	$symptomResult = $db->query("SELECT * FROM quelle_import_backup WHERE quelle_id = '".$quelleId."' AND arznei_id = '".$arzneiId."'");
					if($symptomResult->num_rows > 0){
						while($symptomData = mysqli_fetch_array($symptomResult)) {

							$symptomData['arznei_id'] = ($symptomData['arznei_id'] != "") ? mysqli_real_escape_string($db, $symptomData['arznei_id']) : null;
							$symptomData['quelle_id'] = ($symptomData['quelle_id'] != "") ? mysqli_real_escape_string($db, $symptomData['quelle_id']) : null;
							$symptomData['original_quelle_id'] = ($symptomData['original_quelle_id'] != "") ? mysqli_real_escape_string($db, $symptomData['original_quelle_id']) : null;
							$symptomData['quelle_code'] = ($symptomData['quelle_code'] != "") ? mysqli_real_escape_string($db, $symptomData['quelle_code']) : null;
							$symptomData['Symptomnummer'] = mysqli_real_escape_string($db, $symptomData['Symptomnummer']);
							$symptomData['SeiteOriginalVon'] = mysqli_real_escape_string($db, $symptomData['SeiteOriginalVon']);
							$symptomData['SeiteOriginalBis'] = mysqli_real_escape_string($db, $symptomData['SeiteOriginalBis']);
							$symptomData['final_version_de'] = mysqli_real_escape_string($db, $symptomData['final_version_de']);
							$symptomData['final_version_en'] = mysqli_real_escape_string($db, $symptomData['final_version_en']);
							$symptomData['Beschreibung_de'] = mysqli_real_escape_string($db, $symptomData['Beschreibung_de']);
							$symptomData['Beschreibung_en'] = mysqli_real_escape_string($db, $symptomData['Beschreibung_en']);
							$symptomData['BeschreibungOriginal_de'] = mysqli_real_escape_string($db, $symptomData['BeschreibungOriginal_de']);
							$symptomData['BeschreibungOriginal_en'] = mysqli_real_escape_string($db, $symptomData['BeschreibungOriginal_en']);
							$symptomData['BeschreibungFull_de'] = mysqli_real_escape_string($db, $symptomData['BeschreibungFull_de']);
							$symptomData['BeschreibungFull_en'] = mysqli_real_escape_string($db, $symptomData['BeschreibungFull_en']);
							$symptomData['BeschreibungPlain_de'] = mysqli_real_escape_string($db, $symptomData['BeschreibungPlain_de']);
							$symptomData['BeschreibungPlain_en'] = mysqli_real_escape_string($db, $symptomData['BeschreibungPlain_en']);
							$symptomData['searchable_text_de'] = mysqli_real_escape_string($db, $symptomData['searchable_text_de']);
							$symptomData['searchable_text_en'] = mysqli_real_escape_string($db, $symptomData['searchable_text_en']);
							$symptomData['bracketedString_de'] = mysqli_real_escape_string($db, $symptomData['bracketedString_de']);
							$symptomData['bracketedString_en'] = mysqli_real_escape_string($db, $symptomData['bracketedString_en']);
							$symptomData['timeString_de'] = mysqli_real_escape_string($db, $symptomData['timeString_de']);
							$symptomData['timeString_en'] = mysqli_real_escape_string($db, $symptomData['timeString_en']);
							$symptomData['Fussnote'] = mysqli_real_escape_string($db, $symptomData['Fussnote']);
							$symptomData['EntnommenAus'] = mysqli_real_escape_string($db, $symptomData['EntnommenAus']);
							$symptomData['Verweiss'] = mysqli_real_escape_string($db, $symptomData['Verweiss']);
							$symptomData['Graduierung'] = mysqli_real_escape_string($db, $symptomData['Graduierung']);
							$symptomData['BereichID'] = mysqli_real_escape_string($db, $symptomData['BereichID']);
							$symptomData['Kommentar'] = mysqli_real_escape_string($db, $symptomData['Kommentar']);
							$symptomData['Unklarheiten'] = mysqli_real_escape_string($db, $symptomData['Unklarheiten']);
							$symptomData['Remedy'] = mysqli_real_escape_string($db, $symptomData['Remedy']);
							$symptomData['symptom_of_different_remedy'] = mysqli_real_escape_string($db, $symptomData['symptom_of_different_remedy']);
							$symptomData['subChapter'] = mysqli_real_escape_string($db, $symptomData['subChapter']);
							$symptomData['subSubChapter'] = mysqli_real_escape_string($db, $symptomData['subSubChapter']);
							$symptomData['symptom_edit_comment'] = mysqli_real_escape_string($db, $symptomData['symptom_edit_comment']);
							$symptomData['is_final_version_available'] = mysqli_real_escape_string($db, $symptomData['is_final_version_available']);
							$symptomData['is_symptom_number_mismatch'] = mysqli_real_escape_string($db, $symptomData['is_symptom_number_mismatch']);
							// here i have not added the original_symptom_id filed in the insert query below because we are adding the original symptoms and original_symptom_id  should be null here 
							$mainSymptomInsertQuery="INSERT INTO quelle_import_test (master_id, arznei_id, quelle_id, original_quelle_id, quelle_code, Symptomnummer, SeiteOriginalVon, SeiteOriginalBis, final_version_de, final_version_en, Beschreibung_de, Beschreibung_en, BeschreibungOriginal_de, BeschreibungOriginal_en, BeschreibungFull_de, BeschreibungFull_en, BeschreibungPlain_de, BeschreibungPlain_en, searchable_text_de, searchable_text_en, bracketedString_de, bracketedString_en, timeString_de, timeString_en, Fussnote, EntnommenAus, Verweiss, Graduierung, BereichID, Kommentar, Unklarheiten, Remedy, symptom_of_different_remedy, subChapter, subSubChapter, symptom_edit_comment, is_final_version_available, is_symptom_number_mismatch) VALUES (".$currentQuelleImportMasterId.", NULLIF('".$symptomData['arznei_id']."', ''), NULLIF('".$symptomData['quelle_id']."', ''), NULLIF('".$symptomData['original_quelle_id']."', ''), NULLIF('".$symptomData['quelle_code']."', ''), NULLIF('".$symptomData['Symptomnummer']."', ''), NULLIF('".$symptomData['SeiteOriginalVon']."', ''), NULLIF('".$symptomData['SeiteOriginalBis']."', ''), NULLIF('".$symptomData['final_version_de']."', ''), NULLIF('".$symptomData['final_version_en']."', ''), NULLIF('".$symptomData['Beschreibung_de']."', ''), NULLIF('".$symptomData['Beschreibung_en']."', ''), NULLIF('".$symptomData['BeschreibungOriginal_de']."', ''), NULLIF('".$symptomData['BeschreibungOriginal_en']."', ''), NULLIF('".$symptomData['BeschreibungFull_de']."', ''), NULLIF('".$symptomData['BeschreibungFull_en']."', ''), NULLIF('".$symptomData['BeschreibungPlain_de']."', ''), NULLIF('".$symptomData['BeschreibungPlain_en']."', ''), NULLIF('".$symptomData['searchable_text_de']."', ''), NULLIF('".$symptomData['searchable_text_en']."', ''), NULLIF('".$symptomData['bracketedString_de']."', ''), NULLIF('".$symptomData['bracketedString_en']."', ''), NULLIF('".$symptomData['timeString_de']."', ''), NULLIF('".$symptomData['timeString_en']."', ''), NULLIF('".$symptomData['Fussnote']."', ''), NULLIF('".$symptomData['EntnommenAus']."', ''), NULLIF('".$symptomData['Verweiss']."', ''), NULLIF('".$symptomData['Graduierung']."', ''), NULLIF('".$symptomData['BereichID']."', ''), NULLIF('".$symptomData['Kommentar']."', ''), NULLIF('".$symptomData['Unklarheiten']."', ''), NULLIF('".$symptomData['Remedy']."', ''), NULLIF('".$symptomData['symptom_of_different_remedy']."', ''), NULLIF('".$symptomData['subChapter']."', ''), NULLIF('".$symptomData['subSubChapter']."', ''), NULLIF('".$symptomData['symptom_edit_comment']."', ''), NULLIF('".$symptomData['is_final_version_available']."', ''), '".$symptomData['is_symptom_number_mismatch']."')";
							$db->query($mainSymptomInsertQuery);
				            $mainSymtomId = $db->insert_id;
				            

				            /* Insert Symptom_pruefer relation START */
				            $symptomPrueferResult = $db->query("SELECT symptom_id, pruefer_id FROM symptom_pruefer_backup where symptom_id = '".$symptomData['id']."'");
							if($symptomPrueferResult->num_rows > 0){
								while($symptomPrueferData = mysqli_fetch_array($symptomPrueferResult)){
									$mainSymptomPrueferInsertQuery = "INSERT INTO symptom_pruefer (symptom_id, pruefer_id, ersteller_datum) VALUES ('".$mainSymtomId."', '".$symptomPrueferData['pruefer_id']."', '".$date."')";
					            	$db->query($mainSymptomPrueferInsertQuery);
								}
							}
							/* Insert Symptom_pruefer relation END */

							/* Insert symptom_reference relation START */
				            $symptomReferenceResult = $db->query("SELECT symptom_id, reference_id FROM symptom_reference_backup where symptom_id = '".$symptomData['id']."'");
							if($symptomReferenceResult->num_rows > 0){
								while($symptomReferenceData = mysqli_fetch_array($symptomReferenceResult)){
									$mainSymptomReferenceInsertQuery = "INSERT INTO symptom_reference (symptom_id, reference_id, ersteller_datum) VALUES ('".$mainSymtomId."', '".$symptomReferenceData['reference_id']."', '".$date."')";
					            	$db->query($mainSymptomReferenceInsertQuery);
								}
							}
							/* Insert symptom_reference relation END */
						}
					}
	            }

			}
			$db->commit();
			if(isset($mainSymtomId) AND $mainSymtomId != "")
			{
				$returnArr['status'] = true;
				$returnArr['return_data']['symptom_id'] = $mainSymtomId;
		    	$returnArr['message'] = "Success";
			}
		}catch (Exception $e) {
	    	$db->rollback();
		    $returnArr['message'] = $e->getMessage();
		}
		/* MySQL Transaction END */

		return $returnArr;
	}


	// Resaving the saved comparison 
	// This function is called from Reactivateing comparison page
	function resaveTheSavedComparison($quelleId, $arzneiId){
		global $db;
		global $date;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Operation failed'
		);
		
		/* MySQL Transaction START */
		try{
			if($quelleId != ""){
				$db->begin_transaction();
				$masterQuery = $db->query("SELECT SC.initial_source_id, SC.comparing_source_ids, SC.comparison_name, QIM.id AS quelle_import_master_id FROM saved_comparisons AS SC JOIN quelle_import_master AS QIM ON SC.quelle_id = QIM.quelle_id WHERE SC.quelle_id = '".$quelleId."' AND SC.arznei_id = '".$arzneiId."'");
	            if($masterQuery->num_rows > 0){
	            	$masterData = mysqli_fetch_assoc($masterQuery);
	            	// Deleting existing possible datas fo this saved comparison START
	            	$symptomResult = $db->query("SELECT id FROM quelle_import_test WHERE master_id = '".$masterData['quelle_import_master_id']."' AND arznei_id = '".$arzneiId."'");
					if($symptomResult->num_rows > 0){
						while($symptomData = mysqli_fetch_array($symptomResult)) {
							$symPrueferDeleteQuery="DELETE FROM symptom_pruefer WHERE symptom_id = ".$symptomData['id'];
	            			$db->query($symPrueferDeleteQuery);

							$symRefDeleteQuery="DELETE FROM symptom_reference WHERE symptom_id = ".$symptomData['id'];
	            			$db->query($symRefDeleteQuery);

	            			$swappedSymDeleteQuery="DELETE FROM swapped_symptoms WHERE symptom_id = ".$symptomData['id'];
	            			$db->query($swappedSymDeleteQuery);

	            			$backupSetSwapSymptomResult = $db->query("SELECT id FROM backup_sets_swapped_symptoms WHERE original_symptom_id = ".$symptomData['id']);
							if($backupSetSwapSymptomResult->num_rows > 0){
								while($backupSetSwapSymptomData = mysqli_fetch_array($backupSetSwapSymptomResult)){
									$backupSetsSwapSymPrueferDeleteQuery="DELETE FROM backup_sets_swapped_symptom_pruefer WHERE symptom_id = ".$backupSetSwapSymptomData['id'];
			            			$db->query($backupSetsSwapSymPrueferDeleteQuery);

			            			$backupSetsSwapSymRefDeleteQuery = "DELETE FROM backup_sets_swapped_symptom_reference WHERE symptom_id = ".$backupSetSwapSymptomData['id'];
			            			$db->query($backupSetsSwapSymRefDeleteQuery);
								}
							}
	            			$backupSetsSwappedSymDeleteQuery="DELETE FROM backup_sets_swapped_symptoms WHERE original_symptom_id = ".$symptomData['id'];
	            			$db->query($backupSetsSwappedSymDeleteQuery);

	            			// Delete if it is there in appended_symptoms
	            			$appendedSymptomDeleteQuery="DELETE FROM appended_symptoms WHERE symptom_id = ".$symptomData['id'];
		            		$db->query($appendedSymptomDeleteQuery); 
						}
					}
					$savedComparisonSymDeleteQuery="DELETE FROM quelle_import_test WHERE master_id = '".$masterData['quelle_import_master_id']."' AND arznei_id = '".$arzneiId."'";
	            	$db->query($savedComparisonSymDeleteQuery);
	            	// Deleting existing possible datas fo this saved comparison END
	            	// Re-creating the save comparison
	            	$initialSource = (isset($masterData['initial_source_id']) AND $masterData['initial_source_id'] != "") ? trim($masterData['initial_source_id']) : null;
					$comparingSources = (isset($masterData['comparing_source_ids']) AND $masterData['comparing_source_ids'] != "") ? explode(',', $masterData['comparing_source_ids']) : array();
					$comparisonName = (isset($masterData['comparison_name']) AND $masterData['comparison_name'] != "") ? trim($masterData['comparison_name']) : null;

					// 
					$savedComQuery = $db->query("SELECT SC.id as scid FROM saved_comparisons_backup AS SC JOIN quelle_import_master_backup AS QIM ON SC.quelle_id = QIM.quelle_id WHERE QIM.original_quelle_id = '".$quelleId."' ORDER BY QIM.ersteller_datum DESC LIMIT 1");
	            	if($savedComQuery->num_rows > 0){
	            		$savedComData = mysqli_fetch_assoc($savedComQuery);
	            	}
	            	$savedComparisonBackupId = (isset($savedComData['scid']) AND $savedComData['scid'] != "") ? $savedComData['scid'] : "";


					$allSourcers = array();
					$escapeSymptomIds = array();

					$comparedSourcersOfInitialSource = array();
					$symptomConQueryCondition = '';
					$comparison_initial_source_id = $initialSource;
					if($comparison_initial_source_id != "")
						array_push($allSourcers, $comparison_initial_source_id);
					foreach ($comparingSources as $cSourceKey => $cSourceVal) {
						$cSourceVal = explode(',', $cSourceVal);
						foreach ($cSourceVal as $key => $value) {
							array_push($allSourcers, $value);
						}
					}

					if(!empty($allSourcers)){
						$returnedIds = getAllComparedSourceIds($allSourcers);
						if(!empty($returnedIds)){
							foreach ($returnedIds as $IdVal) {
								if(!in_array($IdVal, $allSourcers))
									array_push($allSourcers, $IdVal);
							}
						}	
					}

					// Collecting initial source's already compared sources ids of initial source
					$initialQuelleIdInArr = explode(',', $comparison_initial_source_id);
					if(!empty($initialQuelleIdInArr)){
						$returnedIds = getAllComparedSourceIds($initialQuelleIdInArr);
						if(!empty($returnedIds)){
							foreach ($returnedIds as $IdVal) {
								if(!in_array($IdVal, $comparedSourcersOfInitialSource))
									array_push($comparedSourcersOfInitialSource, $IdVal);
							}
						}	
					}

					$conditionIds = (!empty($allSourcers)) ? rtrim(implode(',', $allSourcers), ',') : null;
					if($conditionIds != "")
						$symptomConQueryCondition = " AND (initial_source_id IN (".$conditionIds.") AND comparing_source_id IN (".$conditionIds."))";
					if($arzneiId != "")
						$symptomConQueryCondition .= " AND source_arznei_id = '".$arzneiId."'"; 
					
					$comparing_source_ids = "";
					if(!empty($comparingSources))
						$comparing_source_ids = implode(",", $comparingSources);
					$comparison_name = mysqli_real_escape_string($db, $comparisonName);
					/* Insert Symptoms START */
		            $symptomResult = $db->query("SELECT quelle_import_test.id FROM quelle_import_test WHERE quelle_import_test.quelle_id = '".$comparison_initial_source_id."' AND quelle_import_test.arznei_id = '".$arzneiId."' AND quelle_import_test.is_appended_symptom_active = 1");
					if($symptomResult->num_rows > 0){
						while($symptomData = mysqli_fetch_array($symptomResult)){
							$mainSymtomId = "";
							$addResult = addTheSymptomInReSaveComparisonOperation($symptomData['id'], $masterData['quelle_import_master_id'], $quelleId, $savedComparisonBackupId);
							if($addResult['status'] === true)
							{
								$mainSymtomId = $addResult['return_data']['symptom_id'];
							}
							else
							{
								$db->rollback();
								$returnArr['status'] = false;
				    			$returnArr['message'] = $addResult['message'];
				    			return $returnArr;
							}

							if($mainSymtomId != "")
							{
								/* Now adding all connected symptoms in escapeSymptomIds array and also insert the paste connection one's */
								$connectedSymptomResult = $db->query("SELECT id, source_arznei_id, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, connection_or_paste_type FROM symptom_connections WHERE (initial_source_symptom_id = '".$symptomData['id']."' OR comparing_source_symptom_id = '".$symptomData['id']."') AND (is_connected = 1 OR is_pasted = 1)".$symptomConQueryCondition);
								if($connectedSymptomResult->num_rows > 0){
									while($conRow = mysqli_fetch_array($connectedSymptomResult)){

										// If this Symptom is an earalierly appended symptom then we have add this information in "appended_symptoms" table
										$iniSymptomAppendedInfo = $db->query("SELECT * FROM quelle_import_test WHERE id = ".$conRow['initial_source_symptom_id']);
										if($iniSymptomAppendedInfo->num_rows > 0){
											$iniSymptomAppendedData = mysqli_fetch_assoc($iniSymptomAppendedInfo);
											if($iniSymptomAppendedData['is_symptom_appended'] == 1 AND $iniSymptomAppendedData['is_appended_symptom_active'] == 1) {
												$iniAppendedSymptomsQuery=$db->query("SELECT id FROM appended_symptoms WHERE symptom_id = '".$conRow['initial_source_symptom_id']."'");
								            	if($iniAppendedSymptomsQuery->num_rows == 0){
								            		$iniAppendedSymptomInsertQuery = "INSERT INTO appended_symptoms (symptom_id) VALUES (NULLIF('".$conRow['initial_source_symptom_id']."', ''))";
						            				$db->query($iniAppendedSymptomInsertQuery);
						            			}
											}
										}
										// If this Symptom is an earalierly appended symptom then we have add this information in "appended_symptoms" table
										$comSymptomAppendedInfo = $db->query("SELECT * FROM quelle_import_test WHERE id = ".$conRow['comparing_source_symptom_id']);
										if($comSymptomAppendedInfo->num_rows > 0){
											$comSymptomAppendedData = mysqli_fetch_assoc($comSymptomAppendedInfo);
											if($comSymptomAppendedData['is_symptom_appended'] == 1 AND $comSymptomAppendedData['is_appended_symptom_active'] == 1) {
												$comAppendedSymptomsQuery=$db->query("SELECT id FROM appended_symptoms WHERE symptom_id = '".$conRow['comparing_source_symptom_id']."'");
								            	if($comAppendedSymptomsQuery->num_rows == 0){
								            		$comAppendedSymptomInsertQuery = "INSERT INTO appended_symptoms (symptom_id) VALUES (NULLIF('".$conRow['comparing_source_symptom_id']."', ''))";
						            				$db->query($comAppendedSymptomInsertQuery);
						            			}
											}
										}

										$source_arznei_id = (isset($conRow['source_arznei_id']) AND $conRow['source_arznei_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['source_arznei_id']) : null;
										$conversion_initial_source_id = (isset($conRow['conversion_initial_source_id']) AND $conRow['conversion_initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['conversion_initial_source_id']) : null;
										$conversion_comparing_source_id = (isset($conRow['conversion_comparing_source_id']) AND $conRow['conversion_comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['conversion_comparing_source_id']) : null;
										$connection_language = (isset($conRow['connection_language']) AND $conRow['connection_language'] !="" ) ? mysqli_real_escape_string($db, $conRow['connection_language']) : null;

										if($conRow['initial_source_symptom_id'] == $symptomData['id']){
											$oppositeSymptomId = $conRow['comparing_source_symptom_id'];

											$is_initial_source = 1;
											$initial_source_id = (isset($quelleId) AND $quelleId !="" ) ? mysqli_real_escape_string($db, $quelleId) : null;
											$comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;

											$initial_source_code = (isset($comparison_name) AND $comparison_name !="" ) ? mysqli_real_escape_string($db, $comparison_name) : null;
											$comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;

											$initial_source_symptom_id = (isset($mainSymtomId) AND $mainSymtomId !="" ) ? mysqli_real_escape_string($db, $mainSymtomId) : null;
											$comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
											$initial_source_symptom_highlighted_de = (isset($conRow['initial_source_symptom_highlighted_de']) AND $conRow['initial_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_de']) : null;
											$initial_source_symptom_highlighted_en = (isset($conRow['initial_source_symptom_highlighted_en']) AND $conRow['initial_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_en']) : null;
											$comparing_source_symptom_highlighted_de = (isset($conRow['comparing_source_symptom_highlighted_de']) AND $conRow['comparing_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_de']) : null;
											$comparing_source_symptom_highlighted_en = (isset($conRow['comparing_source_symptom_highlighted_en']) AND $conRow['comparing_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_en']) : null;
											$initial_source_symptom_de = (isset($conRow['initial_source_symptom_de']) AND $conRow['initial_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_de']) : null;
											$initial_source_symptom_en = (isset($conRow['initial_source_symptom_en']) AND $conRow['initial_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_en']) : null;
											$comparing_source_symptom_de = (isset($conRow['comparing_source_symptom_de']) AND $conRow['comparing_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_de']) : null;
											$comparing_source_symptom_en = (isset($conRow['comparing_source_symptom_en']) AND $conRow['comparing_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_en']) : null;
											$matching_percentage = (isset($conRow['matching_percentage']) AND $conRow['matching_percentage'] !="" ) ? mysqli_real_escape_string($db, $conRow['matching_percentage']) : null;
											$is_connected = $conRow['is_connected'];
											$is_ns_connect = $conRow['is_ns_connect'];
											$ns_connect_note = (isset($conRow['ns_connect_note']) AND $conRow['ns_connect_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_connect_note']) : null;
											$is_pasted = $conRow['is_pasted'];
											$is_ns_paste = $conRow['is_ns_paste'];
											$ns_paste_note = (isset($conRow['ns_paste_note']) AND $conRow['ns_paste_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_paste_note']) : null;
											$connection_or_paste_type = (isset($conRow['connection_or_paste_type']) AND $conRow['connection_or_paste_type'] !="" ) ? mysqli_real_escape_string($db, $conRow['connection_or_paste_type']) : null;
										}
										else
										{
											$oppositeSymptomId = $conRow['initial_source_symptom_id'];

											$is_initial_source = 0;
											$initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
											$comparing_source_id = (isset($quelleId) AND $quelleId !="" ) ? mysqli_real_escape_string($db, $quelleId) : null;

											$initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
											$comparing_source_code = (isset($comparison_name) AND $comparison_name !="" ) ? mysqli_real_escape_string($db, $comparison_name) : null;
											$initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
											$comparing_source_symptom_id = (isset($mainSymtomId) AND $mainSymtomId !="" ) ? mysqli_real_escape_string($db, $mainSymtomId) : null;
											$initial_source_symptom_highlighted_de = (isset($conRow['initial_source_symptom_highlighted_de']) AND $conRow['initial_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_de']) : null;
											$initial_source_symptom_highlighted_en = (isset($conRow['initial_source_symptom_highlighted_en']) AND $conRow['initial_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_en']) : null;
											$comparing_source_symptom_highlighted_de = (isset($conRow['comparing_source_symptom_highlighted_de']) AND $conRow['comparing_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_de']) : null;
											$comparing_source_symptom_highlighted_en = (isset($conRow['comparing_source_symptom_highlighted_en']) AND $conRow['comparing_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_en']) : null;
											$initial_source_symptom_de = (isset($conRow['initial_source_symptom_de']) AND $conRow['initial_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_de']) : null;
											$initial_source_symptom_en = (isset($conRow['initial_source_symptom_en']) AND $conRow['initial_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_en']) : null;
											$comparing_source_symptom_de = (isset($conRow['comparing_source_symptom_de']) AND $conRow['comparing_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_de']) : null;
											$comparing_source_symptom_en = (isset($conRow['comparing_source_symptom_en']) AND $conRow['comparing_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_en']) : null;
											$matching_percentage = (isset($conRow['matching_percentage']) AND $conRow['matching_percentage'] !="" ) ? mysqli_real_escape_string($db, $conRow['matching_percentage']) : null;
											$is_connected = $conRow['is_connected'];
											$is_ns_connect = $conRow['is_ns_connect'];
											$ns_connect_note = (isset($conRow['ns_connect_note']) AND $conRow['ns_connect_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_connect_note']) : null;
											$is_pasted = $conRow['is_pasted'];
											$is_ns_paste = $conRow['is_ns_paste'];
											$ns_paste_note = (isset($conRow['ns_paste_note']) AND $conRow['ns_paste_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_paste_note']) : null;
											$connection_or_paste_type = (isset($conRow['connection_or_paste_type']) AND $conRow['connection_or_paste_type'] !="" ) ? mysqli_real_escape_string($db, $conRow['connection_or_paste_type']) : null;
										}

										if(!in_array($oppositeSymptomId, $escapeSymptomIds))
											array_push($escapeSymptomIds, $oppositeSymptomId);

										if($conRow['is_pasted'] == 1) 
										{
											if($conRow['initial_source_symptom_id'] == $symptomData['id'])
												$examining_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
											else
												$examining_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;

											// Add pasted symptom separately as initial symptom only when it is not from previously saved comparison sources of the initial source 
											if(!in_array($examining_source_id, $comparedSourcersOfInitialSource)){
												// For pasted symptoms
												$addedSymtomId = "";
												$addResult2 = addTheSymptomInReSaveComparisonOperation($oppositeSymptomId, $masterData['quelle_import_master_id'], $quelleId, $savedComparisonBackupId);
												if($addResult2['status'] === true){
													$addedSymtomId = $addResult2['return_data']['symptom_id'];
												}
												else
												{
													$db->rollback();
													$returnArr['status'] = false;
									    			$returnArr['message'] = $addResult2['message'];
									    			return $returnArr;
												}
												if($addedSymtomId != ""){
													if($conRow['initial_source_symptom_id'] == $symptomData['id']){
														$initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
														$comparing_source_symptom_id = (isset($addedSymtomId) AND $addedSymtomId !="" ) ? mysqli_real_escape_string($db, $addedSymtomId) : null;
														$comparing_source_code = (isset($comparison_name) AND $comparison_name !="" ) ? mysqli_real_escape_string($db, $comparison_name) : null;
														$initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
														$initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
														$comparing_source_id = (isset($quelleId) AND $quelleId !="" ) ? mysqli_real_escape_string($db, $quelleId) : null;
													} else {
														$initial_source_symptom_id = (isset($addedSymtomId) AND $addedSymtomId !="" ) ? mysqli_real_escape_string($db, $addedSymtomId) : null;
														$comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
														$initial_source_code = (isset($comparison_name) AND $comparison_name !="" ) ? mysqli_real_escape_string($db, $comparison_name) : null;
														$comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;
														$initial_source_id = (isset($quelleId) AND $quelleId !="" ) ? mysqli_real_escape_string($db, $quelleId) : null;
														$comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;
													}
												}
											}
										}

										$query = "INSERT INTO symptom_connections (source_arznei_id, is_initial_source, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, is_saved, connection_or_paste_type) VALUES (NULLIF('".$source_arznei_id."', ''), '".$is_initial_source."', NULLIF('".$initial_source_id."', ''), NULLIF('".$comparing_source_id."', ''), NULLIF('".$conversion_initial_source_id."', ''), NULLIF('".$conversion_comparing_source_id."', ''), NULLIF('".$initial_source_code."', ''), NULLIF('".$comparing_source_code."', ''), NULLIF('".$initial_source_symptom_id."', ''), NULLIF('".$comparing_source_symptom_id."', ''), NULLIF('".$initial_source_symptom_highlighted_de."', ''), NULLIF('".$initial_source_symptom_highlighted_en."', ''), NULLIF('".$comparing_source_symptom_highlighted_de."', ''), NULLIF('".$comparing_source_symptom_highlighted_en."', ''), NULLIF('".$initial_source_symptom_de."', ''), NULLIF('".$initial_source_symptom_en."', ''), NULLIF('".$comparing_source_symptom_de."', ''), NULLIF('".$comparing_source_symptom_en."', ''), NULLIF('".$connection_language."', ''), '".$matching_percentage."', '".$is_connected."', '".$is_ns_connect."', NULLIF('".$ns_connect_note."', ''), '".$is_pasted."', '".$is_ns_paste."', NULLIF('".$ns_paste_note."', ''), 1, NULLIF('".$connection_or_paste_type."', ''))";
										$db->query($query);

										$updQuery = "UPDATE symptom_connections SET is_saved = 1 WHERE id = ".$conRow['id'];
		            					$db->query($updQuery);

		            					// // Delete this symptom's previous version in the backup_connected_symptoms_details table and add the current one
		            					// deletePreviousAddNewBackupConnectedSymptom($initial_source_symptom_id, $savedComparisonBackupId);
		            					// deletePreviousAddNewBackupConnectedSymptom($comparing_source_symptom_id, $savedComparisonBackupId);

									}
								}
							}
						}
					}

					// Add remaining un-matched comparative symptoms
					$escapeSymptomCondition = "";
					if(!empty($escapeSymptomIds)){
						$uniqueMatchedSymptomIds = array_unique($escapeSymptomIds);
						$matchedSymptomIdsString = implode(',', $uniqueMatchedSymptomIds);
						$escapeSymptomCondition = "AND quelle_import_test.id NOT IN (".$matchedSymptomIdsString.")";
					}
					$comparingSourceIds = (!empty($comparingSources)) ? rtrim(implode(',', $comparingSources), ',') : null;
					if($comparingSourceIds != "")
					{
						$restOfComparingSymptomResultCount = $db->query("SELECT quelle_import_test.id FROM quelle_import_test WHERE quelle_import_test.arznei_id = '".$arzneiId."' AND quelle_import_test.is_appended_symptom_active = 1 AND quelle_import_test.quelle_id IN (".$comparingSourceIds.") ".$escapeSymptomCondition);
						if($restOfComparingSymptomResultCount->num_rows > 0){
							while($symptomData = mysqli_fetch_array($restOfComparingSymptomResultCount)){
								$mainSymtomId = "";
								$addResult = addTheSymptomInReSaveComparisonOperation($symptomData['id'], $masterData['quelle_import_master_id'], $quelleId, $savedComparisonBackupId);
								if($addResult['status'] === true)
								{
									$mainSymtomId = $addResult['return_data']['symptom_id'];
								}
								else
								{
									$db->rollback();
									$returnArr['status'] = false;
					    			$returnArr['message'] = $addResult['message'];
					    			return $returnArr;
								}

								if($mainSymtomId != "")
								{
									/* Now adding all connected symptoms in escapeSymptomIds array and also insert the paste connection one's */
									$connectedSymptomResult = $db->query("SELECT id, source_arznei_id, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, connection_or_paste_type FROM symptom_connections WHERE (initial_source_symptom_id = '".$symptomData['id']."' OR comparing_source_symptom_id = '".$symptomData['id']."') AND (is_connected = 1 OR is_pasted = 1)".$symptomConQueryCondition);
									if($connectedSymptomResult->num_rows > 0){
										while($conRow = mysqli_fetch_array($connectedSymptomResult)){

											// If this Symptom is an earalierly appended symptom then we have add this information in "appended_symptoms" table
											$iniSymptomAppendedInfo = $db->query("SELECT * FROM quelle_import_test WHERE id = ".$conRow['initial_source_symptom_id']);
											if($iniSymptomAppendedInfo->num_rows > 0){
												$iniSymptomAppendedData = mysqli_fetch_assoc($iniSymptomAppendedInfo);
												if($iniSymptomAppendedData['is_symptom_appended'] == 1 AND $iniSymptomAppendedData['is_appended_symptom_active'] == 1) {
													$iniAppendedSymptomsQuery=$db->query("SELECT id FROM appended_symptoms WHERE symptom_id = '".$conRow['initial_source_symptom_id']."'");
									            	if($iniAppendedSymptomsQuery->num_rows == 0){
									            		$iniAppendedSymptomInsertQuery = "INSERT INTO appended_symptoms (symptom_id) VALUES (NULLIF('".$conRow['initial_source_symptom_id']."', ''))";
							            				$db->query($iniAppendedSymptomInsertQuery);
							            			}
												}
											}
											// If this Symptom is an earalierly appended symptom then we have add this information in "appended_symptoms" table
											$comSymptomAppendedInfo = $db->query("SELECT * FROM quelle_import_test WHERE id = ".$conRow['comparing_source_symptom_id']);
											if($comSymptomAppendedInfo->num_rows > 0){
												$comSymptomAppendedData = mysqli_fetch_assoc($comSymptomAppendedInfo);
												if($comSymptomAppendedData['is_symptom_appended'] == 1 AND $comSymptomAppendedData['is_appended_symptom_active'] == 1) {
													$comAppendedSymptomsQuery=$db->query("SELECT id FROM appended_symptoms WHERE symptom_id = '".$conRow['comparing_source_symptom_id']."'");
									            	if($comAppendedSymptomsQuery->num_rows == 0){
									            		$comAppendedSymptomInsertQuery = "INSERT INTO appended_symptoms (symptom_id) VALUES (NULLIF('".$conRow['comparing_source_symptom_id']."', ''))";
							            				$db->query($comAppendedSymptomInsertQuery);
							            			}
												}
											}

											$source_arznei_id = (isset($conRow['source_arznei_id']) AND $conRow['source_arznei_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['source_arznei_id']) : null;
											$conversion_initial_source_id = (isset($conRow['conversion_initial_source_id']) AND $conRow['conversion_initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['conversion_initial_source_id']) : null;
											$conversion_comparing_source_id = (isset($conRow['conversion_comparing_source_id']) AND $conRow['conversion_comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['conversion_comparing_source_id']) : null;
											$connection_language = (isset($conRow['connection_language']) AND $conRow['connection_language'] !="" ) ? mysqli_real_escape_string($db, $conRow['connection_language']) : null;

											if($conRow['initial_source_symptom_id'] == $symptomData['id']){
												$oppositeSymptomId = $conRow['comparing_source_symptom_id'];

												$is_initial_source = 1;
												$initial_source_id = (isset($quelleId) AND $quelleId !="" ) ? mysqli_real_escape_string($db, $quelleId) : null;
												$comparing_source_id = (isset($conRow['comparing_source_id']) AND $conRow['comparing_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_id']) : null;

												$initial_source_code = (isset($comparison_name) AND $comparison_name !="" ) ? mysqli_real_escape_string($db, $comparison_name) : null;
												$comparing_source_code = (isset($conRow['comparing_source_code']) AND $conRow['comparing_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_code']) : null;

												$initial_source_symptom_id = (isset($mainSymtomId) AND $mainSymtomId !="" ) ? mysqli_real_escape_string($db, $mainSymtomId) : null;
												$comparing_source_symptom_id = (isset($conRow['comparing_source_symptom_id']) AND $conRow['comparing_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_id']) : null;
												$initial_source_symptom_highlighted_de = (isset($conRow['initial_source_symptom_highlighted_de']) AND $conRow['initial_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_de']) : null;
												$initial_source_symptom_highlighted_en = (isset($conRow['initial_source_symptom_highlighted_en']) AND $conRow['initial_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_en']) : null;
												$comparing_source_symptom_highlighted_de = (isset($conRow['comparing_source_symptom_highlighted_de']) AND $conRow['comparing_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_de']) : null;
												$comparing_source_symptom_highlighted_en = (isset($conRow['comparing_source_symptom_highlighted_en']) AND $conRow['comparing_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_en']) : null;
												$initial_source_symptom_de = (isset($conRow['initial_source_symptom_de']) AND $conRow['initial_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_de']) : null;
												$initial_source_symptom_en = (isset($conRow['initial_source_symptom_en']) AND $conRow['initial_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_en']) : null;
												$comparing_source_symptom_de = (isset($conRow['comparing_source_symptom_de']) AND $conRow['comparing_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_de']) : null;
												$comparing_source_symptom_en = (isset($conRow['comparing_source_symptom_en']) AND $conRow['comparing_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_en']) : null;
												$matching_percentage = (isset($conRow['matching_percentage']) AND $conRow['matching_percentage'] !="" ) ? mysqli_real_escape_string($db, $conRow['matching_percentage']) : null;
												$is_connected = $conRow['is_connected'];
												$is_ns_connect = $conRow['is_ns_connect'];
												$ns_connect_note = (isset($conRow['ns_connect_note']) AND $conRow['ns_connect_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_connect_note']) : null;
												$is_pasted = $conRow['is_pasted'];
												$is_ns_paste = $conRow['is_ns_paste'];
												$ns_paste_note = (isset($conRow['ns_paste_note']) AND $conRow['ns_paste_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_paste_note']) : null;
												$connection_or_paste_type = (isset($conRow['connection_or_paste_type']) AND $conRow['connection_or_paste_type'] !="" ) ? mysqli_real_escape_string($db, $conRow['connection_or_paste_type']) : null;
											}
											else
											{
												$oppositeSymptomId = $conRow['initial_source_symptom_id'];

												$is_initial_source = 0;
												$initial_source_id = (isset($conRow['initial_source_id']) AND $conRow['initial_source_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_id']) : null;
												$comparing_source_id = (isset($quelleId) AND $quelleId !="" ) ? mysqli_real_escape_string($db, $quelleId) : null;

												$initial_source_code = (isset($conRow['initial_source_code']) AND $conRow['initial_source_code'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_code']) : null;
												$comparing_source_code = (isset($comparison_name) AND $comparison_name !="" ) ? mysqli_real_escape_string($db, $comparison_name) : null;
												$initial_source_symptom_id = (isset($conRow['initial_source_symptom_id']) AND $conRow['initial_source_symptom_id'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_id']) : null;
												$comparing_source_symptom_id = (isset($mainSymtomId) AND $mainSymtomId !="" ) ? mysqli_real_escape_string($db, $mainSymtomId) : null;
												$initial_source_symptom_highlighted_de = (isset($conRow['initial_source_symptom_highlighted_de']) AND $conRow['initial_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_de']) : null;
												$initial_source_symptom_highlighted_en = (isset($conRow['initial_source_symptom_highlighted_en']) AND $conRow['initial_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_highlighted_en']) : null;
												$comparing_source_symptom_highlighted_de = (isset($conRow['comparing_source_symptom_highlighted_de']) AND $conRow['comparing_source_symptom_highlighted_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_de']) : null;
												$comparing_source_symptom_highlighted_en = (isset($conRow['comparing_source_symptom_highlighted_en']) AND $conRow['comparing_source_symptom_highlighted_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_highlighted_en']) : null;
												$initial_source_symptom_de = (isset($conRow['initial_source_symptom_de']) AND $conRow['initial_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_de']) : null;
												$initial_source_symptom_en = (isset($conRow['initial_source_symptom_en']) AND $conRow['initial_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['initial_source_symptom_en']) : null;
												$comparing_source_symptom_de = (isset($conRow['comparing_source_symptom_de']) AND $conRow['comparing_source_symptom_de'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_de']) : null;
												$comparing_source_symptom_en = (isset($conRow['comparing_source_symptom_en']) AND $conRow['comparing_source_symptom_en'] !="" ) ? mysqli_real_escape_string($db, $conRow['comparing_source_symptom_en']) : null;
												$matching_percentage = (isset($conRow['matching_percentage']) AND $conRow['matching_percentage'] !="" ) ? mysqli_real_escape_string($db, $conRow['matching_percentage']) : null;
												$is_connected = $conRow['is_connected'];
												$is_ns_connect = $conRow['is_ns_connect'];
												$ns_connect_note = (isset($conRow['ns_connect_note']) AND $conRow['ns_connect_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_connect_note']) : null;
												$is_pasted = $conRow['is_pasted'];
												$is_ns_paste = $conRow['is_ns_paste'];
												$ns_paste_note = (isset($conRow['ns_paste_note']) AND $conRow['ns_paste_note'] !="" ) ? mysqli_real_escape_string($db, $conRow['ns_paste_note']) : null;
												$connection_or_paste_type = (isset($conRow['connection_or_paste_type']) AND $conRow['connection_or_paste_type'] !="" ) ? mysqli_real_escape_string($db, $conRow['connection_or_paste_type']) : null;
											}

											$query = "INSERT INTO symptom_connections (source_arznei_id, is_initial_source, initial_source_id, comparing_source_id, conversion_initial_source_id, conversion_comparing_source_id, initial_source_code, comparing_source_code, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_highlighted_de, initial_source_symptom_highlighted_en, comparing_source_symptom_highlighted_de, comparing_source_symptom_highlighted_en, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language, matching_percentage, is_connected, is_ns_connect, ns_connect_note, is_pasted, is_ns_paste, ns_paste_note, is_saved, connection_or_paste_type) VALUES (NULLIF('".$source_arznei_id."', ''), '".$is_initial_source."', NULLIF('".$initial_source_id."', ''), NULLIF('".$comparing_source_id."', ''), NULLIF('".$conversion_initial_source_id."', ''), NULLIF('".$conversion_comparing_source_id."', ''), NULLIF('".$initial_source_code."', ''), NULLIF('".$comparing_source_code."', ''), NULLIF('".$initial_source_symptom_id."', ''), NULLIF('".$comparing_source_symptom_id."', ''), NULLIF('".$initial_source_symptom_highlighted_de."', ''), NULLIF('".$initial_source_symptom_highlighted_en."', ''), NULLIF('".$comparing_source_symptom_highlighted_de."', ''), NULLIF('".$comparing_source_symptom_highlighted_en."', ''), NULLIF('".$initial_source_symptom_de."', ''), NULLIF('".$initial_source_symptom_en."', ''), NULLIF('".$comparing_source_symptom_de."', ''), NULLIF('".$comparing_source_symptom_en."', ''), NULLIF('".$connection_language."', ''), '".$matching_percentage."', '".$is_connected."', '".$is_ns_connect."', NULLIF('".$ns_connect_note."', ''), '".$is_pasted."', '".$is_ns_paste."', NULLIF('".$ns_paste_note."', ''), 1, NULLIF('".$connection_or_paste_type."', ''))";
											$db->query($query);

											$updQuery = "UPDATE symptom_connections SET is_saved = 1 WHERE id = ".$conRow['id'];
			            					$db->query($updQuery);

			            					// // Delete this symptom's previous version in the backup_connected_symptoms_details table and add the current one
			            					// deletePreviousAddNewBackupConnectedSymptom($initial_source_symptom_id, $savedComparisonBackupId);
			            					// deletePreviousAddNewBackupConnectedSymptom($comparing_source_symptom_id, $savedComparisonBackupId);
										}
									}
								}
							}
						}
					}
					/* Insert Symptom END */
					$db->commit();
					$returnArr['status'] = true;
			    	$returnArr['message'] = "Success";
	            }

				
			}
		}catch (Exception $e) {
	    	$db->rollback();
		    $returnArr['message'] = $e->getMessage();
		}
		/* MySQL Transaction END */

		return $returnArr;
	}


	function addTheSymptomInReSaveComparisonOperation($symptomId, $quelleSymptomsMasterId, $newQuelleId, $savedComparisonBackupId = NULL)
	{
		global $db;
		global $date;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Symptom add operation failed'
		);
		
		/* MySQL Transaction START */
		try{
			if($symptomId != ""){
				$db->begin_transaction();
				$symptomResult = $db->query("SELECT * FROM quelle_import_test WHERE id = ".$symptomId);
				if($symptomResult->num_rows > 0){
					$symptomData = mysqli_fetch_assoc($symptomResult);

					$symptomData['symptom_pruefer'] = "symptom_pruefer";
					$symptomData['symptom_reference'] = "symptom_reference";

					$symptomData['id'] = ($symptomData['id'] != "") ? $symptomData['id'] : "";

					$sourceResult = mysqli_query($db,"SELECT Q.quelle_type_id FROM quelle AS Q WHERE Q.quelle_id = '".$newQuelleId."'");
					if(mysqli_num_rows($sourceResult) > 0){
						$sourceRow = mysqli_fetch_assoc($sourceResult);
						$sourceType = $sourceRow['quelle_type_id'];
					}

					$symptomData['original_symptom_id'] = (isset($sourceType) AND $sourceType == 3) ? $symptomId : null;

					$symptomData['arznei_id'] = ($symptomData['arznei_id'] != "") ? mysqli_real_escape_string($db, $symptomData['arznei_id']) : null;
					$symptomData['original_quelle_id'] = ($symptomData['original_quelle_id'] != "") ? mysqli_real_escape_string($db, $symptomData['original_quelle_id']) : null;
					$symptomData['quelle_code'] = ($symptomData['quelle_code'] != "") ? mysqli_real_escape_string($db, $symptomData['quelle_code']) : null;
					$symptomData['Symptomnummer'] = mysqli_real_escape_string($db, $symptomData['Symptomnummer']);
					$symptomData['SeiteOriginalVon'] = mysqli_real_escape_string($db, $symptomData['SeiteOriginalVon']);
					$symptomData['SeiteOriginalBis'] = mysqli_real_escape_string($db, $symptomData['SeiteOriginalBis']);
					$symptomData['final_version_de'] = mysqli_real_escape_string($db, $symptomData['final_version_de']);
					$symptomData['final_version_en'] = mysqli_real_escape_string($db, $symptomData['final_version_en']);
					$symptomData['Beschreibung_de'] = mysqli_real_escape_string($db, $symptomData['Beschreibung_de']);
					$symptomData['Beschreibung_en'] = mysqli_real_escape_string($db, $symptomData['Beschreibung_en']);
					$symptomData['BeschreibungOriginal_de'] = mysqli_real_escape_string($db, $symptomData['BeschreibungOriginal_de']);
					$symptomData['BeschreibungOriginal_en'] = mysqli_real_escape_string($db, $symptomData['BeschreibungOriginal_en']);
					$symptomData['BeschreibungFull_de'] = mysqli_real_escape_string($db, $symptomData['BeschreibungFull_de']);
					$symptomData['BeschreibungFull_en'] = mysqli_real_escape_string($db, $symptomData['BeschreibungFull_en']);
					$symptomData['BeschreibungPlain_de'] = mysqli_real_escape_string($db, $symptomData['BeschreibungPlain_de']);
					$symptomData['BeschreibungPlain_en'] = mysqli_real_escape_string($db, $symptomData['BeschreibungPlain_en']);
					$symptomData['searchable_text_de'] = mysqli_real_escape_string($db, $symptomData['searchable_text_de']);
					$symptomData['searchable_text_en'] = mysqli_real_escape_string($db, $symptomData['searchable_text_en']);
					$symptomData['bracketedString_de'] = mysqli_real_escape_string($db, $symptomData['bracketedString_de']);
					$symptomData['bracketedString_en'] = mysqli_real_escape_string($db, $symptomData['bracketedString_en']);
					$symptomData['timeString_de'] = mysqli_real_escape_string($db, $symptomData['timeString_de']);
					$symptomData['timeString_en'] = mysqli_real_escape_string($db, $symptomData['timeString_en']);
					$symptomData['Fussnote'] = mysqli_real_escape_string($db, $symptomData['Fussnote']);
					$symptomData['EntnommenAus'] = mysqli_real_escape_string($db, $symptomData['EntnommenAus']);
					$symptomData['Verweiss'] = mysqli_real_escape_string($db, $symptomData['Verweiss']);
					$symptomData['Graduierung'] = mysqli_real_escape_string($db, $symptomData['Graduierung']);
					$symptomData['BereichID'] = mysqli_real_escape_string($db, $symptomData['BereichID']);
					$symptomData['Kommentar'] = mysqli_real_escape_string($db, $symptomData['Kommentar']);
					$symptomData['Unklarheiten'] = mysqli_real_escape_string($db, $symptomData['Unklarheiten']);
					$symptomData['Remedy'] = mysqli_real_escape_string($db, $symptomData['Remedy']);
					$symptomData['symptom_of_different_remedy'] = mysqli_real_escape_string($db, $symptomData['symptom_of_different_remedy']);
					$symptomData['subChapter'] = mysqli_real_escape_string($db, $symptomData['subChapter']);
					$symptomData['subSubChapter'] = mysqli_real_escape_string($db, $symptomData['subSubChapter']);
					$symptomData['symptom_edit_comment'] = mysqli_real_escape_string($db, $symptomData['symptom_edit_comment']);
					$symptomData['is_final_version_available'] = mysqli_real_escape_string($db, $symptomData['is_final_version_available']);
					$symptomData['is_symptom_number_mismatch'] = mysqli_real_escape_string($db, $symptomData['is_symptom_number_mismatch']);
					$symptomData['is_symptom_appended'] = mysqli_real_escape_string($db, $symptomData['is_symptom_appended']);
					$symptomData['is_appended_symptom_active'] = mysqli_real_escape_string($db, $symptomData['is_appended_symptom_active']);

					// 
					// If this symptom has it's details in backup_connected_symptoms_details table associated with it's saved_comparisons_backup_id than picking it's information from there.
					$backupConnectedSymptomQuery = $db->query("SELECT * FROM backup_connected_symptoms_details WHERE saved_comparisons_backup_id = '".$savedComparisonBackupId."' AND original_symptom_id = '".$symptomId."'");
	            	if($backupConnectedSymptomQuery->num_rows > 0){
	            		$rowData = mysqli_fetch_assoc($backupConnectedSymptomQuery);

	            		$symptomData['symptom_pruefer'] = "backup_connected_symptoms_details_pruefer";
						$symptomData['symptom_reference'] = "backup_connected_symptoms_details_reference";

						$symptomData['id'] = ($rowData['id'] != "") ? $rowData['id'] : "";

	            		$symptomData['arznei_id'] = ($rowData['arznei_id'] != "") ? mysqli_real_escape_string($db, $rowData['arznei_id']) : null;
						$symptomData['original_quelle_id'] = ($rowData['original_quelle_id'] != "") ? mysqli_real_escape_string($db, $rowData['original_quelle_id']) : null;
						$symptomData['quelle_code'] = ($rowData['quelle_code'] != "") ? mysqli_real_escape_string($db, $rowData['quelle_code']) : null;
						$symptomData['Symptomnummer'] = mysqli_real_escape_string($db, $rowData['Symptomnummer']);
						$symptomData['SeiteOriginalVon'] = mysqli_real_escape_string($db, $rowData['SeiteOriginalVon']);
						$symptomData['SeiteOriginalBis'] = mysqli_real_escape_string($db, $rowData['SeiteOriginalBis']);
						$symptomData['final_version_de'] = mysqli_real_escape_string($db, $rowData['final_version_de']);
						$symptomData['final_version_en'] = mysqli_real_escape_string($db, $rowData['final_version_en']);
						$symptomData['Beschreibung_de'] = mysqli_real_escape_string($db, $rowData['Beschreibung_de']);
						$symptomData['Beschreibung_en'] = mysqli_real_escape_string($db, $rowData['Beschreibung_en']);
						$symptomData['BeschreibungOriginal_de'] = mysqli_real_escape_string($db, $rowData['BeschreibungOriginal_de']);
						$symptomData['BeschreibungOriginal_en'] = mysqli_real_escape_string($db, $rowData['BeschreibungOriginal_en']);
						$symptomData['BeschreibungFull_de'] = mysqli_real_escape_string($db, $rowData['BeschreibungFull_de']);
						$symptomData['BeschreibungFull_en'] = mysqli_real_escape_string($db, $rowData['BeschreibungFull_en']);
						$symptomData['BeschreibungPlain_de'] = mysqli_real_escape_string($db, $rowData['BeschreibungPlain_de']);
						$symptomData['BeschreibungPlain_en'] = mysqli_real_escape_string($db, $rowData['BeschreibungPlain_en']);
						$symptomData['searchable_text_de'] = mysqli_real_escape_string($db, $rowData['searchable_text_de']);
						$symptomData['searchable_text_en'] = mysqli_real_escape_string($db, $rowData['searchable_text_en']);
						$symptomData['bracketedString_de'] = mysqli_real_escape_string($db, $rowData['bracketedString_de']);
						$symptomData['bracketedString_en'] = mysqli_real_escape_string($db, $rowData['bracketedString_en']);
						$symptomData['timeString_de'] = mysqli_real_escape_string($db, $rowData['timeString_de']);
						$symptomData['timeString_en'] = mysqli_real_escape_string($db, $rowData['timeString_en']);
						$symptomData['Fussnote'] = mysqli_real_escape_string($db, $rowData['Fussnote']);
						$symptomData['EntnommenAus'] = mysqli_real_escape_string($db, $rowData['EntnommenAus']);
						$symptomData['Verweiss'] = mysqli_real_escape_string($db, $rowData['Verweiss']);
						$symptomData['Graduierung'] = mysqli_real_escape_string($db, $rowData['Graduierung']);
						$symptomData['BereichID'] = mysqli_real_escape_string($db, $rowData['BereichID']);
						$symptomData['Kommentar'] = mysqli_real_escape_string($db, $rowData['Kommentar']);
						$symptomData['Unklarheiten'] = mysqli_real_escape_string($db, $rowData['Unklarheiten']);
						$symptomData['Remedy'] = mysqli_real_escape_string($db, $rowData['Remedy']);
						$symptomData['symptom_of_different_remedy'] = mysqli_real_escape_string($db, $rowData['symptom_of_different_remedy']);
						$symptomData['subChapter'] = mysqli_real_escape_string($db, $rowData['subChapter']);
						$symptomData['subSubChapter'] = mysqli_real_escape_string($db, $rowData['subSubChapter']);
						$symptomData['symptom_edit_comment'] = mysqli_real_escape_string($db, $rowData['symptom_edit_comment']);
						$symptomData['is_final_version_available'] = mysqli_real_escape_string($db, $rowData['is_final_version_available']);
						$symptomData['is_symptom_number_mismatch'] = mysqli_real_escape_string($db, $rowData['is_symptom_number_mismatch']);
						$symptomData['is_symptom_appended'] = mysqli_real_escape_string($db, $rowData['is_symptom_appended']);
	            	}
	            	else
	            	{
	            		// 
	            		// Getting initial source id and comparing source ids of this comparison
	            		$masterQuery = $db->query("SELECT SC.initial_source_id, SC.comparing_source_ids, SC.comparison_name, QIM.id AS quelle_import_master_id FROM saved_comparisons AS SC JOIN quelle_import_master AS QIM ON SC.quelle_id = QIM.quelle_id WHERE SC.quelle_id = '".$newQuelleId."' AND SC.arznei_id = '".$symptomData['arznei_id']."'");
			            if($masterQuery->num_rows > 0){
			            	$masterData = mysqli_fetch_assoc($masterQuery);
			            }  
			            $initialSource = (isset($masterData['initial_source_id']) AND $masterData['initial_source_id'] != "") ? trim($masterData['initial_source_id']) : "";
						$comparingSources = (isset($masterData['comparing_source_ids']) AND $masterData['comparing_source_ids'] != "") ? trim($masterData['comparing_source_ids']) : "";
	            		
	            		// 
				        // If this symptom is been swapped and it's infromation is not found in the above if section, then we have to pick this symptom's information from the quelle_import_backup table, as it was stored at the time of creation of this backup set
				        $swappedSymptomResult = mysqli_query($db,"SELECT * FROM swapped_symptoms WHERE symptom_id = '".$symptomId."' AND comparison_initial_source_id = '".$initialSource."' AND comparison_comparing_source_ids = '".$comparingSources."' AND arznei_id = '".$symptomData['arznei_id']."'");
						if(mysqli_num_rows($swappedSymptomResult) > 0){
							$symptomRow = mysqli_fetch_assoc($swappedSymptomResult);
							// Here joining is made on backup table's quelle_id not with the original_quelle_id
							$importMasterBackupResult = mysqli_query($db,"SELECT quelle_import_master_backup.id AS quelle_import_master_backup_id FROM saved_comparisons_backup JOIN quelle_import_master_backup ON saved_comparisons_backup.quelle_id = quelle_import_master_backup.quelle_id WHERE saved_comparisons_backup.id = '".$savedComparisonBackupId."'");
							if(mysqli_num_rows($importMasterBackupResult) > 0){
								$masterSetRow = mysqli_fetch_assoc($importMasterBackupResult);
								$masterBackupSetSymptomResult = mysqli_query($db,"SELECT * FROM quelle_import_backup WHERE master_id = '".$masterSetRow['quelle_import_master_backup_id']."' AND original_symptom_id = '".$symptomId."'");
								if(mysqli_num_rows($masterBackupSetSymptomResult) > 0){
									$backupSetSymptomRow = mysqli_fetch_assoc($masterBackupSetSymptomResult);

									$symptomData['symptom_pruefer'] = "symptom_pruefer_backup";
									$symptomData['symptom_reference'] = "symptom_reference_backup";

									$symptomData['id'] = ($backupSetSymptomRow['id'] != "") ? $backupSetSymptomRow['id'] : "";

				            		$symptomData['arznei_id'] = ($backupSetSymptomRow['arznei_id'] != "") ? mysqli_real_escape_string($db, $backupSetSymptomRow['arznei_id']) : null;
									$symptomData['original_quelle_id'] = ($backupSetSymptomRow['original_quelle_id'] != "") ? mysqli_real_escape_string($db, $backupSetSymptomRow['original_quelle_id']) : null;
									$symptomData['quelle_code'] = ($backupSetSymptomRow['quelle_code'] != "") ? mysqli_real_escape_string($db, $backupSetSymptomRow['quelle_code']) : null;
									$symptomData['Symptomnummer'] = mysqli_real_escape_string($db, $backupSetSymptomRow['Symptomnummer']);
									$symptomData['SeiteOriginalVon'] = mysqli_real_escape_string($db, $backupSetSymptomRow['SeiteOriginalVon']);
									$symptomData['SeiteOriginalBis'] = mysqli_real_escape_string($db, $backupSetSymptomRow['SeiteOriginalBis']);
									$symptomData['final_version_de'] = mysqli_real_escape_string($db, $backupSetSymptomRow['final_version_de']);
									$symptomData['final_version_en'] = mysqli_real_escape_string($db, $backupSetSymptomRow['final_version_en']);
									$symptomData['Beschreibung_de'] = mysqli_real_escape_string($db, $backupSetSymptomRow['Beschreibung_de']);
									$symptomData['Beschreibung_en'] = mysqli_real_escape_string($db, $backupSetSymptomRow['Beschreibung_en']);
									$symptomData['BeschreibungOriginal_de'] = mysqli_real_escape_string($db, $backupSetSymptomRow['BeschreibungOriginal_de']);
									$symptomData['BeschreibungOriginal_en'] = mysqli_real_escape_string($db, $backupSetSymptomRow['BeschreibungOriginal_en']);
									$symptomData['BeschreibungFull_de'] = mysqli_real_escape_string($db, $backupSetSymptomRow['BeschreibungFull_de']);
									$symptomData['BeschreibungFull_en'] = mysqli_real_escape_string($db, $backupSetSymptomRow['BeschreibungFull_en']);
									$symptomData['BeschreibungPlain_de'] = mysqli_real_escape_string($db, $backupSetSymptomRow['BeschreibungPlain_de']);
									$symptomData['BeschreibungPlain_en'] = mysqli_real_escape_string($db, $backupSetSymptomRow['BeschreibungPlain_en']);
									$symptomData['searchable_text_de'] = mysqli_real_escape_string($db, $backupSetSymptomRow['searchable_text_de']);
									$symptomData['searchable_text_en'] = mysqli_real_escape_string($db, $backupSetSymptomRow['searchable_text_en']);
									$symptomData['bracketedString_de'] = mysqli_real_escape_string($db, $backupSetSymptomRow['bracketedString_de']);
									$symptomData['bracketedString_en'] = mysqli_real_escape_string($db, $backupSetSymptomRow['bracketedString_en']);
									$symptomData['timeString_de'] = mysqli_real_escape_string($db, $backupSetSymptomRow['timeString_de']);
									$symptomData['timeString_en'] = mysqli_real_escape_string($db, $backupSetSymptomRow['timeString_en']);
									$symptomData['Fussnote'] = mysqli_real_escape_string($db, $backupSetSymptomRow['Fussnote']);
									$symptomData['EntnommenAus'] = mysqli_real_escape_string($db, $backupSetSymptomRow['EntnommenAus']);
									$symptomData['Verweiss'] = mysqli_real_escape_string($db, $backupSetSymptomRow['Verweiss']);
									$symptomData['Graduierung'] = mysqli_real_escape_string($db, $backupSetSymptomRow['Graduierung']);
									$symptomData['BereichID'] = mysqli_real_escape_string($db, $backupSetSymptomRow['BereichID']);
									$symptomData['Kommentar'] = mysqli_real_escape_string($db, $backupSetSymptomRow['Kommentar']);
									$symptomData['Unklarheiten'] = mysqli_real_escape_string($db, $backupSetSymptomRow['Unklarheiten']);
									$symptomData['Remedy'] = mysqli_real_escape_string($db, $backupSetSymptomRow['Remedy']);
									$symptomData['symptom_of_different_remedy'] = mysqli_real_escape_string($db, $backupSetSymptomRow['symptom_of_different_remedy']);
									$symptomData['subChapter'] = mysqli_real_escape_string($db, $backupSetSymptomRow['subChapter']);
									$symptomData['subSubChapter'] = mysqli_real_escape_string($db, $backupSetSymptomRow['subSubChapter']);
									$symptomData['symptom_edit_comment'] = mysqli_real_escape_string($db, $backupSetSymptomRow['symptom_edit_comment']);
									$symptomData['is_final_version_available'] = mysqli_real_escape_string($db, $backupSetSymptomRow['is_final_version_available']);
									$symptomData['is_symptom_number_mismatch'] = mysqli_real_escape_string($db, $backupSetSymptomRow['is_symptom_number_mismatch']);
									$symptomData['is_symptom_appended'] = mysqli_real_escape_string($db, $backupSetSymptomRow['is_symptom_appended']);
								}
							}
						}
	            	}


					$mainSymptomInsertQuery="INSERT INTO quelle_import_test (master_id, original_symptom_id, arznei_id, quelle_id, original_quelle_id, quelle_code, Symptomnummer, SeiteOriginalVon, SeiteOriginalBis, final_version_de, final_version_en, Beschreibung_de, Beschreibung_en, BeschreibungOriginal_de, BeschreibungOriginal_en, BeschreibungFull_de, BeschreibungFull_en, BeschreibungPlain_de, BeschreibungPlain_en, searchable_text_de, searchable_text_en, bracketedString_de, bracketedString_en, timeString_de, timeString_en, Fussnote, EntnommenAus, Verweiss, Graduierung, BereichID, Kommentar, Unklarheiten, Remedy, symptom_of_different_remedy, subChapter, subSubChapter, symptom_edit_comment, is_final_version_available, is_symptom_number_mismatch, is_symptom_appended, is_appended_symptom_active) VALUES (".$quelleSymptomsMasterId.", NULLIF('".$symptomData['original_symptom_id']."', ''), NULLIF('".$symptomData['arznei_id']."', ''), NULLIF('".$newQuelleId."', ''), NULLIF('".$symptomData['original_quelle_id']."', ''), NULLIF('".$symptomData['quelle_code']."', ''), NULLIF('".$symptomData['Symptomnummer']."', ''), NULLIF('".$symptomData['SeiteOriginalVon']."', ''), NULLIF('".$symptomData['SeiteOriginalBis']."', ''), NULLIF('".$symptomData['final_version_de']."', ''), NULLIF('".$symptomData['final_version_en']."', ''), NULLIF('".$symptomData['Beschreibung_de']."', ''), NULLIF('".$symptomData['Beschreibung_en']."', ''), NULLIF('".$symptomData['BeschreibungOriginal_de']."', ''), NULLIF('".$symptomData['BeschreibungOriginal_en']."', ''), NULLIF('".$symptomData['BeschreibungFull_de']."', ''), NULLIF('".$symptomData['BeschreibungFull_en']."', ''), NULLIF('".$symptomData['BeschreibungPlain_de']."', ''), NULLIF('".$symptomData['BeschreibungPlain_en']."', ''), NULLIF('".$symptomData['searchable_text_de']."', ''), NULLIF('".$symptomData['searchable_text_en']."', ''), NULLIF('".$symptomData['bracketedString_de']."', ''), NULLIF('".$symptomData['bracketedString_en']."', ''), NULLIF('".$symptomData['timeString_de']."', ''), NULLIF('".$symptomData['timeString_en']."', ''), NULLIF('".$symptomData['Fussnote']."', ''), NULLIF('".$symptomData['EntnommenAus']."', ''), NULLIF('".$symptomData['Verweiss']."', ''), NULLIF('".$symptomData['Graduierung']."', ''), NULLIF('".$symptomData['BereichID']."', ''), NULLIF('".$symptomData['Kommentar']."', ''), NULLIF('".$symptomData['Unklarheiten']."', ''), NULLIF('".$symptomData['Remedy']."', ''), NULLIF('".$symptomData['symptom_of_different_remedy']."', ''), NULLIF('".$symptomData['subChapter']."', ''), NULLIF('".$symptomData['subSubChapter']."', ''), NULLIF('".$symptomData['symptom_edit_comment']."', ''), NULLIF('".$symptomData['is_final_version_available']."', ''), '".$symptomData['is_symptom_number_mismatch']."', NULLIF('".$symptomData['is_symptom_appended']."', ''), NULLIF('".$symptomData['is_appended_symptom_active']."', ''))";
					$db->query($mainSymptomInsertQuery);
		            $mainSymtomId = $db->insert_id;
		            

		            // if Symptom is appended in earlier comparison and it is active, then that information needs to carry forward in the further comparison so i am adding this symptom's append infromations and from(appended_symptoms) there it will get forwarded to "appended_symptoms_backup" table
		            if($symptomData['is_symptom_appended'] == 1 AND $symptomData['is_appended_symptom_active'] == 1 AND $mainSymtomId != "") {
		            	$isSymptomAppendedResult = $db->query("SELECT * FROM appended_symptoms WHERE symptom_id = '".$mainSymtomId."'");
						if($isSymptomAppendedResult->num_rows == 0){
		            		$appendedSymptomInsertQuery="INSERT INTO appended_symptoms (symptom_id) VALUES (NULLIF('".$mainSymtomId."', ''))";
			            	$db->query($appendedSymptomInsertQuery);
			        	}
		            }

		            /* Insert Symptom_pruefer relation START */
		            $symptomPrueferResult = $db->query("SELECT symptom_id, pruefer_id FROM ".$symptomData['symptom_pruefer']." where symptom_id = '".$symptomData['id']."'");
					if($symptomPrueferResult->num_rows > 0){
						while($symptomPrueferData = mysqli_fetch_array($symptomPrueferResult)){
							$mainSymptomPrueferInsertQuery = "INSERT INTO symptom_pruefer (symptom_id, pruefer_id, ersteller_datum) VALUES ('".$mainSymtomId."', '".$symptomPrueferData['pruefer_id']."', '".$date."')";
			            	$db->query($mainSymptomPrueferInsertQuery);
						}
					}
					/* Insert Symptom_pruefer relation END */

					/* Insert symptom_reference relation START */
		            $symptomReferenceResult = $db->query("SELECT symptom_id, reference_id FROM ".$symptomData['symptom_reference']." where symptom_id = '".$symptomData['id']."'");
					if($symptomReferenceResult->num_rows > 0){
						while($symptomReferenceData = mysqli_fetch_array($symptomReferenceResult)){
							$mainSymptomReferenceInsertQuery = "INSERT INTO symptom_reference (symptom_id, reference_id, ersteller_datum) VALUES ('".$mainSymtomId."', '".$symptomReferenceData['reference_id']."', '".$date."')";
			            	$db->query($mainSymptomReferenceInsertQuery);
						}
					}
					/* Insert symptom_reference relation END */
				}	
			}
			$db->commit();
			if(isset($mainSymtomId) AND $mainSymtomId != "")
			{
				$returnArr['status'] = true;
				$returnArr['return_data']['symptom_id'] = $mainSymtomId;
		    	$returnArr['message'] = "Success";
			}
		}catch (Exception $e) {
	    	$db->rollback();
		    $returnArr['message'] = $e->getMessage();
		}
		/* MySQL Transaction END */

		return $returnArr;
	}


	function deletePreviousAddNewBackupConnectedSymptom($symptomId, $savedComparisonBackupId = NULL){
		global $db;
		global $date;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Operation failed'
		);
		
		/* MySQL Transaction START */
		try{
			if($savedComparisonBackupId != ""){
				// Delete this symptom's previous version in the backup_connected_symptoms_details table and add the current one
				if($savedComparisonBackupId != ""){
					$backupConnectedSymptomResult = $db->query("SELECT id FROM backup_connected_symptoms_details WHERE original_symptom_id = '".$symptomId."' AND saved_comparisons_backup_id = '".$savedComparisonBackupId."'");
					if($backupConnectedSymptomResult->num_rows > 0){
						while($backupConnectedSymptomData = mysqli_fetch_array($backupConnectedSymptomResult)){
							$backupSetsSwapSymPrueferDeleteQuery="DELETE FROM backup_connected_symptoms_details_pruefer WHERE symptom_id = ".$backupConnectedSymptomData['id'];
	            			$db->query($backupSetsSwapSymPrueferDeleteQuery);

	            			$backupSetsSwapSymRefDeleteQuery = "DELETE FROM backup_connected_symptoms_details_reference WHERE symptom_id = ".$backupConnectedSymptomData['id'];
	            			$db->query($backupSetsSwapSymRefDeleteQuery);
						}
					}
        			$backupConnectedSymDeleteQuery="DELETE FROM backup_connected_symptoms_details WHERE original_symptom_id = '".$symptomId."' AND saved_comparisons_backup_id = '".$savedComparisonBackupId."'";
        			$db->query($backupConnectedSymDeleteQuery);
				}


				$symptomResult = mysqli_query($db,"SELECT * FROM quelle_import_test WHERE id = '".$symptomId."'");
				if(mysqli_num_rows($symptomResult) > 0){
					$symptomData = mysqli_fetch_assoc($symptomResult);

					$symptomData['original_symptom_id'] = ($symptomData['id'] != "") ? mysqli_real_escape_string($db, $symptomData['id']) : null;
					$symptomData['master_id'] = ($symptomData['master_id'] != "") ? mysqli_real_escape_string($db, $symptomData['master_id']) : null;
					$symptomData['arznei_id'] = ($symptomData['arznei_id'] != "") ? mysqli_real_escape_string($db, $symptomData['arznei_id']) : null;
					$symptomData['quelle_id'] = ($symptomData['quelle_id'] != "") ? mysqli_real_escape_string($db, $symptomData['quelle_id']) : null;
					$symptomData['original_quelle_id'] = ($symptomData['original_quelle_id'] != "") ? mysqli_real_escape_string($db, $symptomData['original_quelle_id']) : null;
					$symptomData['quelle_code'] = ($symptomData['quelle_code'] != "") ? mysqli_real_escape_string($db, $symptomData['quelle_code']) : null;
					$symptomData['Symptomnummer'] = mysqli_real_escape_string($db, $symptomData['Symptomnummer']);
					$symptomData['SeiteOriginalVon'] = mysqli_real_escape_string($db, $symptomData['SeiteOriginalVon']);
					$symptomData['SeiteOriginalBis'] = mysqli_real_escape_string($db, $symptomData['SeiteOriginalBis']);
					$symptomData['final_version_de'] = mysqli_real_escape_string($db, $symptomData['final_version_de']);
					$symptomData['final_version_en'] = mysqli_real_escape_string($db, $symptomData['final_version_en']);
					$symptomData['Beschreibung_de'] = mysqli_real_escape_string($db, $symptomData['Beschreibung_de']);
					$symptomData['Beschreibung_en'] = mysqli_real_escape_string($db, $symptomData['Beschreibung_en']);
					$symptomData['BeschreibungOriginal_de'] = mysqli_real_escape_string($db, $symptomData['BeschreibungOriginal_de']);
					$symptomData['BeschreibungOriginal_en'] = mysqli_real_escape_string($db, $symptomData['BeschreibungOriginal_en']);
					$symptomData['BeschreibungFull_de'] = mysqli_real_escape_string($db, $symptomData['BeschreibungFull_de']);
					$symptomData['BeschreibungFull_en'] = mysqli_real_escape_string($db, $symptomData['BeschreibungFull_en']);
					$symptomData['BeschreibungPlain_de'] = mysqli_real_escape_string($db, $symptomData['BeschreibungPlain_de']);
					$symptomData['BeschreibungPlain_en'] = mysqli_real_escape_string($db, $symptomData['BeschreibungPlain_en']);
					$symptomData['searchable_text_de'] = mysqli_real_escape_string($db, $symptomData['searchable_text_de']);
					$symptomData['searchable_text_en'] = mysqli_real_escape_string($db, $symptomData['searchable_text_en']);
					$symptomData['bracketedString_de'] = mysqli_real_escape_string($db, $symptomData['bracketedString_de']);
					$symptomData['bracketedString_en'] = mysqli_real_escape_string($db, $symptomData['bracketedString_en']);
					$symptomData['timeString_de'] = mysqli_real_escape_string($db, $symptomData['timeString_de']);
					$symptomData['timeString_en'] = mysqli_real_escape_string($db, $symptomData['timeString_en']);
					$symptomData['Fussnote'] = mysqli_real_escape_string($db, $symptomData['Fussnote']);
					$symptomData['EntnommenAus'] = mysqli_real_escape_string($db, $symptomData['EntnommenAus']);
					$symptomData['Verweiss'] = mysqli_real_escape_string($db, $symptomData['Verweiss']);
					$symptomData['Graduierung'] = mysqli_real_escape_string($db, $symptomData['Graduierung']);
					$symptomData['BereichID'] = mysqli_real_escape_string($db, $symptomData['BereichID']);
					$symptomData['Kommentar'] = mysqli_real_escape_string($db, $symptomData['Kommentar']);
					$symptomData['Unklarheiten'] = mysqli_real_escape_string($db, $symptomData['Unklarheiten']);
					$symptomData['Remedy'] = mysqli_real_escape_string($db, $symptomData['Remedy']);
					$symptomData['symptom_of_different_remedy'] = mysqli_real_escape_string($db, $symptomData['symptom_of_different_remedy']);
					$symptomData['subChapter'] = mysqli_real_escape_string($db, $symptomData['subChapter']);
					$symptomData['subSubChapter'] = mysqli_real_escape_string($db, $symptomData['subSubChapter']);
					$symptomData['symptom_edit_comment'] = mysqli_real_escape_string($db, $symptomData['symptom_edit_comment']);
					$symptomData['is_final_version_available'] = mysqli_real_escape_string($db, $symptomData['is_final_version_available']);
					$symptomData['is_symptom_number_mismatch'] = mysqli_real_escape_string($db, $symptomData['is_symptom_number_mismatch']);
					$symptomData['is_symptom_appended'] = mysqli_real_escape_string($db, $symptomData['is_symptom_appended']);
					$mainSymptomInsertQuery="INSERT INTO backup_connected_symptoms_details (saved_comparisons_backup_id, original_symptom_id, master_id, arznei_id, quelle_id, original_quelle_id, quelle_code, Symptomnummer, SeiteOriginalVon, SeiteOriginalBis, final_version_de, final_version_en, Beschreibung_de, Beschreibung_en, BeschreibungOriginal_de, BeschreibungOriginal_en, BeschreibungFull_de, BeschreibungFull_en, BeschreibungPlain_de, BeschreibungPlain_en, searchable_text_de, searchable_text_en, bracketedString_de, bracketedString_en, timeString_de, timeString_en, Fussnote, EntnommenAus, Verweiss, Graduierung, BereichID, Kommentar, Unklarheiten, Remedy, symptom_of_different_remedy, subChapter, subSubChapter, symptom_edit_comment, is_final_version_available, is_symptom_number_mismatch, is_symptom_appended) VALUES (NULLIF('".$savedComparisonBackupId."', ''), NULLIF('".$symptomData['original_symptom_id']."', ''), NULLIF('".$symptomData['master_id']."', ''), NULLIF('".$symptomData['arznei_id']."', ''), NULLIF('".$symptomData['quelle_id']."', ''), NULLIF('".$symptomData['original_quelle_id']."', ''), NULLIF('".$symptomData['quelle_code']."', ''), NULLIF('".$symptomData['Symptomnummer']."', ''), NULLIF('".$symptomData['SeiteOriginalVon']."', ''), NULLIF('".$symptomData['SeiteOriginalBis']."', ''), NULLIF('".$symptomData['final_version_de']."', ''), NULLIF('".$symptomData['final_version_en']."', ''), NULLIF('".$symptomData['Beschreibung_de']."', ''), NULLIF('".$symptomData['Beschreibung_en']."', ''), NULLIF('".$symptomData['BeschreibungOriginal_de']."', ''), NULLIF('".$symptomData['BeschreibungOriginal_en']."', ''), NULLIF('".$symptomData['BeschreibungFull_de']."', ''), NULLIF('".$symptomData['BeschreibungFull_en']."', ''), NULLIF('".$symptomData['BeschreibungPlain_de']."', ''), NULLIF('".$symptomData['BeschreibungPlain_en']."', ''), NULLIF('".$symptomData['searchable_text_de']."', ''), NULLIF('".$symptomData['searchable_text_en']."', ''), NULLIF('".$symptomData['bracketedString_de']."', ''), NULLIF('".$symptomData['bracketedString_en']."', ''), NULLIF('".$symptomData['timeString_de']."', ''), NULLIF('".$symptomData['timeString_en']."', ''), NULLIF('".$symptomData['Fussnote']."', ''), NULLIF('".$symptomData['EntnommenAus']."', ''), NULLIF('".$symptomData['Verweiss']."', ''), NULLIF('".$symptomData['Graduierung']."', ''), NULLIF('".$symptomData['BereichID']."', ''), NULLIF('".$symptomData['Kommentar']."', ''), NULLIF('".$symptomData['Unklarheiten']."', ''), NULLIF('".$symptomData['Remedy']."', ''), NULLIF('".$symptomData['symptom_of_different_remedy']."', ''), NULLIF('".$symptomData['subChapter']."', ''), NULLIF('".$symptomData['subSubChapter']."', ''), NULLIF('".$symptomData['symptom_edit_comment']."', ''), NULLIF('".$symptomData['is_final_version_available']."', ''), '".$symptomData['is_symptom_number_mismatch']."', NULLIF('".$symptomData['is_symptom_appended']."', ''))";
			
		            $db->query($mainSymptomInsertQuery);
		            $mainSymtomId = $db->insert_id;

		            /* Insert Symptom_pruefer relation START */
		            $symptomPrueferResult = $db->query("SELECT symptom_id, pruefer_id FROM symptom_pruefer where symptom_id = '".$symptomData['id']."'");
					if($symptomPrueferResult->num_rows > 0){
						while($symptomPrueferData = mysqli_fetch_array($symptomPrueferResult)){
							$mainSymptomPrueferInsertQuery = "INSERT INTO backup_connected_symptoms_details_pruefer (symptom_id, pruefer_id, ersteller_datum) VALUES ('".$mainSymtomId."', '".$symptomPrueferData['pruefer_id']."', '".$date."')";
			            	$db->query($mainSymptomPrueferInsertQuery);
						}
					}
					/* Insert Symptom_pruefer relation END */

					/* Insert symptom_reference relation START */
		            $symptomReferenceResult = $db->query("SELECT symptom_id, reference_id FROM symptom_reference where symptom_id = '".$symptomData['id']."'");
					if($symptomReferenceResult->num_rows > 0){
						while($symptomReferenceData = mysqli_fetch_array($symptomReferenceResult)){
							$mainSymptomReferenceInsertQuery = "INSERT INTO backup_connected_symptoms_details_reference (symptom_id, reference_id, ersteller_datum) VALUES ('".$mainSymtomId."', '".$symptomReferenceData['reference_id']."', '".$date."')";
			            	$db->query($mainSymptomReferenceInsertQuery);
						}
					}
					/* Insert symptom_reference relation END */

					$returnArr['status'] = true;
		    		$returnArr['message'] = "Success";
				}
			}
		}catch (Exception $e) {
	    	$db->rollback();
		    $returnArr['message'] = $e->getMessage();
		}
		/* MySQL Transaction END */

		return $returnArr;
	}

	// This function is used in comparison save operations pages.
	function revertBackSwappedConnectedSymptoms($initial_source_symptom_id, $comparing_source_symptom_id, $source_arznei_id, $comparison_option, $initial_source_id, $comparing_source_ids)
	{
		global $db;
		global $date;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Operation failed'
		);
		try{
			$db->begin_transaction();

			if($initial_source_symptom_id != "" AND $comparing_source_symptom_id != "" AND $source_arznei_id != "" AND $initial_source_id != "" AND $comparing_source_ids != "") {

				$updateComparingSymptom = "";
				$updateInitialSymptom = "";
				$iniSymptomResult = $db->query("SELECT * FROM quelle_import_test WHERE id = ".$initial_source_symptom_id);
				if($iniSymptomResult->num_rows > 0){
					$swapedComparingSymptomData = mysqli_fetch_assoc($iniSymptomResult);

					$swapedComparingSymptomData['id'] = ($swapedComparingSymptomData['id'] != "") ? mysqli_real_escape_string($db, $swapedComparingSymptomData['id']) : null;
					$swapedComparingSymptomData['original_symptom_id'] = ($swapedComparingSymptomData['original_symptom_id'] != "") ? mysqli_real_escape_string($db, $swapedComparingSymptomData['original_symptom_id']) : null;
					$swapedComparingSymptomData['master_id'] = ($swapedComparingSymptomData['master_id'] != "") ? mysqli_real_escape_string($db, $swapedComparingSymptomData['master_id']) : null;
					$swapedComparingSymptomData['arznei_id'] = ($swapedComparingSymptomData['arznei_id'] != "") ? mysqli_real_escape_string($db, $swapedComparingSymptomData['arznei_id']) : null;
					$swapedComparingSymptomData['quelle_id'] = ($swapedComparingSymptomData['quelle_id'] != "") ? mysqli_real_escape_string($db, $swapedComparingSymptomData['quelle_id']) : null;
					$swapedComparingSymptomData['original_quelle_id'] = ($swapedComparingSymptomData['original_quelle_id'] != "") ? mysqli_real_escape_string($db, $swapedComparingSymptomData['original_quelle_id']) : null;
					$swapedComparingSymptomData['quelle_code'] = ($swapedComparingSymptomData['quelle_code'] != "") ? mysqli_real_escape_string($db, $swapedComparingSymptomData['quelle_code']) : null;
					$swapedComparingSymptomData['Symptomnummer'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['Symptomnummer']);
					$swapedComparingSymptomData['SeiteOriginalVon'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['SeiteOriginalVon']);
					$swapedComparingSymptomData['SeiteOriginalBis'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['SeiteOriginalBis']);
					$swapedComparingSymptomData['final_version_de'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['final_version_de']);
					$swapedComparingSymptomData['final_version_en'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['final_version_en']);
					$swapedComparingSymptomData['Beschreibung_de'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['Beschreibung_de']);
					$swapedComparingSymptomData['Beschreibung_en'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['Beschreibung_en']);
					$swapedComparingSymptomData['BeschreibungOriginal_de'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['BeschreibungOriginal_de']);
					$swapedComparingSymptomData['BeschreibungOriginal_en'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['BeschreibungOriginal_en']);
					$swapedComparingSymptomData['BeschreibungFull_de'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['BeschreibungFull_de']);
					$swapedComparingSymptomData['BeschreibungFull_en'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['BeschreibungFull_en']);
					$swapedComparingSymptomData['BeschreibungPlain_de'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['BeschreibungPlain_de']);
					$swapedComparingSymptomData['BeschreibungPlain_en'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['BeschreibungPlain_en']);
					$swapedComparingSymptomData['searchable_text_de'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['searchable_text_de']);
					$swapedComparingSymptomData['searchable_text_en'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['searchable_text_en']);
					$swapedComparingSymptomData['bracketedString_de'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['bracketedString_de']);
					$swapedComparingSymptomData['bracketedString_en'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['bracketedString_en']);
					$swapedComparingSymptomData['timeString_de'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['timeString_de']);
					$swapedComparingSymptomData['timeString_en'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['timeString_en']);
					$swapedComparingSymptomData['Fussnote'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['Fussnote']);
					$swapedComparingSymptomData['EntnommenAus'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['EntnommenAus']);
					$swapedComparingSymptomData['Verweiss'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['Verweiss']);
					$swapedComparingSymptomData['Graduierung'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['Graduierung']);
					$swapedComparingSymptomData['BereichID'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['BereichID']);
					$swapedComparingSymptomData['Kommentar'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['Kommentar']);
					$swapedComparingSymptomData['Unklarheiten'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['Unklarheiten']);
					$swapedComparingSymptomData['Remedy'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['Remedy']);
					$swapedComparingSymptomData['symptom_of_different_remedy'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['symptom_of_different_remedy']);
					$swapedComparingSymptomData['subChapter'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['subChapter']);
					$swapedComparingSymptomData['subSubChapter'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['subSubChapter']);
					$swapedComparingSymptomData['symptom_edit_comment'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['symptom_edit_comment']);
					$swapedComparingSymptomData['is_final_version_available'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['is_final_version_available']);
					$swapedComparingSymptomData['is_symptom_number_mismatch'] = mysqli_real_escape_string($db, $swapedComparingSymptomData['is_symptom_number_mismatch']);

					$updateComparingSymptom = "UPDATE quelle_import_test SET original_symptom_id = NULLIF('".$swapedComparingSymptomData['original_symptom_id']."', ''), original_quelle_id = NULLIF('".$swapedComparingSymptomData['original_quelle_id']."', ''), quelle_code = NULLIF('".$swapedComparingSymptomData['quelle_code']."', ''), Symptomnummer = NULLIF('".$swapedComparingSymptomData['Symptomnummer']."', ''), SeiteOriginalVon = NULLIF('".$swapedComparingSymptomData['SeiteOriginalVon']."', ''), SeiteOriginalBis = NULLIF('".$swapedComparingSymptomData['SeiteOriginalBis']."', ''), final_version_de = NULLIF('".$swapedComparingSymptomData['final_version_de']."', ''), final_version_en = NULLIF('".$swapedComparingSymptomData['final_version_en']."', ''), Beschreibung_de = NULLIF('".$swapedComparingSymptomData['Beschreibung_de']."', ''), Beschreibung_en = NULLIF('".$swapedComparingSymptomData['Beschreibung_en']."', ''), BeschreibungOriginal_de = NULLIF('".$swapedComparingSymptomData['BeschreibungOriginal_de']."', ''), BeschreibungOriginal_en = NULLIF('".$swapedComparingSymptomData['BeschreibungOriginal_en']."', ''), BeschreibungFull_de = NULLIF('".$swapedComparingSymptomData['BeschreibungFull_de']."', ''), BeschreibungFull_en = NULLIF('".$swapedComparingSymptomData['BeschreibungFull_en']."', ''), BeschreibungPlain_de = NULLIF('".$swapedComparingSymptomData['BeschreibungPlain_de']."', ''), BeschreibungPlain_en = NULLIF('".$swapedComparingSymptomData['BeschreibungPlain_en']."', ''), searchable_text_de = NULLIF('".$swapedComparingSymptomData['searchable_text_de']."', ''), searchable_text_en = NULLIF('".$swapedComparingSymptomData['searchable_text_en']."', ''), bracketedString_de = NULLIF('".$swapedComparingSymptomData['bracketedString_de']."', ''), bracketedString_en = NULLIF('".$swapedComparingSymptomData['bracketedString_en']."', ''), timeString_de = NULLIF('".$swapedComparingSymptomData['timeString_de']."', ''), timeString_en = NULLIF('".$swapedComparingSymptomData['timeString_en']."', ''), Fussnote = NULLIF('".$swapedComparingSymptomData['Fussnote']."', ''), EntnommenAus = NULLIF('".$swapedComparingSymptomData['EntnommenAus']."', ''), Verweiss = NULLIF('".$swapedComparingSymptomData['Verweiss']."', ''), Graduierung = NULLIF('".$swapedComparingSymptomData['Graduierung']."', ''), BereichID = NULLIF('".$swapedComparingSymptomData['BereichID']."', ''), Kommentar = NULLIF('".$swapedComparingSymptomData['Kommentar']."', ''), Unklarheiten = NULLIF('".$swapedComparingSymptomData['Unklarheiten']."', ''), Remedy = NULLIF('".$swapedComparingSymptomData['Remedy']."', ''), symptom_of_different_remedy = NULLIF('".$swapedComparingSymptomData['symptom_of_different_remedy']."', ''), subChapter = NULLIF('".$swapedComparingSymptomData['subChapter']."', ''), subSubChapter = NULLIF('".$swapedComparingSymptomData['subSubChapter']."', ''), symptom_edit_comment = NULLIF('".$swapedComparingSymptomData['symptom_edit_comment']."', ''), is_final_version_available = NULLIF('".$swapedComparingSymptomData['is_final_version_available']."', ''), is_symptom_number_mismatch = NULLIF('".$swapedComparingSymptomData['is_symptom_number_mismatch']."', '') WHERE id = ".$comparing_source_symptom_id;
					// $db->query($updateComparingSymptom);


					$comparingSymptomPrufers = array();
					$symptomPrueferResult = $db->query("SELECT symptom_id, pruefer_id FROM symptom_pruefer where symptom_id = '".$initial_source_symptom_id."'");
					if($symptomPrueferResult->num_rows > 0){
						while($symptomPrueferData = mysqli_fetch_array($symptomPrueferResult)){
							$comparingSymptomPrufers [] = $symptomPrueferData['pruefer_id'];
						}
					}

					$comparingSymptomReferences = array();
					$symptomReferenceResult = $db->query("SELECT symptom_id, reference_id FROM symptom_reference where symptom_id = '".$initial_source_symptom_id."'");
					if($symptomReferenceResult->num_rows > 0){
						while($symptomReferenceData = mysqli_fetch_array($symptomReferenceResult)){
							$comparingSymptomReferences [] = $symptomReferenceData['reference_id'];
						}
					}
				}

				$comSymptomResult = $db->query("SELECT * FROM quelle_import_test WHERE id = ".$comparing_source_symptom_id);
				if($comSymptomResult->num_rows > 0){
					$swapedInitialSymptomData = mysqli_fetch_assoc($comSymptomResult);

					$swapedInitialSymptomData['id'] = ($swapedInitialSymptomData['id'] != "") ? mysqli_real_escape_string($db, $swapedInitialSymptomData['id']) : null;
					$swapedInitialSymptomData['original_symptom_id'] = ($swapedInitialSymptomData['original_symptom_id'] != "") ? mysqli_real_escape_string($db, $swapedInitialSymptomData['original_symptom_id']) : null;
					$swapedInitialSymptomData['master_id'] = ($swapedInitialSymptomData['master_id'] != "") ? mysqli_real_escape_string($db, $swapedInitialSymptomData['master_id']) : null;
					$swapedInitialSymptomData['arznei_id'] = ($swapedInitialSymptomData['arznei_id'] != "") ? mysqli_real_escape_string($db, $swapedInitialSymptomData['arznei_id']) : null;
					$swapedInitialSymptomData['quelle_id'] = ($swapedInitialSymptomData['quelle_id'] != "") ? mysqli_real_escape_string($db, $swapedInitialSymptomData['quelle_id']) : null;
					$swapedInitialSymptomData['original_quelle_id'] = ($swapedInitialSymptomData['original_quelle_id'] != "") ? mysqli_real_escape_string($db, $swapedInitialSymptomData['original_quelle_id']) : null;
					$swapedInitialSymptomData['quelle_code'] = ($swapedInitialSymptomData['quelle_code'] != "") ? mysqli_real_escape_string($db, $swapedInitialSymptomData['quelle_code']) : null;
					$swapedInitialSymptomData['Symptomnummer'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['Symptomnummer']);
					$swapedInitialSymptomData['SeiteOriginalVon'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['SeiteOriginalVon']);
					$swapedInitialSymptomData['SeiteOriginalBis'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['SeiteOriginalBis']);
					$swapedInitialSymptomData['final_version_de'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['final_version_de']);
					$swapedInitialSymptomData['final_version_en'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['final_version_en']);
					$swapedInitialSymptomData['Beschreibung_de'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['Beschreibung_de']);
					$swapedInitialSymptomData['Beschreibung_en'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['Beschreibung_en']);
					$swapedInitialSymptomData['BeschreibungOriginal_de'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['BeschreibungOriginal_de']);
					$swapedInitialSymptomData['BeschreibungOriginal_en'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['BeschreibungOriginal_en']);
					$swapedInitialSymptomData['BeschreibungFull_de'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['BeschreibungFull_de']);
					$swapedInitialSymptomData['BeschreibungFull_en'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['BeschreibungFull_en']);
					$swapedInitialSymptomData['BeschreibungPlain_de'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['BeschreibungPlain_de']);
					$swapedInitialSymptomData['BeschreibungPlain_en'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['BeschreibungPlain_en']);
					$swapedInitialSymptomData['searchable_text_de'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['searchable_text_de']);
					$swapedInitialSymptomData['searchable_text_en'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['searchable_text_en']);
					$swapedInitialSymptomData['bracketedString_de'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['bracketedString_de']);
					$swapedInitialSymptomData['bracketedString_en'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['bracketedString_en']);
					$swapedInitialSymptomData['timeString_de'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['timeString_de']);
					$swapedInitialSymptomData['timeString_en'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['timeString_en']);
					$swapedInitialSymptomData['Fussnote'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['Fussnote']);
					$swapedInitialSymptomData['EntnommenAus'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['EntnommenAus']);
					$swapedInitialSymptomData['Verweiss'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['Verweiss']);
					$swapedInitialSymptomData['Graduierung'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['Graduierung']);
					$swapedInitialSymptomData['BereichID'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['BereichID']);
					$swapedInitialSymptomData['Kommentar'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['Kommentar']);
					$swapedInitialSymptomData['Unklarheiten'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['Unklarheiten']);
					$swapedInitialSymptomData['Remedy'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['Remedy']);
					$swapedInitialSymptomData['symptom_of_different_remedy'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['symptom_of_different_remedy']);
					$swapedInitialSymptomData['subChapter'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['subChapter']);
					$swapedInitialSymptomData['subSubChapter'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['subSubChapter']);
					$swapedInitialSymptomData['symptom_edit_comment'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['symptom_edit_comment']);
					$swapedInitialSymptomData['is_final_version_available'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['is_final_version_available']);
					$swapedInitialSymptomData['is_symptom_number_mismatch'] = mysqli_real_escape_string($db, $swapedInitialSymptomData['is_symptom_number_mismatch']);

					$updateInitialSymptom = "UPDATE quelle_import_test SET original_symptom_id = NULLIF('".$swapedInitialSymptomData['original_symptom_id']."', ''), original_quelle_id = NULLIF('".$swapedInitialSymptomData['original_quelle_id']."', ''), quelle_code = NULLIF('".$swapedInitialSymptomData['quelle_code']."', ''), Symptomnummer = NULLIF('".$swapedInitialSymptomData['Symptomnummer']."', ''), SeiteOriginalVon = NULLIF('".$swapedInitialSymptomData['SeiteOriginalVon']."', ''), SeiteOriginalBis = NULLIF('".$swapedInitialSymptomData['SeiteOriginalBis']."', ''), final_version_de = NULLIF('".$swapedInitialSymptomData['final_version_de']."', ''), final_version_en = NULLIF('".$swapedInitialSymptomData['final_version_en']."', ''), Beschreibung_de = NULLIF('".$swapedInitialSymptomData['Beschreibung_de']."', ''), Beschreibung_en = NULLIF('".$swapedInitialSymptomData['Beschreibung_en']."', ''), BeschreibungOriginal_de = NULLIF('".$swapedInitialSymptomData['BeschreibungOriginal_de']."', ''), BeschreibungOriginal_en = NULLIF('".$swapedInitialSymptomData['BeschreibungOriginal_en']."', ''), BeschreibungFull_de = NULLIF('".$swapedInitialSymptomData['BeschreibungFull_de']."', ''), BeschreibungFull_en = NULLIF('".$swapedInitialSymptomData['BeschreibungFull_en']."', ''), BeschreibungPlain_de = NULLIF('".$swapedInitialSymptomData['BeschreibungPlain_de']."', ''), BeschreibungPlain_en = NULLIF('".$swapedInitialSymptomData['BeschreibungPlain_en']."', ''), searchable_text_de = NULLIF('".$swapedInitialSymptomData['searchable_text_de']."', ''), searchable_text_en = NULLIF('".$swapedInitialSymptomData['searchable_text_en']."', ''), bracketedString_de = NULLIF('".$swapedInitialSymptomData['bracketedString_de']."', ''), bracketedString_en = NULLIF('".$swapedInitialSymptomData['bracketedString_en']."', ''), timeString_de = NULLIF('".$swapedInitialSymptomData['timeString_de']."', ''), timeString_en = NULLIF('".$swapedInitialSymptomData['timeString_en']."', ''), Fussnote = NULLIF('".$swapedInitialSymptomData['Fussnote']."', ''), EntnommenAus = NULLIF('".$swapedInitialSymptomData['EntnommenAus']."', ''), Verweiss = NULLIF('".$swapedInitialSymptomData['Verweiss']."', ''), Graduierung = NULLIF('".$swapedInitialSymptomData['Graduierung']."', ''), BereichID = NULLIF('".$swapedInitialSymptomData['BereichID']."', ''), Kommentar = NULLIF('".$swapedInitialSymptomData['Kommentar']."', ''), Unklarheiten = NULLIF('".$swapedInitialSymptomData['Unklarheiten']."', ''), Remedy = NULLIF('".$swapedInitialSymptomData['Remedy']."', ''), symptom_of_different_remedy = NULLIF('".$swapedInitialSymptomData['symptom_of_different_remedy']."', ''), subChapter = NULLIF('".$swapedInitialSymptomData['subChapter']."', ''), subSubChapter = NULLIF('".$swapedInitialSymptomData['subSubChapter']."', ''), symptom_edit_comment = NULLIF('".$swapedInitialSymptomData['symptom_edit_comment']."', ''), is_final_version_available = NULLIF('".$swapedInitialSymptomData['is_final_version_available']."', ''), is_symptom_number_mismatch = NULLIF('".$swapedInitialSymptomData['is_symptom_number_mismatch']."', '') WHERE id = ".$initial_source_symptom_id;
					// $db->query($updateInitialSymptom);


					$initialSymptomPrufers = array();
					$symptomPrueferResult = $db->query("SELECT symptom_id, pruefer_id FROM symptom_pruefer where symptom_id = '".$comparing_source_symptom_id."'");
					if($symptomPrueferResult->num_rows > 0){
						while($symptomPrueferData = mysqli_fetch_array($symptomPrueferResult)){
							$initialSymptomPrufers [] = $symptomPrueferData['pruefer_id'];
						}
					}

					$initialSymptomReferences = array();
					$symptomReferenceResult = $db->query("SELECT symptom_id, reference_id FROM symptom_reference where symptom_id = '".$comparing_source_symptom_id."'");
					if($symptomReferenceResult->num_rows > 0){
						while($symptomReferenceData = mysqli_fetch_array($symptomReferenceResult)){
							$initialSymptomReferences [] = $symptomReferenceData['reference_id'];
						}
					}
				}

				if($updateComparingSymptom != "" AND $updateInitialSymptom != "") {
					$db->query($updateComparingSymptom);
					$db->query($updateInitialSymptom);

					$deleteQuery1 = "DELETE FROM symptom_pruefer WHERE symptom_id = ".$initial_source_symptom_id;
    				$db->query($deleteQuery1);
    				$deleteQuery2 = "DELETE FROM symptom_pruefer WHERE symptom_id = ".$comparing_source_symptom_id;
    				$db->query($deleteQuery2);
    				$deleteQuery3 = "DELETE FROM symptom_reference WHERE symptom_id = ".$initial_source_symptom_id;
    				$db->query($deleteQuery3);
    				$deleteQuery4 = "DELETE FROM symptom_reference WHERE symptom_id = ".$comparing_source_symptom_id;
    				$db->query($deleteQuery4);

    				foreach ($initialSymptomPrufers as $iniPKey => $iniPVal) {
    					$mainSymptomPrueferInsertQuery = "INSERT INTO symptom_pruefer (symptom_id, pruefer_id, ersteller_datum) VALUES ('".$initial_source_symptom_id."', '".$iniPVal."', '".$date."')";
				        $db->query($mainSymptomPrueferInsertQuery);
    				}
    				foreach ($comparingSymptomPrufers as $comPKey => $comPVal) {
    					$mainSymptomPrueferInsertQuery = "INSERT INTO symptom_pruefer (symptom_id, pruefer_id, ersteller_datum) VALUES ('".$comparing_source_symptom_id."', '".$comPVal."', '".$date."')";
				        $db->query($mainSymptomPrueferInsertQuery);
    				}
    				foreach ($initialSymptomReferences as $iniRKey => $iniRVal) {
    					$mainSymptomReferenceInsertQuery = "INSERT INTO symptom_reference (symptom_id, reference_id, ersteller_datum) VALUES ('".$initial_source_symptom_id."', '".$iniRVal."', '".$date."')";
				        $db->query($mainSymptomReferenceInsertQuery);
    				}
    				foreach ($comparingSymptomReferences as $comRKey => $comRVal) {
    					$mainSymptomReferenceInsertQuery = "INSERT INTO symptom_reference (symptom_id, reference_id, ersteller_datum) VALUES ('".$comparing_source_symptom_id."', '".$comRVal."', '".$date."')";
				        $db->query($mainSymptomReferenceInsertQuery);
    				}

    				if($swapedInitialSymptomData['is_final_version_available'] != 0){
    					$mainSwappedIniSymptomString_de = (isset($swapedInitialSymptomData['final_version_de']) AND $swapedInitialSymptomData['final_version_de'] != "") ? $swapedInitialSymptomData['final_version_de'] : "";
						$mainSwappedIniSymptomString_en = (isset($swapedInitialSymptomData['final_version_en']) AND $swapedInitialSymptomData['final_version_en'] != "") ? $swapedInitialSymptomData['final_version_en'] : "";
    				} else {
    					if($comparison_option == 1){
    						$mainSwappedIniSymptomString_de = (isset($swapedInitialSymptomData['searchable_text_de']) AND $swapedInitialSymptomData['searchable_text_de'] != "") ? $swapedInitialSymptomData['searchable_text_de'] : "";
							$mainSwappedIniSymptomString_en = (isset($swapedInitialSymptomData['searchable_text_en']) AND $swapedInitialSymptomData['searchable_text_en'] != "") ? $swapedInitialSymptomData['searchable_text_en'] : "";
    					} else {
    						$mainSwappedIniSymptomString_de = (isset($swapedInitialSymptomData['BeschreibungFull_de']) AND $swapedInitialSymptomData['BeschreibungFull_de'] != "") ? $swapedInitialSymptomData['BeschreibungFull_de'] : "";
							$mainSwappedIniSymptomString_en = (isset($swapedInitialSymptomData['BeschreibungFull_en']) AND $swapedInitialSymptomData['BeschreibungFull_en'] != "") ? $swapedInitialSymptomData['BeschreibungFull_en'] : "";
    					}
    				}

    				if($swapedComparingSymptomData['is_final_version_available'] != 0){
    					$mainSwappedCompSymptomString_de = (isset($swapedComparingSymptomData['final_version_de']) AND $swapedComparingSymptomData['final_version_de'] != "") ? $swapedComparingSymptomData['final_version_de'] : "";
						$mainSwappedCompSymptomString_en = (isset($swapedComparingSymptomData['final_version_en']) AND $swapedComparingSymptomData['final_version_en'] != "") ? $swapedComparingSymptomData['final_version_en'] : "";
    				} else {
    					if($comparison_option == 1){
    						$mainSwappedCompSymptomString_de = (isset($swapedComparingSymptomData['searchable_text_de']) AND $swapedComparingSymptomData['searchable_text_de'] != "") ? $swapedComparingSymptomData['searchable_text_de'] : "";
							$mainSwappedCompSymptomString_en = (isset($swapedComparingSymptomData['searchable_text_en']) AND $swapedComparingSymptomData['searchable_text_en'] != "") ? $swapedComparingSymptomData['searchable_text_en'] : "";
    					} else {
    						$mainSwappedCompSymptomString_de = (isset($swapedComparingSymptomData['BeschreibungFull_de']) AND $swapedComparingSymptomData['BeschreibungFull_de'] != "") ? $swapedComparingSymptomData['BeschreibungFull_de'] : "";
							$mainSwappedCompSymptomString_en = (isset($swapedComparingSymptomData['BeschreibungFull_en']) AND $swapedComparingSymptomData['BeschreibungFull_en'] != "") ? $swapedComparingSymptomData['BeschreibungFull_en'] : "";
    					}
    				}

    				// Source symptoms string Bfore convertion(this string is used to store in the connecteion table)  
					$mainSwappedIniSymptomStringBeforeConversion_de = ($mainSwappedIniSymptomString_de != "") ? base64_encode($mainSwappedIniSymptomString_de) : "";
					$mainSwappedIniSymptomStringBeforeConversion_en = ($mainSwappedIniSymptomString_en != "") ? base64_encode($mainSwappedIniSymptomString_en) : "";
					$mainSwappedCompSymptomStringBeforeConversion_de = ($mainSwappedCompSymptomString_de != "") ? base64_encode($mainSwappedCompSymptomString_de) : "";
					$mainSwappedCompSymptomStringBeforeConversion_en = ($mainSwappedCompSymptomString_en != "") ? base64_encode($mainSwappedCompSymptomString_en) : "";

					// Apply dynamic conversion
					if($mainSwappedIniSymptomString_de != ""){
						$mainSwappedIniSymptomString_de = convertTheSymptom(0, $mainSwappedIniSymptomString_de, $swapedInitialSymptomData['original_quelle_id'], $swapedInitialSymptomData['arznei_id'], $swapedInitialSymptomData['is_final_version_available'], 0, $swapedInitialSymptomData['id'], $swapedInitialSymptomData['original_symptom_id']);
						$mainSwappedIniSymptomString_de = base64_encode($mainSwappedIniSymptomString_de);
					}
					if($mainSwappedIniSymptomString_en != ""){
						$mainSwappedIniSymptomString_en = convertTheSymptom(0, $mainSwappedIniSymptomString_en, $swapedInitialSymptomData['original_quelle_id'], $swapedInitialSymptomData['arznei_id'], $swapedInitialSymptomData['is_final_version_available'], 0, $swapedInitialSymptomData['id'], $swapedInitialSymptomData['original_symptom_id']);
						$mainSwappedIniSymptomString_en = base64_encode($mainSwappedIniSymptomString_en);
					}
						
					if($mainSwappedCompSymptomString_de != ""){
						$mainSwappedCompSymptomString_de = convertTheSymptom(0, $mainSwappedCompSymptomString_de, $swapedComparingSymptomData['original_quelle_id'], $swapedComparingSymptomData['arznei_id'], $swapedComparingSymptomData['is_final_version_available'], 0, $swapedComparingSymptomData['id'], $swapedComparingSymptomData['original_symptom_id']);
						$mainSwappedCompSymptomString_de = base64_encode($mainSwappedCompSymptomString_de);
					}
					if($mainSwappedCompSymptomString_en != ""){
						$mainSwappedCompSymptomString_en = convertTheSymptom(0, $mainSwappedCompSymptomString_en, $swapedComparingSymptomData['original_quelle_id'], $swapedComparingSymptomData['arznei_id'], $swapedComparingSymptomData['is_final_version_available'], 0, $swapedComparingSymptomData['id'], $swapedComparingSymptomData['original_symptom_id']);
						$mainSwappedCompSymptomString_en = base64_encode($mainSwappedCompSymptomString_en);
					}

					// Only the direct initial and comparing sources not including all involved chain sources
					$initialAndComparingDirectSourcesArr = ($comparing_source_ids != "") ? explode(',', $comparing_source_ids) : array();
					if($initial_source_id != "")
						array_push($initialAndComparingDirectSourcesArr, $initial_source_id);
					$initialAndComparingDirectSources = (!empty($initialAndComparingDirectSourcesArr)) ? implode(',', $initialAndComparingDirectSourcesArr) : "";
					// Because on each swap connection the symptoms are getting swaped so we need to change the symptom texts, match percentage, etc. of these swaped symptom ids in all other existance in connection table
					$iniSourceResult = $db->query("SELECT id, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language FROM symptom_connections where ((initial_source_symptom_id = '".$initial_source_symptom_id."' AND FIND_IN_SET(initial_source_id, '".$initialAndComparingDirectSources."')) OR (comparing_source_symptom_id = '".$initial_source_symptom_id."' AND FIND_IN_SET(comparing_source_id, '".$initialAndComparingDirectSources."')))");
					if($iniSourceResult->num_rows > 0){
						
						$updatableSymptomInfo = $db->query("SELECT quelle_id, original_quelle_id, quelle_code, arznei_id FROM 
									quelle_import_test WHERE id = ".$initial_source_symptom_id);
						if($updatableSymptomInfo->num_rows > 0)
							$updatableSymptomInfoData = mysqli_fetch_assoc($updatableSymptomInfo);

						$updatable_original_quelle_id = (isset($updatableSymptomInfoData['original_quelle_id']) AND $updatableSymptomInfoData['original_quelle_id'] != "") ? $updatableSymptomInfoData['original_quelle_id'] : "";
						$updatable_quelle_id = (isset($updatableSymptomInfoData['quelle_id']) AND $updatableSymptomInfoData['quelle_id'] != "") ? $updatableSymptomInfoData['quelle_id'] : "";
						$updatable_quelle_code = (isset($updatableSymptomInfoData['quelle_code']) AND $updatableSymptomInfoData['quelle_code'] != "") ? $updatableSymptomInfoData['quelle_code'] : "";

						while($iniSourceData = mysqli_fetch_array($iniSourceResult)){
							if($iniSourceData['initial_source_symptom_id'] == $initial_source_symptom_id) {


								$symptomInfo = $db->query("SELECT id, original_symptom_id, original_quelle_id, arznei_id, is_final_version_available FROM 
									quelle_import_test WHERE id = ".$iniSourceData['comparing_source_symptom_id']);
								if($symptomInfo->num_rows > 0)
									$symptomInfoData = mysqli_fetch_assoc($symptomInfo);

								$orzQuelleId = (isset($symptomInfoData['original_quelle_id']) AND $symptomInfoData['original_quelle_id'] != "") ? $symptomInfoData['original_quelle_id'] : "";
								$arzId = (isset($symptomInfoData['arznei_id']) AND $symptomInfoData['arznei_id'] != "") ? $symptomInfoData['arznei_id'] : "";
								$symId = (isset($symptomInfoData['id']) AND $symptomInfoData['id'] != "") ? $symptomInfoData['id'] : "";
								$originalSymId = (isset($symptomInfoData['original_symptom_id']) AND $symptomInfoData['original_symptom_id'] != "") ? $symptomInfoData['original_symptom_id'] : "";
								$checkIsFinalVersionAvailable = (isset($symptomInfoData['is_final_version_available']) AND $symptomInfoData['is_final_version_available'] != "") ? $symptomInfoData['is_final_version_available'] : "";

								$comSourceSymptom_de = $iniSourceData['comparing_source_symptom_de'];
								$comSourceSymptom_en = $iniSourceData['comparing_source_symptom_en'];

								$compSymptomStringBeforeConversion_de = ($comSourceSymptom_de != "") ? base64_encode($comSourceSymptom_de) : "";
								$compSymptomStringBeforeConversion_en = ($comSourceSymptom_en != "") ? base64_encode($comSourceSymptom_en) : "";
								// Apply dynamic conversion
								if($comSourceSymptom_de != ""){
									$comSourceSymptomEncoded_de = convertTheSymptom(0, $comSourceSymptom_de, $orzQuelleId, $arzId, $checkIsFinalVersionAvailable, 0, $symId, $originalSymId);
									$comSourceSymptomEncoded_de = base64_encode($comSourceSymptomEncoded_de);
								}
								if($comSourceSymptom_en != ""){
									$comSourceSymptomEncoded_en = convertTheSymptom(0, $comSourceSymptom_en, $orzQuelleId, $arzId, $checkIsFinalVersionAvailable, 0, $symId, $originalSymId);
									$comSourceSymptomEncoded_en = base64_encode($comSourceSymptomEncoded_en);
								}

								if($iniSourceData['connection_language'] == "en"){
									// Preparing the English version data
									if($mainSwappedIniSymptomString_en != "" AND $comSourceSymptomEncoded_en != "")
									{
										$resultArray = comareSymptom2($mainSwappedIniSymptomString_en, $comSourceSymptomEncoded_en, $mainSwappedIniSymptomStringBeforeConversion_en, $compSymptomStringBeforeConversion_en);
										
										$no_of_match = (isset($resultArray['no_of_match'])) ? mysqli_real_escape_string($db, $resultArray['no_of_match']) : 0;
										$percentage = (isset($resultArray['percentage'])) ? mysqli_real_escape_string($db, $resultArray['percentage']) : 0;
										$initial_source_symptom_highlighted_en = (isset($resultArray['initial_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_highlighted'])) : null;
										//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
										$comparing_source_symptom_highlighted_en = (isset($resultArray['comparing_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_highlighted'])) : null;
										//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
										$initial_source_symptom_before_conversion_highlighted_en = (isset($resultArray['initial_source_symptom_before_conversion_highlighted']) AND $resultArray['initial_source_symptom_before_conversion_highlighted'] != "") ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_before_conversion_highlighted'])) : null;
										$comparing_source_symptom_before_conversion_highlighted_en = (isset($resultArray['comparing_source_symptom_before_conversion_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_before_conversion_highlighted'])) : null;
										
										// Decoding the symptoms
										$iniSymptomStringDecoded_en = ($mainSwappedIniSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomStringBeforeConversion_en)) : null;
										$compSymptomStringDecoded_en = ($compSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($compSymptomStringBeforeConversion_en)) : null;
									} else {
										$no_of_match = 0;
										$percentage = 0;
										$initial_source_symptom_highlighted_en = (isset($mainSwappedIniSymptomString_en) AND $mainSwappedIniSymptomString_en != "") ? mysqli_real_escape_string($db, $mainSwappedIniSymptomString_en) : null;
										//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
										$comparing_source_symptom_highlighted_en = (isset($comSourceSymptom_en) AND $comSourceSymptom_en != "") ? mysqli_real_escape_string($db, $comSourceSymptom_en) : null;
										//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
										$initial_source_symptom_before_conversion_highlighted_en = (isset($mainSwappedIniSymptomStringBeforeConversion_en) AND $mainSwappedIniSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomStringBeforeConversion_en)) : null;
										$comparing_source_symptom_before_conversion_highlighted_en = (isset($compSymptomStringBeforeConversion_en) AND $compSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($compSymptomStringBeforeConversion_en)) : null;
										
										// Decoding the symptoms
										$iniSymptomStringDecoded_en = ($mainSwappedIniSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomStringBeforeConversion_en)) : null;
										$compSymptomStringDecoded_en = ($compSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($compSymptomStringBeforeConversion_en)) : null;
									}

									// German
									$initial_source_symptom_highlighted_de = (isset($mainSwappedIniSymptomString_de)) ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomString_de)) : null;
									$comparing_source_symptom_highlighted_de = (isset($comSourceSymptomEncoded_de)) ? mysqli_real_escape_string($db, base64_decode($comSourceSymptomEncoded_de)) : null;
									$initial_source_symptom_before_conversion_highlighted_de = (isset($mainSwappedIniSymptomString_de)) ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomString_de)) : null;
									$comparing_source_symptom_before_conversion_highlighted_de = (isset($comSourceSymptomEncoded_de)) ? mysqli_real_escape_string($db, base64_decode($comSourceSymptomEncoded_de)) : null;
									// Decoding the symptoms
									$iniSymptomStringDecoded_de = ($mainSwappedIniSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomStringBeforeConversion_de)) : null;
									$compSymptomStringDecoded_de = ($compSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($compSymptomStringBeforeConversion_de)) : null;
								} else {
									// Preparing the German version data
									if($mainSwappedIniSymptomString_de != "" AND $comSourceSymptomEncoded_de != "")
									{
										$resultArray = comareSymptom2($mainSwappedIniSymptomString_de, $comSourceSymptomEncoded_de, $mainSwappedIniSymptomStringBeforeConversion_de, $compSymptomStringBeforeConversion_de);
										$no_of_match = (isset($resultArray['no_of_match'])) ? mysqli_real_escape_string($db, $resultArray['no_of_match']) : 0;
										$percentage = (isset($resultArray['percentage'])) ? mysqli_real_escape_string($db, $resultArray['percentage']) : 0;
										$initial_source_symptom_highlighted_de = (isset($resultArray['initial_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_highlighted'])) : null;
										//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
										$comparing_source_symptom_highlighted_de = (isset($resultArray['comparing_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_highlighted'])) : null;
										//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
										$initial_source_symptom_before_conversion_highlighted_de = (isset($resultArray['initial_source_symptom_before_conversion_highlighted']) AND $resultArray['initial_source_symptom_before_conversion_highlighted'] != "") ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_before_conversion_highlighted'])) : null;
										$comparing_source_symptom_before_conversion_highlighted_de = (isset($resultArray['comparing_source_symptom_before_conversion_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_before_conversion_highlighted'])) : null;
										
										// Decoding the symptoms
										$iniSymptomStringDecoded_de = ($mainSwappedIniSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomStringBeforeConversion_de)) : null;
										$compSymptomStringDecoded_de = ($compSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($compSymptomStringBeforeConversion_de)) : null;
									}
									else 
									{
										$no_of_match = 0;
										$percentage = 0;
										$initial_source_symptom_highlighted_de = (isset($mainSwappedIniSymptomString_de) AND $mainSwappedIniSymptomString_de != "") ? mysqli_real_escape_string($db, $mainSwappedIniSymptomString_de) : null;
										//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
										$comparing_source_symptom_highlighted_de = (isset($comSourceSymptomEncoded_de) AND $comSourceSymptomEncoded_de != "") ? mysqli_real_escape_string($db, $comSourceSymptomEncoded_de) : null;
										//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
										$initial_source_symptom_before_conversion_highlighted_de = (isset($mainSwappedIniSymptomStringBeforeConversion_de) AND $mainSwappedIniSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomStringBeforeConversion_de)) : null;
										$comparing_source_symptom_before_conversion_highlighted_de = (isset($compSymptomStringBeforeConversion_de) AND $compSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($compSymptomStringBeforeConversion_de)) : null;
										
										// Decoding the symptoms
										$iniSymptomStringDecoded_de = ($mainSwappedIniSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomStringBeforeConversion_de)) : null;
										$compSymptomStringDecoded_de = ($compSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($compSymptomStringBeforeConversion_de)) : null;
									}

									// English
									$initial_source_symptom_highlighted_en = (isset($mainSwappedIniSymptomString_en)) ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomString_en)) : null;
									$comparing_source_symptom_highlighted_en = (isset($comSourceSymptomEncoded_en)) ? mysqli_real_escape_string($db, base64_decode($comSourceSymptomEncoded_en)) : null;
									$initial_source_symptom_before_conversion_highlighted_en = (isset($mainSwappedIniSymptomString_en)) ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomString_en)) : null;
									$comparing_source_symptom_before_conversion_highlighted_en = (isset($comSourceSymptomEncoded_en)) ? mysqli_real_escape_string($db, base64_decode($comSourceSymptomEncoded_en)) : null;
									// Decoding the symptoms
									$iniSymptomStringDecoded_en = ($mainSwappedIniSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomStringBeforeConversion_en)) : null;
									$compSymptomStringDecoded_en = ($compSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($compSymptomStringBeforeConversion_en)) : null;
								}

								// I may need to implement this below commented part later i will see - "connection_or_paste_type = 1" 
								// 1 = Normal connection or paste, 2 = Swap connection or paste, 3 = Connect edit, 4 = Paste edit
								// Here i have updated the connection to a Normal connection "connection_or_paste_type = 1"
								$updateConnectionData = "UPDATE symptom_connections SET initial_source_id = NULLIF('".$updatable_quelle_id."', ''), conversion_initial_source_id = NULLIF('".$updatable_original_quelle_id."', ''), initial_source_code = NULLIF('".$updatable_quelle_code."', ''), initial_source_symptom_highlighted_de = NULLIF('".$initial_source_symptom_before_conversion_highlighted_de."', ''), initial_source_symptom_highlighted_en = NULLIF('".$initial_source_symptom_before_conversion_highlighted_en."', ''), comparing_source_symptom_highlighted_de = NULLIF('".$comparing_source_symptom_before_conversion_highlighted_de."', ''), comparing_source_symptom_highlighted_en = NULLIF('".$comparing_source_symptom_before_conversion_highlighted_en."', ''), initial_source_symptom_de = NULLIF('".$iniSymptomStringDecoded_de."', ''), initial_source_symptom_en = NULLIF('".$iniSymptomStringDecoded_en."', ''), comparing_source_symptom_de = NULLIF('".$compSymptomStringDecoded_de."', ''), comparing_source_symptom_en = NULLIF('".$compSymptomStringDecoded_en."', ''), matching_percentage = '".$percentage."' WHERE id = ".$iniSourceData['id'];
								$db->query($updateConnectionData);

							} else if ($iniSourceData['comparing_source_symptom_id'] == $initial_source_symptom_id) {

								$symptomInfo = $db->query("SELECT id, original_symptom_id, original_quelle_id, arznei_id, is_final_version_available FROM 
									quelle_import_test WHERE id = ".$iniSourceData['initial_source_symptom_id']);
								if($symptomInfo->num_rows > 0)
									$symptomInfoData = mysqli_fetch_assoc($symptomInfo);

								$orzQuelleId = (isset($symptomInfoData['original_quelle_id']) AND $symptomInfoData['original_quelle_id'] != "") ? $symptomInfoData['original_quelle_id'] : "";
								$arzId = (isset($symptomInfoData['arznei_id']) AND $symptomInfoData['arznei_id'] != "") ? $symptomInfoData['arznei_id'] : "";
								$symId = (isset($symptomInfoData['id']) AND $symptomInfoData['id'] != "") ? $symptomInfoData['id'] : "";
								$originalSymId = (isset($symptomInfoData['original_symptom_id']) AND $symptomInfoData['original_symptom_id'] != "") ? $symptomInfoData['original_symptom_id'] : "";
								$checkIsFinalVersionAvailable = (isset($symptomInfoData['is_final_version_available']) AND $symptomInfoData['is_final_version_available'] != "") ? $symptomInfoData['is_final_version_available'] : "";

								$currentIniSourceSymptom_de = $iniSourceData['initial_source_symptom_de'];
								$currentIniSourceSymptom_en = $iniSourceData['initial_source_symptom_en'];

								$currentIniSourceSymptomBeforeConversion_de = ($currentIniSourceSymptom_de != "") ? base64_encode($currentIniSourceSymptom_de) : "";
								$currentIniSourceSymptomBeforeConversion_en = ($currentIniSourceSymptom_en != "") ? base64_encode($currentIniSourceSymptom_en) : "";
								
								// Apply dynamic conversion
								if($currentIniSourceSymptom_de != ""){
									$currentIniSourceSymptomEncoded_de = convertTheSymptom(0, $currentIniSourceSymptom_de, $orzQuelleId, $arzId, $checkIsFinalVersionAvailable, 0, $symId, $originalSymId);
									$currentIniSourceSymptomEncoded_de = base64_encode($currentIniSourceSymptomEncoded_de);
								}
								if($currentIniSourceSymptom_en != ""){
									$currentIniSourceSymptomEncoded_en = convertTheSymptom(0, $currentIniSourceSymptom_en, $orzQuelleId, $arzId, $checkIsFinalVersionAvailable, 0, $symId, $originalSymId);
									$currentIniSourceSymptomEncoded_en = base64_encode($currentIniSourceSymptomEncoded_en);
								}
						
								if($iniSourceData['connection_language'] == "en"){
									// Preparing the English version data
									if($currentIniSourceSymptomEncoded_en != "" AND $mainSwappedIniSymptomString_en != "")
									{
										$resultArray = comareSymptom2($currentIniSourceSymptomEncoded_en, $mainSwappedIniSymptomString_en, $currentIniSourceSymptomBeforeConversion_en, $mainSwappedIniSymptomStringBeforeConversion_en);
										// echo json_encode( array( 'status' => "error", 'result_data' => "", 'message' => "3") ); 
										// exit;
										$no_of_match = (isset($resultArray['no_of_match'])) ? mysqli_real_escape_string($db, $resultArray['no_of_match']) : 0;
										$percentage = (isset($resultArray['percentage'])) ? mysqli_real_escape_string($db, $resultArray['percentage']) : 0;
										$initial_source_symptom_highlighted_en = (isset($resultArray['initial_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_highlighted'])) : null;
										//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
										$comparing_source_symptom_highlighted_en = (isset($resultArray['comparing_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_highlighted'])) : null;
										//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
										$initial_source_symptom_before_conversion_highlighted_en = (isset($resultArray['initial_source_symptom_before_conversion_highlighted']) AND $resultArray['initial_source_symptom_before_conversion_highlighted'] != "") ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_before_conversion_highlighted'])) : null;
										$comparing_source_symptom_before_conversion_highlighted_en = (isset($resultArray['comparing_source_symptom_before_conversion_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_before_conversion_highlighted'])) : null;
										
										// Decoding the symptoms
										$iniSymptomStringDecoded_en = ($currentIniSourceSymptomBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomBeforeConversion_en)) : null;
										$compSymptomStringDecoded_en = ($mainSwappedIniSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomStringBeforeConversion_en)) : null;
									} else {
										$no_of_match = 0;
										$percentage = 0;
										$initial_source_symptom_highlighted_en = (isset($currentIniSourceSymptomEncoded_en) AND $currentIniSourceSymptomEncoded_en != "") ? mysqli_real_escape_string($db, $currentIniSourceSymptomEncoded_en) : null;
										//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
										$comparing_source_symptom_highlighted_en = (isset($mainSwappedIniSymptomString_en) AND $mainSwappedIniSymptomString_en != "") ? mysqli_real_escape_string($db, $mainSwappedIniSymptomString_en) : null;
										//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
										$initial_source_symptom_before_conversion_highlighted_en = (isset($currentIniSourceSymptomBeforeConversion_en) AND $currentIniSourceSymptomBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomBeforeConversion_en)) : null;
										$comparing_source_symptom_before_conversion_highlighted_en = (isset($mainSwappedIniSymptomStringBeforeConversion_en) AND $mainSwappedIniSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomStringBeforeConversion_en)) : null;
										
										// Decoding the symptoms
										$iniSymptomStringDecoded_en = ($currentIniSourceSymptomBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomBeforeConversion_en)) : null;
										$compSymptomStringDecoded_en = ($mainSwappedIniSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomStringBeforeConversion_en)) : null;
									}

									// German
									$initial_source_symptom_highlighted_de = (isset($currentIniSourceSymptomEncoded_de)) ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomEncoded_de)) : null;
									$comparing_source_symptom_highlighted_de = (isset($mainSwappedIniSymptomString_de)) ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomString_de)) : null;
									$initial_source_symptom_before_conversion_highlighted_de = (isset($currentIniSourceSymptomEncoded_de)) ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomEncoded_de)) : null;
									$comparing_source_symptom_before_conversion_highlighted_de = (isset($mainSwappedIniSymptomString_de)) ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomString_de)) : null;
									// Decoding the symptoms
									$iniSymptomStringDecoded_de = ($currentIniSourceSymptomBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomBeforeConversion_de)) : null;
									$compSymptomStringDecoded_de = ($mainSwappedIniSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomStringBeforeConversion_de)) : null;
								} else {
									// Preparing the German version data
									if($currentIniSourceSymptomEncoded_de != "" AND $mainSwappedIniSymptomString_de != "")
									{
										$resultArray = comareSymptom2($currentIniSourceSymptomEncoded_de, $mainSwappedIniSymptomString_de, $currentIniSourceSymptomBeforeConversion_de, $mainSwappedIniSymptomStringBeforeConversion_de);
										// echo json_encode( array( 'status' => "error", 'result_data' => "", 'message' => "4") ); 
										// exit;
										$no_of_match = (isset($resultArray['no_of_match'])) ? mysqli_real_escape_string($db, $resultArray['no_of_match']) : 0;
										$percentage = (isset($resultArray['percentage'])) ? mysqli_real_escape_string($db, $resultArray['percentage']) : 0;
										$initial_source_symptom_highlighted_de = (isset($resultArray['initial_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_highlighted'])) : null;
										//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
										$comparing_source_symptom_highlighted_de = (isset($resultArray['comparing_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_highlighted'])) : null;
										//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
										$initial_source_symptom_before_conversion_highlighted_de = (isset($resultArray['initial_source_symptom_before_conversion_highlighted']) AND $resultArray['initial_source_symptom_before_conversion_highlighted'] != "") ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_before_conversion_highlighted'])) : null;
										$comparing_source_symptom_before_conversion_highlighted_de = (isset($resultArray['comparing_source_symptom_before_conversion_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_before_conversion_highlighted'])) : null;
										
										// Decoding the symptoms
										$iniSymptomStringDecoded_de = ($currentIniSourceSymptomBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomBeforeConversion_de)) : null;
										$compSymptomStringDecoded_de = ($mainSwappedIniSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomStringBeforeConversion_de)) : null;
									} else {

										$no_of_match = 0;
										$percentage = 0;
										$initial_source_symptom_highlighted_de = (isset($currentIniSourceSymptomEncoded_de) AND $currentIniSourceSymptomEncoded_de != "") ? mysqli_real_escape_string($db, $currentIniSourceSymptomEncoded_de) : null;
										//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
										$comparing_source_symptom_highlighted_de = (isset($mainSwappedIniSymptomString_de) AND $mainSwappedIniSymptomString_de != "") ? mysqli_real_escape_string($db, $mainSwappedIniSymptomString_de) : null;
										//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
										$initial_source_symptom_before_conversion_highlighted_de = (isset($currentIniSourceSymptomBeforeConversion_de) AND $currentIniSourceSymptomBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomBeforeConversion_de)) : null;
										$comparing_source_symptom_before_conversion_highlighted_de = (isset($mainSwappedIniSymptomStringBeforeConversion_de) AND $mainSwappedIniSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomStringBeforeConversion_de)) : null;
										
										// Decoding the symptoms
										$iniSymptomStringDecoded_de = ($currentIniSourceSymptomBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomBeforeConversion_de)) : null;
										$compSymptomStringDecoded_de = ($mainSwappedIniSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomStringBeforeConversion_de)) : null;
									}

									// English
									$initial_source_symptom_highlighted_en = (isset($currentIniSourceSymptomEncoded_en)) ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomEncoded_en)) : null;
									$comparing_source_symptom_highlighted_en = (isset($mainSwappedIniSymptomString_en)) ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomString_en)) : null;
									$initial_source_symptom_before_conversion_highlighted_en = (isset($currentIniSourceSymptomEncoded_en)) ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomEncoded_en)) : null;
									$comparing_source_symptom_before_conversion_highlighted_en = (isset($mainSwappedIniSymptomString_en)) ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomString_en)) : null;
									// Decoding the symptoms
									$iniSymptomStringDecoded_en = ($currentIniSourceSymptomBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomBeforeConversion_en)) : null;
									$compSymptomStringDecoded_en = ($mainSwappedIniSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedIniSymptomStringBeforeConversion_en)) : null;
								}

								// I may need to implement this below commented part later i will see - "connection_or_paste_type = 1" 
								// 1 = Normal connection or paste, 2 = Swap connection or paste, 3 = Connect edit, 4 = Paste edit
								// Here i have updated the connection to a Normal connection "connection_or_paste_type = 1"
								$updateConnectionData = "UPDATE symptom_connections SET comparing_source_id = NULLIF('".$updatable_quelle_id."', ''), conversion_comparing_source_id = NULLIF('".$updatable_original_quelle_id."', ''), comparing_source_code = NULLIF('".$updatable_quelle_code."', ''), initial_source_symptom_highlighted_de = NULLIF('".$initial_source_symptom_before_conversion_highlighted_de."', ''), initial_source_symptom_highlighted_en = NULLIF('".$initial_source_symptom_before_conversion_highlighted_en."', ''), comparing_source_symptom_highlighted_de = NULLIF('".$comparing_source_symptom_before_conversion_highlighted_de."', ''), comparing_source_symptom_highlighted_en = NULLIF('".$comparing_source_symptom_before_conversion_highlighted_en."', ''), initial_source_symptom_de = NULLIF('".$currentIniSourceSymptom_de."', ''), initial_source_symptom_en = NULLIF('".$currentIniSourceSymptom_en."', ''), comparing_source_symptom_de = NULLIF('".$compSymptomStringDecoded_de."', ''), comparing_source_symptom_en = NULLIF('".$compSymptomStringDecoded_en."', ''), matching_percentage = '".$percentage."' WHERE id = ".$iniSourceData['id'];
								$db->query($updateConnectionData);
							}
						}
					}

					$comSourceResult = $db->query("SELECT id, initial_source_symptom_id, comparing_source_symptom_id, initial_source_symptom_de, initial_source_symptom_en, comparing_source_symptom_de, comparing_source_symptom_en, connection_language FROM symptom_connections where ((initial_source_symptom_id = '".$comparing_source_symptom_id."' AND FIND_IN_SET(initial_source_id, '".$initialAndComparingDirectSources."')) OR (comparing_source_symptom_id = '".$comparing_source_symptom_id."' AND FIND_IN_SET(comparing_source_id, '".$initialAndComparingDirectSources."')))");
					if($comSourceResult->num_rows > 0){

						$updatableSymptomInfo = $db->query("SELECT quelle_id, original_quelle_id, quelle_code, arznei_id FROM 
									quelle_import_test WHERE id = ".$comparing_source_symptom_id);
						if($updatableSymptomInfo->num_rows > 0)
							$updatableSymptomInfoData = mysqli_fetch_assoc($updatableSymptomInfo);

						$updatable_original_quelle_id = (isset($updatableSymptomInfoData['original_quelle_id']) AND $updatableSymptomInfoData['original_quelle_id'] != "") ? $updatableSymptomInfoData['original_quelle_id'] : "";
						$updatable_quelle_id = (isset($updatableSymptomInfoData['quelle_id']) AND $updatableSymptomInfoData['quelle_id'] != "") ? $updatableSymptomInfoData['quelle_id'] : "";
						$updatable_quelle_code = (isset($updatableSymptomInfoData['quelle_code']) AND $updatableSymptomInfoData['quelle_code'] != "") ? $updatableSymptomInfoData['quelle_code'] : "";

						while($comSourceData = mysqli_fetch_array($comSourceResult)){
							if($comSourceData['initial_source_symptom_id'] == $comparing_source_symptom_id) {

								$symptomInfo = $db->query("SELECT id, original_symptom_id, original_quelle_id, arznei_id, is_final_version_available FROM 
									quelle_import_test WHERE id = ".$comSourceData['comparing_source_symptom_id']);
								if($symptomInfo->num_rows > 0)
									$symptomInfoData = mysqli_fetch_assoc($symptomInfo);

								$orzQuelleId = (isset($symptomInfoData['original_quelle_id']) AND $symptomInfoData['original_quelle_id'] != "") ? $symptomInfoData['original_quelle_id'] : "";
								$arzId = (isset($symptomInfoData['arznei_id']) AND $symptomInfoData['arznei_id'] != "") ? $symptomInfoData['arznei_id'] : "";
								$symId = (isset($symptomInfoData['id']) AND $symptomInfoData['id'] != "") ? $symptomInfoData['id'] : "";
								$originalSymId = (isset($symptomInfoData['original_symptom_id']) AND $symptomInfoData['original_symptom_id'] != "") ? $symptomInfoData['original_symptom_id'] : "";
								$checkIsFinalVersionAvailable = (isset($symptomInfoData['is_final_version_available']) AND $symptomInfoData['is_final_version_available'] != "") ? $symptomInfoData['is_final_version_available'] : "";

								$comSourceSymptom_de = $comSourceData['comparing_source_symptom_de'];
								$comSourceSymptom_en = $comSourceData['comparing_source_symptom_en'];

								$currentCompSymptomStringBeforeConversion_de = ($comSourceSymptom_de != "") ? base64_encode($comSourceSymptom_de) : "";
								$currentCompSymptomStringBeforeConversion_en = ($comSourceSymptom_en != "") ? base64_encode($comSourceSymptom_en) : "";
								
								// Apply dynamic conversion
								if($comSourceSymptom_de != ""){
									$comSourceSymptomEncoded_de = convertTheSymptom(0, $comSourceSymptom_de, $orzQuelleId, $arzId, $checkIsFinalVersionAvailable, 0, $symId, $originalSymId);
									$comSourceSymptomEncoded_de = base64_encode($comSourceSymptomEncoded_de);
								}
								if($comSourceSymptom_en != ""){
									$comSourceSymptomEncoded_en = convertTheSymptom(0, $comSourceSymptom_en, $orzQuelleId, $arzId, $checkIsFinalVersionAvailable, 0, $symId, $originalSymId);
									$comSourceSymptomEncoded_en = base64_encode($comSourceSymptomEncoded_en);
								}
								
								if($comSourceData['connection_language'] == "en"){
									// Preparing the English version data
									if($mainSwappedCompSymptomString_en != "" AND $comSourceSymptomEncoded_en != "")
									{
										$resultArray = comareSymptom2($mainSwappedCompSymptomString_en, $comSourceSymptomEncoded_en, $mainSwappedCompSymptomStringBeforeConversion_en, $currentCompSymptomStringBeforeConversion_en);
										// echo json_encode( array( 'status' => "error", 'result_data' => "", 'message' => "5") ); 
										// exit;
										$no_of_match = (isset($resultArray['no_of_match'])) ? $resultArray['no_of_match'] : 0;
										$percentage = (isset($resultArray['percentage'])) ? $resultArray['percentage'] : 0;
										$initial_source_symptom_highlighted_en = (isset($resultArray['initial_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_highlighted'])) : null;
										//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
										$comparing_source_symptom_highlighted_en = (isset($resultArray['comparing_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_highlighted'])) : null;
										//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
										$initial_source_symptom_before_conversion_highlighted_en = (isset($resultArray['initial_source_symptom_before_conversion_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_before_conversion_highlighted'])) : null;
										$comparing_source_symptom_before_conversion_highlighted_en = (isset($resultArray['comparing_source_symptom_before_conversion_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_before_conversion_highlighted'])) : null;

										// Decoding the symptoms
										$iniSymptomStringDecoded_en = ($mainSwappedCompSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomStringBeforeConversion_en)) : null;
										$compSymptomStringDecoded_en = ($currentCompSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($currentCompSymptomStringBeforeConversion_en)) : null;
									} else {
										$no_of_match = 0;
										$percentage = 0;
										$initial_source_symptom_highlighted_en = (isset($mainSwappedCompSymptomString_en) AND $mainSwappedCompSymptomString_en != "") ? mysqli_real_escape_string($db, $mainSwappedCompSymptomString_en) : null;
										//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
										$comparing_source_symptom_highlighted_en = (isset($comSourceSymptomEncoded_en) AND $comSourceSymptomEncoded_en != "") ? mysqli_real_escape_string($db, $comSourceSymptomEncoded_en) : null;
										//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
										$initial_source_symptom_before_conversion_highlighted_en = (isset($mainSwappedCompSymptomStringBeforeConversion_en) AND $mainSwappedCompSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomStringBeforeConversion_en)) : null;
										$comparing_source_symptom_before_conversion_highlighted_en = (isset($currentCompSymptomStringBeforeConversion_en) AND $currentCompSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($currentCompSymptomStringBeforeConversion_en)) : null;
										
										// Decoding the symptoms
										$iniSymptomStringDecoded_en = ($mainSwappedCompSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomStringBeforeConversion_en)) : null;
										$compSymptomStringDecoded_en = ($currentCompSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($currentCompSymptomStringBeforeConversion_en)) : null;
									}

									// German
									$initial_source_symptom_highlighted_de = (isset($mainSwappedCompSymptomString_de)) ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomString_de)) : null;
									$comparing_source_symptom_highlighted_de = (isset($comSourceSymptomEncoded_de)) ? mysqli_real_escape_string($db, base64_decode($comSourceSymptomEncoded_de)) : null;
									$initial_source_symptom_before_conversion_highlighted_de = (isset($mainSwappedCompSymptomString_de)) ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomString_de)) : null;
									$comparing_source_symptom_before_conversion_highlighted_de = (isset($comSourceSymptomEncoded_de)) ? mysqli_real_escape_string($db, base64_decode($comSourceSymptomEncoded_de)) : null;
									// Decoding the symptoms
									$iniSymptomStringDecoded_de = ($mainSwappedCompSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomStringBeforeConversion_de)) : null;
									$compSymptomStringDecoded_de = ($currentCompSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($currentCompSymptomStringBeforeConversion_de)) : null;
								} else {
									// Preparing the German version data
									if($mainSwappedCompSymptomString_de != "" AND $comSourceSymptomEncoded_de != "")
									{
										$resultArray = comareSymptom2($mainSwappedCompSymptomString_de, $comSourceSymptomEncoded_de, $mainSwappedCompSymptomStringBeforeConversion_de, $currentCompSymptomStringBeforeConversion_de);
										// echo json_encode( array( 'status' => "error", 'result_data' => "", 'message' => "6") ); 
										// exit;
										$no_of_match = (isset($resultArray['no_of_match'])) ? $resultArray['no_of_match'] : 0;
										$percentage = (isset($resultArray['percentage'])) ? $resultArray['percentage'] : 0;
										$initial_source_symptom_highlighted_de = (isset($resultArray['initial_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_highlighted'])) : null;
										//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
										$comparing_source_symptom_highlighted_de = (isset($resultArray['comparing_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_highlighted'])) : null;
										//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
										$initial_source_symptom_before_conversion_highlighted_de = (isset($resultArray['initial_source_symptom_before_conversion_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_before_conversion_highlighted'])) : null;
										$comparing_source_symptom_before_conversion_highlighted_de = (isset($resultArray['comparing_source_symptom_before_conversion_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_before_conversion_highlighted'])) : null;

										// Decoding the symptoms
										$iniSymptomStringDecoded_de = ($mainSwappedCompSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomStringBeforeConversion_de)) : null;
										$compSymptomStringDecoded_de = ($currentCompSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($currentCompSymptomStringBeforeConversion_de)) : null;
									} else {
										$no_of_match = 0;
										$percentage = 0;
										$initial_source_symptom_highlighted_de = (isset($mainSwappedCompSymptomString_de) AND $mainSwappedCompSymptomString_de != "") ? mysqli_real_escape_string($db, $mainSwappedCompSymptomString_de) : null;
										//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
										$comparing_source_symptom_highlighted_de = (isset($comSourceSymptomEncoded_de) AND $comSourceSymptomEncoded_de != "") ? mysqli_real_escape_string($db, $comSourceSymptomEncoded_de) : null;
										//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
										$initial_source_symptom_before_conversion_highlighted_de = (isset($mainSwappedCompSymptomStringBeforeConversion_de) AND $mainSwappedCompSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomStringBeforeConversion_de)) : null;
										$comparing_source_symptom_before_conversion_highlighted_de = (isset($currentCompSymptomStringBeforeConversion_de) AND $currentCompSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($currentCompSymptomStringBeforeConversion_de)) : null;
										
										// Decoding the symptoms
										$iniSymptomStringDecoded_de = ($mainSwappedCompSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomStringBeforeConversion_de)) : null;
										$compSymptomStringDecoded_de = ($currentCompSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($currentCompSymptomStringBeforeConversion_de)) : null;
									}

									// English
									$initial_source_symptom_highlighted_en = (isset($mainSwappedCompSymptomString_en)) ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomString_en)) : null;
									$comparing_source_symptom_highlighted_en = (isset($comSourceSymptomEncoded_en)) ? mysqli_real_escape_string($db, base64_decode($comSourceSymptomEncoded_en)) : null;
									$initial_source_symptom_before_conversion_highlighted_en = (isset($mainSwappedCompSymptomString_en)) ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomString_en)) : null;
									$comparing_source_symptom_before_conversion_highlighted_en = (isset($comSourceSymptomEncoded_en)) ? mysqli_real_escape_string($db, base64_decode($comSourceSymptomEncoded_en)) : null;
									// Decoding the symptoms
									$iniSymptomStringDecoded_en = ($mainSwappedCompSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomStringBeforeConversion_en)) : null;
									$compSymptomStringDecoded_en = ($currentCompSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($currentCompSymptomStringBeforeConversion_en)) : null;
								}

								// I may need to implement this below commented part later i will see - "connection_or_paste_type = 1" 
								// 1 = Normal connection or paste, 2 = Swap connection or paste, 3 = Connect edit, 4 = Paste edit
								// Here i have updated the connection to a Normal connection "connection_or_paste_type = 1"
								$updateConnectionData = "UPDATE symptom_connections SET initial_source_id = NULLIF('".$updatable_quelle_id."', ''), conversion_initial_source_id = NULLIF('".$updatable_original_quelle_id."', ''), initial_source_code = NULLIF('".$updatable_quelle_code."', ''), initial_source_symptom_highlighted_de = NULLIF('".$initial_source_symptom_before_conversion_highlighted_de."', ''), initial_source_symptom_highlighted_en = NULLIF('".$initial_source_symptom_before_conversion_highlighted_en."', ''), comparing_source_symptom_highlighted_de = NULLIF('".$comparing_source_symptom_before_conversion_highlighted_de."', ''), comparing_source_symptom_highlighted_en = NULLIF('".$comparing_source_symptom_before_conversion_highlighted_en."', ''), initial_source_symptom_de = NULLIF('".$iniSymptomStringDecoded_de."', ''), initial_source_symptom_en = NULLIF('".$iniSymptomStringDecoded_en."', ''), comparing_source_symptom_de = NULLIF('".$compSymptomStringDecoded_de."', ''), comparing_source_symptom_en = NULLIF('".$compSymptomStringDecoded_en."', ''), matching_percentage = '".$percentage."' WHERE id = ".$comSourceData['id'];
								$db->query($updateConnectionData);
							} else if ($comSourceData['comparing_source_symptom_id'] == $comparing_source_symptom_id) {

								$symptomInfo = $db->query("SELECT id, original_symptom_id, original_quelle_id, arznei_id, is_final_version_available FROM 
									quelle_import_test WHERE id = ".$comSourceData['initial_source_symptom_id']);
								if($symptomInfo->num_rows > 0)
									$symptomInfoData = mysqli_fetch_assoc($symptomInfo);

								$orzQuelleId = (isset($symptomInfoData['original_quelle_id']) AND $symptomInfoData['original_quelle_id'] != "") ? $symptomInfoData['original_quelle_id'] : "";
								$arzId = (isset($symptomInfoData['arznei_id']) AND $symptomInfoData['arznei_id'] != "") ? $symptomInfoData['arznei_id'] : "";
								$symId = (isset($symptomInfoData['id']) AND $symptomInfoData['id'] != "") ? $symptomInfoData['id'] : "";
								$originalSymId = (isset($symptomInfoData['original_symptom_id']) AND $symptomInfoData['original_symptom_id'] != "") ? $symptomInfoData['original_symptom_id'] : "";
								$checkIsFinalVersionAvailable = (isset($symptomInfoData['is_final_version_available']) AND $symptomInfoData['is_final_version_available'] != "") ? $symptomInfoData['is_final_version_available'] : "";

								$currentIniSourceSymptom_de = $comSourceData['initial_source_symptom_de'];
								$currentIniSourceSymptom_en = $comSourceData['initial_source_symptom_en'];

								$currentIniSourceSymptomBeforeConversion_de = ($currentIniSourceSymptom_de != "") ? base64_encode($currentIniSourceSymptom_de) : "";
								$currentIniSourceSymptomBeforeConversion_en = ($currentIniSourceSymptom_en != "") ? base64_encode($currentIniSourceSymptom_en) : "";
								
								// Apply dynamic conversion
								if($currentIniSourceSymptom_de != ""){
									$currentIniSourceSymptomEncoded_de = convertTheSymptom(0, $currentIniSourceSymptom_de, $orzQuelleId, $arzId, $checkIsFinalVersionAvailable, 0, $symId, $originalSymId);
									$currentIniSourceSymptomEncoded_de = base64_encode($currentIniSourceSymptomEncoded_de);
								}
								if($currentIniSourceSymptom_en != ""){
									$currentIniSourceSymptomEncoded_en = convertTheSymptom(0, $currentIniSourceSymptom_en, $orzQuelleId, $arzId, $checkIsFinalVersionAvailable, 0, $symId, $originalSymId);
									$currentIniSourceSymptomEncoded_en = base64_encode($currentIniSourceSymptomEncoded_en);
								}

								if($comSourceData['connection_language'] == "en"){
									// Preparing the English version data
									if($currentIniSourceSymptomEncoded_en != "" AND $mainSwappedCompSymptomString_en != ""){
										$resultArray = comareSymptom2($currentIniSourceSymptomEncoded_en, $mainSwappedCompSymptomString_en, $currentIniSourceSymptomBeforeConversion_en, $mainSwappedCompSymptomStringBeforeConversion_en);
										// echo json_encode( array( 'status' => "error", 'result_data' => "", 'message' => "7") ); 
										// exit;
										$no_of_match = (isset($resultArray['no_of_match'])) ? $resultArray['no_of_match'] : 0;
										$percentage = (isset($resultArray['percentage'])) ? $resultArray['percentage'] : 0;
										$initial_source_symptom_highlighted_en = (isset($resultArray['initial_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_highlighted'])) : null;
										//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
										$comparing_source_symptom_highlighted_en = (isset($resultArray['comparing_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_highlighted'])) : null;
										//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
										$initial_source_symptom_before_conversion_highlighted_en = (isset($resultArray['initial_source_symptom_before_conversion_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_before_conversion_highlighted'])) : null;
										$comparing_source_symptom_before_conversion_highlighted_en = (isset($resultArray['comparing_source_symptom_before_conversion_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_before_conversion_highlighted'])) : null;

										// Decoding the symptoms
										$iniSymptomStringDecoded_en = ($currentIniSourceSymptomBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomBeforeConversion_en)) : null;
										$compSymptomStringDecoded_en = ($mainSwappedCompSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomStringBeforeConversion_en)) : null;
									} else {
										$no_of_match = 0;
										$percentage = 0;
										$initial_source_symptom_highlighted_en = (isset($currentIniSourceSymptomEncoded_en) AND $currentIniSourceSymptomEncoded_en != "") ? mysqli_real_escape_string($db, $currentIniSourceSymptomEncoded_en) : null;
										//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
										$comparing_source_symptom_highlighted_en = (isset($mainSwappedCompSymptomString_en) AND $mainSwappedCompSymptomString_en != "") ? mysqli_real_escape_string($db, $mainSwappedCompSymptomString_en) : null;
										//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
										$initial_source_symptom_before_conversion_highlighted_en = (isset($currentIniSourceSymptomBeforeConversion_en) AND $currentIniSourceSymptomBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomBeforeConversion_en)) : null;
										$comparing_source_symptom_before_conversion_highlighted_en = (isset($mainSwappedCompSymptomStringBeforeConversion_en) AND $mainSwappedCompSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomStringBeforeConversion_en)) : null;
										
										// Decoding the symptoms
										$iniSymptomStringDecoded_en = ($currentIniSourceSymptomBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomBeforeConversion_en)) : null;
										$compSymptomStringDecoded_en = ($mainSwappedCompSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomStringBeforeConversion_en)) : null;
									}

									// German
									$initial_source_symptom_highlighted_de = (isset($currentIniSourceSymptomEncoded_de)) ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomEncoded_de)) : null;
									$comparing_source_symptom_highlighted_de = (isset($mainSwappedCompSymptomString_de)) ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomString_de)) : null;
									$initial_source_symptom_before_conversion_highlighted_de = (isset($currentIniSourceSymptomEncoded_de)) ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomEncoded_de)) : null;
									$comparing_source_symptom_before_conversion_highlighted_de = (isset($mainSwappedCompSymptomString_de)) ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomString_de)) : null;
									// Decoding the symptoms
									$iniSymptomStringDecoded_de = ($currentIniSourceSymptomBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomBeforeConversion_de)) : null;
									$compSymptomStringDecoded_de = ($mainSwappedCompSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomStringBeforeConversion_de)) : null;
								} else {
									// Preparing the German version data
									if($currentIniSourceSymptomEncoded_de != "" AND $mainSwappedCompSymptomString_de != ""){
										$resultArray = comareSymptom2($currentIniSourceSymptomEncoded_de, $mainSwappedCompSymptomString_de, $currentIniSourceSymptomBeforeConversion_de, $mainSwappedCompSymptomStringBeforeConversion_de);
										// echo json_encode( array( 'status' => "error", 'result_data' => "", 'message' => "8") ); 
										// exit;
										$no_of_match = (isset($resultArray['no_of_match'])) ? $resultArray['no_of_match'] : 0;
										$percentage = (isset($resultArray['percentage'])) ? $resultArray['percentage'] : 0;
										$initial_source_symptom_highlighted_de = (isset($resultArray['initial_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_highlighted'])) : null;
										//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
										$comparing_source_symptom_highlighted_de = (isset($resultArray['comparing_source_symptom_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_highlighted'])) : null;
										//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
										$initial_source_symptom_before_conversion_highlighted_de = (isset($resultArray['initial_source_symptom_before_conversion_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['initial_source_symptom_before_conversion_highlighted'])) : null;
										$comparing_source_symptom_before_conversion_highlighted_de = (isset($resultArray['comparing_source_symptom_before_conversion_highlighted'])) ? mysqli_real_escape_string($db, base64_decode($resultArray['comparing_source_symptom_before_conversion_highlighted'])) : null;

										// Decoding the symptoms
										$iniSymptomStringDecoded_de = ($currentIniSourceSymptomBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomBeforeConversion_de)) : null;
										$compSymptomStringDecoded_de = ($mainSwappedCompSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomStringBeforeConversion_de)) : null;
									} else {
										$no_of_match = 0;
										$percentage = 0;
										$initial_source_symptom_highlighted_de = (isset($currentIniSourceSymptomEncoded_de) AND $currentIniSourceSymptomEncoded_de != "") ? mysqli_real_escape_string($db, $currentIniSourceSymptomEncoded_de) : null;
										//$initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
										$comparing_source_symptom_highlighted_de = (isset($mainSwappedCompSymptomString_de) AND $mainSwappedCompSymptomString_de != "") ? mysqli_real_escape_string($db, $mainSwappedCompSymptomString_de) : null;
										//$comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
										$initial_source_symptom_before_conversion_highlighted_de = (isset($currentIniSourceSymptomBeforeConversion_de) AND $currentIniSourceSymptomBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomBeforeConversion_de)) : null;
										$comparing_source_symptom_before_conversion_highlighted_de = (isset($mainSwappedCompSymptomStringBeforeConversion_de) AND $mainSwappedCompSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomStringBeforeConversion_de)) : null;
										
										// Decoding the symptoms
										$iniSymptomStringDecoded_de = ($currentIniSourceSymptomBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomBeforeConversion_de)) : null;
										$compSymptomStringDecoded_de = ($mainSwappedCompSymptomStringBeforeConversion_de != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomStringBeforeConversion_de)) : null;
									}

									// English
									$initial_source_symptom_highlighted_en = (isset($currentIniSourceSymptomEncoded_en)) ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomEncoded_en)) : null;
									$comparing_source_symptom_highlighted_en = (isset($mainSwappedCompSymptomString_en)) ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomString_en)) : null;
									$initial_source_symptom_before_conversion_highlighted_en = (isset($currentIniSourceSymptomEncoded_en)) ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomEncoded_en)) : null;
									$comparing_source_symptom_before_conversion_highlighted_en = (isset($mainSwappedCompSymptomString_en)) ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomString_en)) : null;
									// Decoding the symptoms
									$iniSymptomStringDecoded_en = ($currentIniSourceSymptomBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($currentIniSourceSymptomBeforeConversion_en)) : null;
									$compSymptomStringDecoded_en = ($mainSwappedCompSymptomStringBeforeConversion_en != "") ? mysqli_real_escape_string($db, base64_decode($mainSwappedCompSymptomStringBeforeConversion_en)) : null;
								}

								// I may need to implement this below commented part later i will see - "connection_or_paste_type = 1" 
								// 1 = Normal connection or paste, 2 = Swap connection or paste, 3 = Connect edit, 4 = Paste edit
								// Here i have updated the connection to a Normal connection "connection_or_paste_type = 1"
								$updateConnectionData = "UPDATE symptom_connections SET comparing_source_id = NULLIF('".$updatable_quelle_id."', ''), conversion_comparing_source_id = NULLIF('".$updatable_original_quelle_id."', ''), comparing_source_code = NULLIF('".$updatable_quelle_code."', ''), initial_source_symptom_highlighted_de = NULLIF('".$initial_source_symptom_before_conversion_highlighted_de."', ''), initial_source_symptom_highlighted_en = NULLIF('".$initial_source_symptom_before_conversion_highlighted_en."', ''), comparing_source_symptom_highlighted_de = NULLIF('".$comparing_source_symptom_before_conversion_highlighted_de."', ''), comparing_source_symptom_highlighted_en = NULLIF('".$comparing_source_symptom_before_conversion_highlighted_en."', ''), initial_source_symptom_de = NULLIF('".$iniSymptomStringDecoded_de."', ''), initial_source_symptom_en = NULLIF('".$iniSymptomStringDecoded_en."', ''), comparing_source_symptom_de = NULLIF('".$compSymptomStringDecoded_de."', ''), comparing_source_symptom_en = NULLIF('".$compSymptomStringDecoded_en."', ''), matching_percentage = '".$percentage."' WHERE id = ".$comSourceData['id'];
								$db->query($updateConnectionData);
							}
						}
					}
					
    			}

				$db->commit();

			    $returnArr['status'] = true;
			    $returnArr['message'] = "Success";
			} else {
				$db->rollback();
		    	$returnArr['status'] = false;
			    $returnArr['message'] = "Required data not found";
			}

			
		}catch (Exception $e) {
	    	$db->rollback();
	    	$returnArr['status'] = false;
		    $returnArr['message'] = $e->getMessage();
		}
		

		return $returnArr;
	}

	// Preparing the final version symptom replacing default editors tags with applications custom tags
	function prepareFinalVersionSymptom($string){
		if($string != ""){
			$line = str_replace ( '</em><em>', '', $string );

			$line = str_replace ( array (
				"\r",
				"\t" 
			), '', $line );
			$line = trim ( $line );
			$line = strip_tags ( $line, '<b><i><strong><em><u><sup><span>' );
			$line = trim ( str_replace ( '&nbsp;', ' ', htmlentities( $line ) ) );
			$line = html_entity_decode($line);
			// Replacing Colored sentences's tag to our custom tag "<clr>"
			$coloredTextCnt = 0; 
			do { 
				$line = preg_replace("#<span[^>]*style=(\"|')[^>]*color:(.+?);[^>]*(\"|')>(.+?)</span>#is", "<clr style=\"color:$2;\">$4</clr>", $line, -1, $coloredTextCnt ); 
			} while ( $coloredTextCnt > 0 );
			// Replacing Spaced sentences's tag to our custom tag "<ss>"
			$letterSpaceCntV1 = 0; 
			do { 
				$line = preg_replace("#<span[^>]*style=(\"|')[^>]*letter-spacing:[^>]*>(.+?)</span>#is", "<ss>$2</ss>", $line, -1, $letterSpaceCntV1 ); 
			} while ( $letterSpaceCntV1 > 0 );
			$letterSpaceCntV2 = 0; 
			do { 
				$line = preg_replace("#<span[^>]*class=(\"|')text-sperrschrift(\"|')>(.+?)</span>#is", "<ss>$3</ss>", $line, -1, $letterSpaceCntV2 ); 
			} while ( $letterSpaceCntV2 > 0 );
			
			$line = strip_tags ( $line, '<b><i><strong><em><u><sup><ss><clr>' );
			$line = trim ( $line );

			// Get the First and Last character to check format- (Normal) Kursiv,Â° Normal,Â° Fett,Â°  
			$FirstCharCheck = mb_substr ( trim($line), 0, 1 );

			$cleanLineToGetLastChar = rtrim(trim($line), '.');
			$cleanLineToGetLastChar = rtrim(trim($cleanLineToGetLastChar), ',');
			$cleanLineToGetLastChar = rtrim(trim($cleanLineToGetLastChar), ';');
			$LastCharCheck = mb_substr ( trim($cleanLineToGetLastChar), mb_strlen ( trim($cleanLineToGetLastChar) ) - 1 );
			// Checking is there any open tag
			preg_match_all("#<[^/>]*>#i", $line, $matcheOpenTags, PREG_OFFSET_CAPTURE);
			// Count the number of occurance of- *,Â°
			$totalAsterisks = mb_substr_count($line, "*"); 
			$totalDegrees = mb_substr_count($line, "Â°"); 
			
			if(($FirstCharCheck == "(" AND $LastCharCheck == ")") AND (isset($matcheOpenTags[0]) AND empty($matcheOpenTags[0]))) {
				// It is format - (Normal)
				$line = '<parentheses-normal>'.$line.'</parentheses-normal>';
			} else if($LastCharCheck == "Â°" AND $totalDegrees == 1 AND $totalAsterisks == 0) {
				// It is format - Kursiv,Â° Normal,Â° Fett,Â°
				$line = structureEndingWithDegreeFormatString($line, 'endwithdegree');
			} else {
				$line = separateTheApplicableStratingSign($line, '*');
				$line = separateTheApplicableStratingSign($line, 'Â°');
				$line = removeBlankTags($line);
				
				$line = convertPatternPortions($line, '*', 'asterisk');
				$line = convertPatternPortions($line, 'Â°', 'degree');
				// Structure the non * and Â° portion strings
				$line = structureNonAsteriskAndDegreePortions($line, 'non-asterisk-degree');
			}
			$line = removeBlankTags($line);
			$line = removeCustomParentTags($line);

			$line = str_replace ( array (
				'<ss>',
				'</ss>' 
			), array (
				"<span class=\"text-sperrschrift\">",
				"</span>" 
			), $line );
			$line = str_replace ( array (
				'<clr',
				'</clr>' 
			), array (
				"<span",
				"</span>" 
			), $line );
			
			$escapeCustomTags = "<parentheses-normal>";
			$parentCustomTagArr = array('endwithdegree', 'asterisk', 'degree', 'non-asterisk-degree', 'asterisk-degree');
			foreach ($parentCustomTagArr as $tagKey => $tagVal) {
				$escapeCustomTags .= "<".$tagVal."-ssbold>";
				$escapeCustomTags .= "<".$tagVal."-embold>";
				$escapeCustomTags .= "<".$tagVal."-ssem>";
				$escapeCustomTags .= "<".$tagVal."-ss>";
				$escapeCustomTags .= "<".$tagVal."-em>";
				$escapeCustomTags .= "<".$tagVal."-normalgross>";
				$escapeCustomTags .= "<".$tagVal."-normal>";
				$escapeCustomTags .= "<".$tagVal."-bold>";
				$escapeCustomTags .= "<".$tagVal."-grossbold>";
				$escapeCustomTags .= "<".$tagVal."-ssembold>";
			}

			$line = strip_tags ( $line, '<b><i><strong><em><u><sup><span>'.$escapeCustomTags );
			$string = removeBlankTags($line);
		}
		return $string;
	}

	function editSymptom($symptomId, $string, $language){
		global $db;
		global $date;
		global $timeStringEndTagArray;
		if($symptomId != "" AND $string != "" AND $language != ""){
			$line = str_replace ( '</em><em>', '', $string );

			$line = str_replace ( array (
				"\r",
				"\t" 
			), '', $line );
			$line = trim ( $line );
			$line = strip_tags ( $line, '<b><i><strong><em><u><sup><span>' );
			$line = trim ( str_replace ( '&nbsp;', ' ', htmlentities( $line ) ) );
			$line = html_entity_decode($line);
			// Replacing Colored sentences's tag to our custom tag "<clr>"
			$coloredTextCnt = 0; 
			do { 
				$line = preg_replace("#<span[^>]*style=(\"|')[^>]*color:(.+?);[^>]*(\"|')>(.+?)</span>#is", "<clr style=\"color:$2;\">$4</clr>", $line, -1, $coloredTextCnt ); 
			} while ( $coloredTextCnt > 0 );
			// Replacing Spaced sentences's tag to our custom tag "<ss>"
			$letterSpaceCntV1 = 0; 
			do { 
				$line = preg_replace("#<span[^>]*style=(\"|')[^>]*letter-spacing:[^>]*>(.+?)</span>#is", "<ss>$2</ss>", $line, -1, $letterSpaceCntV1 ); 
			} while ( $letterSpaceCntV1 > 0 );
			$letterSpaceCntV2 = 0; 
			do { 
				$line = preg_replace("#<span[^>]*class=(\"|')text-sperrschrift(\"|')>(.+?)</span>#is", "<ss>$3</ss>", $line, -1, $letterSpaceCntV2 ); 
			} while ( $letterSpaceCntV2 > 0 );
			
			$line = strip_tags ( $line, '<b><i><strong><em><u><sup><ss><clr>' );
			$line = trim ( $line );
			$cleanline = strip_tags($line);

			$FirstChar = mb_substr ( $cleanline, 0, 1 );
			$LastChar = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 1 );
			$LastTwoChar = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 2 );
			// Get the First and Last character to check format- (Normal) Kursiv,Â° Normal,Â° Fett,Â°  
			$FirstCharCheck = mb_substr ( trim($line), 0, 1 );

			$cleanLineToGetLastChar = rtrim(trim($line), '.');
			$cleanLineToGetLastChar = rtrim(trim($cleanLineToGetLastChar), ',');
			$cleanLineToGetLastChar = rtrim(trim($cleanLineToGetLastChar), ';');
			$LastCharCheck = mb_substr ( trim($cleanLineToGetLastChar), mb_strlen ( trim($cleanLineToGetLastChar) ) - 1 );
			// Checking is there any open tag
			preg_match_all("#<[^/>]*>#i", $line, $matcheOpenTags, PREG_OFFSET_CAPTURE);
			// Count the number of occurance of- *,Â°
			$totalAsterisks = mb_substr_count($line, "*"); 
			$totalDegrees = mb_substr_count($line, "Â°"); 
			
			if(($FirstCharCheck == "(" AND $LastCharCheck == ")") AND (isset($matcheOpenTags[0]) AND empty($matcheOpenTags[0]))) {
				// It is format - (Normal)
				$line = '<parentheses-normal>'.$line.'</parentheses-normal>';
			} else if($LastCharCheck == "Â°" AND $totalDegrees == 1 AND $totalAsterisks == 0) {
				// It is format - Kursiv,Â° Normal,Â° Fett,Â°
				$line = structureEndingWithDegreeFormatString($line, 'endwithdegree');
			} else {
				$line = separateTheApplicableStratingSign($line, '*');
				$line = separateTheApplicableStratingSign($line, 'Â°');
				$line = removeBlankTags($line);
				
				$line = convertPatternPortions($line, '*', 'asterisk');
				$line = convertPatternPortions($line, 'Â°', 'degree');
				// Structure the non * and Â° portion strings
				$line = structureNonAsteriskAndDegreePortions($line, 'non-asterisk-degree');
			}
			$line = removeBlankTags($line);
			$line = removeCustomParentTags($line);

			$line = str_replace ( array (
				'<ss>',
				'</ss>' 
			), array (
				"<span class=\"text-sperrschrift\">",
				"</span>" 
			), $line );
			$line = str_replace ( array (
				'<clr',
				'</clr>' 
			), array (
				"<span",
				"</span>" 
			), $line );
			
			$escapeCustomTags = "<parentheses-normal>";
			$parentCustomTagArr = array('endwithdegree', 'asterisk', 'degree', 'non-asterisk-degree', 'asterisk-degree');
			foreach ($parentCustomTagArr as $tagKey => $tagVal) {
				$escapeCustomTags .= "<".$tagVal."-ssbold>";
				$escapeCustomTags .= "<".$tagVal."-embold>";
				$escapeCustomTags .= "<".$tagVal."-ssem>";
				$escapeCustomTags .= "<".$tagVal."-ss>";
				$escapeCustomTags .= "<".$tagVal."-em>";
				$escapeCustomTags .= "<".$tagVal."-normalgross>";
				$escapeCustomTags .= "<".$tagVal."-normal>";
				$escapeCustomTags .= "<".$tagVal."-bold>";
				$escapeCustomTags .= "<".$tagVal."-grossbold>";
				$escapeCustomTags .= "<".$tagVal."-ssembold>";
			}

			$line = strip_tags ( $line, '<b><i><strong><em><u><sup><span>'.$escapeCustomTags );
			$BeschreibungOriginal = removeBlankTags($line);
			// $searchableText here we are going to store only symptom part excluding prufer, remedi, time data, etc.
			// $searchableText = $BeschreibungPlain;
			$searchableText = $BeschreibungOriginal;

			/* Find all time data in the entire Symptom string */
			$allTimeStringsArray = getAllTimeData($cleanline, $timeStringEndTagArray);
			if(!empty($allTimeStringsArray)){
				$timeString = implode(', ', $allTimeStringsArray);
			}

			// Removing time strings
			if(!empty($allTimeStringsArray)){
				foreach ($allTimeStringsArray as $timeStrKey => $timeStrVal) {
					if(mb_strpos($cleanline, $timeStrVal) !== false)
						$cleanline = str_replace($timeStrVal, "", $cleanline);
					if(mb_strpos($searchableText, $timeStrVal) !== false)
						$searchableText = str_replace($timeStrVal, "", $searchableText);
				}
			}

			/* Getting ending bracketed strings */
			$endingBracketsArray = array();
			if ($LastChar == ')' OR $LastTwoChar ==').' OR $LastTwoChar =='),') {
				$endingBracketsArray = getAllEndingBracketedStrings($cleanline, "(", ")");
			}else if($LastChar == ']' OR $LastTwoChar =='].' OR $LastTwoChar =='],'){
				$endingBracketsArray = getAllEndingBracketedStrings($cleanline, "[", "]");
			}

			$lastBracketedString = (isset($endingBracketsArray[0]) AND $endingBracketsArray[0] != "") ? trim($endingBracketsArray[0]) : null;

			if( isset($lastBracketedString) AND $lastBracketedString != "" ){
				$searchableText = removLastBracketedPart($searchableText, '(', ')');
				$searchableText = removLastBracketedPart($searchableText, '[', ']');
				// removing bracket brackets data from searchable text
				if(mb_strpos($searchableText, $lastBracketedString) !== false){
					$searchableText = str_replace($lastBracketedString, "", $searchableText);
				}
			}
			// Removing blank tags
			$searchableText = removeBlankTags($searchableText);
			// Removing blank parentheses
			$searchableText = preg_replace('#\(\s*\)#', '', $searchableText);
			$searchableText = str_replace("()", "", $searchableText);
			$searchableText = removeBlankParenthesesFormSearchableText($searchableText);
			$searchableText = removeBlankTags($searchableText);
			// Removing blank square brackets
			$searchableText = preg_replace('#\[\s*\]#', '', $searchableText);
			$searchableText = str_replace("[]", "", $searchableText);
			$searchableText = removeBlankBracketsFormSearchableText($searchableText);
			$searchableText = removeBlankTags($searchableText);

			$data = array();
			$data['BeschreibungOriginal'] = ($BeschreibungOriginal != "") ? mysqli_real_escape_string($db, $BeschreibungOriginal) : "";
			$data['searchable_text'] = ($searchableText != "") ? mysqli_real_escape_string($db, $searchableText) : "";

			$symptomUpdateQuery="UPDATE quelle_import_test SET BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE id = '".$symptomId."'";
			$db->query($symptomUpdateQuery);
		}
		return $string;
	}

	// New concept updating in dynamic comparison table
	function editSymptomComparisonTable($symptomId, $string, $language, $comparisonTable){
		global $db;
		global $date;
		global $timeStringEndTagArray;
		if($symptomId != "" AND $string != "" AND $language != "" AND $comparisonTable != ""){
			$line = str_replace ( '</em><em>', '', $string );

			$line = str_replace ( array (
				"\r",
				"\t" 
			), '', $line );
			$line = trim ( $line );
			$line = strip_tags ( $line, '<b><i><strong><em><u><sup><span>' );
			$line = trim ( str_replace ( '&nbsp;', ' ', htmlentities( $line ) ) );
			$line = html_entity_decode($line);
			// Replacing Colored sentences's tag to our custom tag "<clr>"
			$coloredTextCnt = 0; 
			do { 
				$line = preg_replace("#<span[^>]*style=(\"|')[^>]*color:(.+?);[^>]*(\"|')>(.+?)</span>#is", "<clr style=\"color:$2;\">$4</clr>", $line, -1, $coloredTextCnt ); 
			} while ( $coloredTextCnt > 0 );
			// Replacing Spaced sentences's tag to our custom tag "<ss>"
			$letterSpaceCntV1 = 0; 
			do { 
				$line = preg_replace("#<span[^>]*style=(\"|')[^>]*letter-spacing:[^>]*>(.+?)</span>#is", "<ss>$2</ss>", $line, -1, $letterSpaceCntV1 ); 
			} while ( $letterSpaceCntV1 > 0 );
			$letterSpaceCntV2 = 0; 
			do { 
				$line = preg_replace("#<span[^>]*class=(\"|')text-sperrschrift(\"|')>(.+?)</span>#is", "<ss>$3</ss>", $line, -1, $letterSpaceCntV2 ); 
			} while ( $letterSpaceCntV2 > 0 );
			
			$line = strip_tags ( $line, '<b><i><strong><em><u><sup><ss><clr>' );
			$line = trim ( $line );
			$cleanline = strip_tags($line);

			$FirstChar = mb_substr ( $cleanline, 0, 1 );
			$LastChar = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 1 );
			$LastTwoChar = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 2 );
			// Get the First and Last character to check format- (Normal) Kursiv,Â° Normal,Â° Fett,Â°  
			$FirstCharCheck = mb_substr ( trim($line), 0, 1 );

			$cleanLineToGetLastChar = rtrim(trim($line), '.');
			$cleanLineToGetLastChar = rtrim(trim($cleanLineToGetLastChar), ',');
			$cleanLineToGetLastChar = rtrim(trim($cleanLineToGetLastChar), ';');
			$LastCharCheck = mb_substr ( trim($cleanLineToGetLastChar), mb_strlen ( trim($cleanLineToGetLastChar) ) - 1 );
			// Checking is there any open tag
			preg_match_all("#<[^/>]*>#i", $line, $matcheOpenTags, PREG_OFFSET_CAPTURE);
			// Count the number of occurance of- *,Â°
			$totalAsterisks = mb_substr_count($line, "*"); 
			$totalDegrees = mb_substr_count($line, "Â°"); 
			
			if(($FirstCharCheck == "(" AND $LastCharCheck == ")") AND (isset($matcheOpenTags[0]) AND empty($matcheOpenTags[0]))) {
				// It is format - (Normal)
				$line = '<parentheses-normal>'.$line.'</parentheses-normal>';
			} else if($LastCharCheck == "Â°" AND $totalDegrees == 1 AND $totalAsterisks == 0) {
				// It is format - Kursiv,Â° Normal,Â° Fett,Â°
				$line = structureEndingWithDegreeFormatString($line, 'endwithdegree');
			} else {
				$line = separateTheApplicableStratingSign($line, '*');
				$line = separateTheApplicableStratingSign($line, 'Â°');
				$line = removeBlankTags($line);
				
				$line = convertPatternPortions($line, '*', 'asterisk');
				$line = convertPatternPortions($line, 'Â°', 'degree');
				// Structure the non * and Â° portion strings
				$line = structureNonAsteriskAndDegreePortions($line, 'non-asterisk-degree');
			}
			$line = removeBlankTags($line);
			$line = removeCustomParentTags($line);

			$line = str_replace ( array (
				'<ss>',
				'</ss>' 
			), array (
				"<span class=\"text-sperrschrift\">",
				"</span>" 
			), $line );
			$line = str_replace ( array (
				'<clr',
				'</clr>' 
			), array (
				"<span",
				"</span>" 
			), $line );
			
			$escapeCustomTags = "<parentheses-normal>";
			$parentCustomTagArr = array('endwithdegree', 'asterisk', 'degree', 'non-asterisk-degree', 'asterisk-degree');
			foreach ($parentCustomTagArr as $tagKey => $tagVal) {
				$escapeCustomTags .= "<".$tagVal."-ssbold>";
				$escapeCustomTags .= "<".$tagVal."-embold>";
				$escapeCustomTags .= "<".$tagVal."-ssem>";
				$escapeCustomTags .= "<".$tagVal."-ss>";
				$escapeCustomTags .= "<".$tagVal."-em>";
				$escapeCustomTags .= "<".$tagVal."-normalgross>";
				$escapeCustomTags .= "<".$tagVal."-normal>";
				$escapeCustomTags .= "<".$tagVal."-bold>";
				$escapeCustomTags .= "<".$tagVal."-grossbold>";
				$escapeCustomTags .= "<".$tagVal."-ssembold>";
			}

			$line = strip_tags ( $line, '<b><i><strong><em><u><sup><span>'.$escapeCustomTags );
			$BeschreibungOriginal = removeBlankTags($line);
			// $searchableText here we are going to store only symptom part excluding prufer, remedi, time data, etc.
			// $searchableText = $BeschreibungPlain;
			$searchableText = $BeschreibungOriginal;

			/* Find all time data in the entire Symptom string */
			$allTimeStringsArray = getAllTimeData($cleanline, $timeStringEndTagArray);
			if(!empty($allTimeStringsArray)){
				$timeString = implode(', ', $allTimeStringsArray);
			}

			// Removing time strings
			if(!empty($allTimeStringsArray)){
				foreach ($allTimeStringsArray as $timeStrKey => $timeStrVal) {
					if(mb_strpos($cleanline, $timeStrVal) !== false)
						$cleanline = str_replace($timeStrVal, "", $cleanline);
					if(mb_strpos($searchableText, $timeStrVal) !== false)
						$searchableText = str_replace($timeStrVal, "", $searchableText);
				}
			}

			/* Getting ending bracketed strings */
			$endingBracketsArray = array();
			if ($LastChar == ')' OR $LastTwoChar ==').' OR $LastTwoChar =='),') {
				$endingBracketsArray = getAllEndingBracketedStrings($cleanline, "(", ")");
			}else if($LastChar == ']' OR $LastTwoChar =='].' OR $LastTwoChar =='],'){
				$endingBracketsArray = getAllEndingBracketedStrings($cleanline, "[", "]");
			}

			$lastBracketedString = (isset($endingBracketsArray[0]) AND $endingBracketsArray[0] != "") ? trim($endingBracketsArray[0]) : null;

			if( isset($lastBracketedString) AND $lastBracketedString != "" ){
				$searchableText = removLastBracketedPart($searchableText, '(', ')');
				$searchableText = removLastBracketedPart($searchableText, '[', ']');
				// removing bracket brackets data from searchable text
				if(mb_strpos($searchableText, $lastBracketedString) !== false){
					$searchableText = str_replace($lastBracketedString, "", $searchableText);
				}
			}
			// Removing blank tags
			$searchableText = removeBlankTags($searchableText);
			// Removing blank parentheses
			$searchableText = preg_replace('#\(\s*\)#', '', $searchableText);
			$searchableText = str_replace("()", "", $searchableText);
			$searchableText = removeBlankParenthesesFormSearchableText($searchableText);
			$searchableText = removeBlankTags($searchableText);
			// Removing blank square brackets
			$searchableText = preg_replace('#\[\s*\]#', '', $searchableText);
			$searchableText = str_replace("[]", "", $searchableText);
			$searchableText = removeBlankBracketsFormSearchableText($searchableText);
			$searchableText = removeBlankTags($searchableText);
			$data = array();
			$data['BeschreibungOriginal'] = ($BeschreibungOriginal != "") ? mysqli_real_escape_string($db, $BeschreibungOriginal) : "";
			$data['searchable_text'] = ($searchableText != "") ? mysqli_real_escape_string($db, $searchableText) : "";

			$symptomUpdateQuery="UPDATE $comparisonTable SET BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', ''), final_version_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_ce_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE symptom_id = '".$symptomId."'";
			$db->query($symptomUpdateQuery);
			

			//updating connections starts
			$comparisonTableConnections = $comparisonTable.'_connections';
			$comparisonTableHighestMatchTable = $comparisonTable.'_highest_matches';
			if($data['BeschreibungOriginal'] != ""){
				$symptomUpdateQuery="UPDATE $comparisonTableConnections SET comparing_symptom_".$language." = NULLIF('".$data['BeschreibungOriginal']."', '') WHERE comparing_symptom_id = '".$symptomId."'";
			}

			if($data['searchable_text'] != ""){
				$symptomUpdateQuery="UPDATE $comparisonTableConnections SET comparing_symptom_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE comparing_symptom_id = '".$symptomId."'";
			}
			$db->query($symptomUpdateQuery);
			//updating connections ends

			//updating in highest matched table
			$symptomUpdateQuery="UPDATE $comparisonTableHighestMatchTable SET BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', ''), final_version_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE symptom_id = '".$symptomId."'";
			$db->query($symptomUpdateQuery);

			$symptomUpdateInMainQuery="UPDATE quelle_import_test SET BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE id = '".$symptomId."'";
			$db->query($symptomUpdateInMainQuery);
		}
		return $string;
	}

	function removeSpecialCharactersExcludeNumbersAlso($string) {
		// '\p{L}' matches any Unicode letter, including German characters.
	    $clean_string = preg_replace('/[^\p{L}\s]/u', '', $string); 
	    // Remove extra spaces
	    $clean_string = preg_replace('/\s+/', ' ', $clean_string);

	    return $clean_string;
	}

	function removeRomanNumerals($string) {
	    // Regular expression to match Roman numerals
	    $pattern = '/\b(?:M{0,3})(?:CM|CD|D?C{0,3})(?:XC|XL|L?X{0,3})(?:IX|IV|V?I{0,3})\b/';
	    
	    // Replace all matches with an empty string
	    return preg_replace($pattern, '', $string);
	}

	function importedStringManipulationOfBonninghausenHeading($string, $variablesArray){
		global $db;
		global $date;
		global $timeStringEndTagArray;
		$workingString = "";
		$line = $string;
		// echo htmlentities($line)."<-- short function <br>";
		$returnArr = array(
			'string' => $line,
			'variablesArray' => $variablesArray,
			'isContinue' => 0, // 1=Yes and 0=No
			'isThereMysqlTransactionError' => 0, // 1=Yes and 0=No
		);
		// Pre defined reference section work start
		$lineStringForPreDefinedReference = trim(strtolower(strip_tags($line)));
		if($lineStringForPreDefinedReference == "literature start" || $lineStringForPreDefinedReference == "literatur start"){
			$variablesArray['isPreDefinedReferenceSection'] = 1;
			$returnArr['isContinue'] = 1;
			/* 
			Seting the Flag for Allen concept source import.
			logic: If importing process is folling under the Allen concept source import then "Reset" button will not be available in the questioning process popup. Because 
			i.e. Slight confusion of ideas (after second dose), [22].
			In the above symptom while clicking on the "Reset" button in the questioning popup, it will consider "[22]" as the last bracket string which is not correct.
			*/
			if($variablesArray['masterId'] != ""){
				$updateTempQuelleImportMasterData = "UPDATE temp_quelle_import_master SET is_allen_concept_source_import = 1, stand = NULLIF('".$date."', '') WHERE id = ".$variablesArray['masterId'];
				$db->query($updateTempQuelleImportMasterData);
			}
		}
		if($lineStringForPreDefinedReference == "literature end" || $lineStringForPreDefinedReference == "literatur end"){
			$variablesArray['isPreDefinedReferenceSection'] = 0;
			$returnArr['isContinue'] = 1;
		}
		$returnArr['variablesArray'] = $variablesArray;

		if($returnArr['isContinue'] == 1)
			return $returnArr;

		if($variablesArray['isPreDefinedReferenceSection'] == 1){
			//prover detection
			$directOrderArray = directOrderDetection("P", $line);
			if(isset($directOrderArray["prueferFromParray"]) && count($directOrderArray["prueferFromParray"])>0 ){
				$directOrderProvers = $directOrderArray["prueferFromParray"];
				foreach($directOrderProvers as $proverVal){
					$proverVal =trim($proverVal);
					$proverValWithEndingDot = (mb_substr ( $proverVal, mb_strlen ( $proverVal ) - 1, 1 ) == '.') ? $proverVal : $proverVal.'.'; 
					$cleanPreDefinedPrueferString = rtrim($proverVal, ".");
					$cleanPreDefinedPrueferString = rtrim($cleanPreDefinedPrueferString, ",");
					$cleanPreDefinedPrueferStringForDB = mysqli_real_escape_string($db, $cleanPreDefinedPrueferString);
					$newProverInsertId = "";
					$prueferSearchResult = mysqli_query($db, "SELECT pruefer_id, kuerzel, suchname FROM pruefer WHERE kuerzel LIKE '%".$cleanPreDefinedPrueferStringForDB."%' OR suchname LIKE '%".$cleanPreDefinedPrueferStringForDB."%'");
					if(mysqli_num_rows($prueferSearchResult) > 0){ 
						while($pruferData = mysqli_fetch_array($prueferSearchResult)){
							$kuerzelArr = explode("|", $pruferData['kuerzel']); 
							$trimmedKuerzelArr=array_map('trim',$kuerzelArr);
							if((in_array($proverVal, $trimmedKuerzelArr) OR strtolower(trim($pruferData['suchname'])) == strtolower($proverVal)) OR (in_array($proverValWithEndingDot, $trimmedKuerzelArr) OR strtolower(trim($pruferData['suchname'])) == strtolower($proverValWithEndingDot)) OR (in_array($cleanPreDefinedPrueferString, $trimmedKuerzelArr) OR strtolower(trim($pruferData['suchname'])) == strtolower($cleanPreDefinedPrueferString))){
								$newProverInsertId = $pruferData['pruefer_id'];
								break;
							}
						}
					}
					if($newProverInsertId == ""){
						$cleanAllenPrueferString = mysqli_real_escape_string($db, $proverVal);
						$newProverInsertQuery="INSERT INTO pruefer (kuerzel, nachname, suchname, ersteller_datum) VALUES (NULLIF('".$cleanAllenPrueferString."', ''), NULLIF('".$cleanAllenPrueferString."', ''), NULLIF('".$cleanAllenPrueferString."', ''), '".$date."')";
						$db->query($newProverInsertQuery);
						$newProverInsertId = mysqli_insert_id($db);
					}

					if($newProverInsertId != "")
						array_push($variablesArray['prueferFromParray'], $newProverInsertId);
				}
				$returnArr['variablesArray'] = $variablesArray;
				return $returnArr;
			}
			//prover detection end

			$lineExplodedBySpace = explode(" ", $lineStringForPreDefinedReference);
			$referenceNumber = $lineExplodedBySpace[0];
			$referenceNumber = ($referenceNumber != "") ? preg_replace("/[^A-Za-z0-9 ]/", '', $referenceNumber) : $referenceNumber;
			array_shift($lineExplodedBySpace);
			$preDefinedFullReferenceTxt = implode(" ", $lineExplodedBySpace);
			$preReferenceAutor = "";
			$preReferenceTxt = "";
			$preDefinedFullReferenceInArray = explode(",", $preDefinedFullReferenceTxt);
			if(count($preDefinedFullReferenceInArray) >= 2){
				$preReferenceAutor = trim($preDefinedFullReferenceInArray[0]);
				array_shift($preDefinedFullReferenceInArray);
				$preReferenceTxt = implode(",", $preDefinedFullReferenceInArray);
			}
			if($referenceNumber != "" AND $preReferenceAutor != "" AND $preReferenceTxt != "" AND $preDefinedFullReferenceTxt!= "")
			{
				// $isThereAnyTransactionError = 0;
				try{
					$db->begin_transaction();
					$preDefinedReferenceId = "";
					$preDefinedFullReferenceTxt = mysqli_real_escape_string($db, $preDefinedFullReferenceTxt);
					$referenceCheckQuery = "SELECT reference_id FROM reference WHERE full_reference = '".$preDefinedFullReferenceTxt."' LIMIT 1";
					$referenceExistanceCheck = mysqli_query($db, $referenceCheckQuery);
					if($referenceExistanceCheck){
						if(mysqli_num_rows($referenceExistanceCheck) > 0){
							$existingReferenceRow = mysqli_fetch_assoc($referenceExistanceCheck);
							$preDefinedReferenceId = $existingReferenceRow['reference_id'];
						}else{
							$preReferenceTxt = mysqli_real_escape_string($db, $preReferenceTxt);
							$preReferenceAutor = mysqli_real_escape_string($db, $preReferenceAutor);
							$newReferenceInsertQuery="INSERT INTO reference (full_reference, autor, reference, ersteller_datum) VALUES (NULLIF('".$preDefinedFullReferenceTxt."', ''), NULLIF('".$preReferenceAutor."', ''), NULLIF('".$preReferenceTxt."', ''), '".$date."')";
							$db->query($newReferenceInsertQuery);
							$preDefinedReferenceId = mysqli_insert_id($db);
						}
					}
					if($preDefinedReferenceId != ""){
						//$variablesArray['preDefinedReferenceArray'] = array();
						$variablesArray['preDefinedReferenceArray'][] = array(
							'reference_id' => $preDefinedReferenceId,
							'reference_number' => $referenceNumber,
							'full_reference' => $preDefinedFullReferenceTxt,
							'pruferReferenceArray' => $variablesArray['prueferFromParray']
						);
						$referenceNumberUppercase = strtoupper($referenceNumber);
						if(!array_key_exists($referenceNumber, $variablesArray['preDefinedReferenceNumberArray']))
							$variablesArray['preDefinedReferenceNumberArray'][$referenceNumber] = $preDefinedReferenceId;
						if(!array_key_exists($referenceNumberUppercase, $variablesArray['preDefinedReferenceNumberArray']))
							$variablesArray['preDefinedReferenceNumberArray'][$referenceNumberUppercase] = $preDefinedReferenceId;

						// THIS ARRAY ELEMENT "$variablesArray['prueferFromParray']" NEEDS TO BE EMPTY HERE BECAUSE THIS ARRAY ELEMENT OR KEY IS USED BELOW IN PREDEFIED "@P:" DATA STORAGE.  
						$variablesArray['prueferFromParray'] = array();
						$returnArr['variablesArray'] = $variablesArray;
					}
					$db->commit();
				}catch (Exception $e) {
					$db->rollback();
					$returnArr['isThereMysqlTransactionError'] = 1;
					// $isThereAnyTransactionError = 1;
					return $returnArr;
				}
			}
			// continue;
			$returnArr['isContinue'] = 1;
			$returnArr['variablesArray'] = $variablesArray;
			return $returnArr;
		}
		// Pre defined reference section work end
		$line = strip_tags ( $line, '<b><i><strong><em><u><sup><span><bdi>' ); // <bdi> is a custom tag for GROSS format 
		$line = trim ( str_replace ( '&nbsp;', ' ', htmlentities( $line ) ) );
		$line = html_entity_decode($line);
		// Replacing Colored sentences's tag to our custom tag "<clr>"
		$coloredTextCnt = 0; 
		do { 
			$line = preg_replace("#<span[^>]*style=(\"|')[^>]*color:(.+?);[^>]*(\"|')>(.+?)</span>#is", "<clr style=\"color:$2;\">$4</clr>", $line, -1, $coloredTextCnt ); 
		} while ( $coloredTextCnt > 0 );
		// Replacing Spaced sentences's tag to our custom tag "<ss>"
		$letterSpaceCntV1 = 0; 
		do { 
			$line = preg_replace("#<span[^>]*style=(\"|')[^>]*letter-spacing:[^>]*>(.+?)</span>#is", "<ss>$2</ss>", $line, -1, $letterSpaceCntV1 ); 
		} while ( $letterSpaceCntV1 > 0 );
		$letterSpaceCntV2 = 0; 
		do { 
			$line = preg_replace("#<span[^>]*class=(\"|')text-sperrschrift(\"|')>(.+?)</span>#is", "<ss>$3</ss>", $line, -1, $letterSpaceCntV2 ); 
		} while ( $letterSpaceCntV2 > 0 );
		$grossCnt = 0; 
		do { 
			$line = preg_replace("#<bdi[^>]*class=(\"|')text-gross(\"|')>(.+?)</bdi>#is", "<grss>$3</grss>", $line, -1, $grossCnt ); 
		} while ( $grossCnt > 0 );
		$grossPosrions = getTheTagsContent($line, '<grss>', '</grss>');
		if(!empty($grossPosrions)){
			foreach ($grossPosrions as $grossKey => $grossVal) {
				echo htmlentities($grossVal)."<br>";
				if($grossVal != ""){
					$uppercasedString = convertTheContentToUppercaseWithHtml($grossVal);
					if($uppercasedString != "")
						$line = str_replace($grossVal, $uppercasedString, $line);
				}
			}
		}
		$line = strip_tags ( $line, '<b><i><strong><em><u><sup><ss><clr>' );
		$NewSymptomNr = 0;
		$line = trim ( $line );
		$cleanline = strip_tags($line);
		// Leerzeile
		if ($cleanline == "" OR mb_strlen($cleanline) < 3) {
			$variablesArray['rownum']++;
			// $rownum ++;
			// continue;
			$returnArr['isContinue'] = 1;
			return $returnArr;	
		}
		$FirstChar = mb_substr ( $cleanline, 0, 1 );
		$LastChar = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 1 );
		$LastTwoChar = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 2 );		
		$code='';
		$param='';
		$fisrtWordArray = explode(' ',trim($cleanline));
		$firstWord = (isset($fisrtWordArray[0]) AND $fisrtWordArray[0] != "") ? $fisrtWordArray[0] : "";
		if($FirstChar == '@'){
			$variablesArray['Beschreibung'] = '';
			$p = mb_strpos ( $cleanline, ':' );
			if ($p > 0) {
				$code = mb_substr ( $cleanline, 1, $p - 1 );
				$param = mb_substr ( $cleanline, $p + 1 );
			} else {
				$code = mb_substr ( $cleanline, 1 );
				$param = '';
			}
			$code = mb_strtoupper ( $code );
			switch ($code) {
				// Graduierung
				case 'G' :
					if(trim(strip_tags($param)) == "END")
						$variablesArray['Graduierung'] = "";
					else
						$variablesArray['Graduierung'] = trim($param);
					break;
				
				// Kapitel, setzt in DS "KapitelID"
				// case 'B' :
				case 'K' :
					if(trim(strip_tags($param)) == "END")
						$variablesArray['BereichID'] = "";
					else
						$variablesArray['BereichID'] = $param;
					break;

				// When user gives chapter information with @KD: command insted of @K: command in the document, then Chapter given through @KD command is always superior, means automatic chapter assignment process will not overright the chapeter information of a symptom that is given through @KD: command but chapter information given through @K command will get overright by the automatic chapter assignment process data.  
				case 'KD' :
					if(trim(strip_tags($param)) == "END") {
						$variablesArray['isKDCommandChapter'] = 0;
						$variablesArray['BereichID'] = "";
					} else {
						$variablesArray['isKDCommandChapter'] = 1;
						$variablesArray['BereichID'] = $param;
					}
					break;
				
				// Seite, setzt in DS "Seite"
				case 'S' :
					$tmp = explode ( '-', $param );
					$variablesArray['SeiteOriginalVon'] = $tmp [0] + 0;
					if (sizeof ( $tmp ) > 1)
						$variablesArray['SeiteOriginalBis'] = $tmp [1] + 0;
					else
						$variablesArray['SeiteOriginalBis'] = $variablesArray['SeiteOriginalVon'];
					break;
				
				// Symptom-Nr., setzt in DS "Symptomnummer"
				case 'N' :
					$NewSymptomNr = $param + 0;
					if ($NewSymptomNr == 0) {
						//$NewSymptomNr = 1;
						$variablesArray['Symptomnummer'] = 0;
					}
					break;
				
				// Literaturquelle, setzt in DS "EntnommenAus"
				case 'L' :
					$variablesArray['aLiteraturquellen'] [] = $param;
					break;
				
				// FuÃnote
				case 'F' :
					$variablesArray['Fussnote'] = $param;
					break;
				
				// Verweiss
				case 'V' :
					$variablesArray['Verweiss'] = $param;
					break;
				
				// @U: (Unklarheit, steht wie auch @F und @L VOR dem einen Symptom, welches betroffen ist)
				case 'U' :
					$variablesArray['Unklarheiten'] = $param;
					break;
				
				// @C: (Kommentar, steht wie auch @F und @L VOR dem einen Symptom, welches betroffen ist)
				case 'C' :
					$variablesArray['Kommentar'] = $param;
					break;
				
				// @P: PrÃ¼fer als KÃ¼rzel
				case 'P' :
					// $PrueferID = $this->LookupPruefer ( $param, $rownum );
					// $PrueferID = $param;
					// if ($PrueferID > 0) {
					// 	$PrueferIDs [] = $PrueferID;
					// } 
					$variablesArray['prueferFromParray'] [] = $param;
					break;
				
				default :
					break;
			}
			//continue;
		} else if (preg_match("/^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})\.$/i", $firstWord)) {
			// The Regular Expression to check if a string is Valid Roman Numeral or not 
			/*$bonninghausenHeadingString = $line;
			$bonninghausenHeadingStringAsItIs = str_replace ( array (
				'<ss>',
				'</ss>' 
			), array (
				"<span class=\"text-sperrschrift\">",
				"</span>" 
			), $bonninghausenHeadingString );
			$bonninghausenHeadingStringAsItIs = str_replace ( array (
				'<clr',
				'</clr>' 
			), array (
				"<span",
				"</span>" 
			), $bonninghausenHeadingStringAsItIs );
			$bonninghausenHeadingString = ( isset($bonninghausenHeadingStringAsItIs) AND $bonninghausenHeadingStringAsItIs != "" ) ? mysqli_real_escape_string($db, $bonninghausenHeadingStringAsItIs) : "";
			$headingDuplicate = mysqli_query($db, "SELECT id FROM bonninghausen_re_importable_headings WHERE bonninghausen_heading = '".$bonninghausenHeadingString."' AND master_id = '".$variablesArray['bonningMasterId']."'");
			if(mysqli_num_rows($headingDuplicate) == 0){
				$bonninghausenHeadingInsertQuery="INSERT INTO bonninghausen_re_importable_headings (master_id, bonninghausen_heading, ersteller_datum) VALUES ('".$variablesArray['bonningMasterId']."', NULLIF('".$bonninghausenHeadingString."', ''), '".$date."')";
    			$db->query($bonninghausenHeadingInsertQuery);
			}*/
			$variablesArray['bonninghausenHeading'] = trim($line);
			$cleanString = removeRomanNumerals($line); 
			$cleanString = removeSpecialCharactersExcludeNumbersAlso(trim($cleanString)); 
			$variablesArray['bonninghausenCleanHeading'] = ($cleanString != "") ? trim($cleanString) : "";
		// } else if(preg_match("/^\s*-\s+\d+/", $line)) { // Changed the pattern accorging to client requirements on 19-06-2024 
			// ^: Asserts the start of the string.
			// \s*: Matches zero or more whitespace characters.
			// -: Matches a hyphen.
			// \s+: Matches one or more whitespace characters.
			// \d+: Matches one or more digits.
		} else if(preg_match("/^\s*-/", $line)) { // 19-06-2024
			// ^: Asserts the start of the string.
			// \s*: Matches zero or more whitespace characters.
			// -: Matches a hyphen.
			/*$bonninghausenHeadingString = $line;
			$bonninghausenHeadingStringAsItIs = str_replace ( array (
				'<ss>',
				'</ss>' 
			), array (
				"<span class=\"text-sperrschrift\">",
				"</span>" 
			), $bonninghausenHeadingString );
			$bonninghausenHeadingStringAsItIs = str_replace ( array (
				'<clr',
				'</clr>' 
			), array (
				"<span",
				"</span>" 
			), $bonninghausenHeadingStringAsItIs );
			$bonninghausenHeadingString = ( isset($bonninghausenHeadingStringAsItIs) AND $bonninghausenHeadingStringAsItIs != "" ) ? mysqli_real_escape_string($db, $bonninghausenHeadingStringAsItIs) : "";
			$headingDuplicate = mysqli_query($db, "SELECT id FROM bonninghausen_re_importable_headings WHERE bonninghausen_heading = '".$bonninghausenHeadingString."' AND master_id = '".$variablesArray['bonningMasterId']."'");
			if(mysqli_num_rows($headingDuplicate) == 0){
				$bonninghausenHeadingInsertQuery="INSERT INTO bonninghausen_re_importable_headings (master_id, bonninghausen_heading, ersteller_datum) VALUES ('".$variablesArray['bonningMasterId']."', NULLIF('".$bonninghausenHeadingString."', ''), '".$date."')";
    			$db->query($bonninghausenHeadingInsertQuery);
			}*/
			$variablesArray['bonninghausenHeading'] = trim($line);
			$cleanString = removeRomanNumerals($line);
			$cleanString = removeSpecialCharactersExcludeNumbersAlso(trim($cleanString)); 
			$variablesArray['bonninghausenCleanHeading'] = ($cleanString != "") ? trim($cleanString) : "";
		} else if ($FirstChar == '(') {
			/* 
			* parseing symptoms nummer which has parentheses between symptom nummer 
			* Eg : (90) Fauleier-Geschmack im Munde, auÃer dem Essen. (Fr. Hahnemann.)
			*/
			$opentag = mb_strpos ( $line, '(' );
			$p = mb_strpos ( $line, ')' );
			if($opentag !== false AND $p !== false){
				$numericStringPart = trim ( mb_substr ( $line, 0, $p + 1 ) );
				if($numericStringPart != ""){
					$onlyNumericStringPart = trim ( mb_substr ( $numericStringPart, $opentag ) );
					$newLineString = str_replace ($onlyNumericStringPart, '', $line);
					$newLineString = removeBlankTags($newLineString);

					$NewSymptomNr = str_replace ( array ( '(', ')' ), '', $onlyNumericStringPart );
					if (is_numeric ( $NewSymptomNr )) {
						$line = trim($newLineString);
						if($NewSymptomNr != $variablesArray['Symptomnummer'])
							$variablesArray['isSymptomNumberMismatch'] = 1;
						$variablesArray['Beschreibung'] = $line;
						$cleanline = strip_tags($line);
					} else {
						$NewSymptomNr = 0;
						$variablesArray['Beschreibung'] = $line;
					}
				}else{
					$NewSymptomNr = 0;
					$variablesArray['Beschreibung'] = $line;
				}
			} else {
				$NewSymptomNr = 0;
				$variablesArray['Beschreibung'] = $line;
			}
			// $p = mb_strpos ( $line, ')' );
			// if ($p > 0) {
			// 	$NewSymptomNr = trim ( mb_substr ( $line, 1, $p - 1 ) );
			// 	if (is_numeric ( $NewSymptomNr )) {
			// 		if($NewSymptomNr != $Symptomnummer)
			// 			$isSymptomNumberMismatch = 1;
			// 		$Beschreibung = trim ( mb_substr ( $line, $p + 1 ) );
			// 		$cleanline = trim ( mb_substr ( $cleanline, $p + 1 ) );
			// 	} else {
			// 		$NewSymptomNr = 0;
			// 		$Beschreibung = $line;
			// 	}
			// }
		} else if($FirstChar == '[') {
			/* 
			* parseing symptoms nummer which has parentheses between symptom nummer 
			* Eg : [5] Sad, pusillanimous, full of weariness of life.
			*/
			$opentag = mb_strpos ( $line, '[' );
			$p = mb_strpos ( $line, ']' );
			if($opentag !== false AND $p !== false){
				$numericStringPart = trim ( mb_substr ( $line, 0, $p + 1 ) );
				if($numericStringPart != ""){
					$onlyNumericStringPart = trim ( mb_substr ( $numericStringPart, $opentag ) );
					$newLineString = str_replace ($onlyNumericStringPart, '', $line);
					$newLineString = removeBlankTags($newLineString);

					$NewSymptomNr = str_replace ( array ( '[', ']' ), '', $onlyNumericStringPart );
					if (is_numeric ( $NewSymptomNr )) {
						$line = trim($newLineString);
						if($NewSymptomNr != $variablesArray['Symptomnummer'])
							$variablesArray['isSymptomNumberMismatch'] = 1;
						$variablesArray['Beschreibung'] = $line;
						$cleanline = strip_tags($line);
					} else {
						$NewSymptomNr = 0;
						$variablesArray['Beschreibung'] = $line;
					}
				}else{
					$NewSymptomNr = 0;
					$variablesArray['Beschreibung'] = $line;
				}
			}else{
				$NewSymptomNr = 0;
				$variablesArray['Beschreibung'] = $line;
			}
			// if ($p > 0) {
			// 	$NewSymptomNr = trim ( mb_substr ( $line, 1, $p - 1 ) );
			// 	echo htmlentities($NewSymptomNr);
			// 	if (is_numeric ( $NewSymptomNr )) {
			// 		if($NewSymptomNr != $Symptomnummer)
			// 			$isSymptomNumberMismatch = 1;
			// 		$Beschreibung = trim ( mb_substr ( $line, $p + 1 ) );
			// 		$cleanline = trim ( mb_substr ( $cleanline, $p + 1 ) );
			// 	} else {
			// 		$NewSymptomNr = 0;
			// 		$Beschreibung = $line;
			// 	}
			// }
			// exit;
		} else {
			$isSymptomNum = is_numeric ( $FirstChar );
			$variablesArray['Beschreibung'] = '';		
			if ($isSymptomNum) {
				/* 
				* parseing symptoms nummer which has space between symptom nummer and symptom string 
				* Eg : 30 Merklich vermindertes GehÃ¶r. (n. 30 St.)
				*/
				$p = mb_strpos ( $line, ' ' );
				$num = str_replace ( array (
					':',
					'.', 
					')',
					']' 
				), '', mb_substr ( $line, 0, $p ) );
				if( is_numeric($num) ){
					$NewSymptomNr = $num;
					if($NewSymptomNr != $variablesArray['Symptomnummer'])
						$variablesArray['isSymptomNumberMismatch'] = 1;
					$variablesArray['Beschreibung'] = trim ( mb_substr ( $line, $p + 1 ) );
					$cleanline = trim ( mb_substr ( $cleanline, $p + 1 ) );
				}else{
					/* 
					* parseing symptoms nummer which are attached with Synptom string 
					* Eg : 10DrÃ¼ckender Schmerz in der Stirne.
					*/
					$charCount = 2;
					$NewSymptomNr = $FirstChar;
					while ( $charCount > 0 ) {
						$checkSymptomNumber = mb_substr ( $line, 0, $charCount );
						if( is_numeric($checkSymptomNumber) ){
							$NewSymptomNr = $checkSymptomNumber;
							if($NewSymptomNr != $variablesArray['Symptomnummer'])
								$variablesArray['isSymptomNumberMismatch'] = 1;
							$charCount++;
						}else
							$charCount = 0;
					}

					if (mb_substr($line, 0, mb_strlen($NewSymptomNr)) == $NewSymptomNr) {
						$variablesArray['Beschreibung'] = trim ( mb_substr($line, mb_strlen($NewSymptomNr)) );
						$cleanline = trim ( mb_substr($cleanline, mb_strlen($NewSymptomNr)) );
					}else{
						$variablesArray['Beschreibung'] = $line;
					} 
				}
			} else {
				$NewSymptomNr = 0;
				$variablesArray['Beschreibung'] = $line;
			}
		}
		$returnArr['string'] = $line;
		$returnArr['variablesArray'] = $variablesArray;

		// $returnArr = array(
		// 	'string' => $string,
		// 	'variablesArray' => $variablesArray,
		// );
		return $returnArr;
	}


	function importedStringManipulationProcessForBonninghausen($string, $variablesArray){
		global $db;
		global $date;
		global $timeStringEndTagArray;
		$workingString = "";
		$line = $string;
		// echo htmlentities($line)."<-- short function <br>";
		$returnArr = array(
			'string' => $line,
			'variablesArray' => $variablesArray,
			'isContinue' => 0, // 1=Yes and 0=No
			'isThereMysqlTransactionError' => 0, // 1=Yes and 0=No
		);
		// Pre defined reference section work start
		$lineStringForPreDefinedReference = trim(strtolower(strip_tags($line)));
		if($lineStringForPreDefinedReference == "literature start" || $lineStringForPreDefinedReference == "literatur start"){
			$variablesArray['isPreDefinedReferenceSection'] = 1;
			$returnArr['isContinue'] = 1;
			/* 
			Seting the Flag for Allen concept source import.
			logic: If importing process is folling under the Allen concept source import then "Reset" button will not be available in the questioning process popup. Because 
			i.e. Slight confusion of ideas (after second dose), [22].
			In the above symptom while clicking on the "Reset" button in the questioning popup, it will consider "[22]" as the last bracket string which is not correct.
			*/
			if($variablesArray['masterId'] != ""){
				$updateTempQuelleImportMasterData = "UPDATE temp_quelle_import_master SET is_allen_concept_source_import = 1, stand = NULLIF('".$date."', '') WHERE id = ".$variablesArray['masterId'];
				$db->query($updateTempQuelleImportMasterData);
			}
		}
		if($lineStringForPreDefinedReference == "literature end" || $lineStringForPreDefinedReference == "literatur end"){
			$variablesArray['isPreDefinedReferenceSection'] = 0;
			$returnArr['isContinue'] = 1;
		}
		$returnArr['variablesArray'] = $variablesArray;

		if($returnArr['isContinue'] == 1)
			return $returnArr;

		if($variablesArray['isPreDefinedReferenceSection'] == 1){
			//prover detection
			$directOrderArray = directOrderDetection("P", $line);
			if(isset($directOrderArray["prueferFromParray"]) && count($directOrderArray["prueferFromParray"])>0 ){
				$directOrderProvers = $directOrderArray["prueferFromParray"];
				foreach($directOrderProvers as $proverVal){
					$proverVal =trim($proverVal);
					$proverValWithEndingDot = (mb_substr ( $proverVal, mb_strlen ( $proverVal ) - 1, 1 ) == '.') ? $proverVal : $proverVal.'.'; 
					$cleanPreDefinedPrueferString = rtrim($proverVal, ".");
					$cleanPreDefinedPrueferString = rtrim($cleanPreDefinedPrueferString, ",");
					$cleanPreDefinedPrueferStringForDB = mysqli_real_escape_string($db, $cleanPreDefinedPrueferString);
					$newProverInsertId = "";
					$prueferSearchResult = mysqli_query($db, "SELECT pruefer_id, kuerzel, suchname FROM pruefer WHERE kuerzel LIKE '%".$cleanPreDefinedPrueferStringForDB."%' OR suchname LIKE '%".$cleanPreDefinedPrueferStringForDB."%'");
					if(mysqli_num_rows($prueferSearchResult) > 0){ 
						while($pruferData = mysqli_fetch_array($prueferSearchResult)){
							$kuerzelArr = explode("|", $pruferData['kuerzel']); 
							$trimmedKuerzelArr=array_map('trim',$kuerzelArr);
							if((in_array($proverVal, $trimmedKuerzelArr) OR strtolower(trim($pruferData['suchname'])) == strtolower($proverVal)) OR (in_array($proverValWithEndingDot, $trimmedKuerzelArr) OR strtolower(trim($pruferData['suchname'])) == strtolower($proverValWithEndingDot)) OR (in_array($cleanPreDefinedPrueferString, $trimmedKuerzelArr) OR strtolower(trim($pruferData['suchname'])) == strtolower($cleanPreDefinedPrueferString))){
								$newProverInsertId = $pruferData['pruefer_id'];
								break;
							}
						}
					}
					if($newProverInsertId == ""){
						$cleanAllenPrueferString = mysqli_real_escape_string($db, $proverVal);
						$newProverInsertQuery="INSERT INTO pruefer (kuerzel, nachname, suchname, ersteller_datum) VALUES (NULLIF('".$cleanAllenPrueferString."', ''), NULLIF('".$cleanAllenPrueferString."', ''), NULLIF('".$cleanAllenPrueferString."', ''), '".$date."')";
						$db->query($newProverInsertQuery);
						$newProverInsertId = mysqli_insert_id($db);
					}

					if($newProverInsertId != "")
						array_push($variablesArray['prueferFromParray'], $newProverInsertId);
				}
				$returnArr['variablesArray'] = $variablesArray;
				return $returnArr;
			}
			//prover detection end

			$lineExplodedBySpace = explode(" ", $lineStringForPreDefinedReference);
			$referenceNumber = $lineExplodedBySpace[0];
			$referenceNumber = ($referenceNumber != "") ? preg_replace("/[^A-Za-z0-9 ]/", '', $referenceNumber) : $referenceNumber;
			array_shift($lineExplodedBySpace);
			$preDefinedFullReferenceTxt = implode(" ", $lineExplodedBySpace);
			$preReferenceAutor = "";
			$preReferenceTxt = "";
			$preDefinedFullReferenceInArray = explode(",", $preDefinedFullReferenceTxt);
			if(count($preDefinedFullReferenceInArray) >= 2){
				$preReferenceAutor = trim($preDefinedFullReferenceInArray[0]);
				array_shift($preDefinedFullReferenceInArray);
				$preReferenceTxt = implode(",", $preDefinedFullReferenceInArray);
			}
			if($referenceNumber != "" AND $preReferenceAutor != "" AND $preReferenceTxt != "" AND $preDefinedFullReferenceTxt!= "")
			{
				// $isThereAnyTransactionError = 0;
				try{
					$db->begin_transaction();
					$preDefinedReferenceId = "";
					$preDefinedFullReferenceTxt = mysqli_real_escape_string($db, $preDefinedFullReferenceTxt);
					$referenceCheckQuery = "SELECT reference_id FROM reference WHERE full_reference = '".$preDefinedFullReferenceTxt."' LIMIT 1";
					$referenceExistanceCheck = mysqli_query($db, $referenceCheckQuery);
					if($referenceExistanceCheck){
						if(mysqli_num_rows($referenceExistanceCheck) > 0){
							$existingReferenceRow = mysqli_fetch_assoc($referenceExistanceCheck);
							$preDefinedReferenceId = $existingReferenceRow['reference_id'];
						}else{
							$preReferenceTxt = mysqli_real_escape_string($db, $preReferenceTxt);
							$preReferenceAutor = mysqli_real_escape_string($db, $preReferenceAutor);
							$newReferenceInsertQuery="INSERT INTO reference (full_reference, autor, reference, ersteller_datum) VALUES (NULLIF('".$preDefinedFullReferenceTxt."', ''), NULLIF('".$preReferenceAutor."', ''), NULLIF('".$preReferenceTxt."', ''), '".$date."')";
							$db->query($newReferenceInsertQuery);
							$preDefinedReferenceId = mysqli_insert_id($db);
						}
					}
					if($preDefinedReferenceId != ""){
						//$variablesArray['preDefinedReferenceArray'] = array();
						$variablesArray['preDefinedReferenceArray'][] = array(
							'reference_id' => $preDefinedReferenceId,
							'reference_number' => $referenceNumber,
							'full_reference' => $preDefinedFullReferenceTxt,
							'pruferReferenceArray' => $variablesArray['prueferFromParray']
						);
						$referenceNumberUppercase = strtoupper($referenceNumber);
						if(!array_key_exists($referenceNumber, $variablesArray['preDefinedReferenceNumberArray']))
							$variablesArray['preDefinedReferenceNumberArray'][$referenceNumber] = $preDefinedReferenceId;
						if(!array_key_exists($referenceNumberUppercase, $variablesArray['preDefinedReferenceNumberArray']))
							$variablesArray['preDefinedReferenceNumberArray'][$referenceNumberUppercase] = $preDefinedReferenceId;

						// THIS ARRAY ELEMENT "$variablesArray['prueferFromParray']" NEEDS TO BE EMPTY HERE BECAUSE THIS ARRAY ELEMENT OR KEY IS USED BELOW IN PREDEFIED "@P:" DATA STORAGE.  
						$variablesArray['prueferFromParray'] = array();
						$returnArr['variablesArray'] = $variablesArray;
					}
					$db->commit();
				}catch (Exception $e) {
					$db->rollback();
					$returnArr['isThereMysqlTransactionError'] = 1;
					// $isThereAnyTransactionError = 1;
					return $returnArr;
				}
			}
			// continue;
			$returnArr['isContinue'] = 1;
			$returnArr['variablesArray'] = $variablesArray;
			return $returnArr;
		}
		// Pre defined reference section work end
		$line = strip_tags ( $line, '<b><i><strong><em><u><sup><span><bdi>' ); // <bdi> is a custom tag for GROSS format 
		$line = trim ( str_replace ( '&nbsp;', ' ', htmlentities( $line ) ) );
		$line = html_entity_decode($line);
		// Replacing Colored sentences's tag to our custom tag "<clr>"
		$coloredTextCnt = 0; 
		do { 
			$line = preg_replace("#<span[^>]*style=(\"|')[^>]*color:(.+?);[^>]*(\"|')>(.+?)</span>#is", "<clr style=\"color:$2;\">$4</clr>", $line, -1, $coloredTextCnt ); 
		} while ( $coloredTextCnt > 0 );
		// Replacing Spaced sentences's tag to our custom tag "<ss>"
		$letterSpaceCntV1 = 0; 
		do { 
			$line = preg_replace("#<span[^>]*style=(\"|')[^>]*letter-spacing:[^>]*>(.+?)</span>#is", "<ss>$2</ss>", $line, -1, $letterSpaceCntV1 ); 
		} while ( $letterSpaceCntV1 > 0 );
		$letterSpaceCntV2 = 0; 
		do { 
			$line = preg_replace("#<span[^>]*class=(\"|')text-sperrschrift(\"|')>(.+?)</span>#is", "<ss>$3</ss>", $line, -1, $letterSpaceCntV2 ); 
		} while ( $letterSpaceCntV2 > 0 );
		$grossCnt = 0; 
		do { 
			$line = preg_replace("#<bdi[^>]*class=(\"|')text-gross(\"|')>(.+?)</bdi>#is", "<grss>$3</grss>", $line, -1, $grossCnt ); 
		} while ( $grossCnt > 0 );
		$grossPosrions = getTheTagsContent($line, '<grss>', '</grss>');
		if(!empty($grossPosrions)) {
			foreach ($grossPosrions as $grossKey => $grossVal) {
				if($grossVal != "") {
					$uppercasedString = convertTheContentToUppercaseWithHtml($grossVal);
					if($uppercasedString != "")
						$line = str_replace($grossVal, $uppercasedString, $line);
				}
			}
		}
		$line = strip_tags ( $line, '<b><i><strong><em><u><sup><ss><clr>' );
		$NewSymptomNr = 0;
		$line = trim ( $line );
		$cleanline = strip_tags($line);
		// Leerzeile
		if ($cleanline == "" OR mb_strlen($cleanline) < 3) {
			$variablesArray['rownum']++;
			// $rownum ++;
			// continue;
			$returnArr['isContinue'] = 1;
			return $returnArr;	
		}
		$FirstChar = mb_substr ( $cleanline, 0, 1 );
		$LastChar = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 1 );
		$LastTwoChar = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 2 );		
		$code='';
		$param='';
		$fisrtWordArray = explode(' ',trim($cleanline));
		$firstWord = (isset($fisrtWordArray[0]) AND $fisrtWordArray[0] != "") ? $fisrtWordArray[0] : "";
		if(preg_match("/^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})\.$/i", $firstWord)) {
			// The Regular Expression to check if a string is Valid Roman Numeral or not 
			/*$bonninghausenHeadingString = $line;
			$bonninghausenHeadingStringAsItIs = str_replace ( array (
				'<ss>',
				'</ss>' 
			), array (
				"<span class=\"text-sperrschrift\">",
				"</span>" 
			), $bonninghausenHeadingString );
			$bonninghausenHeadingStringAsItIs = str_replace ( array (
				'<clr',
				'</clr>' 
			), array (
				"<span",
				"</span>" 
			), $bonninghausenHeadingStringAsItIs );
			$bonninghausenHeadingString = ( isset($bonninghausenHeadingStringAsItIs) AND $bonninghausenHeadingStringAsItIs != "" ) ? mysqli_real_escape_string($db, $bonninghausenHeadingStringAsItIs) : "";
			$headingDuplicate = mysqli_query($db, "SELECT id FROM bonninghausen_re_importable_headings WHERE bonninghausen_heading = '".$bonninghausenHeadingString."' AND master_id = '".$variablesArray['bonningMasterId']."'");
			if(mysqli_num_rows($headingDuplicate) == 0){
				$bonninghausenHeadingInsertQuery="INSERT INTO bonninghausen_re_importable_headings (master_id, bonninghausen_heading, ersteller_datum) VALUES ('".$variablesArray['bonningMasterId']."', NULLIF('".$bonninghausenHeadingString."', ''), '".$date."')";
    			$db->query($bonninghausenHeadingInsertQuery);
			}*/
			$variablesArray['bonninghausenHeading'] = trim($line);
			$cleanString = removeRomanNumerals($line);
			$cleanString = removeSpecialCharactersExcludeNumbersAlso(trim($cleanString)); 
			$variablesArray['bonninghausenCleanHeading'] = ($cleanString != "") ? trim($cleanString) : "";
		// } else if(preg_match("/^\s*-\s+\d+/", $line)) { // Changed the pattern accorging to client requirements on 19-06-2024 
			// ^: Asserts the start of the string.
			// \s*: Matches zero or more whitespace characters.
			// -: Matches a hyphen.
			// \s+: Matches one or more whitespace characters.
			// \d+: Matches one or more digits.
		} else if(preg_match("/^\s*-/", $line)) { // 19-06-2024
			// ^: Asserts the start of the string.
			// \s*: Matches zero or more whitespace characters.
			// -: Matches a hyphen.
			/*$bonninghausenHeadingString = $line;
			$bonninghausenHeadingStringAsItIs = str_replace ( array (
				'<ss>',
				'</ss>' 
			), array (
				"<span class=\"text-sperrschrift\">",
				"</span>" 
			), $bonninghausenHeadingString );
			$bonninghausenHeadingStringAsItIs = str_replace ( array (
				'<clr',
				'</clr>' 
			), array (
				"<span",
				"</span>" 
			), $bonninghausenHeadingStringAsItIs );
			$bonninghausenHeadingString = ( isset($bonninghausenHeadingStringAsItIs) AND $bonninghausenHeadingStringAsItIs != "" ) ? mysqli_real_escape_string($db, $bonninghausenHeadingStringAsItIs) : "";
			$headingDuplicate = mysqli_query($db, "SELECT id FROM bonninghausen_re_importable_headings WHERE bonninghausen_heading = '".$bonninghausenHeadingString."' AND master_id = '".$variablesArray['bonningMasterId']."'");
			if(mysqli_num_rows($headingDuplicate) == 0){
				$bonninghausenHeadingInsertQuery="INSERT INTO bonninghausen_re_importable_headings (master_id, bonninghausen_heading, ersteller_datum) VALUES ('".$variablesArray['bonningMasterId']."', NULLIF('".$bonninghausenHeadingString."', ''), '".$date."')";
    			$db->query($bonninghausenHeadingInsertQuery);
			}*/
			$variablesArray['bonninghausenHeading'] = trim($line);
			$cleanString = removeRomanNumerals($line);
			$cleanString = removeSpecialCharactersExcludeNumbersAlso(trim($cleanString)); 
			$variablesArray['bonninghausenCleanHeading'] = ($cleanString != "") ? trim($cleanString) : "";
		} else if ($FirstChar == '@') {
			$variablesArray['Beschreibung'] = '';
			$p = mb_strpos ( $cleanline, ':' );
			if ($p > 0) {
				$code = mb_substr ( $cleanline, 1, $p - 1 );
				$param = mb_substr ( $cleanline, $p + 1 );
			} else {
				$code = mb_substr ( $cleanline, 1 );
				$param = '';
			}
			$code = mb_strtoupper ( $code );
			switch ($code) {
				// Graduierung
				case 'G' :
					if(trim(strip_tags($param)) == "END")
						$variablesArray['Graduierung'] = "";
					else
						$variablesArray['Graduierung'] = trim($param);
					break;
				
				// Kapitel, setzt in DS "KapitelID"
				// case 'B' :
				case 'K' :
					if(trim(strip_tags($param)) == "END")
						$variablesArray['BereichID'] = "";
					else
						$variablesArray['BereichID'] = $param;
					break;

				// When user gives chapter information with @KD: command insted of @K: command in the document, then Chapter given through @KD command is always superior, means automatic chapter assignment process will not overright the chapeter information of a symptom that is given through @KD: command but chapter information given through @K command will get overright by the automatic chapter assignment process data.  
				case 'KD' :
					if(trim(strip_tags($param)) == "END") {
						$variablesArray['isKDCommandChapter'] = 0;
						$variablesArray['BereichID'] = "";
					} else {
						$variablesArray['isKDCommandChapter'] = 1;
						$variablesArray['BereichID'] = $param;
					}
					break;
				
				// Seite, setzt in DS "Seite"
				case 'S' :
					$tmp = explode ( '-', $param );
					$variablesArray['SeiteOriginalVon'] = $tmp [0] + 0;
					if (sizeof ( $tmp ) > 1)
						$variablesArray['SeiteOriginalBis'] = $tmp [1] + 0;
					else
						$variablesArray['SeiteOriginalBis'] = $variablesArray['SeiteOriginalVon'];
					break;
				
				// Symptom-Nr., setzt in DS "Symptomnummer"
				case 'N' :
					$NewSymptomNr = $param + 0;
					if ($NewSymptomNr == 0) {
						//$NewSymptomNr = 1;
						$variablesArray['Symptomnummer'] = 0;
					}
					break;
				
				// Literaturquelle, setzt in DS "EntnommenAus"
				case 'L' :
					$variablesArray['aLiteraturquellen'] [] = $param;
					break;
				
				// FuÃnote
				case 'F' :
					$variablesArray['Fussnote'] = $param;
					break;
				
				// Verweiss
				case 'V' :
					$variablesArray['Verweiss'] = $param;
					break;
				
				// @U: (Unklarheit, steht wie auch @F und @L VOR dem einen Symptom, welches betroffen ist)
				case 'U' :
					$variablesArray['Unklarheiten'] = $param;
					break;
				
				// @C: (Kommentar, steht wie auch @F und @L VOR dem einen Symptom, welches betroffen ist)
				case 'C' :
					$variablesArray['Kommentar'] = $param;
					break;
				
				// @P: PrÃ¼fer als KÃ¼rzel
				case 'P' :
					// $PrueferID = $this->LookupPruefer ( $param, $rownum );
					// $PrueferID = $param;
					// if ($PrueferID > 0) {
					// 	$PrueferIDs [] = $PrueferID;
					// } 
					$variablesArray['prueferFromParray'] [] = $param;
					break;
				
				default :
					break;
			}
			//continue;
		} else if ($FirstChar == '(') {
			/* 
			* parseing symptoms nummer which has parentheses between symptom nummer 
			* Eg : (90) Fauleier-Geschmack im Munde, auÃer dem Essen. (Fr. Hahnemann.)
			*/
			$opentag = mb_strpos ( $line, '(' );
			$p = mb_strpos ( $line, ')' );
			if($opentag !== false AND $p !== false){
				$numericStringPart = trim ( mb_substr ( $line, 0, $p + 1 ) );
				if($numericStringPart != ""){
					$onlyNumericStringPart = trim ( mb_substr ( $numericStringPart, $opentag ) );
					$newLineString = str_replace ($onlyNumericStringPart, '', $line);
					$newLineString = removeBlankTags($newLineString);

					$NewSymptomNr = str_replace ( array ( '(', ')' ), '', $onlyNumericStringPart );
					if (is_numeric ( $NewSymptomNr )) {
						$line = trim($newLineString);
						if($NewSymptomNr != $variablesArray['Symptomnummer'])
							$variablesArray['isSymptomNumberMismatch'] = 1;
						$variablesArray['Beschreibung'] = $line;
						$cleanline = strip_tags($line);
					} else {
						$NewSymptomNr = 0;
						$variablesArray['Beschreibung'] = $line;
					}
				}else{
					$NewSymptomNr = 0;
					$variablesArray['Beschreibung'] = $line;
				}
			} else {
				$NewSymptomNr = 0;
				$variablesArray['Beschreibung'] = $line;
			}
			// $p = mb_strpos ( $line, ')' );
			// if ($p > 0) {
			// 	$NewSymptomNr = trim ( mb_substr ( $line, 1, $p - 1 ) );
			// 	if (is_numeric ( $NewSymptomNr )) {
			// 		if($NewSymptomNr != $Symptomnummer)
			// 			$isSymptomNumberMismatch = 1;
			// 		$Beschreibung = trim ( mb_substr ( $line, $p + 1 ) );
			// 		$cleanline = trim ( mb_substr ( $cleanline, $p + 1 ) );
			// 	} else {
			// 		$NewSymptomNr = 0;
			// 		$Beschreibung = $line;
			// 	}
			// }
		} else if($FirstChar == '['){
			/* 
			* parseing symptoms nummer which has parentheses between symptom nummer 
			* Eg : [5] Sad, pusillanimous, full of weariness of life.
			*/
			$opentag = mb_strpos ( $line, '[' );
			$p = mb_strpos ( $line, ']' );
			if($opentag !== false AND $p !== false){
				$numericStringPart = trim ( mb_substr ( $line, 0, $p + 1 ) );
				if($numericStringPart != ""){
					$onlyNumericStringPart = trim ( mb_substr ( $numericStringPart, $opentag ) );
					$newLineString = str_replace ($onlyNumericStringPart, '', $line);
					$newLineString = removeBlankTags($newLineString);

					$NewSymptomNr = str_replace ( array ( '[', ']' ), '', $onlyNumericStringPart );
					if (is_numeric ( $NewSymptomNr )) {
						$line = trim($newLineString);
						if($NewSymptomNr != $variablesArray['Symptomnummer'])
							$variablesArray['isSymptomNumberMismatch'] = 1;
						$variablesArray['Beschreibung'] = $line;
						$cleanline = strip_tags($line);
					} else {
						$NewSymptomNr = 0;
						$variablesArray['Beschreibung'] = $line;
					}
				}else{
					$NewSymptomNr = 0;
					$variablesArray['Beschreibung'] = $line;
				}
			}else{
				$NewSymptomNr = 0;
				$variablesArray['Beschreibung'] = $line;
			}
			// if ($p > 0) {
			// 	$NewSymptomNr = trim ( mb_substr ( $line, 1, $p - 1 ) );
			// 	echo htmlentities($NewSymptomNr);
			// 	if (is_numeric ( $NewSymptomNr )) {
			// 		if($NewSymptomNr != $Symptomnummer)
			// 			$isSymptomNumberMismatch = 1;
			// 		$Beschreibung = trim ( mb_substr ( $line, $p + 1 ) );
			// 		$cleanline = trim ( mb_substr ( $cleanline, $p + 1 ) );
			// 	} else {
			// 		$NewSymptomNr = 0;
			// 		$Beschreibung = $line;
			// 	}
			// }
			// exit;
		} else {
			$isSymptomNum = is_numeric ( $FirstChar );
			$variablesArray['Beschreibung'] = '';		
			if ($isSymptomNum) {
				/* 
				* parseing symptoms nummer which has space between symptom nummer and symptom string 
				* Eg : 30 Merklich vermindertes GehÃ¶r. (n. 30 St.)
				*/
				$p = mb_strpos ( $line, ' ' );
				$num = str_replace ( array (
					':',
					'.', 
					')',
					']' 
				), '', mb_substr ( $line, 0, $p ) );
				if( is_numeric($num) ){
					$NewSymptomNr = $num;
					if($NewSymptomNr != $variablesArray['Symptomnummer'])
						$variablesArray['isSymptomNumberMismatch'] = 1;
					$variablesArray['Beschreibung'] = trim ( mb_substr ( $line, $p + 1 ) );
					$cleanline = trim ( mb_substr ( $cleanline, $p + 1 ) );
				}else{
					/* 
					* parseing symptoms nummer which are attached with Synptom string 
					* Eg : 10DrÃ¼ckender Schmerz in der Stirne.
					*/
					$charCount = 2;
					$NewSymptomNr = $FirstChar;
					while ( $charCount > 0 ) {
						$checkSymptomNumber = mb_substr ( $line, 0, $charCount );
						if( is_numeric($checkSymptomNumber) ){
							$NewSymptomNr = $checkSymptomNumber;
							if($NewSymptomNr != $variablesArray['Symptomnummer'])
								$variablesArray['isSymptomNumberMismatch'] = 1;
							$charCount++;
						}else
							$charCount = 0;
					}

					if (mb_substr($line, 0, mb_strlen($NewSymptomNr)) == $NewSymptomNr) {
						$variablesArray['Beschreibung'] = trim ( mb_substr($line, mb_strlen($NewSymptomNr)) );
						$cleanline = trim ( mb_substr($cleanline, mb_strlen($NewSymptomNr)) );
					}else{
						$variablesArray['Beschreibung'] = $line;
					} 
				}
			} else {
				$NewSymptomNr = 0;
				$variablesArray['Beschreibung'] = $line;
			}
		}
		if ( $NewSymptomNr > 0 ) {
			$variablesArray['Symptomnummer'] = $NewSymptomNr;
		}

		if ($variablesArray['Beschreibung']) {
			// bonninghausen concept of extracting page number information the from the symptom string
			// the numeric value after the last dot(.) of the symptom string is the page number.
			// Ex. Wechselnde Stimmung.21 (here 21 is the page number)
			$lastOccurrenceOfDot = mb_strripos ( $variablesArray['Beschreibung'], '.' );
			if($lastOccurrenceOfDot !== false){
				$fromDotOccurrenceToEndingOfTheString = mb_substr($variablesArray['Beschreibung'], $lastOccurrenceOfDot);
				$fromBeginingToDotOccurrenceOfTheString = mb_substr($variablesArray['Beschreibung'], 0, $lastOccurrenceOfDot);
				$fromDotOccurrenceToEndingOfTheString = str_replace(".", "", $fromDotOccurrenceToEndingOfTheString);
				$tempPageNumberData = explode ( '-', $fromDotOccurrenceToEndingOfTheString );
				$variablesArray['SeiteOriginalVon'] = (is_numeric($tempPageNumberData [0])) ? $tempPageNumberData [0] + 0 : "";
				if (sizeof ( $tempPageNumberData ) > 1)
					$variablesArray['SeiteOriginalBis'] = (is_numeric($tempPageNumberData [1])) ? $tempPageNumberData [1] + 0 : "";
				else
					$variablesArray['SeiteOriginalBis'] = $variablesArray['SeiteOriginalVon'];
				$variablesArray['Beschreibung'] = $fromBeginingToDotOccurrenceOfTheString."."; // Added the the last fullstop in the symptom string after page number extraction work.
			}

			$variablesArray['isExcludedInComparison'] = 0;
			if(!empty($variablesArray['excludingSymptomsChaptersArray']) AND $variablesArray['BereichID'] != ""){
				$chapterInLowercase = mb_strtolower(trim($variablesArray['BereichID']));
				if(in_array($chapterInLowercase, $variablesArray['excludingSymptomsChaptersArray'])){
					$variablesArray['isExcludedInComparison'] = 1;
				}
			}
			if($variablesArray['Kommentar'] != ""){
				// Setting the import mask comment for all the symptom
				$variablesArray['Kommentar'] = $variablesArray['Kommentar'].", ".$variablesArray['importComment'];
			} else {
				$variablesArray['Kommentar'] = $variablesArray['importComment'];
			}
			// Comment that is given in the time of creating the source
			if($variablesArray['sourceComment'] != "")
				$variablesArray['Kommentar'] = $variablesArray['Kommentar'].", ".$variablesArray['sourceComment'];

			/* Creating Plain Symptom text */
			$variablesArray['BeschreibungPlain'] = trim ( str_replace ( "\t", '', strip_tags ( $variablesArray['Beschreibung'] ) ) );
			$BeschreibungAsItIs = str_replace ( array (
				'<ss>',
				'</ss>' 
			), array (
				"<span class=\"text-sperrschrift\">",
				"</span>" 
			), $variablesArray['Beschreibung'] );
			$BeschreibungAsItIs = str_replace ( array (
				'<clr',
				'</clr>' 
			), array (
				"<span",
				"</span>" 
			), $BeschreibungAsItIs );
			$line = $variablesArray['Beschreibung'];

			$FirstCharCheck = mb_substr ( trim($line), 0, 1 );
			$FirstOneChar = trim(mb_substr(strip_tags($line), 0, 1));
			$FirstTwoChar = trim(mb_substr(strip_tags($line), 0, 2));
			$FirstThreeChar = trim(mb_substr(strip_tags($line), 0, 3));
			$FirstFourChar = trim(mb_substr(strip_tags($line), 0, 4));
			$FirstFiveChar = trim(mb_substr(strip_tags($line), 0, 5));

			$cleanLineToGetLastChar = rtrim(trim($line), '.');
			$cleanLineToGetLastChar = rtrim(trim($cleanLineToGetLastChar), ',');
			$cleanLineToGetLastChar = rtrim(trim($cleanLineToGetLastChar), ';');
			$LastCharCheck = mb_substr ( trim($cleanLineToGetLastChar), mb_strlen ( trim($cleanLineToGetLastChar) ) - 1 );
			
			//Last char check for last char with text formats
			$LastCharCheckWithTextFormats = 0;
			$degreeAtEnd = 0;
			$singleTAtEnd = 0;
			$doubleTAtEnd = 0;
			// $degreeOccurrenceFromPlain = mb_strpos ( $variablesArray['BeschreibungPlain'], 'Â°' );
			// if($degreeOccurrenceFromPlain !== false){
			// 	$LastCharCheckWithTextFormats = 1;
			// }

			//checking if the last character is degree
			$plainStringForDegreeCheck = strip_tags(trim($line));
			//checing if the degree is present at the end of the string and only once
			if (preg_match('/^(?!.*Â°.*Â°)[^\n\t]*[.,]? *Â°[.,]?$/', $plainStringForDegreeCheck)) {
				$degreeAtEnd = 1;
			}
			//checking for the t and tt at the end of the string
			// if (preg_match('/Î±[.,]?$/', $plainStringForDegreeCheck)) {
			// 	$singleTAtEnd = 1;
			// }
			// if (preg_match('/Î²[.,]?$/', $plainStringForDegreeCheck)) {
			// 	$doubleTAtEnd = 1;
			// }

			// Count the number of occurance of- *,Â°
			$totalAsterisks = mb_substr_count($line, "*"); 
			$totalDegrees = mb_substr_count($line, "Â°");
			$variablesArray['thetaDiagnosisSymptomWithoutTag'] = "";
			//New PHP variable $multipleCharControl is added to control the double appearance of bar and pi characters inside the bracket contents.
			$multipleCharControl = 0;
			if($FirstFiveChar == "|||||") {
				$multipleCharControl = 1;
				// E.g. |||||symptom strong
				$line = ltrim($line,"|||||");
				//$line = '<bar-five-normal>'.$line.'</bar-five-normal>';
				$thetaDiagnosisSymptomPartArr = thetaDiagnosisOperation($line);
				$thetaDiagnosisSymptomWithTag = $thetaDiagnosisSymptomPartArr["theta-string-part"];
				$variablesArray['thetaDiagnosisSymptomWithoutTag'] = $thetaDiagnosisSymptomPartArr["theta-original-part"];
				$line = $thetaDiagnosisSymptomPartArr["line"];
				$line = '<bar-five-normal>'.$line.'</bar-five-normal>'.$thetaDiagnosisSymptomWithTag;
			} else if($FirstFiveChar == "||||-") {
				$multipleCharControl = 1;
				// E.g. ||||-symptom strong
				$line = ltrim($line,"||||-");
				//$line = '<bar-four-and-half-normal>'.$line.'</bar-four-and-half-normal>';
				$thetaDiagnosisSymptomPartArr = thetaDiagnosisOperation($line);
				$thetaDiagnosisSymptomWithTag = $thetaDiagnosisSymptomPartArr["theta-string-part"];
				$variablesArray['thetaDiagnosisSymptomWithoutTag'] = $thetaDiagnosisSymptomPartArr["theta-original-part"];
				$line = $thetaDiagnosisSymptomPartArr["line"];
				$line = '<bar-four-and-half-normal>'.$line.'</bar-four-and-half-normal>'.$thetaDiagnosisSymptomWithTag;
			} else if($FirstFourChar == "||||") {
				$multipleCharControl = 1;
				// E.g. ||||symptom strong
				$line = ltrim($line,"||||");
				//$line = '<bar-four-normal>'.$line.'</bar-four-normal>';
				$thetaDiagnosisSymptomPartArr = thetaDiagnosisOperation($line);
				$thetaDiagnosisSymptomWithTag = $thetaDiagnosisSymptomPartArr["theta-string-part"];
				$variablesArray['thetaDiagnosisSymptomWithoutTag'] = $thetaDiagnosisSymptomPartArr["theta-original-part"];
				$line = $thetaDiagnosisSymptomPartArr["line"];
				$line = '<bar-four-normal>'.$line.'</bar-four-normal>'.$thetaDiagnosisSymptomWithTag;
			} else if($FirstFourChar == "|||-") {
				$multipleCharControl = 1;
				// E.g. |||-symptom strong
				$line = ltrim($line,"|||-");
				//$line = '<bar-three-and-half-normal>'.$line.'</bar-three-and-half-normal>';
				$thetaDiagnosisSymptomPartArr = thetaDiagnosisOperation($line);
				$thetaDiagnosisSymptomWithTag = $thetaDiagnosisSymptomPartArr["theta-string-part"];
				$variablesArray['thetaDiagnosisSymptomWithoutTag'] = $thetaDiagnosisSymptomPartArr["theta-original-part"];
				$line = $thetaDiagnosisSymptomPartArr["line"];
				$line = '<bar-three-and-half-normal>'.$line.'</bar-three-and-half-normal>'.$thetaDiagnosisSymptomWithTag;
			} else if($FirstThreeChar == "|||") {
				$multipleCharControl = 1;
				// E.g. |||symptom strong
				$line = ltrim($line,"|||");
				//$line = '<bar-three-normal>'.$line.'</bar-three-normal>';
				$thetaDiagnosisSymptomPartArr = thetaDiagnosisOperation($line);
				$thetaDiagnosisSymptomWithTag = $thetaDiagnosisSymptomPartArr["theta-string-part"];
				$variablesArray['thetaDiagnosisSymptomWithoutTag'] = $thetaDiagnosisSymptomPartArr["theta-original-part"];
				$line = $thetaDiagnosisSymptomPartArr["line"];
				$line = '<bar-three-normal>'.$line.'</bar-three-normal>'.$thetaDiagnosisSymptomWithTag;
			} else if($FirstTwoChar == "||") {
				$multipleCharControl = 1;
				// E.g. ||symptom strong
				$line = ltrim($line,"||");
				//$line = '<bar-two-normal>'.$line.'</bar-two-normal>';
				$thetaDiagnosisSymptomPartArr = thetaDiagnosisOperation($line);
				$thetaDiagnosisSymptomWithTag = $thetaDiagnosisSymptomPartArr["theta-string-part"];
				$variablesArray['thetaDiagnosisSymptomWithoutTag'] = $thetaDiagnosisSymptomPartArr["theta-original-part"];
				$line = $thetaDiagnosisSymptomPartArr["line"];
				$line = '<bar-two-normal>'.$line.'</bar-two-normal>'.$thetaDiagnosisSymptomWithTag;
			} else if($FirstOneChar == "|") {
				$multipleCharControl = 1;
				// E.g. |symptom strong
				$line = ltrim($line,"|");
				//$line = '<bar-one-normal>'.$line.'</bar-one-normal>';
				$thetaDiagnosisSymptomPartArr = thetaDiagnosisOperation($line);
				$thetaDiagnosisSymptomWithTag = $thetaDiagnosisSymptomPartArr["theta-string-part"];
				$variablesArray['thetaDiagnosisSymptomWithoutTag'] = $thetaDiagnosisSymptomPartArr["theta-original-part"];
				$line = $thetaDiagnosisSymptomPartArr["line"];
				$line = '<bar-one-normal>'.$line.'</bar-one-normal>'.$thetaDiagnosisSymptomWithTag;
			} else if($FirstOneChar == "Ï") {
				$multipleCharControl = 1;
				// E.g. Ïsymptom strong
				$line = ltrim($line,"Ï");
				//$line = '<pi-normal>'.$line.'</pi-normal>';
				$thetaDiagnosisSymptomPartArr = thetaDiagnosisOperation($line);
				$thetaDiagnosisSymptomWithTag = $thetaDiagnosisSymptomPartArr["theta-string-part"];
				$variablesArray['thetaDiagnosisSymptomWithoutTag'] = $thetaDiagnosisSymptomPartArr["theta-original-part"];
				$line = $thetaDiagnosisSymptomPartArr["line"];
				$line = '<pi-normal>'.$line.'</pi-normal>'.$thetaDiagnosisSymptomWithTag;
			} else if ($FirstCharCheck == "(" AND $LastCharCheck == ")") {
				// Checking if the whole symptom is in bracket or not
				$isParenthesesString = 1;
				/* 
				I have commnted below portion After Nora raise issue on below symptom not detected as paranthses symptom  
				i.e. (Empfindung von Spannen Ã¼ber die Brust bis zum Halse, welche durch Liegen auf dem RÃ¼cken gemindert, durch Gehen vermehrt und im Stehen schmerzhaft wird) (n. 2 St.)
				*/
				// $closingBracketFirstOccurrence = mb_strpos ( $line, ")" );
				// if($closingBracketFirstOccurrence !== false){
				// 	$occurrenceToEndingString = mb_substr($line, $closingBracketFirstOccurrence);
				// 	if($occurrenceToEndingString != "" AND mb_strlen($occurrenceToEndingString) > 2)
				// 		$isParenthesesString = 0;
				// }

				$closingBracketFirstOccurrence = mb_strpos ( $line, ")" );
				if($closingBracketFirstOccurrence !== false){
					$occurrenceToEndingString = mb_substr($line, $closingBracketFirstOccurrence);
					$occurrenceToEndingString = rtrim(trim($occurrenceToEndingString), '.');
					$occurrenceToEndingString = rtrim(trim($occurrenceToEndingString), ',');
					$occurrenceToEndingString = rtrim(trim($occurrenceToEndingString), ';');
					$parts = preg_split('/\([^)]+\)/', $occurrenceToEndingString, -1, PREG_SPLIT_NO_EMPTY);
					$result = [];
					foreach ($parts as $part) {
					    if (strpos($part, '(') === false && strpos($part, ')') === false) {
					        $result[] = $part;
					    }
					}
					if(!empty($result))
						$isParenthesesString = 0;
				}
				// It is format - (Normal)
				if($isParenthesesString == 1)
					$line = '<parentheses-normal>'.$line.'</parentheses-normal>';
				else{
					$line = separateTheApplicableStratingSign($line, '*');
					$line = separateTheApplicableStratingSign($line, 'Â°');
					$line = removeBlankTags($line);

					$line = convertPatternPortions($line, '*', 'asterisk');
					$line = convertPatternPortions($line, 'Â°', 'degree');

					// Structure the non * and Â° portion strings
					$line = structureNonAsteriskAndDegreePortions($line, 'non-asterisk-degree');
				}
			} 
			else if($degreeAtEnd == 1 AND $totalDegrees == 1 AND $totalAsterisks == 0)
			{
				// It is format - Kursiv,Â° Normal,Â° Fett,Â° 
				$line = structureEndingWithDegreeFormatString($line, 'endwithdegree');
			}
			else if($singleTAtEnd)
			{	
				// It is format ending with single t.
				$line = structureEndingWithSingleTFormatString($line, 'endwithsinglet');
			}
			else if($doubleTAtEnd)
			{	
				// It is format ending with single tt.
				$line = structureEndingWithDoubleTFormatString($line, 'endwithdoublet');
			}
			// else if($LastCharCheck == "Â°" AND $totalDegrees == 1 AND $totalAsterisks == 0)
			// {
			// 	// It is format - Kursiv,Â° Normal,Â° Fett,Â° 
			// 	$line = structureEndingWithDegreeFormatString($line, 'endwithdegree');
			// 	echo "<br>";
			// 	echo htmlentities($line);
			// } 
			else {
				$line = separateTheApplicableStratingSign($line, '*');
				$line = separateTheApplicableStratingSign($line, 'Â°');
				$line = removeBlankTags($line);
				$thetaDiagnosisSymptomPartArr = thetaDiagnosisOperation($line);
				$variablesArray['thetaDiagnosisSymptomWithoutTag'] = $thetaDiagnosisSymptomPartArr["theta-original-part"];
				$line = convertPatternPortions($line, '*', 'asterisk');
				$line = convertPatternPortions($line, 'Â°', 'degree');
				$line = convertPatternPortions($line, 'Î¸', 'theta');
				// Structure the non * and Â° portion strings
				$line = structureNonAsteriskAndDegreePortions($line, 'non-asterisk-degree');
			}

			$line = removeBlankTags($line);
			$line = removeCustomParentTags($line);
			$line = str_replace ( array (
				'<ss>',
				'</ss>' 
			), array (
				"<span class=\"text-sperrschrift\">",
				"</span>" 
			), $line );
			$line = str_replace ( array (
				'<clr',
				'</clr>' 
			), array (
				"<span",
				"</span>" 
			), $line );
	
			$escapeCustomTags = "<parentheses-normal><bar-one-normal><bar-two-normal><bar-three-normal><bar-four-normal><bar-five-normal><bar-four-and-half-normal><bar-three-and-half-normal><pi-normal><theta-normal><theta-em><degree-at-end><singlet-at-end><doublet-at-end>";
			$parentCustomTagArr = array('endwithdegree', 'asterisk', 'degree', 'non-asterisk-degree', 'asterisk-degree','endwithsinglet','endwithdoublet');
			foreach ($parentCustomTagArr as $tagKey => $tagVal) {
				$escapeCustomTags .= "<".$tagVal."-ssbold>";
				$escapeCustomTags .= "<".$tagVal."-embold>";
				$escapeCustomTags .= "<".$tagVal."-ssem>";
				$escapeCustomTags .= "<".$tagVal."-ss>";
				$escapeCustomTags .= "<".$tagVal."-em>";
				$escapeCustomTags .= "<".$tagVal."-normalgross>";
				$escapeCustomTags .= "<".$tagVal."-normal>";
				$escapeCustomTags .= "<".$tagVal."-bold>";
				$escapeCustomTags .= "<".$tagVal."-grossbold>";
			}
			
			$variablesArray['BeschreibungOriginal'] = strip_tags ( $line, '<b><i><strong><em><u><sup><span>'.$escapeCustomTags );
			$variablesArray['BeschreibungOriginal'] = removeBlankTags($variablesArray['BeschreibungOriginal']);
			$variablesArray['searchableText'] = $variablesArray['BeschreibungOriginal'];

			// echo "<br>BeschreibungOriginal 1 ".$variablesArray['BeschreibungOriginal'];
			// conversion of pre define reference number in original symptom version
			foreach ($variablesArray['preDefinedReferenceNumberArray'] as $refNumberKey => $refNumberVal) {
				$searchableReferenceNumber = "[".$refNumberKey."]";
				//$variablesArray['BeschreibungOriginal'] = str_replace($searchableReferenceNumber, "<sup>".$refNumberKey."</sup>", $variablesArray['BeschreibungOriginal']);

				$referenceNumberOccurrence = mb_strpos ($variablesArray['searchableText'], $searchableReferenceNumber);
				if($referenceNumberOccurrence !== false){
					$variablesArray['BeschreibungOriginal'] =  str_replace($searchableReferenceNumber, "", $variablesArray['BeschreibungOriginal']);
					//echo "<br> All New 1: ".htmlentities($variablesArray['BeschreibungOriginal']);
					$variablesArray['BeschreibungOriginal'] = $variablesArray['BeschreibungOriginal']."[".$refNumberKey."]";
					//echo "<br> All New 2: ".htmlentities($variablesArray['BeschreibungOriginal']);
					$variablesArray['BeschreibungOriginal'] = str_replace($searchableReferenceNumber, "<sup>".$refNumberKey."</sup>", $variablesArray['BeschreibungOriginal']);
					//echo "<br> All New: ".htmlentities($variablesArray['BeschreibungOriginal']);
					// removing found reference number sections from this version of symptom
					$variablesArray['searchableText'] = str_replace($searchableReferenceNumber, "", $variablesArray['searchableText']);
					$cleanline = str_replace($searchableReferenceNumber, "", $cleanline);

					$tempPreDefinedReferenceArrKey = get_base_key_in_md_array($refNumberVal, 'reference_id', $variablesArray['preDefinedReferenceArray']);
					if($tempPreDefinedReferenceArrKey !== false){
						$preDefineReferenceReturnArr = $variablesArray['preDefinedReferenceArray'][$tempPreDefinedReferenceArrKey];
						if(!in_array($refNumberVal, $variablesArray['preDefinedSymptomReferenceLinkingArray']))
						{
							$variablesArray['preDefinedSymptomReferenceLinkingArray'][] = $refNumberVal;
							$variablesArray['preDefinedaLiteraturquellen'][] = $variablesArray['preDefinedReferenceArray'][$tempPreDefinedReferenceArrKey]['full_reference'];
							//insertion of provers linked to references
							if(count($variablesArray["preDefinedReferenceArray"][$tempPreDefinedReferenceArrKey]["pruferReferenceArray"])>0){
								foreach($variablesArray["preDefinedReferenceArray"][$tempPreDefinedReferenceArrKey]["pruferReferenceArray"] as $proverValFromRef){
									array_push($variablesArray['preDefinedSymptomPrueferLinkingArray'],$proverValFromRef);
								}
							}
						}
					}
				}
			}
			// Separating the bracketed parts with their opening and closing tags
			// In other words putting the bracketed parts in with their own opening and closing tags.
			$parOccurrence = mb_strpos ( $variablesArray['BeschreibungOriginal'], "(" );
			if($parOccurrence !== false)
				$variablesArray['BeschreibungOriginal'] = seperateTheBrackedString($variablesArray['BeschreibungOriginal'], "(", ")","", $multipleCharControl); 
			$braOccurrence = mb_strpos ( $variablesArray['BeschreibungOriginal'], "[" );
			if($braOccurrence !== false)
				$variablesArray['BeschreibungOriginal'] = seperateTheBrackedString($variablesArray['BeschreibungOriginal'], "[", "]", "", $multipleCharControl);
			$variablesArray['BeschreibungOriginal'] = removeBlankTags($variablesArray['BeschreibungOriginal']);
			$variablesArray['searchableText'] = $variablesArray['BeschreibungOriginal'];
			// echo "<br>BeschreibungOriginal ".$variablesArray['BeschreibungOriginal'];
			// exit();
			// Removeing blank spaces from the ending of the string..
			$tempSt = strip_tags($variablesArray['BeschreibungOriginal']);
			$tempSymptomStr = removeEndingSpecialCharactersForString($tempSt);
			$tempEndingFullStopsOrCommasArr = (isset($tempSymptomStr['last_character_array']) AND $tempSymptomStr['last_character_array'] != "") ? $tempSymptomStr['last_character_array'] : array();
			if(!empty($tempEndingFullStopsOrCommasArr)){
				$variablesArray['BeschreibungOriginal'] = removeUnwantedSpacesFromTheEnding($variablesArray['BeschreibungOriginal'], $tempEndingFullStopsOrCommasArr);
			}
			
			// Removing Or properly arranging the sepecial characters at the ending of the string
			// E.g. *The child was intolerably violent and difficult to quiet, (Hnf. Fsjk yhak)  , . 
			$returnCleanlineData = removeEndingSpecialCharactersForString($cleanline);
			$cleanline = (isset($returnCleanlineData['symptom_string']) AND $returnCleanlineData['symptom_string'] != "") ? $returnCleanlineData['symptom_string'] : $cleanline;
			// echo print_r($returnCleanlineData['last_character_array']);
			/* Creating Original Symptom text end */
			
			// As it is symptom text
			$variablesArray['Beschreibung'] = $BeschreibungAsItIs;
			/* Creating Source or as it is Symtom text end */

			/* Find all time data in the entire Symptom string */
			$allTimeStringsArray = getAllTimeData($cleanline, $timeStringEndTagArray);
			if(!empty($allTimeStringsArray)){
				$tempTimeArray = array();
				foreach ($allTimeStringsArray as $tKey => $tVal) {
					$tempTimeStringWordCount = str_word_count($tVal);
					if($tempTimeStringWordCount < 6){
						$tempTimeArray[] = $tVal;
					}
				}
				$variablesArray['timeString'] = (!empty($tempTimeArray)) ? implode(', ', $tempTimeArray) : "";
			}

			// Removing time strings
			$newFirstChar = mb_substr ( $cleanline, 0, 1 );
			$newLastChar = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 1 );
			if($newFirstChar == "(" AND $newLastChar == ")"){
				// Nothing
				$isParenthesesStringTime = 1;
				$closingBracketFirstOccurrenceTime = mb_strpos ( $cleanline, ")" );
				if($closingBracketFirstOccurrenceTime !== false){
					$occurrenceToEndingStringTime = mb_substr($cleanline, $closingBracketFirstOccurrenceTime);
					if($occurrenceToEndingStringTime != "" AND mb_strlen($occurrenceToEndingStringTime) > 2)
						$isParenthesesStringTime = 0;
				}
				if($isParenthesesStringTime == 0){
					if(!empty($allTimeStringsArray)){
						foreach ($allTimeStringsArray as $timeStrKey => $timeStrVal) {
							$timeStrVal = str_replace ( array (
								"(",
								")",
								"[",
								"]" 
							), '', $timeStrVal );
							if(mb_strpos($cleanline, $timeStrVal) !== false)
								$cleanline = str_replace($timeStrVal, "", $cleanline);
							if(mb_strpos($variablesArray['searchableText'], $timeStrVal) !== false)
								$variablesArray['searchableText'] = str_replace($timeStrVal, "", $variablesArray['searchableText']);
						}
					}
				}
			} else {
				if(!empty($allTimeStringsArray)){
					foreach ($allTimeStringsArray as $timeStrKey => $timeStrVal) {
						$timeStrVal = str_replace ( array (
							"(",
							")",
							"[",
							"]" 
						), '', $timeStrVal );
						if(mb_strpos($cleanline, $timeStrVal) !== false)
							$cleanline = str_replace($timeStrVal, "", $cleanline);
						if(mb_strpos($variablesArray['searchableText'], $timeStrVal) !== false)
							$variablesArray['searchableText'] = str_replace($timeStrVal, "", $variablesArray['searchableText']);
					}
				}
			}
			$variablesArray['searchableText'] = removeBlankTags($variablesArray['searchableText']);
			$variablesArray['searchableText'] = preg_replace('#\(\s*\)#', '', $variablesArray['searchableText']);
			$variablesArray['searchableText'] = str_replace("()", "", $variablesArray['searchableText']);

			/* Getting ending bracketed strings */
			$cleanlineNewLastChar = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 1 );
			$FirstCharForBracketCheck = trim(mb_substr($cleanline, 0, 1));
			$lastCharForBracketCheck = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 1 );
			if(($FirstCharForBracketCheck == "(" AND $lastCharForBracketCheck == ")") OR ($FirstCharForBracketCheck == "[" AND $lastCharForBracketCheck == "]")){
				// Nothing here
				$cleanedStringCount1 = substr_count($cleanline, "(");
				$cleanedStringCount2 = substr_count($cleanline, "[");
				if($cleanedStringCount1 > 1){
					if ($cleanlineNewLastChar == ')') {
						$variablesArray['endingBracketsArray'] = getAllEndingBracketedStrings($cleanline, "(", ")");
					} else if($cleanlineNewLastChar == ']') {
						$variablesArray['endingBracketsArray'] = getAllEndingBracketedStrings($cleanline, "[", "]");
					}
				}
				if($cleanedStringCount2 > 1){
					if ($cleanlineNewLastChar == ')') {
						$variablesArray['endingBracketsArray'] = getAllEndingBracketedStrings($cleanline, "(", ")");
					} else if($cleanlineNewLastChar == ']') {
						$variablesArray['endingBracketsArray'] = getAllEndingBracketedStrings($cleanline, "[", "]");
					}
				}
			} else {
				if ($cleanlineNewLastChar == ')') {
					$variablesArray['endingBracketsArray'] = getAllEndingBracketedStrings($cleanline, "(", ")");
				} else if($cleanlineNewLastChar == ']') {
					$variablesArray['endingBracketsArray'] = getAllEndingBracketedStrings($cleanline, "[", "]");
				}
			}

			/* Getting all bracketed strings */
			$allParentheses = getAllbracketedStrings($cleanline, "(", ")");
			$allSquareBrackets = getAllbracketedStrings($cleanline, "[", "]");
			$variablesArray['allBrackets'] = array_merge($allParentheses, $allSquareBrackets);
			if(($FirstCharForBracketCheck == "(" AND $lastCharForBracketCheck == ")") OR ($FirstCharForBracketCheck == "[" AND $lastCharForBracketCheck == "]")){
				// Nothing here
			} else {
				$variablesArray['middleBracketArray'] =array_diff($variablesArray['allBrackets'],$variablesArray['endingBracketsArray']);
			}

			/* Extracting Pruefer Data and Literaturquellen data Start */
			if( count($variablesArray['aLiteraturquellen']) > 0 AND  count($variablesArray['prueferFromParray']) > 0 ){
				/* When @L nad @P both are present in a symptom */
				$variablesArray['isPreDefinedTagsApproval'] = 1;
				$ckeckPApproval = 0;
				$tagsApproalStringForPrue = "";
				foreach ($variablesArray['prueferFromParray'] as $prueferPkey => $prueferPval) {
					$prueferPval = trim($prueferPval);
					$tagsApproalStringForPrue .= $prueferPval."{#^#}";

					$cleanPrueferString = (mb_substr ( $prueferPval, mb_strlen ( $prueferPval ) - 1, 1 ) == '.') ? $prueferPval : $prueferPval.'.';
					$prueferReturnArr = lookupPruefer($cleanPrueferString);
					if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
						$ckeckPApproval = 1;

						if(!empty($prueferReturnArr['data'])){
							foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
									$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
							}
						}
						else{
							$dataArr = array();
							$dataArr['pruefer_id'] = null;
							$dataArr['kuerzel'] = null;
							$dataArr['suchname'] = trim($prueferPval);
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($dataArr['suchname'], 'suchname', $variablesArray['prueferArray']) != true)
								$variablesArray['prueferArray'][] = $dataArr;
						}
					}
					else{
						foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
								$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
						}
					}
				}

				/* Literaturquellen data */
				$ckeckRApproval = 0;
				$tagsApproalStringForRef = "";
				foreach ($variablesArray['aLiteraturquellen'] as $refKey => $refVal) {
					$tagsApproalStringForRef .= $refVal."{#^#}";

					$refVal = trim($refVal);
					$referenceReturnArr = lookupLiteratureReference($refVal);
					if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
						$ckeckRApproval = 1;

						if(!empty($referenceReturnArr['data'])){
							foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true)
									$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
							}
						}
						else{
							$fullReferenceInArray = explode(",", $refVal);
							if(count($fullReferenceInArray) >= 2){
								$referenceAutor = trim($fullReferenceInArray[0]);
								array_shift($fullReferenceInArray);
								$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
							}else{
								$referenceAutor = "";
								$referenceTxt = $refVal;
							}
							
							$dataArr = array();
							$dataArr['reference_id'] = null;
							$dataArr['full_reference'] = $refVal;
							$dataArr['autor'] = $referenceAutor;
							$dataArr['reference'] = $referenceTxt;
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($dataArr['full_reference'], 'full_reference', $variablesArray['referenceArray']) != true)
								$variablesArray['referenceArray'][] = $dataArr;
						}

					}else{
						foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
								$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
								$variablesArray['aLiteraturquellen'] [$refKey] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
							}
						}
					}
				}

				if($ckeckPApproval == 1 OR $ckeckRApproval == 1){
					// Making Reference array empty (for not adding in symptom table column) because it's not use have clear it in Direct Order or reinsert correctly.
					$variablesArray['aLiteraturquellen'] = array();
					$variablesArray['referenceArray'] = array();

					$variablesArray['prueferArray'] = array();

					$variablesArray['tagsApprovalString'] = $tagsApproalStringForPrue.$tagsApproalStringForRef;
					$variablesArray['tagsApprovalString'] = rtrim($variablesArray['tagsApprovalString'], "{#^#}");

					$variablesArray['needApproval'] = 1;

					$variablesArray['referencePriority'] = 0;
					$variablesArray['referenceWithNoAuthorPriority'] = 0;
					$variablesArray['remedyWithSymptomPriority'] = 0;
					$variablesArray['partOfSymptomPriority'] = 0;
					$variablesArray['remedyPriority'] = 0;
					$variablesArray['prueferPriority'] = 0;
					$variablesArray['aaoHyphenPriority'] = 0;
					$variablesArray['hyphenPrueferPriority'] = 0;
					$variablesArray['hyphenReferencePriority'] = 0;
					$variablesArray['moreThanOneTagStringPriority'] = 10;
				}else{
					$variablesArray['needApproval'] = 0;
				}
			}
			else if( count($variablesArray['aLiteraturquellen']) > 0 ){
				/* When only @L is present in a symptom */	

				/* Making pruefer Array blank */
				$variablesArray['prueferArray'] = array ();

				/* Literaturquellen data */
				$variablesArray['isPreDefinedTagsApproval'] = 1;
				$tagsApproalStringForRef = ""; 
				$ckeckRApproval = 0;
				foreach ($variablesArray['aLiteraturquellen'] as $refKey => $refVal) {
					$tagsApproalStringForRef .= $refVal."{#^#}";

					$refVal = trim($refVal);
					$referenceReturnArr = lookupLiteratureReference($refVal);
					
					if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
						$ckeckRApproval = 1;

						if(!empty($referenceReturnArr['data'])){
							foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
								if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true)
									$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
							}
						}
						else{
							$fullReferenceInArray = explode(",", $refVal);
							if(count($fullReferenceInArray) >= 2){
								$referenceAutor = trim($fullReferenceInArray[0]);
								array_shift($fullReferenceInArray);
								$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
							}else{
								$referenceAutor = "";
								$referenceTxt = $refVal;
							}
							
							$dataArr = array();
							$dataArr['reference_id'] = null;
							$dataArr['full_reference'] = $refVal;
							$dataArr['autor'] = $referenceAutor;
							$dataArr['reference'] = $referenceTxt;
							if(custom_in_array($dataArr['full_reference'], 'full_reference', $variablesArray['referenceArray']) != true)
								$variablesArray['referenceArray'][] = $dataArr;
						}

					}else{
						foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
							if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
								$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
								$variablesArray['aLiteraturquellen'] [$refKey] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
							}
						}
					}
				}

				if($ckeckRApproval == 1){
					$variablesArray['needApproval'] = 1;

					$variablesArray['aLiteraturquellen'] = array(); 
					$variablesArray['tagsApprovalString'] = $tagsApproalStringForRef;
					$variablesArray['tagsApprovalString'] = rtrim($variablesArray['tagsApprovalString'], "{#^#}");

					$foundReferenceStringArray = explode("{#^#}", $variablesArray['tagsApprovalString']);

					if(count($foundReferenceStringArray) > 1){
						$variablesArray['partOfSymptomPriority'] = 0;
						$variablesArray['remedyWithSymptomPriority'] = 0;
						$variablesArray['prueferPriority'] = 0;
						$variablesArray['remedyPriority'] = 0;
						$variablesArray['referencePriority'] = 0;
						$variablesArray['referenceWithNoAuthorPriority'] = 0;
						$variablesArray['aaoHyphenPriority'] = 0;
						$variablesArray['hyphenPrueferPriority'] = 0;
						$variablesArray['hyphenReferencePriority'] = 0;
						$variablesArray['moreThanOneTagStringPriority'] = 10;
					}else{
						$variablesArray['partOfSymptomPriority'] = 0;
						$variablesArray['remedyWithSymptomPriority'] = 0;
						$variablesArray['prueferPriority'] = 0;
						$variablesArray['remedyPriority'] = 0;
						$variablesArray['aaoHyphenPriority'] = 0;
						$variablesArray['hyphenPrueferPriority'] = 0;
						$variablesArray['hyphenReferencePriority'] = 0;
						$variablesArray['moreThanOneTagStringPriority'] = 0;
						$variablesArray['referenceWithNoAuthorPriority'] = 0;
						$variablesArray['referencePriority'] = 10;
					}
				}else{
					$variablesArray['needApproval'] = 0;
				}
			}
			else if( count($variablesArray['prueferFromParray']) > 0 ){
				/* When only @P is present in a symptom */

				$variablesArray['isPreDefinedTagsApproval'] = 1;
				$ckeckPApproval = 0;
				$tagsApproalStringForPrue = "";
				foreach ($variablesArray['prueferFromParray'] as $prueferPkey => $prueferPval) {
					$prueferPval = trim($prueferPval);
					$tagsApproalStringForPrue .= $prueferPval."{#^#}";

					$cleanPrueferString = (mb_substr ( $prueferPval, mb_strlen ( $prueferPval ) - 1, 1 ) == '.') ? $prueferPval : $prueferPval.'.'; 
					$prueferReturnArr = lookupPruefer($cleanPrueferString);
					if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
						$ckeckPApproval = 1;
						
						if(!empty($prueferReturnArr['data'])){
							foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
								if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
									$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
							}
						}
						else{
							$dataArr = array();
							$dataArr['pruefer_id'] = null;
							$dataArr['kuerzel'] = null;
							$dataArr['suchname'] = trim($prueferPval);
							if(custom_in_array($dataArr['suchname'], 'suchname', $variablesArray['prueferArray']) != true)
								$variablesArray['prueferArray'][] = $dataArr;
						}
					}
					else{
						foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
							if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
								$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
						}
					}
				}

				if($ckeckPApproval == 1){
					$variablesArray['needApproval'] = 1;

					$variablesArray['tagsApprovalString'] = $tagsApproalStringForPrue;
					$variablesArray['tagsApprovalString'] = rtrim($variablesArray['tagsApprovalString'], "{#^#}");

					$foundPrueferStringArray = explode("{#^#}", $variablesArray['tagsApprovalString']);
					if(count($foundPrueferStringArray) > 1){
						$variablesArray['referencePriority'] = 0;
						$variablesArray['referenceWithNoAuthorPriority'] = 0;
						$variablesArray['remedyWithSymptomPriority'] = 0;
						$variablesArray['remedyPriority'] = 0;
						$variablesArray['partOfSymptomPriority'] = 0;
						$variablesArray['prueferPriority'] = 0;
						$variablesArray['aaoHyphenPriority'] = 0;
						$variablesArray['hyphenPrueferPriority'] = 0;
						$variablesArray['hyphenReferencePriority'] = 0;
						$variablesArray['moreThanOneTagStringPriority'] = 10;
					}else{
						$variablesArray['referencePriority'] = 0;
						$variablesArray['referenceWithNoAuthorPriority'] = 0;
						$variablesArray['remedyWithSymptomPriority'] = 0;
						$variablesArray['remedyPriority'] = 0;
						$variablesArray['partOfSymptomPriority'] = 0;
						$variablesArray['moreThanOneTagStringPriority'] = 0;
						$variablesArray['aaoHyphenPriority'] = 0;
						$variablesArray['hyphenPrueferPriority'] = 0;
						$variablesArray['hyphenReferencePriority'] = 0;
						$variablesArray['prueferPriority'] = 10;
					}

				}else{
					$variablesArray['needApproval'] = 0;
				}
			}
			else{
				if(!empty($variablesArray['endingBracketsArray'])){
					/* If ending brackets are not null than examining its possibilities START */
					// $approvalFor (0 = end bracket, 1 = middle bracket)
					$variablesArray['approvalFor'] = 0;
					$variablesArray['lastBracketedString'] = (isset($variablesArray['endingBracketsArray'][0]) AND $variablesArray['endingBracketsArray'][0] != "") ? trim($variablesArray['endingBracketsArray'][0]) : null;
					// echo "<pre>";
					// echo $variablesArray['lastBracketedString']." ==<br>";
					if($variablesArray['lastBracketedString'] != ""){
						// Checking the existance of , - . ; and , a. a. O. and , a.a.O.
						$isAaoExist = mb_strpos($variablesArray['lastBracketedString'], 'a. a. O.');
						$isAaoWithoutSpaceExist = mb_strpos($variablesArray['lastBracketedString'], 'a.a.O.');
						$isAaoAllLowerWithoutSpaceExist = mb_strpos($variablesArray['lastBracketedString'], 'a.a.o.');
						$isAaoAllLowerWithSpaceExist = mb_strpos($variablesArray['lastBracketedString'], 'a. a. o.');
						$isCommaExist = mb_substr_count($variablesArray['lastBracketedString'],",");
						$isHyphenExist = mb_substr_count($variablesArray['lastBracketedString']," - ");
						$isDotExist = mb_substr_count($variablesArray['lastBracketedString'], ".");
						$isSemicolonExist = mb_substr_count($variablesArray['lastBracketedString'],";");

						$isProcessed = 0;
						if(mb_substr(trim(strtolower($variablesArray['lastBracketedString'])), 0, strlen('see')) === 'see'){
							$variablesArray['chapterInformation'] = mysqli_real_escape_string($db, serialize($variablesArray['lastBracketedString']));
							$isProcessed = 1;
						}
						if(mb_substr(trim(strtolower($variablesArray['lastBracketedString'])), 0, strlen('agg.')) === 'agg.'){
							$variablesArray['modality'] = mysqli_real_escape_string($db, serialize($variablesArray['lastBracketedString']));
							$isProcessed = 1;
						}
						if($isProcessed == 0){
							$workingStringBefore = trim($variablesArray['lastBracketedString']);
							if($workingStringBefore == "A.f.d.H."){
								$noAuthorWorkingString = "No Author, Archiv f. d. homÃ¶op. Heilk. V. III.";
								$referenceReturnArr = lookupLiteratureReference($noAuthorWorkingString);
								if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){

									if(!empty($referenceReturnArr['data'])){
										foreach ($referenceReturnArr['data'] as $refKey => $refVal) {
											if(custom_in_array($referenceReturnArr['data'][$refKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true)
												$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$refKey];
										}
									}
									else{
										$fullReferenceInArray = explode(",", $noAuthorWorkingString);
										if(count($fullReferenceInArray) >= 2){
											$referenceAutor = trim($fullReferenceInArray[0]);
											array_shift($fullReferenceInArray);
											$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
										}else{
											$referenceAutor = "No Author";
											$referenceTxt = $workingStringBefore;
										}
										
										$dataArr = array();
										$dataArr['reference_id'] = null;
										$dataArr['full_reference'] = $noAuthorWorkingString;
										$dataArr['autor'] = $referenceAutor;
										$dataArr['reference'] = $referenceTxt;
										if(custom_in_array($dataArr['full_reference'], 'full_reference', $variablesArray['referenceArray']) != true)
											$variablesArray['referenceArray'][] = $dataArr;
									}

								}else{
									$variablesArray['needApproval'] = 0;
									$variablesArray['prueferArray'] = array();
									$variablesArray['remedyArray'] = array();
									foreach ($referenceReturnArr['data'] as $refKey => $refVal) {
										if(custom_in_array($referenceReturnArr['data'][$refKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
											$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$refKey];
											$variablesArray['aLiteraturquellen'] [] = ($referenceReturnArr['data'][$refKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$refKey]['full_reference']) : "";
										}
									}
								}
							}
							else if($isCommaExist == 0 AND $isSemicolonExist == 0 AND $isHyphenExist == 0 AND $isAaoExist === false AND $isAaoWithoutSpaceExist === false AND $isAaoAllLowerWithoutSpaceExist === false AND $isAaoAllLowerWithSpaceExist === false)
							{
								// No Comma AND No Semicolon AND No Hyphen AND No , a. a. O. START
								$workingString = trim($variablesArray['lastBracketedString']);
								$expectedRemedyArray = array();
								/*
								* COMMON LOOKUP SECTION START
								*/
								if (mb_strpos($workingString, '.') !== false){
									// Split by dot(.)
									$makeStringToExplode = str_replace('.', '.{#^#}', $workingString);
									$expectedRemedyArray = explode("{#^#}", $makeStringToExplode);
								}
								else
									$expectedRemedyArray[] = $workingString;
								$expectedRemedyArray = array_filter($expectedRemedyArray);
								/* REMEDY START */
								$checkRemedyApprovalStatus = 0;
								foreach ($expectedRemedyArray as $expectedRemedyKey => $expectedRemedyVal) {
									
									if($expectedRemedyVal == "")
										continue;	

									$cleanExpectedRemedyName = trim($expectedRemedyVal);
									$cleanRemedyString = (mb_substr ( $cleanExpectedRemedyName, mb_strlen ( $cleanExpectedRemedyName ) - 1, 1 ) == '.') ? $cleanExpectedRemedyName : $cleanExpectedRemedyName.'.';
									$remedyReturnArr = newLookupRemedy($cleanRemedyString);
									// print_r($remedyReturnArr);
									if(isset($remedyReturnArr['need_approval']) AND $remedyReturnArr['need_approval'] == 1){
										$checkRemedyApprovalStatus = 1;
										if(!empty($remedyReturnArr['data'])){
											foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
												if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $variablesArray['remedyArray']) != true)
													$variablesArray['remedyArray'][] = $remedyReturnArr['data'][$remedyReturnKey];
											}
										}
										else{
											$dataArr = array();
											$dataArr['remedy_id'] = null;
											$dataArr['name'] = $cleanExpectedRemedyName;
											$dataArr['kuerzel'] = "";
											if(custom_in_array($dataArr['name'], 'name', $variablesArray['remedyArray']) != true)
												$variablesArray['remedyArray'][] = $dataArr;
										}
									}
									else{
										foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
											if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $variablesArray['remedyArray']) != true)
												$variablesArray['remedyArray'][] = $remedyReturnArr['data'][$remedyReturnKey];
										}
									}
								}
								// Setting last operations approval status to main approval checking variable 
								$variablesArray['needApproval'] = $checkRemedyApprovalStatus; 
								/* REMEDY END */
								/* PRUEFER STRAT */
								if($variablesArray['needApproval'] == 1){
									$cleanPrueferString = (mb_substr ( $workingString, mb_strlen ( $workingString ) - 1, 1 ) == '.') ? $workingString : $workingString.'.'; 
									$prueferReturnArr = lookupPruefer($cleanPrueferString);
									if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
										if(!empty($prueferReturnArr['data'])){
											foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
												if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
													$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
											}
										}else{
											$dataArr = array();
											$dataArr['pruefer_id'] = null;
											$dataArr['kuerzel'] = null;
											$dataArr['suchname'] = $workingString;
											if(custom_in_array($dataArr['suchname'], 'suchname', $variablesArray['prueferArray']) != true)
												$variablesArray['prueferArray'][] = $dataArr;
										}
									}
									else{
										$variablesArray['prueferArray'] = array();
										$variablesArray['needApproval'] = 0;
										$variablesArray['remedyArray'] = array();
										foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
											if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
												$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
										}
									}
								}

								if($variablesArray['needApproval'] == 1){
									// Check multiple prufers
									$checkPrueferApprovalStatus = 0;
									foreach ($expectedRemedyArray as $expectedPrueferKey => $expectedPrueferVal) {
										if($expectedPrueferVal == "")
											continue;
										$cleanPrueferString = trim($expectedPrueferVal); 
										$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
										$prueferReturnArr = lookupPruefer($cleanPrueferString);
										if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
											$checkPrueferApprovalStatus = 1;
											if(!empty($prueferReturnArr['data'])){
												foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
													if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
														$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
												}
											}
											else
											{
												$dataArr = array();
												$dataArr['pruefer_id'] = null;
												$dataArr['kuerzel'] = null;
												$dataArr['suchname'] = $cleanPrueferString;
												if(custom_in_array($dataArr['suchname'], 'suchname', $variablesArray['prueferArray']) != true)
													$variablesArray['prueferArray'][] = $dataArr;
											}
										}
										else{
											$variablesArray['remedyArray'] = array();
											$variablesArray['referenceArray'] = array();
											$variablesArray['aLiteraturquellen'] = array();
											foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
												if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
													$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
											}
										}	
									}

									$variablesArray['needApproval'] = $checkPrueferApprovalStatus;
									// Check multiple prufers end	
								}
								/* PRUEFER END */

								/* REFERENCE WITH NO AUTHOR START */
								if($variablesArray['needApproval'] == 1){
									$noAuthorWorkingString = "No Author, ".trim($workingString);
									$referenceReturnArr = lookupLiteratureReference($noAuthorWorkingString);
									if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){

										if(!empty($referenceReturnArr['data'])){
											foreach ($referenceReturnArr['data'] as $refKey => $refVal) {
												if(custom_in_array($referenceReturnArr['data'][$refKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true)
													$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$refKey];
											}
										}
										else{
											$fullReferenceInArray = explode(",", $noAuthorWorkingString);
											if(count($fullReferenceInArray) >= 2){
												$referenceAutor = trim($fullReferenceInArray[0]);
												array_shift($fullReferenceInArray);
												$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
											}else{
												$referenceAutor = "No Author";
												$referenceTxt = $workingString;
											}
											
											$dataArr = array();
											$dataArr['reference_id'] = null;
											$dataArr['full_reference'] = $noAuthorWorkingString;
											$dataArr['autor'] = $referenceAutor;
											$dataArr['reference'] = $referenceTxt;
											if(custom_in_array($dataArr['full_reference'], 'full_reference', $variablesArray['referenceArray']) != true)
												$variablesArray['referenceArray'][] = $dataArr;
										}

									}else{
										$variablesArray['needApproval'] = 0;
										$variablesArray['prueferArray'] = array();
										$variablesArray['remedyArray'] = array();
										foreach ($referenceReturnArr['data'] as $refKey => $refVal) {
											if(custom_in_array($referenceReturnArr['data'][$refKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
												$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$refKey];
												$variablesArray['aLiteraturquellen'] [] = ($referenceReturnArr['data'][$refKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$refKey]['full_reference']) : "";
											}
										}
									}
								}
								/* REFERENCE WITH NO AUTHOR END */

								/*
								* COMMON LOOKUP SECTION END
								*/

								$wordsInLastString = explode(" ", $variablesArray['lastBracketedString']);
								if(!empty($wordsInLastString)){

									if(count($wordsInLastString) == 1){
										/*
										* (A) SINGLE WORD START
										*/
										
										if($isDotExist != 0){
											// Single word has dot START
											if( isFirstCharacterUppercase($workingString) === true){
												/*
												* (A1) If the word + dot has uppercase (I mean only the first character is uppercase)
												*
												* 1 = chcek for remedy
												* 2 = chcek for part of symptom
												* 3 = chcek for pruefer
												*/
												if($variablesArray['needApproval'] == 1){
													$variablesArray['referencePriority'] = 0;
													$variablesArray['referenceWithNoAuthorPriority'] = 0;
													$variablesArray['remedyWithSymptomPriority'] = 0;
													$variablesArray['aaoHyphenPriority'] = 0;
													$variablesArray['hyphenPrueferPriority'] = 0;
													$variablesArray['hyphenReferencePriority'] = 0;
													$variablesArray['moreThanOneTagStringPriority'] = 0;
													$variablesArray['remedyPriority'] = 8;
													$variablesArray['partOfSymptomPriority'] = 9;
													$variablesArray['prueferPriority'] = 10;
												}
											}else{
												/*
												* (A2) If the word + dot is lowercase
												*
												* 1 = chcek for part of symptom
												* 2 = chcek for remedy
												*/
												if($variablesArray['needApproval'] == 1){
													// As we are not going to ask Pruefer Question, making $prueferArray array empty and $prueferPriority = 0
													$variablesArray['prueferArray'] = array();
													$variablesArray['referencePriority'] = 0;
													$variablesArray['referenceWithNoAuthorPriority'] = 0;
													$variablesArray['remedyWithSymptomPriority'] = 0;
													$variablesArray['prueferPriority'] = 0;
													$variablesArray['aaoHyphenPriority'] = 0;
													$variablesArray['hyphenPrueferPriority'] = 0;
													$variablesArray['hyphenReferencePriority'] = 0;
													$variablesArray['moreThanOneTagStringPriority'] = 0;
													$variablesArray['partOfSymptomPriority'] = 9;
													$variablesArray['remedyPriority'] = 10;
												}
											}
											// Single word has dot END
										}else{
											// Single word don't have any dot START
											if( isFirstCharacterUppercase($workingString) === true){
												/*
												* (A4) Single word uppercase without dot (I mean only the first character is uppercase)
												*
												* 1 = chcek for remedy
												* 2 = chcek for part of symptom
												* 3 = chcek for pruefer
												*/
												if($variablesArray['needApproval'] == 1){
													$variablesArray['referencePriority'] = 0;
													$variablesArray['referenceWithNoAuthorPriority'] = 0;
													$variablesArray['remedyWithSymptomPriority'] = 0;
													$variablesArray['aaoHyphenPriority'] = 0;
													$variablesArray['hyphenPrueferPriority'] = 0;
													$variablesArray['hyphenReferencePriority'] = 0;
													$variablesArray['moreThanOneTagStringPriority'] = 0;
													$variablesArray['remedyPriority'] = 8;
													$variablesArray['partOfSymptomPriority'] = 9;
													$variablesArray['prueferPriority'] = 10;
												}
											}else{
												/*
												* (A3) Single word lowercase without dot
												*
												* 1 = chcek for part of symptom
												* 2 = chcek for remedy
												* 3 = chcek for pruefer
												*/
												if($variablesArray['needApproval'] == 1){
													$variablesArray['referencePriority'] = 0;
													$variablesArray['referenceWithNoAuthorPriority'] = 0;
													$variablesArray['remedyWithSymptomPriority'] = 0;
													$variablesArray['aaoHyphenPriority'] = 0;
													$variablesArray['hyphenPrueferPriority'] = 0;
													$variablesArray['hyphenReferencePriority'] = 0;
													$variablesArray['moreThanOneTagStringPriority'] = 0;
													$variablesArray['partOfSymptomPriority'] = 8;
													$variablesArray['remedyPriority'] = 9;
													$variablesArray['prueferPriority'] = 10;
												}
											}
											// Single word don't have any dot END
										}

										/*
										* (A) SINGLE WORD END
										*/
									}
									else
									{
										/* 
										* (B) MORE THAN ONE WORD (case insensitive i.e., upper or lower case does not matter) START 
										*/

										if($isDotExist != 0){
											/*
											* (B1) Words have one or more than one dot(s)
											*
											* 1 = chcek for part of symptom
											* 2 = chcek for n remedies splited by dot(.)
											* 3 = chcek for pruefer
											* 4 = chcek for reference with no author
											*/

											if($variablesArray['needApproval'] == 1){
												$variablesArray['remedyWithSymptomPriority'] = 0;
												$variablesArray['aaoHyphenPriority'] = 0;
												$variablesArray['hyphenPrueferPriority'] = 0;
												$variablesArray['hyphenReferencePriority'] = 0;
												$variablesArray['moreThanOneTagStringPriority'] = 0;
												$variablesArray['referencePriority'] = 0;
												$variablesArray['partOfSymptomPriority'] = 7;
												$variablesArray['remedyPriority'] = 8;
												$variablesArray['prueferPriority'] = 9;
												$variablesArray['referenceWithNoAuthorPriority'] = 10;
											}

										}else{
											/*
											* (B1) Words have NO dot(s)
											*
											* 1 = chcek for part of symptom
											* 2 = chcek for remedy
											* 3 = chcek for pruefer
											*/

											if($variablesArray['needApproval'] == 1){
												$variablesArray['referencePriority'] = 0;
												$variablesArray['referenceWithNoAuthorPriority'] = 0;
												$variablesArray['remedyWithSymptomPriority'] = 0;
												$variablesArray['aaoHyphenPriority'] = 0;
												$variablesArray['hyphenPrueferPriority'] = 0;
												$variablesArray['hyphenReferencePriority'] = 0;
												$variablesArray['moreThanOneTagStringPriority'] = 0;
												$variablesArray['partOfSymptomPriority'] = 8;
												$variablesArray['remedyPriority'] = 9;
												$variablesArray['prueferPriority'] = 10;
											}
										}

										/* 
										* (B) MORE THAN ONE WORD (case insensitive i.e., upper or lower case does not matter) END 
										*/
									}

								}
								// No Comma AND No Semicolon AND No Hyphen AND No , a. a. O. END
							}
							else if(($isCommaExist != 0 OR $isSemicolonExist != 0) AND $isHyphenExist == 0 AND $isAaoExist === false AND $isAaoWithoutSpaceExist === false AND $isAaoAllLowerWithoutSpaceExist === false AND $isAaoAllLowerWithSpaceExist === false)
							{
								// echo "Hello 2<pre><br>";
								// With Comma OR Semicolon AND NO Hyphen AND No , a. a. O. START
								if (mb_strpos($variablesArray['lastBracketedString'], ',') !== false) 
									$separator = ",";
								else
									$separator = ";";

								$commaFirstOccurrence = mb_stripos ( $variablesArray['lastBracketedString'], $separator );
								$beforeTheCommaString = trim( mb_substr ( $variablesArray['lastBracketedString'], 0, $commaFirstOccurrence ) );
								$afterTheCommaString = trim( ltrim( mb_substr ( $variablesArray['lastBracketedString'], $commaFirstOccurrence ), $separator ));
								$beforeTheCommaStringInArray = explode(" ", $beforeTheCommaString);
								$afterTheCommaStringInArray = explode(" ", $afterTheCommaString);

								$isDotExistInBeforeTheCommaString = mb_substr_count($beforeTheCommaString,".");
								$isDotExistInAfterTheCommaString = mb_substr_count($afterTheCommaString,".");
								
								$upperCaseCheckInBeforeTheCommaStr = isThereAnyUppercase($beforeTheCommaString);
								$upperCaseCheckInAfterTheCommaStr = isThereAnyUppercase($afterTheCommaString);
								$isFirstCharUpperBeforeTheCommaStr = isFirstCharacterUppercase($beforeTheCommaString);

								$workingString = trim($variablesArray['lastBracketedString']);

								/*
								* COMMON LOOKUP SECTION START
								*/

								/* REMEDY START */
								$checkRemedyApprovalStatus = 0;
								$expectedRemedyArray = explode($separator, $workingString);
								foreach ($expectedRemedyArray as $expectedRemedyKey => $expectedRemedyVal) {
									
									if($expectedRemedyVal == "")
										continue;	

									$cleanExpectedRemedyName = trim($expectedRemedyVal);
									$cleanRemedyString = (mb_substr ( $cleanExpectedRemedyName, mb_strlen ( $cleanExpectedRemedyName ) - 1, 1 ) == '.') ? $cleanExpectedRemedyName : $cleanExpectedRemedyName.'.'; 
									$remedyReturnArr = newLookupRemedy($cleanRemedyString);
									if(isset($remedyReturnArr['need_approval']) AND $remedyReturnArr['need_approval'] == 1){
										$checkRemedyApprovalStatus = 1;
										if(!empty($remedyReturnArr['data'])){
											foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
												// custom_in_array(needle, needle_field, array) 
												if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $variablesArray['remedyArray']) != true)
													$variablesArray['remedyArray'][] = $remedyReturnArr['data'][$remedyReturnKey];
											}

										}
										else{
											$dataArr = array();
											$dataArr['remedy_id'] = null;
											$dataArr['name'] = $cleanExpectedRemedyName;
											$dataArr['kuerzel'] = "";
											if(custom_in_array($dataArr['name'], 'name', $variablesArray['remedyArray']) != true)
												$variablesArray['remedyArray'][] = $dataArr;
										}
									}
									else{
										foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
											if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $variablesArray['remedyArray']) != true)
												$variablesArray['remedyArray'][] = $remedyReturnArr['data'][$remedyReturnKey];
										}
									}
								}
								// Setting last operations approval status to main approval checking variable 
								$variablesArray['needApproval'] = $checkRemedyApprovalStatus; 
								/* REMEDY END */

								/* REFERENCE START */
								if($variablesArray['needApproval'] == 1){
									$referenceReturnArr = lookupLiteratureReference($workingString);
									if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){

										if(!empty($referenceReturnArr['data'])){
											foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
												if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true)
													$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
											}
										}
										else{
											$fullReferenceInArray = explode(",", $workingString);
											if(count($fullReferenceInArray) >= 2){
												$referenceAutor = trim($fullReferenceInArray[0]);
												array_shift($fullReferenceInArray);
												$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
											}else{
												$referenceAutor = "";
												$referenceTxt = $workingString;
											}
											
											$dataArr = array();
											$dataArr['reference_id'] = null;
											$dataArr['full_reference'] = $workingString;
											$dataArr['autor'] = $referenceAutor;
											$dataArr['reference'] = $referenceTxt;
											if(custom_in_array($dataArr['full_reference'], 'full_reference', $variablesArray['referenceArray']) != true)
												$variablesArray['referenceArray'][] = $dataArr;
										}

									}else{
										$variablesArray['needApproval'] = 0;
										$variablesArray['remedyArray'] = array();
										foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
											if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
												$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
												$variablesArray['aLiteraturquellen'] [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
											}	
										}
									}
								}
								/* REFERENCE END */

								/* PRUEFER START */
								if($variablesArray['needApproval'] == 1){
									$checkPrueferApprovalStatus = 0;
									$expectedPruefersArray = explode($separator, $workingString);
									foreach ($expectedPruefersArray as $expectedPrueferKey => $expectedPrueferVal) {
										if($expectedPrueferVal == "")
											continue;

										$cleanPrueferString = trim($expectedPrueferVal); 
										$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
										$prueferReturnArr = lookupPruefer($cleanPrueferString);
										if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
											$checkPrueferApprovalStatus = 1;
											if(!empty($prueferReturnArr['data'])){
												foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
													if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
														$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
												}
											}
											else{
												$dataArr = array();
												$dataArr['pruefer_id'] = null;
												$dataArr['kuerzel'] = null;
												$dataArr['suchname'] = $cleanPrueferString;
												if(custom_in_array($dataArr['suchname'], 'suchname', $variablesArray['prueferArray']) != true)
													$variablesArray['prueferArray'][] = $dataArr;
											}
										}
										else{
											$variablesArray['remedyArray'] = array();
											$variablesArray['referenceArray'] = array();
											$variablesArray['aLiteraturquellen'] = array();
											foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
												if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
													$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
											}
										}	
									}

									$variablesArray['needApproval'] = $checkPrueferApprovalStatus; 
								}
								/* PRUEFER END */
								/*
								* COMMON LOOKUP SECTION END
								*/

								/* Rule 2 Conditions START */
								if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString != 0 AND $isDotExistInAfterTheCommaString !=0){
									/*
									* 2.1 Single word + dot before the comma and one or more words + dot after comma (no matter if upper or lower case)
									*
									* 1 = chcek for remedis by spliting by comma
									*/

									if($variablesArray['needApproval'] == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 0;
										$variablesArray['referencePriority'] = 0;
										$variablesArray['remedyPriority'] = 10;
									}

								}else if($isCommaExist == 1 AND ((count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 1) OR (count($afterTheCommaStringInArray) == 1 AND $isDotExistInAfterTheCommaString == 1))){
									/*
									* 2.2. Single word + dot before the comma or after a comma (only one dot and one comma)
									*
									* 1 = check for remedy with symptom text (Eg: Opi., during the day)(Eg: small boils in crops, Sulph.)
									* 2 = part of symptom
									*/
									if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 1){
										$similarRemedyString = $beforeTheCommaString;
										$similarSymptomString = $afterTheCommaString;	
									}else{
										$similarRemedyString = $afterTheCommaString;
										$similarSymptomString = $beforeTheCommaString;
									}
									$cleanRemedyWithSymptomString = (mb_substr ( $workingString, mb_strlen ( $workingString ) - 1, 1 ) == '.') ? $workingString : $workingString.'.'; 
									$remedyWithSymptomReturnArr = newLookupRemedyWithSymptom($cleanRemedyWithSymptomString, $similarRemedyString, $similarSymptomString);
									if(isset($remedyWithSymptomReturnArr['need_approval']) AND $remedyWithSymptomReturnArr['need_approval'] == 0){
										$variablesArray['needApproval'] = 0;
										$variablesArray['remedyArray'] = array();
										$variablesArray['referenceArray'] = array();
										$variablesArray['aLiteraturquellen'] = array();
										$variablesArray['prueferArray'] = array();
										if(isset($remedyWithSymptomReturnArr['data'][0]['remedy']))
											$variablesArray['remedyArray'] = $remedyWithSymptomReturnArr['data'][0]['remedy'];
										$variablesArray['symptomOfDifferentRemedy'] = (isset($remedyWithSymptomReturnArr['data'][0]['symptom_of_different_remedy'])) ? $remedyWithSymptomReturnArr['data'][0]['symptom_of_different_remedy'] : "";
									}else{
										$variablesArray['needApproval'] = 1;
									}

									if($variablesArray['needApproval'] == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['referencePriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 9;
										$variablesArray['partOfSymptomPriority'] = 10;
									}

								}else if(count($beforeTheCommaStringInArray) > 1 AND $upperCaseCheckInBeforeTheCommaStr === false AND $isDotExist == 0 AND count($afterTheCommaStringInArray) > 1){
									/*
									* 2.3. More than one word before comma in lower case (no dots) and no single word + dot in the bracket
									*
									* 1 = part of symptom
									*/

									if($variablesArray['needApproval'] == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['referencePriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 10;
									}
								}else if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 0 AND $isFirstCharUpperBeforeTheCommaStr === true){ 
									/*
									* 2.4. Single word upper case without dot before the comma
									*
									* 1 = check for reference
									* 2 = part of symptom
									* 3 = chcek for remedis by spliting by comma
									* 4 = pruefer
									*/

									if($variablesArray['needApproval'] == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['referencePriority'] = 7;
										$variablesArray['partOfSymptomPriority'] = 8;
										$variablesArray['remedyPriority'] = 9;
										$variablesArray['prueferPriority'] = 10;
									}
								}else if($upperCaseCheckInBeforeTheCommaStr === false AND $isDotExist == 0){
									/*
									* 2.5. One or more words lower case without dot before the comma (no dot in the bracket part)
									*
									* 1 = part of symptom
									*/

									if($variablesArray['needApproval'] == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['referencePriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 10;
									}
								}else if(count($beforeTheCommaStringInArray) > 1 AND $isFirstCharUpperBeforeTheCommaStr === true AND $isDotExistInBeforeTheCommaString != 0 ){
									/*
									* 2.6. More than one word with at least one dot before the comma(all words upper case)
									*
									* 1 = check for reference
									* 2 = check for pruefer
									* 3 = chcek for remedis by spliting by comma
									*/

									if($variablesArray['needApproval'] == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 0;
										$variablesArray['referencePriority'] = 8;
										$variablesArray['prueferPriority'] = 9;
										$variablesArray['remedyPriority'] = 10;
									}
								}else if(count($beforeTheCommaStringInArray) > 1 AND $isFirstCharUpperBeforeTheCommaStr === true AND $isDotExistInBeforeTheCommaString == 0){
									/*
									* 2.7. More than one word (no dots) before comma (all words upper case)
									*
									* 1 = check for reference
									* 2 = check for pruefer
									*/

									if($variablesArray['needApproval'] == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['referencePriority'] = 9;
										$variablesArray['prueferPriority'] = 10;
									}
								}else if(count($beforeTheCommaStringInArray) > 1 AND $isDotExistInBeforeTheCommaString == 0 AND $upperCaseCheckInBeforeTheCommaStr === true){
									/*
									* 2.8. More than one word mixed lower & upper case (no dots) before comma(all the words cannot be in one case)
									*
									* 1 = part of symptom
									* 2 = check for reference
									*/
									if($variablesArray['needApproval'] == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 9;
										$variablesArray['referencePriority'] = 10;
									}
								}else if(count($beforeTheCommaStringInArray) > 1 AND $upperCaseCheckInBeforeTheCommaStr === true AND $isDotExistInBeforeTheCommaString != 0){
									/*
									* 2.9. More than one word mixed lower & upper case with at least one dotbefore comma(all the words cannot be in one case)
									*
									* 1 = chcek for remedis by spliting by comma
									* 2 = check for reference
									*/ 

									if($variablesArray['needApproval'] == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 0;
										$variablesArray['remedyPriority'] = 9;
										$variablesArray['referencePriority'] = 10;
									}
								}
								/* Rule 2 Conditions END */

								// With Comma OR Semicolon AND NO Hyphen AND No , a. a. O. END
							}
							else if(($isAaoExist !== false OR $isAaoWithoutSpaceExist !== false OR $isAaoAllLowerWithoutSpaceExist !== false OR $isAaoAllLowerWithSpaceExist !== false) AND $isHyphenExist != 0)
							{
								// When string has both ", a. a. O." and hyphen START
								$workingString = trim($variablesArray['lastBracketedString']);
								$eachElement = explode(" - ", $workingString); 
								$variablesArray['referenceArray'] = array();
								$variablesArray['aLiteraturquellen'] = array();
								$variablesArray['prueferArray'] = array();
								$countUnknownElement = 0;
								foreach ($eachElement as $elementKey => $elementVal) {
									$innerApprovalChecking = 0;
									// Lookup in same import data 
									$elementString = str_replace("a. a. O.", "{#^#}", $elementVal);
									$elementString = str_replace("a.a.O.", "{#^#}", $elementString);
									$elementString = str_replace("a.a.o.", "{#^#}", $elementString);
									$elementString = str_replace("a. a. o.", "{#^#}", $elementString);
									$searchAuthorPreName = trim($elementString);
									$aaoPosition = mb_strpos($searchAuthorPreName, '{#^#}');
									if($aaoPosition !== false){
										$searchAuthorPreName = mb_substr($searchAuthorPreName, 0, $aaoPosition);
									}
									$searchAuthorPreName = str_replace("{#^#}", "", $searchAuthorPreName);
									$searchAuthorName = trim($searchAuthorPreName);

									if($searchAuthorName != ""){
										if($variablesArray['masterId'] != ""){
											/* 
											* Check the last appearence of this elemet in temp_approved_pruefer and temp_approved_reference table
											* if no match data found than "aao_hyphen_priority" question will be ask
											*/
											// Check reference
											$cleanReferenceString = trim($searchAuthorName);
											$referenceReturnArr = lookupReferenceInCurrentImport($cleanReferenceString, $variablesArray['masterId'], null);
											if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
												$innerApprovalChecking = 1;
											}else{
												$innerApprovalChecking = 0;
												foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
													if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
														$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
														$variablesArray['aLiteraturquellen'] [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
													}	
												}
											}

											if($innerApprovalChecking == 1){
												// Checking pruefer
												$cleanPrueferString = trim($searchAuthorName); 
												$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
												$prueferReturnArr = lookupPrueferInCurrentImport($cleanPrueferString, $variablesArray['masterId'], null);
												if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
													$innerApprovalChecking = 1;
												}
												else{
													$innerApprovalChecking = 0;
													foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
														if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
															$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
													}
												}
											}
										} else {
											$innerApprovalChecking = 1;
										}

										// Normal lookup
										// Checking Reference
										if($innerApprovalChecking == 1){
											$cleanReferenceString = trim($searchAuthorName);
											$referenceReturnArr = lookupLiteratureReference($cleanReferenceString);
											if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
												$innerApprovalChecking = 1;
												if(!empty($referenceReturnArr['data'])){
													foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
														if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
															$referenceReturnArr['data'][$referenceReturnKey]['is_one_unknown_element_in_hyphen'] = 1;
															$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
														}
													}
												}
											}else{
												$innerApprovalChecking = 0;
												foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
													if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
														$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
														$variablesArray['aLiteraturquellen'] [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
													}	
												}
											}
										}

										// Check pruefer
										if($innerApprovalChecking == 1){
											$cleanPrueferString = trim($searchAuthorName); 
											$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
											$prueferReturnArr = lookupPruefer($cleanPrueferString);
											if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
												$innerApprovalChecking = 1;
												if(!empty($prueferReturnArr['data'])){
													foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
														if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true){
															$prueferReturnArr['data'][$prueferReturnKey]['is_one_unknown_element_in_hyphen'] = 1;
															$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
														}
													}
												}
											}
											else{
												$innerApprovalChecking = 0;
												foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
													if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
														$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
												}
											}
										}
									}

									// If unknown Data found incrementing the counter and setting the element value to $hyphenApprovalString
									if($innerApprovalChecking == 1){
										$countUnknownElement++;
										$variablesArray['hyphenApprovalString'] = trim($elementVal);
									}
								}

								// Set need approval value if unknown data found
								if($countUnknownElement > 0){
									$variablesArray['needApproval'] = 1;
									if($countUnknownElement != 1)
										$variablesArray['hyphenApprovalString'] = "";
								}

								/*
								* Rule 3 Last bracket words:  â, a. a. O.â or ", a.a.O." and Hyphen (hyphenhasspacebeforeand after ( - )) (whenbothexist)
								*
								* 1 = Unknown data found with a. a. O. or Hyphen( - )
								*/ 
								if($variablesArray['needApproval'] == 1){
									if($countUnknownElement == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['referencePriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 9;
										$variablesArray['hyphenPrueferPriority'] = 10;
									}else{
										// Making pruefer and reference array empty because these elements will be cleared by direct oredr or by correcting the symptom string. Also seting aao_hyphen_priority value for asking the question
										$variablesArray['referenceArray'] = array();
										$variablesArray['aLiteraturquellen'] = array();
										$variablesArray['prueferArray'] = array();

										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['referencePriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 10;
									}
								}
								// When string has both ", a. a. O." and hyphen END 
							}
							else if($isHyphenExist != 0)
							{
								// When string has hyphen only START 
								$workingString = trim($variablesArray['lastBracketedString']);
								$eachElement = explode(" - ", $workingString);
								$variablesArray['referenceArray'] = array();
								$variablesArray['aLiteraturquellen'] = array();
								$variablesArray['prueferArray'] = array();
								$countUnknownElement = 0;

								/* REFERENCE START [FIRST CHECKING THE FULL STRING] */
								$referenceReturnArr = lookupLiteratureReference($workingString);
								if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
									$variablesArray['needApproval'] = 1;
								}else{
									$variablesArray['needApproval'] = 0;
									foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
										if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
											$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
											$variablesArray['aLiteraturquellen'] [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
										}	
									}
								}
								/* REFERENCE END [FIRST CHECKING THE FULL STRING] */

								if($variablesArray['needApproval'] == 1){
									foreach ($eachElement as $elementKey => $elementVal) {
										$innerApprovalChecking = 0;
										/* 
										* Check the last appearence of this elemet in temp_approved_pruefer and temp_approved_reference table
										* if no match data found than "aao_hyphen_priority" question will be ask
										*/
										// Check reference
										$cleanReferenceString = trim($elementVal);
										$referenceReturnArr = lookupLiteratureReference($cleanReferenceString);
										if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
											$innerApprovalChecking = 1;
											if(!empty($referenceReturnArr['data'])){
												foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
													if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
														$referenceReturnArr['data'][$referenceReturnKey]['is_one_unknown_element_in_hyphen'] = 1;
														$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
													}
												}
											}
										}else{
											$innerApprovalChecking = 0;
											foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
												if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
													$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
													$variablesArray['aLiteraturquellen'] [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
												}	
											}
										}

										if($innerApprovalChecking == 1){
											// Checking pruefer
											$cleanPrueferString = trim($elementVal); 
											$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
											$prueferReturnArr = lookupPruefer($cleanPrueferString);
											if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
												$innerApprovalChecking = 1;
												if(!empty($prueferReturnArr['data'])){
													foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
														if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true){
															$prueferReturnArr['data'][$prueferReturnKey]['is_one_unknown_element_in_hyphen'] = 1;
															$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
														}
													}
												}
											}
											else{ 
												$innerApprovalChecking = 0;
												foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
													if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
														$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
												}
											}
										}

										// If unknown Data found incrementing the counter and setting the element value to $hyphenApprovalString
										if($innerApprovalChecking == 1){
											$countUnknownElement++;
											$variablesArray['hyphenApprovalString'] = trim($elementVal);
										}
									}
								}

								// Set need approval value if unknown data found
								if($countUnknownElement > 0){
									$variablesArray['needApproval'] = 1;
									if($countUnknownElement != 1)
										$variablesArray['hyphenApprovalString'] = "";
								}

								/*
								* Rule 4 Last bracket words:  â, a. a. O.â or ", a.a.O." and Hyphen (hyphenhasspacebeforeand after ( - )) (whenbothexist)
								*
								* 1 = Unknown data found with a. a. O. or Hyphen( - )
								*/ 
								if($variablesArray['needApproval'] == 1){
									if($countUnknownElement == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['referencePriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 9;
										$variablesArray['hyphenPrueferPriority'] = 10;
									}else{
										// Making pruefer and reference array empty because these elements will be cleared by direct oredr or by correcting the symptom string. Also seting aao_hyphen_priority value for asking the question
										$variablesArray['referenceArray'] = array();
										$variablesArray['aLiteraturquellen'] = array();
										$variablesArray['prueferArray'] = array();

										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['referencePriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 10;
									}
								}
								// When string has hyphen only START 
							}
							else if($isAaoExist !== false OR $isAaoWithoutSpaceExist !== false OR $isAaoAllLowerWithoutSpaceExist !== false OR $isAaoAllLowerWithSpaceExist !== false)
							{
								// When string has "a. a. O." only START 
								/* 
								* Check the last appearence of this elemet in temp_approved_pruefer and temp_approved_reference table
								* if no match data found than "aao_hyphen_priority" question will be ask
								*/
								$workingString = trim($variablesArray['lastBracketedString']);

								$elementString = str_replace("a. a. O.", "{#^#}", $workingString);
								$elementString = str_replace("a.a.O.", "{#^#}", $elementString);
								$elementString = str_replace("a.a.o.", "{#^#}", $elementString);
								$elementString = str_replace("a. a. o.", "{#^#}", $elementString);
								$searchAuthorPreName = trim($elementString);
								$aaoPosition = mb_strpos($searchAuthorPreName, '{#^#}');
								if($aaoPosition !== false){
									$searchAuthorPreName = mb_substr($searchAuthorPreName, 0, $aaoPosition);
								}
								$searchAuthorPreName = str_replace("{#^#}", "", $searchAuthorPreName);
								$searchAuthorName = rtrim(trim($searchAuthorPreName), ",");
								if($searchAuthorName != ""){
									$innerApprovalChecking = 0;
									if($variablesArray['masterId'] != ""){
										// Check reference
										$cleanReferenceString = trim($searchAuthorName);
										$referenceReturnArr = lookupReferenceInCurrentImport($cleanReferenceString, $variablesArray['masterId'], null);
										if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
											$innerApprovalChecking = 1;
										}else{
											$innerApprovalChecking = 0;
											foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
												if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
													$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
													$variablesArray['aLiteraturquellen'] [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
												}	
											}
										}

										if($innerApprovalChecking == 1){
											// Checking pruefer
											$cleanPrueferString = trim($searchAuthorName); 
											$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
											$prueferReturnArr = lookupPrueferInCurrentImport($cleanPrueferString, $variablesArray['masterId'], null);
											if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
												$innerApprovalChecking = 1;
											}
											else{
												$innerApprovalChecking = 0;
												foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
													if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
														$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
												}
											}
										}
									} else {
										$innerApprovalChecking = 1;
									}

									// Normal lookup
									// Checking Reference
									if($innerApprovalChecking == 1){
										$cleanReferenceString = trim($searchAuthorName);
										$referenceReturnArr = lookupLiteratureReference($cleanReferenceString);
										if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
											$variablesArray['referenceArray'] = array();
											$variablesArray['aLiteraturquellen'] = array();
											$innerApprovalChecking = 1;
											if(!empty($referenceReturnArr['data'])){
												foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
													if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true)
														$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
												}
											}
										}else{
											$innerApprovalChecking = 0;
											foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
												if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
													$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
													$variablesArray['aLiteraturquellen'] [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
												}	
											}
										}
									}

									// Check pruefer
									if($innerApprovalChecking == 1){
										$cleanPrueferString = trim($searchAuthorName); 
										$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
										$prueferReturnArr = lookupPruefer($cleanPrueferString);
										if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
											$variablesArray['prueferArray'] = array();
											$innerApprovalChecking = 1;
											if(!empty($prueferReturnArr['data'])){
												foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
													if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
														$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
												}
											}
										}
										else{
											$innerApprovalChecking = 0;
											foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
												if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
													$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
											}
										}
									}

									if($innerApprovalChecking == 1)
										$variablesArray['needApproval'] = 1;

									/*
									* Rule 5 Last bracket words:  â, a. a. O.â or ", a.a.O." and Hyphen (hyphenhasspacebeforeand after ( - )) (whenbothexist)
									*
									* 1 = Unknown data found with a. a. O. or Hyphen( - )
									*/ 
									if($variablesArray['needApproval'] == 1){
										// Making pruefer and reference array empty because these elements will be cleared by direct oredr or by correcting the symptom string. Also seting aao_hyphen_priority value for asking the question
										// $referenceArray = array();
										// $aLiteraturquellen = array();
										// $prueferArray = array();

										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['referencePriority'] = 9;
										$variablesArray['prueferPriority'] = 10;
									}
								}
								// When string has "a. a. O." only START 
							}
						}
					}
					/* If ending brackets are not null than examining its possibilities END */
				} else if(!empty($variablesArray['middleBracketArray']) AND count($variablesArray['middleBracketArray']) == 1){
					/* If middle brackets are not null than examining its possibilities START */
					// $approvalFor (0 = end bracket, 1 = middle bracket)
					$variablesArray['approvalFor'] = 1;
					$reArrangeMiddleBracketArray = array_values($variablesArray['middleBracketArray']);
					$variablesArray['middleBracketString'] = (isset($reArrangeMiddleBracketArray[0]) AND $reArrangeMiddleBracketArray[0] != "") ? trim($reArrangeMiddleBracketArray[0]) : null;
					if($variablesArray['middleBracketString'] != ""){
						// Checking the existance of , . ;
						$isCommaExist = mb_substr_count($variablesArray['middleBracketString'],",");
						$isSemicolonExist = mb_substr_count($variablesArray['middleBracketString'],";");
						$isDotExist = mb_substr_count($variablesArray['middleBracketString'], ".");

						/* Rule 6(Middle bracket) Conditions START */
						if(($isCommaExist != 0 OR $isSemicolonExist != 0) AND $isDotExist != 0){
							// With Comma OR Semicolon
							if (mb_strpos($variablesArray['middleBracketString'], ',') !== false) 
								$separator = ",";
							else
								$separator = ";";

							$commaFirstOccurrence = mb_stripos ( $variablesArray['middleBracketString'], $separator );
							$beforeTheCommaString = trim( mb_substr ( $variablesArray['middleBracketString'], 0, $commaFirstOccurrence ) );
							$afterTheCommaString = trim( ltrim( mb_substr ( $variablesArray['middleBracketString'], $commaFirstOccurrence ), $separator ));
							$beforeTheCommaStringInArray = explode(" ", $beforeTheCommaString);
							$afterTheCommaStringInArray = explode(" ", $afterTheCommaString);

							$isDotExistInBeforeTheCommaString = mb_substr_count($beforeTheCommaString,".");
							$isDotExistInAfterTheCommaString = mb_substr_count($afterTheCommaString,".");

							$workingString = trim($variablesArray['middleBracketString']);

							/* REMEDY START */
							$checkRemedyApprovalStatus = 0;
							$expectedRemedyArray = explode($separator, $workingString);
							foreach ($expectedRemedyArray as $expectedRemedyKey => $expectedRemedyVal) {
								
								if($expectedRemedyVal == "")
									continue;	

								$cleanExpectedRemedyName = trim($expectedRemedyVal);
								$cleanRemedyString = (mb_substr ( $cleanExpectedRemedyName, mb_strlen ( $cleanExpectedRemedyName ) - 1, 1 ) == '.') ? $cleanExpectedRemedyName : $cleanExpectedRemedyName.'.'; 
								$remedyReturnArr = newLookupRemedy($cleanRemedyString);
								if(isset($remedyReturnArr['need_approval']) AND $remedyReturnArr['need_approval'] == 1){
									$checkRemedyApprovalStatus = 1;
									if(!empty($remedyReturnArr['data'])){
										foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
											if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $variablesArray['remedyArray']) != true)
												$variablesArray['remedyArray'][] = $remedyReturnArr['data'][$remedyReturnKey];
										}

									}
									else{
										$dataArr = array();
										$dataArr['remedy_id'] = null;
										$dataArr['name'] = $cleanExpectedRemedyName;
										$dataArr['kuerzel'] = "";
										if(custom_in_array($dataArr['name'], 'name', $variablesArray['remedyArray']) != true)
											$variablesArray['remedyArray'][] = $dataArr;
									}
								}
								else{
									foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
										if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $variablesArray['remedyArray']) != true)
											$variablesArray['remedyArray'][] = $remedyReturnArr['data'][$remedyReturnKey];
									}
								}
							}
							// Setting last operations approval status to main approval checking variable 
							$variablesArray['needApproval'] = $checkRemedyApprovalStatus; 
							/* REMEDY END */

							if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString != 0 AND $isDotExistInAfterTheCommaString !=0){
								/*
								* 6.1 Single word + dot before the comma and one or more words + dot after comma (no matter if upper or lower case)
								*
								* 1 = chcek for remedis by spliting by comma
								*/

								if($variablesArray['needApproval'] == 1){
									$variablesArray['referenceWithNoAuthorPriority'] = 0;
									$variablesArray['aaoHyphenPriority'] = 0;
									$variablesArray['hyphenPrueferPriority'] = 0;
									$variablesArray['hyphenReferencePriority'] = 0;
									$variablesArray['moreThanOneTagStringPriority'] = 0;
									$variablesArray['remedyWithSymptomPriority'] = 0;
									$variablesArray['prueferPriority'] = 0;
									$variablesArray['partOfSymptomPriority'] = 0;
									$variablesArray['referencePriority'] = 0;
									$variablesArray['remedyPriority'] = 10;
								}
							}
							else if($isCommaExist == 1 AND ((count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 1) OR (count($afterTheCommaStringInArray) == 1 AND $isDotExistInAfterTheCommaString == 1)))
							{
								/*
								* 6.2. Single word + dot before the comma or after a comma (only one dot and one comma)
								*
								* 1 = check for remedy with symptom text (Eg: Opi., during the day)(Eg: small boils in crops, Sulph.)
								* 2 = part of symptom
								*/
								if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 1){
									$similarRemedyString = $beforeTheCommaString;
									$similarSymptomString = $afterTheCommaString;	
								}else{
									$similarRemedyString = $afterTheCommaString;
									$similarSymptomString = $beforeTheCommaString;
								}
								$cleanRemedyWithSymptomString = (mb_substr ( $workingString, mb_strlen ( $workingString ) - 1, 1 ) == '.') ? $workingString : $workingString.'.'; 
								$remedyWithSymptomReturnArr = newLookupRemedyWithSymptom($cleanRemedyWithSymptomString, $similarRemedyString, $similarSymptomString);
								if(isset($remedyWithSymptomReturnArr['need_approval']) AND $remedyWithSymptomReturnArr['need_approval'] == 0){
									$variablesArray['needApproval'] = 0;
									$variablesArray['remedyArray'] = array();
									$variablesArray['referenceArray'] = array();
									$variablesArray['aLiteraturquellen'] = array();
									$variablesArray['prueferArray'] = array();
									if(isset($remedyWithSymptomReturnArr['data'][0]['remedy']))
										$variablesArray['remedyArray'] = $remedyWithSymptomReturnArr['data'][0]['remedy'];
									$variablesArray['symptomOfDifferentRemedy'] = (isset($remedyWithSymptomReturnArr['data'][0]['symptom_of_different_remedy'])) ? $remedyWithSymptomReturnArr['data'][0]['symptom_of_different_remedy'] : "";
								}else{
									$variablesArray['needApproval'] = 1;
								}

								if($variablesArray['needApproval'] == 1){
									$variablesArray['referenceWithNoAuthorPriority'] = 0;
									$variablesArray['aaoHyphenPriority'] = 0;
									$variablesArray['hyphenPrueferPriority'] = 0;
									$variablesArray['hyphenReferencePriority'] = 0;
									$variablesArray['moreThanOneTagStringPriority'] = 0;
									$variablesArray['prueferPriority'] = 0;
									$variablesArray['referencePriority'] = 0;
									$variablesArray['remedyPriority'] = 0;
									$variablesArray['remedyWithSymptomPriority'] = 9;
									$variablesArray['partOfSymptomPriority'] = 10;
								}
							}
						}
						else if(($isCommaExist != 0 OR $isSemicolonExist != 0) OR $isDotExist == 1){
							/*
							* 6.3. One or more comma OR one dot
							*
							* 1 = part of symptom
							* 2 = chcek for remedis by spliting by comma
							*/
							$workingString = trim($variablesArray['middleBracketString']);
							if($isCommaExist != 0 OR $isSemicolonExist != 0){
								if (mb_strpos($workingString, ',') !== false)
									$separator = ",";
								else if (mb_strpos($workingString, ';') !== false)
									$separator = ";";
								$expectedRemedyArray = explode($separator, $workingString);
							}else{
								if (mb_strpos($workingString, '.') !== false){
									// Split by dot(.)
									$makeStringToExplode = str_replace('.', '.{#^#}', $workingString);
									$expectedRemedyArray = explode("{#^#}", $makeStringToExplode);
								}
								else
									$expectedRemedyArray[] = $workingString;
							}

							if(!empty($expectedRemedyArray)){
								/* REMEDY START */
								$checkRemedyApprovalStatus = 0;
								foreach ($expectedRemedyArray as $expectedRemedyKey => $expectedRemedyVal) {
									
									if($expectedRemedyVal == "")
										continue;	

									$cleanExpectedRemedyName = trim($expectedRemedyVal);
									$cleanRemedyString = (mb_substr ( $cleanExpectedRemedyName, mb_strlen ( $cleanExpectedRemedyName ) - 1, 1 ) == '.') ? $cleanExpectedRemedyName : $cleanExpectedRemedyName.'.'; 
									$remedyReturnArr = newLookupRemedy($cleanRemedyString);
									if(isset($remedyReturnArr['need_approval']) AND $remedyReturnArr['need_approval'] == 1){
										$checkRemedyApprovalStatus = 1;
										if(!empty($remedyReturnArr['data'])){
											foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
												// custom_in_array(needle, needle_field, array) 
												if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $variablesArray['remedyArray']) != true)
													$variablesArray['remedyArray'][] = $remedyReturnArr['data'][$remedyReturnKey];
											}

										}
										else{
											$dataArr = array();
											$dataArr['remedy_id'] = null;
											$dataArr['name'] = $cleanExpectedRemedyName;
											$dataArr['kuerzel'] = "";
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($dataArr['name'], 'name', $variablesArray['remedyArray']) != true)
												$variablesArray['remedyArray'][] = $dataArr;
										}
									}
									else{
										foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $variablesArray['remedyArray']) != true)
												$variablesArray['remedyArray'][] = $remedyReturnArr['data'][$remedyReturnKey];
										}
									}
								}
								// Setting last operations approval status to main approval checking variable 
								$variablesArray['needApproval'] = $checkRemedyApprovalStatus; 
								/* REMEDY END */
							}

							if($variablesArray['needApproval'] == 1){
								$variablesArray['referenceWithNoAuthorPriority'] = 0;
								$variablesArray['aaoHyphenPriority'] = 0;
								$variablesArray['hyphenPrueferPriority'] = 0;
								$variablesArray['hyphenReferencePriority'] = 0;
								$variablesArray['moreThanOneTagStringPriority'] = 0;
								$variablesArray['prueferPriority'] = 0;
								$variablesArray['referencePriority'] = 0;
								$variablesArray['remedyWithSymptomPriority'] = 0;
								$variablesArray['partOfSymptomPriority'] = 9;
								$variablesArray['remedyPriority'] = 10;
							}
						}
						/* Rule 6(Middle bracket) Conditions END */	
					}
					/* If middle brackets are not null than examining its possibilities END */	
				}
			}
			/* Extracting Pruefer Data and Literaturquellen data End */

			// if( isset($variablesArray['lastBracketedString']) AND $variablesArray['lastBracketedString'] != "" ){
			// 	$variablesArray['searchableText'] = removLastBracketedPart($variablesArray['searchableText'], '(', ')');
			// 	$variablesArray['searchableText'] = removLastBracketedPart($variablesArray['searchableText'], '[', ']');
			// 	// removing bracket brackets data from searchable text
			// 	if(mb_strpos($variablesArray['searchableText'], $variablesArray['lastBracketedString']) !== false){
			// 		$variablesArray['searchableText'] = str_replace($variablesArray['lastBracketedString'], "", $variablesArray['searchableText']);
			// 	}
			// }
			// Removing blank tags
			$variablesArray['searchableText'] = removeBlankTags($variablesArray['searchableText']);
			// Removing blank parentheses
			$variablesArray['searchableText'] = preg_replace('#\(\s*\)#', '', $variablesArray['searchableText']);
			$variablesArray['searchableText'] = str_replace("()", "", $variablesArray['searchableText']);
			// $searchableText = removeBlankParenthesesFormSearchableText($searchableText);
			$variablesArray['searchableText'] = removeBlankTags($variablesArray['searchableText']);
			// Removing blank square brackets
			$variablesArray['searchableText'] = preg_replace('#\[\s*\]#', '', $variablesArray['searchableText']);
			$variablesArray['searchableText'] = str_replace("[]", "", $variablesArray['searchableText']);
			// $searchableText = removeBlankBracketsFormSearchableText($searchableText);
			$variablesArray['searchableText'] = removeBlankTags($variablesArray['searchableText']);

			if(!empty($variablesArray['preDefinedaLiteraturquellen'])) {
				$variablesArray['aLiteraturquellen'] = array_merge($variablesArray['aLiteraturquellen'],$variablesArray['preDefinedaLiteraturquellen']);
			}
			if ($variablesArray['aLiteraturquellen']) {
				$variablesArray['EntnommenAus'] = join ( "\n", $variablesArray['aLiteraturquellen'] );
			}

			// Removeing blank spaces from the ending of the string..
			$tn = strip_tags($variablesArray['searchableText']);
			$symptomStr = removeEndingSpecialCharactersForString($tn);
			$endingFullStopsOrCommasArr = (isset($symptomStr['last_character_array']) AND $symptomStr['last_character_array'] != "") ? $symptomStr['last_character_array'] : array();
			if(!empty($endingFullStopsOrCommasArr)){
				$variablesArray['searchableText'] = removeUnwantedSpacesFromTheEnding($variablesArray['searchableText'], $endingFullStopsOrCommasArr);
			}

			$variablesArray['bracketedString'] = (!empty($variablesArray['allBrackets'])) ? implode(", ", $variablesArray['allBrackets']) : null;
			$variablesArray['middleBracketApprovalString'] = ( isset($variablesArray['middleBracketString']) AND $variablesArray['middleBracketString'] != "" ) ? mysqli_real_escape_string($db, $variablesArray['middleBracketString']) : null;
			$variablesArray['approvableString'] = ( isset($variablesArray['lastBracketedString']) AND $variablesArray['lastBracketedString'] != "" ) ? $variablesArray['lastBracketedString'] : $variablesArray['tagsApprovalString'];
		}
		$returnArr['string'] = $line;
		$returnArr['variablesArray'] = $variablesArray;

		// $returnArr = array(
		// 	'string' => $string,
		// 	'variablesArray' => $variablesArray,
		// );
		return $returnArr;
	}

	function importedStringManipulationProcess($string, $variablesArray){
		global $db;
		global $date;
		global $timeStringEndTagArray;
		$workingString = "";
		$line = $string;
		$returnArr = array(
			'string' => $line,
			'variablesArray' => $variablesArray,
			'isContinue' => 0, // 1=Yes and 0=No
			'isThereMysqlTransactionError' => 0, // 1=Yes and 0=No
		);
		// Pre defined reference section work start
		$lineStringForPreDefinedReference = trim(strtolower(strip_tags($line)));
		if($lineStringForPreDefinedReference == "literature start" || $lineStringForPreDefinedReference == "literatur start"){
			$variablesArray['isPreDefinedReferenceSection'] = 1;
			$returnArr['isContinue'] = 1;
			/* 
			Seting the Flag for Allen concept source import.
			logic: If importing process is folling under the Allen concept source import then "Reset" button will not be available in the questioning process popup. Because 
			i.e. Slight confusion of ideas (after second dose), [22].
			In the above symptom while clicking on the "Reset" button in the questioning popup, it will consider "[22]" as the last bracket string which is not correct.
			*/
			if($variablesArray['masterId'] != ""){
				$updateTempQuelleImportMasterData = "UPDATE temp_quelle_import_master SET is_allen_concept_source_import = 1, stand = NULLIF('".$date."', '') WHERE id = ".$variablesArray['masterId'];
				$db->query($updateTempQuelleImportMasterData);
			}
		}
		if($lineStringForPreDefinedReference == "literature end" || $lineStringForPreDefinedReference == "literatur end"){
			$variablesArray['isPreDefinedReferenceSection'] = 0;
			$returnArr['isContinue'] = 1;
		}
		$returnArr['variablesArray'] = $variablesArray;

		if($returnArr['isContinue'] == 1)
			return $returnArr;

		if($variablesArray['isPreDefinedReferenceSection'] == 1){
			//prover detection
			$directOrderArray = directOrderDetection("P", $line);
			if(isset($directOrderArray["prueferFromParray"]) && count($directOrderArray["prueferFromParray"])>0 ){
				$directOrderProvers = $directOrderArray["prueferFromParray"];
				foreach($directOrderProvers as $proverVal){
					$proverVal =trim($proverVal);
					$proverValWithEndingDot = (mb_substr ( $proverVal, mb_strlen ( $proverVal ) - 1, 1 ) == '.') ? $proverVal : $proverVal.'.'; 
					$cleanPreDefinedPrueferString = rtrim($proverVal, ".");
					$cleanPreDefinedPrueferString = rtrim($cleanPreDefinedPrueferString, ",");
					$cleanPreDefinedPrueferStringForDB = mysqli_real_escape_string($db, $cleanPreDefinedPrueferString);
					$newProverInsertId = "";
					$prueferSearchResult = mysqli_query($db, "SELECT pruefer_id, kuerzel, suchname FROM pruefer WHERE kuerzel LIKE '%".$cleanPreDefinedPrueferStringForDB."%' OR suchname LIKE '%".$cleanPreDefinedPrueferStringForDB."%'");
					if(mysqli_num_rows($prueferSearchResult) > 0){ 
						while($pruferData = mysqli_fetch_array($prueferSearchResult)){
							$kuerzelArr = explode("|", $pruferData['kuerzel']); 
							$trimmedKuerzelArr=array_map('trim',$kuerzelArr);
							if((in_array($proverVal, $trimmedKuerzelArr) OR strtolower(trim($pruferData['suchname'])) == strtolower($proverVal)) OR (in_array($proverValWithEndingDot, $trimmedKuerzelArr) OR strtolower(trim($pruferData['suchname'])) == strtolower($proverValWithEndingDot)) OR (in_array($cleanPreDefinedPrueferString, $trimmedKuerzelArr) OR strtolower(trim($pruferData['suchname'])) == strtolower($cleanPreDefinedPrueferString))){
								$newProverInsertId = $pruferData['pruefer_id'];
								break;
							}
						}
					}
					if($newProverInsertId == ""){
						$cleanAllenPrueferString = mysqli_real_escape_string($db, $proverVal);
						$newProverInsertQuery="INSERT INTO pruefer (kuerzel, nachname, suchname, ersteller_datum) VALUES (NULLIF('".$cleanAllenPrueferString."', ''), NULLIF('".$cleanAllenPrueferString."', ''), NULLIF('".$cleanAllenPrueferString."', ''), '".$date."')";
						$db->query($newProverInsertQuery);
						$newProverInsertId = mysqli_insert_id($db);
					}

					if($newProverInsertId != "")
						array_push($variablesArray['prueferFromParray'], $newProverInsertId);
				}
				$returnArr['variablesArray'] = $variablesArray;
				return $returnArr;
			}
			//prover detection end

			$lineExplodedBySpace = explode(" ", $lineStringForPreDefinedReference);
			$referenceNumber = $lineExplodedBySpace[0];
			$referenceNumber = ($referenceNumber != "") ? preg_replace("/[^A-Za-z0-9 ]/", '', $referenceNumber) : $referenceNumber;
			array_shift($lineExplodedBySpace);
			$preDefinedFullReferenceTxt = implode(" ", $lineExplodedBySpace);
			$preReferenceAutor = "";
			$preReferenceTxt = "";
			$preDefinedFullReferenceInArray = explode(",", $preDefinedFullReferenceTxt);
			if(count($preDefinedFullReferenceInArray) >= 2){
				$preReferenceAutor = trim($preDefinedFullReferenceInArray[0]);
				array_shift($preDefinedFullReferenceInArray);
				$preReferenceTxt = implode(",", $preDefinedFullReferenceInArray);
			}
			if($referenceNumber != "" AND $preReferenceAutor != "" AND $preReferenceTxt != "" AND $preDefinedFullReferenceTxt!= "")
			{
				// $isThereAnyTransactionError = 0;
				try{
					$db->begin_transaction();
					$preDefinedReferenceId = "";
					$preDefinedFullReferenceTxt = mysqli_real_escape_string($db, $preDefinedFullReferenceTxt);
					$referenceCheckQuery = "SELECT reference_id FROM reference WHERE full_reference = '".$preDefinedFullReferenceTxt."' LIMIT 1";
					$referenceExistanceCheck = mysqli_query($db, $referenceCheckQuery);
					if($referenceExistanceCheck){
						if(mysqli_num_rows($referenceExistanceCheck) > 0){
							$existingReferenceRow = mysqli_fetch_assoc($referenceExistanceCheck);
							$preDefinedReferenceId = $existingReferenceRow['reference_id'];
						}else{
							$preReferenceTxt = mysqli_real_escape_string($db, $preReferenceTxt);
							$preReferenceAutor = mysqli_real_escape_string($db, $preReferenceAutor);
							$newReferenceInsertQuery="INSERT INTO reference (full_reference, autor, reference, ersteller_datum) VALUES (NULLIF('".$preDefinedFullReferenceTxt."', ''), NULLIF('".$preReferenceAutor."', ''), NULLIF('".$preReferenceTxt."', ''), '".$date."')";
							$db->query($newReferenceInsertQuery);
							$preDefinedReferenceId = mysqli_insert_id($db);
						}
					}
					if($preDefinedReferenceId != ""){
						//$variablesArray['preDefinedReferenceArray'] = array();
						$variablesArray['preDefinedReferenceArray'][] = array(
							'reference_id' => $preDefinedReferenceId,
							'reference_number' => $referenceNumber,
							'full_reference' => $preDefinedFullReferenceTxt,
							'pruferReferenceArray' => $variablesArray['prueferFromParray']
						);
						$referenceNumberUppercase = strtoupper($referenceNumber);
						if(!array_key_exists($referenceNumber, $variablesArray['preDefinedReferenceNumberArray']))
							$variablesArray['preDefinedReferenceNumberArray'][$referenceNumber] = $preDefinedReferenceId;
						if(!array_key_exists($referenceNumberUppercase, $variablesArray['preDefinedReferenceNumberArray']))
							$variablesArray['preDefinedReferenceNumberArray'][$referenceNumberUppercase] = $preDefinedReferenceId;

						// THIS ARRAY ELEMENT "$variablesArray['prueferFromParray']" NEEDS TO BE EMPTY HERE BECAUSE THIS ARRAY ELEMENT OR KEY IS USED BELOW IN PREDEFIED "@P:" DATA STORAGE.  
						$variablesArray['prueferFromParray'] = array();
						$returnArr['variablesArray'] = $variablesArray;
					}
					$db->commit();
				}catch (Exception $e) {
					$db->rollback();
					$returnArr['isThereMysqlTransactionError'] = 1;
					// $isThereAnyTransactionError = 1;
					return $returnArr;
				}
			}
			// continue;
			$returnArr['isContinue'] = 1;
			$returnArr['variablesArray'] = $variablesArray;
			return $returnArr;
		}
		// Pre defined reference section work end
		$line = strip_tags ( $line, '<b><i><strong><em><u><sup><span><bdi>' ); // <bdi> is a custom tag for GROSS format 
		$line = trim ( str_replace ( '&nbsp;', ' ', htmlentities( $line ) ) );
		$line = html_entity_decode($line);
		// Replacing Colored sentences's tag to our custom tag "<clr>"
		$coloredTextCnt = 0; 
		do { 
			$line = preg_replace("#<span[^>]*style=(\"|')[^>]*color:(.+?);[^>]*(\"|')>(.+?)</span>#is", "<clr style=\"color:$2;\">$4</clr>", $line, -1, $coloredTextCnt ); 
		} while ( $coloredTextCnt > 0 );
		// Replacing Spaced sentences's tag to our custom tag "<ss>"
		$letterSpaceCntV1 = 0; 
		do { 
			$line = preg_replace("#<span[^>]*style=(\"|')[^>]*letter-spacing:[^>]*>(.+?)</span>#is", "<ss>$2</ss>", $line, -1, $letterSpaceCntV1 ); 
		} while ( $letterSpaceCntV1 > 0 );
		$letterSpaceCntV2 = 0; 
		do { 
			$line = preg_replace("#<span[^>]*class=(\"|')text-sperrschrift(\"|')>(.+?)</span>#is", "<ss>$3</ss>", $line, -1, $letterSpaceCntV2 ); 
		} while ( $letterSpaceCntV2 > 0 );
		$grossCnt = 0; 
		do { 
			$line = preg_replace("#<bdi[^>]*class=(\"|')text-gross(\"|')>(.+?)</bdi>#is", "<grss>$3</grss>", $line, -1, $grossCnt ); 
		} while ( $grossCnt > 0 );
		$grossPosrions = getTheTagsContent($line, '<grss>', '</grss>');
		if(!empty($grossPosrions)){
			foreach ($grossPosrions as $grossKey => $grossVal) {
				if($grossVal != ""){
					$uppercasedString = convertTheContentToUppercaseWithHtml($grossVal);
					if($uppercasedString != "")
						$line = str_replace($grossVal, $uppercasedString, $line);
				}
			}
		}
		$line = strip_tags ( $line, '<b><i><strong><em><u><sup><ss><clr>' );
		$NewSymptomNr = 0;
		$line = trim ( $line );
		$cleanline = strip_tags($line);
		// Leerzeile
		if ($cleanline == "" OR mb_strlen($cleanline) < 3) {
			$variablesArray['rownum']++;
			// $rownum ++;
			// continue;
			$returnArr['isContinue'] = 1;
			return $returnArr;	
		}
		$FirstChar = mb_substr ( $cleanline, 0, 1 );
		$LastChar = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 1 );
		$LastTwoChar = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 2 );		
		$code='';
		$param='';
		if($FirstChar == '@'){
			$variablesArray['Beschreibung'] = '';
			$p = mb_strpos ( $cleanline, ':' );
			if ($p > 0) {
				$code = mb_substr ( $cleanline, 1, $p - 1 );
				$param = mb_substr ( $cleanline, $p + 1 );
			} else {
				$code = mb_substr ( $cleanline, 1 );
				$param = '';
			}
			$code = mb_strtoupper ( $code );
			switch ($code) {
				// Graduierung
				case 'G' :
					if(trim(strip_tags($param)) == "END")
						$variablesArray['Graduierung'] = "";
					else
						$variablesArray['Graduierung'] = trim($param);
					break;
				
				// Kapitel, setzt in DS "KapitelID"
				// case 'B' :
				case 'K' :
					if(trim(strip_tags($param)) == "END")
						$variablesArray['BereichID'] = "";
					else
						$variablesArray['BereichID'] = $param;
					break;

				// When user gives chapter information with @KD: command insted of @K: command in the document, then Chapter given through @KD command is always superior, means automatic chapter assignment process will not overright the chapeter information of a symptom that is given through @KD: command but chapter information given through @K command will get overright by the automatic chapter assignment process data.  
				case 'KD' :
					if(trim(strip_tags($param)) == "END") {
						$variablesArray['isKDCommandChapter'] = 0;
						$variablesArray['BereichID'] = "";
					} else {
						$variablesArray['isKDCommandChapter'] = 1;
						$variablesArray['BereichID'] = $param;
					}
					break;
				
				// Seite, setzt in DS "Seite"
				case 'S' :
					$tmp = explode ( '-', $param );
					$variablesArray['SeiteOriginalVon'] = $tmp [0] + 0;
					if (sizeof ( $tmp ) > 1)
						$variablesArray['SeiteOriginalBis'] = $tmp [1] + 0;
					else
						$variablesArray['SeiteOriginalBis'] = $variablesArray['SeiteOriginalVon'];
					break;
				
				// Symptom-Nr., setzt in DS "Symptomnummer"
				case 'N' :
					$NewSymptomNr = $param + 0;
					if ($NewSymptomNr == 0) {
						//$NewSymptomNr = 1;
						$variablesArray['Symptomnummer'] = 0;
					}
					break;
				
				// Literaturquelle, setzt in DS "EntnommenAus"
				case 'L' :
					$variablesArray['aLiteraturquellen'] [] = $param;
					break;
				
				// FuÃnote
				case 'F' :
					$variablesArray['Fussnote'] = $param;
					break;
				
				// Verweiss
				case 'V' :
					$variablesArray['Verweiss'] = $param;
					break;
				
				// @U: (Unklarheit, steht wie auch @F und @L VOR dem einen Symptom, welches betroffen ist)
				case 'U' :
					$variablesArray['Unklarheiten'] = $param;
					break;
				
				// @C: (Kommentar, steht wie auch @F und @L VOR dem einen Symptom, welches betroffen ist)
				case 'C' :
					$variablesArray['Kommentar'] = $param;
					break;
				
				// @P: PrÃ¼fer als KÃ¼rzel
				case 'P' :
					// $PrueferID = $this->LookupPruefer ( $param, $rownum );
					// $PrueferID = $param;
					// if ($PrueferID > 0) {
					// 	$PrueferIDs [] = $PrueferID;
					// } 
					$variablesArray['prueferFromParray'] [] = $param;
					break;
				
				default :
					break;
			}
			//continue;
		} else if ($FirstChar == '(') {
			/* 
			* parseing symptoms nummer which has parentheses between symptom nummer 
			* Eg : (90) Fauleier-Geschmack im Munde, auÃer dem Essen. (Fr. Hahnemann.)
			*/
			$opentag = mb_strpos ( $line, '(' );
			$p = mb_strpos ( $line, ')' );
			if($opentag !== false AND $p !== false){
				$numericStringPart = trim ( mb_substr ( $line, 0, $p + 1 ) );
				if($numericStringPart != ""){
					$onlyNumericStringPart = trim ( mb_substr ( $numericStringPart, $opentag ) );
					$newLineString = str_replace ($onlyNumericStringPart, '', $line);
					$newLineString = removeBlankTags($newLineString);

					$NewSymptomNr = str_replace ( array ( '(', ')' ), '', $onlyNumericStringPart );
					if (is_numeric ( $NewSymptomNr )) {
						$line = trim($newLineString);
						if($NewSymptomNr != $variablesArray['Symptomnummer'])
							$variablesArray['isSymptomNumberMismatch'] = 1;
						$variablesArray['Beschreibung'] = $line;
						$cleanline = strip_tags($line);
					} else {
						$NewSymptomNr = 0;
						$variablesArray['Beschreibung'] = $line;
					}
				}else{
					$NewSymptomNr = 0;
					$variablesArray['Beschreibung'] = $line;
				}
			} else {
				$NewSymptomNr = 0;
				$variablesArray['Beschreibung'] = $line;
			}
			// $p = mb_strpos ( $line, ')' );
			// if ($p > 0) {
			// 	$NewSymptomNr = trim ( mb_substr ( $line, 1, $p - 1 ) );
			// 	if (is_numeric ( $NewSymptomNr )) {
			// 		if($NewSymptomNr != $Symptomnummer)
			// 			$isSymptomNumberMismatch = 1;
			// 		$Beschreibung = trim ( mb_substr ( $line, $p + 1 ) );
			// 		$cleanline = trim ( mb_substr ( $cleanline, $p + 1 ) );
			// 	} else {
			// 		$NewSymptomNr = 0;
			// 		$Beschreibung = $line;
			// 	}
			// }
		} else if($FirstChar == '['){
			/* 
			* parseing symptoms nummer which has parentheses between symptom nummer 
			* Eg : [5] Sad, pusillanimous, full of weariness of life.
			*/
			$opentag = mb_strpos ( $line, '[' );
			$p = mb_strpos ( $line, ']' );
			if($opentag !== false AND $p !== false){
				$numericStringPart = trim ( mb_substr ( $line, 0, $p + 1 ) );
				if($numericStringPart != ""){
					$onlyNumericStringPart = trim ( mb_substr ( $numericStringPart, $opentag ) );
					$newLineString = str_replace ($onlyNumericStringPart, '', $line);
					$newLineString = removeBlankTags($newLineString);

					$NewSymptomNr = str_replace ( array ( '[', ']' ), '', $onlyNumericStringPart );
					if (is_numeric ( $NewSymptomNr )) {
						$line = trim($newLineString);
						if($NewSymptomNr != $variablesArray['Symptomnummer'])
							$variablesArray['isSymptomNumberMismatch'] = 1;
						$variablesArray['Beschreibung'] = $line;
						$cleanline = strip_tags($line);
					} else {
						$NewSymptomNr = 0;
						$variablesArray['Beschreibung'] = $line;
					}
				}else{
					$NewSymptomNr = 0;
					$variablesArray['Beschreibung'] = $line;
				}
			}else{
				$NewSymptomNr = 0;
				$variablesArray['Beschreibung'] = $line;
			}
			// if ($p > 0) {
			// 	$NewSymptomNr = trim ( mb_substr ( $line, 1, $p - 1 ) );
			// 	echo htmlentities($NewSymptomNr);
			// 	if (is_numeric ( $NewSymptomNr )) {
			// 		if($NewSymptomNr != $Symptomnummer)
			// 			$isSymptomNumberMismatch = 1;
			// 		$Beschreibung = trim ( mb_substr ( $line, $p + 1 ) );
			// 		$cleanline = trim ( mb_substr ( $cleanline, $p + 1 ) );
			// 	} else {
			// 		$NewSymptomNr = 0;
			// 		$Beschreibung = $line;
			// 	}
			// }
			// exit;
		} else {
			$isSymptomNum = is_numeric ( $FirstChar );
			$variablesArray['Beschreibung'] = '';		
			if ($isSymptomNum) {
				/* 
				* parseing symptoms nummer which has space between symptom nummer and symptom string 
				* Eg : 30 Merklich vermindertes GehÃ¶r. (n. 30 St.)
				*/
				$p = mb_strpos ( $line, ' ' );
				$num = str_replace ( array (
					':',
					'.', 
					')',
					']' 
				), '', mb_substr ( $line, 0, $p ) );
				if( is_numeric($num) ){
					$NewSymptomNr = $num;
					if($NewSymptomNr != $variablesArray['Symptomnummer'])
						$variablesArray['isSymptomNumberMismatch'] = 1;
					$variablesArray['Beschreibung'] = trim ( mb_substr ( $line, $p + 1 ) );
					$cleanline = trim ( mb_substr ( $cleanline, $p + 1 ) );
				}else{
					/* 
					* parseing symptoms nummer which are attached with Synptom string 
					* Eg : 10DrÃ¼ckender Schmerz in der Stirne.
					*/
					$charCount = 2;
					$NewSymptomNr = $FirstChar;
					while ( $charCount > 0 ) {
						$checkSymptomNumber = mb_substr ( $line, 0, $charCount );
						if( is_numeric($checkSymptomNumber) ){
							$NewSymptomNr = $checkSymptomNumber;
							if($NewSymptomNr != $variablesArray['Symptomnummer'])
								$variablesArray['isSymptomNumberMismatch'] = 1;
							$charCount++;
						}else
							$charCount = 0;
					}

					if (mb_substr($line, 0, mb_strlen($NewSymptomNr)) == $NewSymptomNr) {
						$variablesArray['Beschreibung'] = trim ( mb_substr($line, mb_strlen($NewSymptomNr)) );
						$cleanline = trim ( mb_substr($cleanline, mb_strlen($NewSymptomNr)) );
					}else{
						$variablesArray['Beschreibung'] = $line;
					} 
				}
			} else {
				$NewSymptomNr = 0;
				$variablesArray['Beschreibung'] = $line;
			}
		}
		if ( $NewSymptomNr > 0 ) {
			$variablesArray['Symptomnummer'] = $NewSymptomNr;
		}
		if ($variablesArray['Beschreibung']) {
			$variablesArray['isExcludedInComparison'] = 0;
			if(!empty($variablesArray['excludingSymptomsChaptersArray']) AND $variablesArray['BereichID'] != ""){
				$chapterInLowercase = mb_strtolower(trim($variablesArray['BereichID']));
				if(in_array($chapterInLowercase, $variablesArray['excludingSymptomsChaptersArray'])){
					$variablesArray['isExcludedInComparison'] = 1;
				}
			}
			if($variablesArray['Kommentar'] != ""){
				// Setting the import mask comment for all the symptom
				$variablesArray['Kommentar'] = $variablesArray['Kommentar'].", ".$variablesArray['importComment'];
			} else {
				$variablesArray['Kommentar'] = $variablesArray['importComment'];
			}
			// Comment that is given in the time of creating the source
			if($variablesArray['sourceComment'] != "")
				$variablesArray['Kommentar'] = $variablesArray['Kommentar'].", ".$variablesArray['sourceComment'];

			/* Creating Plain Symptom text */
			$variablesArray['BeschreibungPlain'] = trim ( str_replace ( "\t", '', strip_tags ( $variablesArray['Beschreibung'] ) ) );
			$BeschreibungAsItIs = str_replace ( array (
				'<ss>',
				'</ss>' 
			), array (
				"<span class=\"text-sperrschrift\">",
				"</span>" 
			), $variablesArray['Beschreibung'] );
			$BeschreibungAsItIs = str_replace ( array (
				'<clr',
				'</clr>' 
			), array (
				"<span",
				"</span>" 
			), $BeschreibungAsItIs );
			$line = $variablesArray['Beschreibung'];

			$FirstCharCheck = mb_substr ( trim($line), 0, 1 );
			$FirstOneChar = trim(mb_substr(strip_tags($line), 0, 1));
			$FirstTwoChar = trim(mb_substr(strip_tags($line), 0, 2));
			$FirstThreeChar = trim(mb_substr(strip_tags($line), 0, 3));
			$FirstFourChar = trim(mb_substr(strip_tags($line), 0, 4));
			$FirstFiveChar = trim(mb_substr(strip_tags($line), 0, 5));

			// echo htmlentities($line)." 3rd<br><br>";
			$cleanLineToGetLastChar = rtrim(trim($line), '.');
			$cleanLineToGetLastChar = rtrim(trim($cleanLineToGetLastChar), ',');
			$cleanLineToGetLastChar = rtrim(trim($cleanLineToGetLastChar), ';');
			$LastCharCheck = mb_substr ( trim($cleanLineToGetLastChar), mb_strlen ( trim($cleanLineToGetLastChar) ) - 1 );
			//Last char check for last char with text formats
			$LastCharCheckWithTextFormats = 0;
			$degreeAtEnd = 0;
			$singleTAtEnd = 0;
			$doubleTAtEnd = 0;
			// $degreeOccurrenceFromPlain = mb_strpos ( $variablesArray['BeschreibungPlain'], 'Â°' );
			// if($degreeOccurrenceFromPlain !== false){
			// 	$LastCharCheckWithTextFormats = 1;
			// }

			//checking if the last character is degree
			$plainStringForDegreeCheck = strip_tags(trim($line));
			//checing if the degree is present at the end of the string and only once
			if (preg_match('/^(?!.*Â°.*Â°)[^\n\t]*[.,]? *Â°[.,]?$/', $plainStringForDegreeCheck)) {
				$degreeAtEnd = 1;
			}
			//checking for the t and tt at the end of the string
			// if (preg_match('/Î±[.,]?$/', $plainStringForDegreeCheck)) {
			// 	$singleTAtEnd = 1;
			// }
			// if (preg_match('/Î²[.,]?$/', $plainStringForDegreeCheck)) {
			// 	$doubleTAtEnd = 1;
			// }

			// Count the number of occurance of- *,Â°
			$totalAsterisks = mb_substr_count($line, "*"); 
			$totalDegrees = mb_substr_count($line, "Â°");
			$variablesArray['thetaDiagnosisSymptomWithoutTag'] = "";
			//New PHP variable $multipleCharControl is added to control the double appearance of bar and pi characters inside the bracket contents.
			$multipleCharControl = 0;
			$isParenthesesBracketedString = 0;
			// echo htmlentities($FirstCharCheck)." - ".htmlentities($LastCharCheck)." <br><br>";
			if($FirstFiveChar == "|||||") {
				$multipleCharControl = 1;
				// E.g. |||||symptom strong
				$line = ltrim($line,"|||||");
				//$line = '<bar-five-normal>'.$line.'</bar-five-normal>';
				$thetaDiagnosisSymptomPartArr = thetaDiagnosisOperation($line);
				$thetaDiagnosisSymptomWithTag = $thetaDiagnosisSymptomPartArr["theta-string-part"];
				$variablesArray['thetaDiagnosisSymptomWithoutTag'] = $thetaDiagnosisSymptomPartArr["theta-original-part"];
				$line = $thetaDiagnosisSymptomPartArr["line"];
				$line = '<bar-five-normal>'.$line.'</bar-five-normal>'.$thetaDiagnosisSymptomWithTag;
			} else if($FirstFiveChar == "||||-") {
				$multipleCharControl = 1;
				// E.g. ||||-symptom strong
				$line = ltrim($line,"||||-");
				//$line = '<bar-four-and-half-normal>'.$line.'</bar-four-and-half-normal>';
				$thetaDiagnosisSymptomPartArr = thetaDiagnosisOperation($line);
				$thetaDiagnosisSymptomWithTag = $thetaDiagnosisSymptomPartArr["theta-string-part"];
				$variablesArray['thetaDiagnosisSymptomWithoutTag'] = $thetaDiagnosisSymptomPartArr["theta-original-part"];
				$line = $thetaDiagnosisSymptomPartArr["line"];
				$line = '<bar-four-and-half-normal>'.$line.'</bar-four-and-half-normal>'.$thetaDiagnosisSymptomWithTag;
			} else if($FirstFourChar == "||||") {
				$multipleCharControl = 1;
				// E.g. ||||symptom strong
				$line = ltrim($line,"||||");
				//$line = '<bar-four-normal>'.$line.'</bar-four-normal>';
				$thetaDiagnosisSymptomPartArr = thetaDiagnosisOperation($line);
				$thetaDiagnosisSymptomWithTag = $thetaDiagnosisSymptomPartArr["theta-string-part"];
				$variablesArray['thetaDiagnosisSymptomWithoutTag'] = $thetaDiagnosisSymptomPartArr["theta-original-part"];
				$line = $thetaDiagnosisSymptomPartArr["line"];
				$line = '<bar-four-normal>'.$line.'</bar-four-normal>'.$thetaDiagnosisSymptomWithTag;
			} else if($FirstFourChar == "|||-") {
				$multipleCharControl = 1;
				// E.g. |||-symptom strong
				$line = ltrim($line,"|||-");
				//$line = '<bar-three-and-half-normal>'.$line.'</bar-three-and-half-normal>';
				$thetaDiagnosisSymptomPartArr = thetaDiagnosisOperation($line);
				$thetaDiagnosisSymptomWithTag = $thetaDiagnosisSymptomPartArr["theta-string-part"];
				$variablesArray['thetaDiagnosisSymptomWithoutTag'] = $thetaDiagnosisSymptomPartArr["theta-original-part"];
				$line = $thetaDiagnosisSymptomPartArr["line"];
				$line = '<bar-three-and-half-normal>'.$line.'</bar-three-and-half-normal>'.$thetaDiagnosisSymptomWithTag;
			} else if($FirstThreeChar == "|||") {
				$multipleCharControl = 1;
				// E.g. |||symptom strong
				$line = ltrim($line,"|||");
				//$line = '<bar-three-normal>'.$line.'</bar-three-normal>';
				$thetaDiagnosisSymptomPartArr = thetaDiagnosisOperation($line);
				$thetaDiagnosisSymptomWithTag = $thetaDiagnosisSymptomPartArr["theta-string-part"];
				$variablesArray['thetaDiagnosisSymptomWithoutTag'] = $thetaDiagnosisSymptomPartArr["theta-original-part"];
				$line = $thetaDiagnosisSymptomPartArr["line"];
				$line = '<bar-three-normal>'.$line.'</bar-three-normal>'.$thetaDiagnosisSymptomWithTag;
			} else if($FirstTwoChar == "||") {
				$multipleCharControl = 1;
				// E.g. ||symptom strong
				$line = ltrim($line,"||");
				//$line = '<bar-two-normal>'.$line.'</bar-two-normal>';
				$thetaDiagnosisSymptomPartArr = thetaDiagnosisOperation($line);
				$thetaDiagnosisSymptomWithTag = $thetaDiagnosisSymptomPartArr["theta-string-part"];
				$variablesArray['thetaDiagnosisSymptomWithoutTag'] = $thetaDiagnosisSymptomPartArr["theta-original-part"];
				$line = $thetaDiagnosisSymptomPartArr["line"];
				$line = '<bar-two-normal>'.$line.'</bar-two-normal>'.$thetaDiagnosisSymptomWithTag;
			} else if($FirstOneChar == "|") {
				$multipleCharControl = 1;
				// E.g. |symptom strong
				$line = ltrim($line,"|");
				//$line = '<bar-one-normal>'.$line.'</bar-one-normal>';
				$thetaDiagnosisSymptomPartArr = thetaDiagnosisOperation($line);
				$thetaDiagnosisSymptomWithTag = $thetaDiagnosisSymptomPartArr["theta-string-part"];
				$variablesArray['thetaDiagnosisSymptomWithoutTag'] = $thetaDiagnosisSymptomPartArr["theta-original-part"];
				$line = $thetaDiagnosisSymptomPartArr["line"];
				$line = '<bar-one-normal>'.$line.'</bar-one-normal>'.$thetaDiagnosisSymptomWithTag;
			} else if($FirstOneChar == "Ï") {
				$multipleCharControl = 1;
				// E.g. Ïsymptom strong
				$line = ltrim($line,"Ï");
				//$line = '<pi-normal>'.$line.'</pi-normal>';
				$thetaDiagnosisSymptomPartArr = thetaDiagnosisOperation($line);
				$thetaDiagnosisSymptomWithTag = $thetaDiagnosisSymptomPartArr["theta-string-part"];
				$variablesArray['thetaDiagnosisSymptomWithoutTag'] = $thetaDiagnosisSymptomPartArr["theta-original-part"];
				$line = $thetaDiagnosisSymptomPartArr["line"];
				$line = '<pi-normal>'.$line.'</pi-normal>'.$thetaDiagnosisSymptomWithTag;
			} else if ($FirstCharCheck == "(" AND $LastCharCheck == ")") {
				// Checking if the whole symptom is in bracket or not
				$isParenthesesString = 1;
				/* 
				I have commnted below portion After Nora raise issue on below symptom not detected as paranthses symptom  
				i.e. (Empfindung von Spannen Ã¼ber die Brust bis zum Halse, welche durch Liegen auf dem RÃ¼cken gemindert, durch Gehen vermehrt und im Stehen schmerzhaft wird) (n. 2 St.)
				*/
				// $closingBracketFirstOccurrence = mb_strpos ( $line, ")" );
				// if($closingBracketFirstOccurrence !== false){
				// 	$occurrenceToEndingString = mb_substr($line, $closingBracketFirstOccurrence);
				// 	if($occurrenceToEndingString != "" AND mb_strlen($occurrenceToEndingString) > 2)
				// 		$isParenthesesString = 0;
				// }

				$closingBracketFirstOccurrence = mb_strpos ( $line, ")" );
				if($closingBracketFirstOccurrence !== false){
					$occurrenceToEndingString = mb_substr($line, $closingBracketFirstOccurrence);
					$occurrenceToEndingString = rtrim(trim($occurrenceToEndingString), '.');
					$occurrenceToEndingString = rtrim(trim($occurrenceToEndingString), ',');
					$occurrenceToEndingString = rtrim(trim($occurrenceToEndingString), ';');
					// echo htmlentities($occurrenceToEndingString)." JJJJ<br><br>";
					$parts = preg_split('/\([^)]+\)/', $occurrenceToEndingString, -1, PREG_SPLIT_NO_EMPTY); // In summary, preg_split('/\([^)]+\)/', $occurrenceToEndingString, -1, PREG_SPLIT_NO_EMPTY) splits the input string wherever it finds a pair of parentheses with any characters inside, excluding empty results from the final array.
					// echo "<pre>";
					// print_r($parts);
					$result = [];
					foreach ($parts as $part) {
						if(strip_tags(trim($part)) != ""){
						    if (strpos($part, '(') === false && strpos($part, ')') === false) {
						        $result[] = $part;
						    }
						}
					}
					if(!empty($result)){
						$isParenthesesString = 0;
					}
				}
				// echo htmlentities($isParenthesesString)." IS Pere CHEK<br><br>";
				// echo htmlentities($line)." Before puting in parentheses tag<br><br>";
				// It is format - (Normal)
				if($isParenthesesString == 1){
					$isParenthesesBracketedString = 1;
					$line = '<parentheses-normal>'.$line.'</parentheses-normal>';
				}
				else{
					$line = separateTheApplicableStratingSign($line, '*');
					$line = separateTheApplicableStratingSign($line, 'Â°');
					$line = removeBlankTags($line);

					$line = convertPatternPortions($line, '*', 'asterisk');
					$line = convertPatternPortions($line, 'Â°', 'degree');

					// Structure the non * and Â° portion strings
					$line = structureNonAsteriskAndDegreePortions($line, 'non-asterisk-degree');
				}
				// echo htmlentities($line)."<br><br>";
			} 
			else if($degreeAtEnd == 1 AND $totalDegrees == 1 AND $totalAsterisks == 0)
			{
				// It is format - Kursiv,Â° Normal,Â° Fett,Â° 
				$line = structureEndingWithDegreeFormatString($line, 'endwithdegree');
			}
			else if($singleTAtEnd)
			{	
				// It is format ending with single t.
				$line = structureEndingWithSingleTFormatString($line, 'endwithsinglet');
			}
			else if($doubleTAtEnd)
			{	
				// It is format ending with single tt.
				$line = structureEndingWithDoubleTFormatString($line, 'endwithdoublet');
			}
			// else if($LastCharCheck == "Â°" AND $totalDegrees == 1 AND $totalAsterisks == 0)
			// {
			// 	// It is format - Kursiv,Â° Normal,Â° Fett,Â° 
			// 	$line = structureEndingWithDegreeFormatString($line, 'endwithdegree');
			// 	echo "<br>";
			// 	echo htmlentities($line);
			// } 
			else {
				$line = separateTheApplicableStratingSign($line, '*');
				$line = separateTheApplicableStratingSign($line, 'Â°');
				$line = removeBlankTags($line);
				$thetaDiagnosisSymptomPartArr = thetaDiagnosisOperation($line);
				$variablesArray['thetaDiagnosisSymptomWithoutTag'] = $thetaDiagnosisSymptomPartArr["theta-original-part"];
				$line = convertPatternPortions($line, '*', 'asterisk');
				$line = convertPatternPortions($line, 'Â°', 'degree');
				$line = convertPatternPortions($line, 'Î¸', 'theta');
				// Structure the non * and Â° portion strings

				$line = structureNonAsteriskAndDegreePortions($line, 'non-asterisk-degree');
			}

			$line = removeBlankTags($line);
			$line = removeCustomParentTags($line);
			$line = str_replace ( array (
				'<ss>',
				'</ss>' 
			), array (
				"<span class=\"text-sperrschrift\">",
				"</span>" 
			), $line );
			$line = str_replace ( array (
				'<clr',
				'</clr>' 
			), array (
				"<span",
				"</span>" 
			), $line );
	
			$escapeCustomTags = "<parentheses-normal><bar-one-normal><bar-two-normal><bar-three-normal><bar-four-normal><bar-five-normal><bar-four-and-half-normal><bar-three-and-half-normal><pi-normal><theta-normal><theta-em><degree-at-end><singlet-at-end><doublet-at-end>";
			$parentCustomTagArr = array('endwithdegree', 'asterisk', 'degree', 'non-asterisk-degree', 'asterisk-degree','endwithsinglet','endwithdoublet');
			foreach ($parentCustomTagArr as $tagKey => $tagVal) {
				$escapeCustomTags .= "<".$tagVal."-ssbold>";
				$escapeCustomTags .= "<".$tagVal."-embold>";
				$escapeCustomTags .= "<".$tagVal."-ssem>";
				$escapeCustomTags .= "<".$tagVal."-ss>";
				$escapeCustomTags .= "<".$tagVal."-em>";
				$escapeCustomTags .= "<".$tagVal."-normalgross>";
				$escapeCustomTags .= "<".$tagVal."-normal>";
				$escapeCustomTags .= "<".$tagVal."-bold>";
				$escapeCustomTags .= "<".$tagVal."-grossbold>";
			}
			
			$variablesArray['BeschreibungOriginal'] = strip_tags ( $line, '<b><i><strong><em><u><sup><span>'.$escapeCustomTags );
			$variablesArray['BeschreibungOriginal'] = removeBlankTags($variablesArray['BeschreibungOriginal']);
			$variablesArray['searchableText'] = $variablesArray['BeschreibungOriginal'];

			// conversion of pre define reference number in original symptom version
			foreach ($variablesArray['preDefinedReferenceNumberArray'] as $refNumberKey => $refNumberVal) {
				$searchableReferenceNumber = "[".$refNumberKey."]";
				//$variablesArray['BeschreibungOriginal'] = str_replace($searchableReferenceNumber, "<sup>".$refNumberKey."</sup>", $variablesArray['BeschreibungOriginal']);

				$referenceNumberOccurrence = mb_strpos ($variablesArray['searchableText'], $searchableReferenceNumber);
				if($referenceNumberOccurrence !== false){
					$variablesArray['BeschreibungOriginal'] =  str_replace($searchableReferenceNumber, "", $variablesArray['BeschreibungOriginal']);
					//echo "<br> All New 1: ".htmlentities($variablesArray['BeschreibungOriginal']);
					$variablesArray['BeschreibungOriginal'] = $variablesArray['BeschreibungOriginal']."[".$refNumberKey."]";
					//echo "<br> All New 2: ".htmlentities($variablesArray['BeschreibungOriginal']);
					$variablesArray['BeschreibungOriginal'] = str_replace($searchableReferenceNumber, "<sup>".$refNumberKey."</sup>", $variablesArray['BeschreibungOriginal']);
					//echo "<br> All New: ".htmlentities($variablesArray['BeschreibungOriginal']);
					// removing found reference number sections from this version of symptom
					$variablesArray['searchableText'] = str_replace($searchableReferenceNumber, "", $variablesArray['searchableText']);
					$cleanline = str_replace($searchableReferenceNumber, "", $cleanline);

					$tempPreDefinedReferenceArrKey = get_base_key_in_md_array($refNumberVal, 'reference_id', $variablesArray['preDefinedReferenceArray']);
					if($tempPreDefinedReferenceArrKey !== false){
						$preDefineReferenceReturnArr = $variablesArray['preDefinedReferenceArray'][$tempPreDefinedReferenceArrKey];
						if(!in_array($refNumberVal, $variablesArray['preDefinedSymptomReferenceLinkingArray']))
						{
							$variablesArray['preDefinedSymptomReferenceLinkingArray'][] = $refNumberVal;
							$variablesArray['preDefinedaLiteraturquellen'][] = $variablesArray['preDefinedReferenceArray'][$tempPreDefinedReferenceArrKey]['full_reference'];
							//insertion of provers linked to references
							if(count($variablesArray["preDefinedReferenceArray"][$tempPreDefinedReferenceArrKey]["pruferReferenceArray"])>0){
								foreach($variablesArray["preDefinedReferenceArray"][$tempPreDefinedReferenceArrKey]["pruferReferenceArray"] as $proverValFromRef){
									array_push($variablesArray['preDefinedSymptomPrueferLinkingArray'],$proverValFromRef);
								}
							}
						}
					}
				}
			}
			if($isParenthesesBracketedString == 0){
				// Separating the bracketed parts with their opening and closing tags
				// In other words putting the bracketed parts in with their own opening and closing tags.
				$parOccurrence = mb_strpos ( $variablesArray['BeschreibungOriginal'], "(" );
				if($parOccurrence !== false)
					$variablesArray['BeschreibungOriginal'] = seperateTheBrackedString($variablesArray['BeschreibungOriginal'], "(", ")","", $multipleCharControl); 
				$braOccurrence = mb_strpos ( $variablesArray['BeschreibungOriginal'], "[" );
				if($braOccurrence !== false)
					$variablesArray['BeschreibungOriginal'] = seperateTheBrackedString($variablesArray['BeschreibungOriginal'], "[", "]", "", $multipleCharControl);
			}
			$variablesArray['BeschreibungOriginal'] = removeBlankTags($variablesArray['BeschreibungOriginal']);
			$variablesArray['searchableText'] = $variablesArray['BeschreibungOriginal'];
			// echo htmlentities($variablesArray['BeschreibungOriginal'])." ORGT<br><br>";
			// echo htmlentities($variablesArray['searchableText'])." STXTT<br><br>";
			// Removeing blank spaces from the ending of the string..
			$tempSt = strip_tags($variablesArray['BeschreibungOriginal']);
			$tempSymptomStr = removeEndingSpecialCharactersForString($tempSt);
			$tempEndingFullStopsOrCommasArr = (isset($tempSymptomStr['last_character_array']) AND $tempSymptomStr['last_character_array'] != "") ? $tempSymptomStr['last_character_array'] : array();
			if(!empty($tempEndingFullStopsOrCommasArr)){
				$variablesArray['BeschreibungOriginal'] = removeUnwantedSpacesFromTheEnding($variablesArray['BeschreibungOriginal'], $tempEndingFullStopsOrCommasArr);
			}
			
			// Removing Or properly arranging the sepecial characters at the ending of the string
			// E.g. *The child was intolerably violent and difficult to quiet, (Hnf. Fsjk yhak)  , . 
			$returnCleanlineData = removeEndingSpecialCharactersForString($cleanline);
			$cleanline = (isset($returnCleanlineData['symptom_string']) AND $returnCleanlineData['symptom_string'] != "") ? $returnCleanlineData['symptom_string'] : $cleanline;
			// echo htmlentities($cleanline)." cleanline<br><br>";
			// echo print_r($returnCleanlineData['last_character_array']);
			/* Creating Original Symptom text end */
			
			// As it is symptom text
			$variablesArray['Beschreibung'] = $BeschreibungAsItIs;
			/* Creating Source or as it is Symtom text end */

			/* Find all time data in the entire Symptom string */
			$allTimeStringsArray = getAllTimeData($cleanline, $timeStringEndTagArray);
			if(!empty($allTimeStringsArray)){
				$tempTimeArray = array();
				foreach ($allTimeStringsArray as $tKey => $tVal) {
					$tempTimeStringWordCount = str_word_count($tVal);
					if($tempTimeStringWordCount < 6){
						$tempTimeArray[] = $tVal;
					}
				}
				$variablesArray['timeString'] = (!empty($tempTimeArray)) ? implode(', ', $tempTimeArray) : "";
			}

			// Removing time strings
			$newFirstChar = mb_substr ( $cleanline, 0, 1 );
			$newLastChar = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 1 );
			if($newFirstChar == "(" AND $newLastChar == ")"){
				// Nothing
				$isParenthesesStringTime = 1;
				$closingBracketFirstOccurrenceTime = mb_strpos ( $cleanline, ")" );
				if($closingBracketFirstOccurrenceTime !== false){
					$occurrenceToEndingStringTime = mb_substr($cleanline, $closingBracketFirstOccurrenceTime);
					if($occurrenceToEndingStringTime != "" AND mb_strlen($occurrenceToEndingStringTime) > 2)
						$isParenthesesStringTime = 0;
				}
				if($isParenthesesStringTime == 0){
					if(!empty($allTimeStringsArray)){
						foreach ($allTimeStringsArray as $timeStrKey => $timeStrVal) {
							$timeStrVal = str_replace ( array (
								"(",
								")",
								"[",
								"]" 
							), '', $timeStrVal );
							if(mb_strpos($cleanline, $timeStrVal) !== false)
								$cleanline = str_replace($timeStrVal, "", $cleanline);
							if(mb_strpos($variablesArray['searchableText'], $timeStrVal) !== false)
								$variablesArray['searchableText'] = str_replace($timeStrVal, "", $variablesArray['searchableText']);
						}
					}
				}
			} else {
				if(!empty($allTimeStringsArray)){
					foreach ($allTimeStringsArray as $timeStrKey => $timeStrVal) {
						$timeStrVal = str_replace ( array (
							"(",
							")",
							"[",
							"]" 
						), '', $timeStrVal );
						if(mb_strpos($cleanline, $timeStrVal) !== false)
							$cleanline = str_replace($timeStrVal, "", $cleanline);
						if(mb_strpos($variablesArray['searchableText'], $timeStrVal) !== false)
							$variablesArray['searchableText'] = str_replace($timeStrVal, "", $variablesArray['searchableText']);
					}
				}
			}
			$variablesArray['searchableText'] = removeBlankTags($variablesArray['searchableText']);
			$variablesArray['searchableText'] = preg_replace('#\(\s*\)#', '', $variablesArray['searchableText']);
			$variablesArray['searchableText'] = str_replace("()", "", $variablesArray['searchableText']);

			/* Getting ending bracketed strings */
			$cleanlineNewLastChar = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 1 );
			$FirstCharForBracketCheck = trim(mb_substr($cleanline, 0, 1));
			$lastCharForBracketCheck = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 1 );
			if(($FirstCharForBracketCheck == "(" AND $lastCharForBracketCheck == ")") OR ($FirstCharForBracketCheck == "[" AND $lastCharForBracketCheck == "]")){
				// Nothing here
				$cleanedStringCount1 = substr_count($cleanline, "(");
				$cleanedStringCount2 = substr_count($cleanline, "[");
				if($cleanedStringCount1 > 1){
					if ($cleanlineNewLastChar == ')') {
						$variablesArray['endingBracketsArray'] = getAllEndingBracketedStrings($cleanline, "(", ")");
					} else if($cleanlineNewLastChar == ']') {
						$variablesArray['endingBracketsArray'] = getAllEndingBracketedStrings($cleanline, "[", "]");
					}
				}
				if($cleanedStringCount2 > 1){
					if ($cleanlineNewLastChar == ')') {
						$variablesArray['endingBracketsArray'] = getAllEndingBracketedStrings($cleanline, "(", ")");
					} else if($cleanlineNewLastChar == ']') {
						$variablesArray['endingBracketsArray'] = getAllEndingBracketedStrings($cleanline, "[", "]");
					}
				}
			} else {
				if ($cleanlineNewLastChar == ')') {
					$variablesArray['endingBracketsArray'] = getAllEndingBracketedStrings($cleanline, "(", ")");
				} else if($cleanlineNewLastChar == ']') {
					$variablesArray['endingBracketsArray'] = getAllEndingBracketedStrings($cleanline, "[", "]");
				}
			}

			/* Getting all bracketed strings */
			$allParentheses = getAllbracketedStrings($cleanline, "(", ")");
			$allSquareBrackets = getAllbracketedStrings($cleanline, "[", "]");
			$variablesArray['allBrackets'] = array_merge($allParentheses, $allSquareBrackets);
			if(($FirstCharForBracketCheck == "(" AND $lastCharForBracketCheck == ")") OR ($FirstCharForBracketCheck == "[" AND $lastCharForBracketCheck == "]")){
				// Nothing here
			} else {
				$variablesArray['middleBracketArray'] =array_diff($variablesArray['allBrackets'],$variablesArray['endingBracketsArray']);
			}
			if($isParenthesesBracketedString == 1){
				$variablesArray['allBrackets'] = (isset($variablesArray['endingBracketsArray']) AND !empty($variablesArray['endingBracketsArray'])) ? $variablesArray['endingBracketsArray'] : array();
			}

			/* Extracting Pruefer Data and Literaturquellen data Start */
			if( count($variablesArray['aLiteraturquellen']) > 0 AND  count($variablesArray['prueferFromParray']) > 0 ){
				/* When @L nad @P both are present in a symptom */
				$variablesArray['isPreDefinedTagsApproval'] = 1;
				$ckeckPApproval = 0;
				$tagsApproalStringForPrue = "";
				foreach ($variablesArray['prueferFromParray'] as $prueferPkey => $prueferPval) {
					$prueferPval = trim($prueferPval);
					$tagsApproalStringForPrue .= $prueferPval."{#^#}";

					$cleanPrueferString = (mb_substr ( $prueferPval, mb_strlen ( $prueferPval ) - 1, 1 ) == '.') ? $prueferPval : $prueferPval.'.';
					$prueferReturnArr = lookupPruefer($cleanPrueferString);
					if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
						$ckeckPApproval = 1;

						if(!empty($prueferReturnArr['data'])){
							foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
									$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
							}
						}
						else{
							$dataArr = array();
							$dataArr['pruefer_id'] = null;
							$dataArr['kuerzel'] = null;
							$dataArr['suchname'] = trim($prueferPval);
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($dataArr['suchname'], 'suchname', $variablesArray['prueferArray']) != true)
								$variablesArray['prueferArray'][] = $dataArr;
						}
					}
					else{
						foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
								$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
						}
					}
				}

				/* Literaturquellen data */
				$ckeckRApproval = 0;
				$tagsApproalStringForRef = "";
				foreach ($variablesArray['aLiteraturquellen'] as $refKey => $refVal) {
					$tagsApproalStringForRef .= $refVal."{#^#}";

					$refVal = trim($refVal);
					$referenceReturnArr = lookupLiteratureReference($refVal);
					if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
						$ckeckRApproval = 1;

						if(!empty($referenceReturnArr['data'])){
							foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
								// custom_in_array(needle, needle_field, array)
								if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true)
									$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
							}
						}
						else{
							$fullReferenceInArray = explode(",", $refVal);
							if(count($fullReferenceInArray) >= 2){
								$referenceAutor = trim($fullReferenceInArray[0]);
								array_shift($fullReferenceInArray);
								$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
							}else{
								$referenceAutor = "";
								$referenceTxt = $refVal;
							}
							
							$dataArr = array();
							$dataArr['reference_id'] = null;
							$dataArr['full_reference'] = $refVal;
							$dataArr['autor'] = $referenceAutor;
							$dataArr['reference'] = $referenceTxt;
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($dataArr['full_reference'], 'full_reference', $variablesArray['referenceArray']) != true)
								$variablesArray['referenceArray'][] = $dataArr;
						}

					}else{
						foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
							// custom_in_array(needle, needle_field, array)
							if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
								$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
								$variablesArray['aLiteraturquellen'] [$refKey] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
							}
						}
					}
				}

				if($ckeckPApproval == 1 OR $ckeckRApproval == 1){
					// Making Reference array empty (for not adding in symptom table column) because it's not use have clear it in Direct Order or reinsert correctly.
					$variablesArray['aLiteraturquellen'] = array();
					$variablesArray['referenceArray'] = array();

					$variablesArray['prueferArray'] = array();

					$variablesArray['tagsApprovalString'] = $tagsApproalStringForPrue.$tagsApproalStringForRef;
					$variablesArray['tagsApprovalString'] = rtrim($variablesArray['tagsApprovalString'], "{#^#}");

					$variablesArray['needApproval'] = 1;

					$variablesArray['referencePriority'] = 0;
					$variablesArray['referenceWithNoAuthorPriority'] = 0;
					$variablesArray['remedyWithSymptomPriority'] = 0;
					$variablesArray['partOfSymptomPriority'] = 0;
					$variablesArray['remedyPriority'] = 0;
					$variablesArray['prueferPriority'] = 0;
					$variablesArray['aaoHyphenPriority'] = 0;
					$variablesArray['hyphenPrueferPriority'] = 0;
					$variablesArray['hyphenReferencePriority'] = 0;
					$variablesArray['moreThanOneTagStringPriority'] = 10;
				}else{
					$variablesArray['needApproval'] = 0;
				}
			}
			else if( count($variablesArray['aLiteraturquellen']) > 0 ){
				/* When only @L is present in a symptom */	

				/* Making pruefer Array blank */
				$variablesArray['prueferArray'] = array ();

				/* Literaturquellen data */
				$variablesArray['isPreDefinedTagsApproval'] = 1;
				$tagsApproalStringForRef = ""; 
				$ckeckRApproval = 0;
				foreach ($variablesArray['aLiteraturquellen'] as $refKey => $refVal) {
					$tagsApproalStringForRef .= $refVal."{#^#}";

					$refVal = trim($refVal);
					$referenceReturnArr = lookupLiteratureReference($refVal);
					
					if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
						$ckeckRApproval = 1;

						if(!empty($referenceReturnArr['data'])){
							foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
								if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true)
									$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
							}
						}
						else{
							$fullReferenceInArray = explode(",", $refVal);
							if(count($fullReferenceInArray) >= 2){
								$referenceAutor = trim($fullReferenceInArray[0]);
								array_shift($fullReferenceInArray);
								$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
							}else{
								$referenceAutor = "";
								$referenceTxt = $refVal;
							}
							
							$dataArr = array();
							$dataArr['reference_id'] = null;
							$dataArr['full_reference'] = $refVal;
							$dataArr['autor'] = $referenceAutor;
							$dataArr['reference'] = $referenceTxt;
							if(custom_in_array($dataArr['full_reference'], 'full_reference', $variablesArray['referenceArray']) != true)
								$variablesArray['referenceArray'][] = $dataArr;
						}

					}else{
						foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
							if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
								$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
								$variablesArray['aLiteraturquellen'] [$refKey] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
							}
						}
					}
				}

				if($ckeckRApproval == 1){
					$variablesArray['needApproval'] = 1;

					$variablesArray['aLiteraturquellen'] = array(); 
					$variablesArray['tagsApprovalString'] = $tagsApproalStringForRef;
					$variablesArray['tagsApprovalString'] = rtrim($variablesArray['tagsApprovalString'], "{#^#}");

					$foundReferenceStringArray = explode("{#^#}", $variablesArray['tagsApprovalString']);

					if(count($foundReferenceStringArray) > 1){
						$variablesArray['partOfSymptomPriority'] = 0;
						$variablesArray['remedyWithSymptomPriority'] = 0;
						$variablesArray['prueferPriority'] = 0;
						$variablesArray['remedyPriority'] = 0;
						$variablesArray['referencePriority'] = 0;
						$variablesArray['referenceWithNoAuthorPriority'] = 0;
						$variablesArray['aaoHyphenPriority'] = 0;
						$variablesArray['hyphenPrueferPriority'] = 0;
						$variablesArray['hyphenReferencePriority'] = 0;
						$variablesArray['moreThanOneTagStringPriority'] = 10;
					}else{
						$variablesArray['partOfSymptomPriority'] = 0;
						$variablesArray['remedyWithSymptomPriority'] = 0;
						$variablesArray['prueferPriority'] = 0;
						$variablesArray['remedyPriority'] = 0;
						$variablesArray['aaoHyphenPriority'] = 0;
						$variablesArray['hyphenPrueferPriority'] = 0;
						$variablesArray['hyphenReferencePriority'] = 0;
						$variablesArray['moreThanOneTagStringPriority'] = 0;
						$variablesArray['referenceWithNoAuthorPriority'] = 0;
						$variablesArray['referencePriority'] = 10;
					}
				}else{
					$variablesArray['needApproval'] = 0;
				}
			}
			else if( count($variablesArray['prueferFromParray']) > 0 ){
				/* When only @P is present in a symptom */

				$variablesArray['isPreDefinedTagsApproval'] = 1;
				$ckeckPApproval = 0;
				$tagsApproalStringForPrue = "";
				foreach ($variablesArray['prueferFromParray'] as $prueferPkey => $prueferPval) {
					$prueferPval = trim($prueferPval);
					$tagsApproalStringForPrue .= $prueferPval."{#^#}";

					$cleanPrueferString = (mb_substr ( $prueferPval, mb_strlen ( $prueferPval ) - 1, 1 ) == '.') ? $prueferPval : $prueferPval.'.'; 
					$prueferReturnArr = lookupPruefer($cleanPrueferString);
					if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
						$ckeckPApproval = 1;
						
						if(!empty($prueferReturnArr['data'])){
							foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
								if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
									$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
							}
						}
						else{
							$dataArr = array();
							$dataArr['pruefer_id'] = null;
							$dataArr['kuerzel'] = null;
							$dataArr['suchname'] = trim($prueferPval);
							if(custom_in_array($dataArr['suchname'], 'suchname', $variablesArray['prueferArray']) != true)
								$variablesArray['prueferArray'][] = $dataArr;
						}
					}
					else{
						foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
							if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
								$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
						}
					}
				}

				if($ckeckPApproval == 1){
					$variablesArray['needApproval'] = 1;

					$variablesArray['tagsApprovalString'] = $tagsApproalStringForPrue;
					$variablesArray['tagsApprovalString'] = rtrim($variablesArray['tagsApprovalString'], "{#^#}");

					$foundPrueferStringArray = explode("{#^#}", $variablesArray['tagsApprovalString']);
					if(count($foundPrueferStringArray) > 1){
						$variablesArray['referencePriority'] = 0;
						$variablesArray['referenceWithNoAuthorPriority'] = 0;
						$variablesArray['remedyWithSymptomPriority'] = 0;
						$variablesArray['remedyPriority'] = 0;
						$variablesArray['partOfSymptomPriority'] = 0;
						$variablesArray['prueferPriority'] = 0;
						$variablesArray['aaoHyphenPriority'] = 0;
						$variablesArray['hyphenPrueferPriority'] = 0;
						$variablesArray['hyphenReferencePriority'] = 0;
						$variablesArray['moreThanOneTagStringPriority'] = 10;
					}else{
						$variablesArray['referencePriority'] = 0;
						$variablesArray['referenceWithNoAuthorPriority'] = 0;
						$variablesArray['remedyWithSymptomPriority'] = 0;
						$variablesArray['remedyPriority'] = 0;
						$variablesArray['partOfSymptomPriority'] = 0;
						$variablesArray['moreThanOneTagStringPriority'] = 0;
						$variablesArray['aaoHyphenPriority'] = 0;
						$variablesArray['hyphenPrueferPriority'] = 0;
						$variablesArray['hyphenReferencePriority'] = 0;
						$variablesArray['prueferPriority'] = 10;
					}

				}else{
					$variablesArray['needApproval'] = 0;
				}
			}
			else{
				if(!empty($variablesArray['endingBracketsArray'])){
					/* If ending brackets are not null than examining its possibilities START */
					// $approvalFor (0 = end bracket, 1 = middle bracket)
					$variablesArray['approvalFor'] = 0;
					$variablesArray['lastBracketedString'] = (isset($variablesArray['endingBracketsArray'][0]) AND $variablesArray['endingBracketsArray'][0] != "") ? trim($variablesArray['endingBracketsArray'][0]) : null;
					// echo "<pre>";
					// echo $variablesArray['lastBracketedString']." ==<br>";
					if($variablesArray['lastBracketedString'] != ""){
						// Checking the existance of , - . ; and , a. a. O. and , a.a.O.
						$isAaoExist = mb_strpos($variablesArray['lastBracketedString'], 'a. a. O.');
						$isAaoWithoutSpaceExist = mb_strpos($variablesArray['lastBracketedString'], 'a.a.O.');
						$isAaoAllLowerWithoutSpaceExist = mb_strpos($variablesArray['lastBracketedString'], 'a.a.o.');
						$isAaoAllLowerWithSpaceExist = mb_strpos($variablesArray['lastBracketedString'], 'a. a. o.');
						$isCommaExist = mb_substr_count($variablesArray['lastBracketedString'],",");
						$isHyphenExist = mb_substr_count($variablesArray['lastBracketedString']," - ");
						$isDotExist = mb_substr_count($variablesArray['lastBracketedString'], ".");
						$isSemicolonExist = mb_substr_count($variablesArray['lastBracketedString'],";");

						$isProcessed = 0;
						if(mb_substr(trim(strtolower($variablesArray['lastBracketedString'])), 0, strlen('see')) === 'see'){
							$variablesArray['chapterInformation'] = mysqli_real_escape_string($db, serialize($variablesArray['lastBracketedString']));
							$isProcessed = 1;
						}
						if(mb_substr(trim(strtolower($variablesArray['lastBracketedString'])), 0, strlen('agg.')) === 'agg.'){
							$variablesArray['modality'] = mysqli_real_escape_string($db, serialize($variablesArray['lastBracketedString']));
							$isProcessed = 1;
						}
						if($isProcessed == 0){
							$workingStringBefore = trim($variablesArray['lastBracketedString']);
							if($workingStringBefore == "A.f.d.H."){
								$noAuthorWorkingString = "No Author, Archiv f. d. homÃ¶op. Heilk. V. III.";
								$referenceReturnArr = lookupLiteratureReference($noAuthorWorkingString);
								if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){

									if(!empty($referenceReturnArr['data'])){
										foreach ($referenceReturnArr['data'] as $refKey => $refVal) {
											if(custom_in_array($referenceReturnArr['data'][$refKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true)
												$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$refKey];
										}
									}
									else{
										$fullReferenceInArray = explode(",", $noAuthorWorkingString);
										if(count($fullReferenceInArray) >= 2){
											$referenceAutor = trim($fullReferenceInArray[0]);
											array_shift($fullReferenceInArray);
											$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
										}else{
											$referenceAutor = "No Author";
											$referenceTxt = $workingStringBefore;
										}
										
										$dataArr = array();
										$dataArr['reference_id'] = null;
										$dataArr['full_reference'] = $noAuthorWorkingString;
										$dataArr['autor'] = $referenceAutor;
										$dataArr['reference'] = $referenceTxt;
										if(custom_in_array($dataArr['full_reference'], 'full_reference', $variablesArray['referenceArray']) != true)
											$variablesArray['referenceArray'][] = $dataArr;
									}

								}else{
									$variablesArray['needApproval'] = 0;
									$variablesArray['prueferArray'] = array();
									$variablesArray['remedyArray'] = array();
									foreach ($referenceReturnArr['data'] as $refKey => $refVal) {
										if(custom_in_array($referenceReturnArr['data'][$refKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
											$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$refKey];
											$variablesArray['aLiteraturquellen'] [] = ($referenceReturnArr['data'][$refKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$refKey]['full_reference']) : "";
										}
									}
								}
							}
							else if($isCommaExist == 0 AND $isSemicolonExist == 0 AND $isHyphenExist == 0 AND $isAaoExist === false AND $isAaoWithoutSpaceExist === false AND $isAaoAllLowerWithoutSpaceExist === false AND $isAaoAllLowerWithSpaceExist === false)
							{
								// No Comma AND No Semicolon AND No Hyphen AND No , a. a. O. START
								$workingString = trim($variablesArray['lastBracketedString']);
								$expectedRemedyArray = array();
								/*
								* COMMON LOOKUP SECTION START
								*/
								if (mb_strpos($workingString, '.') !== false){
									// Split by dot(.)
									$makeStringToExplode = str_replace('.', '.{#^#}', $workingString);
									$expectedRemedyArray = explode("{#^#}", $makeStringToExplode);
								}
								else
									$expectedRemedyArray[] = $workingString;
								$expectedRemedyArray = array_filter($expectedRemedyArray);
								/* REMEDY START */
								$checkRemedyApprovalStatus = 0;
								foreach ($expectedRemedyArray as $expectedRemedyKey => $expectedRemedyVal) {
									
									if($expectedRemedyVal == "")
										continue;	

									$cleanExpectedRemedyName = trim($expectedRemedyVal);
									$cleanRemedyString = (mb_substr ( $cleanExpectedRemedyName, mb_strlen ( $cleanExpectedRemedyName ) - 1, 1 ) == '.') ? $cleanExpectedRemedyName : $cleanExpectedRemedyName.'.';
									$remedyReturnArr = newLookupRemedy($cleanRemedyString);
									// print_r($remedyReturnArr);
									if(isset($remedyReturnArr['need_approval']) AND $remedyReturnArr['need_approval'] == 1){
										$checkRemedyApprovalStatus = 1;
										if(!empty($remedyReturnArr['data'])){
											foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
												if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $variablesArray['remedyArray']) != true)
													$variablesArray['remedyArray'][] = $remedyReturnArr['data'][$remedyReturnKey];
											}
										}
										else{
											$dataArr = array();
											$dataArr['remedy_id'] = null;
											$dataArr['name'] = $cleanExpectedRemedyName;
											$dataArr['kuerzel'] = "";
											if(custom_in_array($dataArr['name'], 'name', $variablesArray['remedyArray']) != true)
												$variablesArray['remedyArray'][] = $dataArr;
										}
									}
									else{
										foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
											if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $variablesArray['remedyArray']) != true)
												$variablesArray['remedyArray'][] = $remedyReturnArr['data'][$remedyReturnKey];
										}
									}
								}
								// Setting last operations approval status to main approval checking variable 
								$variablesArray['needApproval'] = $checkRemedyApprovalStatus; 
								/* REMEDY END */
								/* PRUEFER STRAT */
								if($variablesArray['needApproval'] == 1){
									$cleanPrueferString = (mb_substr ( $workingString, mb_strlen ( $workingString ) - 1, 1 ) == '.') ? $workingString : $workingString.'.'; 
									$prueferReturnArr = lookupPruefer($cleanPrueferString);
									if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
										if(!empty($prueferReturnArr['data'])){
											foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
												if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
													$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
											}
										}else{
											$dataArr = array();
											$dataArr['pruefer_id'] = null;
											$dataArr['kuerzel'] = null;
											$dataArr['suchname'] = $workingString;
											if(custom_in_array($dataArr['suchname'], 'suchname', $variablesArray['prueferArray']) != true)
												$variablesArray['prueferArray'][] = $dataArr;
										}
									}
									else{
										$variablesArray['prueferArray'] = array();
										$variablesArray['needApproval'] = 0;
										$variablesArray['remedyArray'] = array();
										foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
											if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
												$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
										}
									}
								}

								if($variablesArray['needApproval'] == 1){
									// Check multiple prufers
									$checkPrueferApprovalStatus = 0;
									foreach ($expectedRemedyArray as $expectedPrueferKey => $expectedPrueferVal) {
										if($expectedPrueferVal == "")
											continue;
										$cleanPrueferString = trim($expectedPrueferVal); 
										$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
										$prueferReturnArr = lookupPruefer($cleanPrueferString);
										if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
											$checkPrueferApprovalStatus = 1;
											if(!empty($prueferReturnArr['data'])){
												foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
													if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
														$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
												}
											}
											else
											{
												$dataArr = array();
												$dataArr['pruefer_id'] = null;
												$dataArr['kuerzel'] = null;
												$dataArr['suchname'] = $cleanPrueferString;
												if(custom_in_array($dataArr['suchname'], 'suchname', $variablesArray['prueferArray']) != true)
													$variablesArray['prueferArray'][] = $dataArr;
											}
										}
										else{
											$variablesArray['remedyArray'] = array();
											$variablesArray['referenceArray'] = array();
											$variablesArray['aLiteraturquellen'] = array();
											foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
												if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
													$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
											}
										}	
									}

									$variablesArray['needApproval'] = $checkPrueferApprovalStatus;
									// Check multiple prufers end	
								}
								/* PRUEFER END */

								/* REFERENCE WITH NO AUTHOR START */
								if($variablesArray['needApproval'] == 1){
									$noAuthorWorkingString = "No Author, ".trim($workingString);
									$referenceReturnArr = lookupLiteratureReference($noAuthorWorkingString);
									if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){

										if(!empty($referenceReturnArr['data'])){
											foreach ($referenceReturnArr['data'] as $refKey => $refVal) {
												if(custom_in_array($referenceReturnArr['data'][$refKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true)
													$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$refKey];
											}
										}
										else{
											$fullReferenceInArray = explode(",", $noAuthorWorkingString);
											if(count($fullReferenceInArray) >= 2){
												$referenceAutor = trim($fullReferenceInArray[0]);
												array_shift($fullReferenceInArray);
												$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
											}else{
												$referenceAutor = "No Author";
												$referenceTxt = $workingString;
											}
											
											$dataArr = array();
											$dataArr['reference_id'] = null;
											$dataArr['full_reference'] = $noAuthorWorkingString;
											$dataArr['autor'] = $referenceAutor;
											$dataArr['reference'] = $referenceTxt;
											if(custom_in_array($dataArr['full_reference'], 'full_reference', $variablesArray['referenceArray']) != true)
												$variablesArray['referenceArray'][] = $dataArr;
										}

									}else{
										$variablesArray['needApproval'] = 0;
										$variablesArray['prueferArray'] = array();
										$variablesArray['remedyArray'] = array();
										foreach ($referenceReturnArr['data'] as $refKey => $refVal) {
											if(custom_in_array($referenceReturnArr['data'][$refKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
												$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$refKey];
												$variablesArray['aLiteraturquellen'] [] = ($referenceReturnArr['data'][$refKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$refKey]['full_reference']) : "";
											}
										}
									}
								}
								/* REFERENCE WITH NO AUTHOR END */

								/*
								* COMMON LOOKUP SECTION END
								*/

								$wordsInLastString = explode(" ", $variablesArray['lastBracketedString']);
								if(!empty($wordsInLastString)){

									if(count($wordsInLastString) == 1){
										/*
										* (A) SINGLE WORD START
										*/
										
										if($isDotExist != 0){
											// Single word has dot START
											if( isFirstCharacterUppercase($workingString) === true){
												/*
												* (A1) If the word + dot has uppercase (I mean only the first character is uppercase)
												*
												* 1 = chcek for remedy
												* 2 = chcek for part of symptom
												* 3 = chcek for pruefer
												*/
												if($variablesArray['needApproval'] == 1){
													$variablesArray['referencePriority'] = 0;
													$variablesArray['referenceWithNoAuthorPriority'] = 0;
													$variablesArray['remedyWithSymptomPriority'] = 0;
													$variablesArray['aaoHyphenPriority'] = 0;
													$variablesArray['hyphenPrueferPriority'] = 0;
													$variablesArray['hyphenReferencePriority'] = 0;
													$variablesArray['moreThanOneTagStringPriority'] = 0;
													$variablesArray['remedyPriority'] = 8;
													$variablesArray['partOfSymptomPriority'] = 9;
													$variablesArray['prueferPriority'] = 10;
												}
											}else{
												/*
												* (A2) If the word + dot is lowercase
												*
												* 1 = chcek for part of symptom
												* 2 = chcek for remedy
												*/
												if($variablesArray['needApproval'] == 1){
													// As we are not going to ask Pruefer Question, making $prueferArray array empty and $prueferPriority = 0
													$variablesArray['prueferArray'] = array();
													$variablesArray['referencePriority'] = 0;
													$variablesArray['referenceWithNoAuthorPriority'] = 0;
													$variablesArray['remedyWithSymptomPriority'] = 0;
													$variablesArray['prueferPriority'] = 0;
													$variablesArray['aaoHyphenPriority'] = 0;
													$variablesArray['hyphenPrueferPriority'] = 0;
													$variablesArray['hyphenReferencePriority'] = 0;
													$variablesArray['moreThanOneTagStringPriority'] = 0;
													$variablesArray['partOfSymptomPriority'] = 9;
													$variablesArray['remedyPriority'] = 10;
												}
											}
											// Single word has dot END
										}else{
											// Single word don't have any dot START
											if( isFirstCharacterUppercase($workingString) === true){
												/*
												* (A4) Single word uppercase without dot (I mean only the first character is uppercase)
												*
												* 1 = chcek for remedy
												* 2 = chcek for part of symptom
												* 3 = chcek for pruefer
												*/
												if($variablesArray['needApproval'] == 1){
													$variablesArray['referencePriority'] = 0;
													$variablesArray['referenceWithNoAuthorPriority'] = 0;
													$variablesArray['remedyWithSymptomPriority'] = 0;
													$variablesArray['aaoHyphenPriority'] = 0;
													$variablesArray['hyphenPrueferPriority'] = 0;
													$variablesArray['hyphenReferencePriority'] = 0;
													$variablesArray['moreThanOneTagStringPriority'] = 0;
													$variablesArray['remedyPriority'] = 8;
													$variablesArray['partOfSymptomPriority'] = 9;
													$variablesArray['prueferPriority'] = 10;
												}
											}else{
												/*
												* (A3) Single word lowercase without dot
												*
												* 1 = chcek for part of symptom
												* 2 = chcek for remedy
												* 3 = chcek for pruefer
												*/
												if($variablesArray['needApproval'] == 1){
													$variablesArray['referencePriority'] = 0;
													$variablesArray['referenceWithNoAuthorPriority'] = 0;
													$variablesArray['remedyWithSymptomPriority'] = 0;
													$variablesArray['aaoHyphenPriority'] = 0;
													$variablesArray['hyphenPrueferPriority'] = 0;
													$variablesArray['hyphenReferencePriority'] = 0;
													$variablesArray['moreThanOneTagStringPriority'] = 0;
													$variablesArray['partOfSymptomPriority'] = 8;
													$variablesArray['remedyPriority'] = 9;
													$variablesArray['prueferPriority'] = 10;
												}
											}
											// Single word don't have any dot END
										}

										/*
										* (A) SINGLE WORD END
										*/
									}
									else
									{
										/* 
										* (B) MORE THAN ONE WORD (case insensitive i.e., upper or lower case does not matter) START 
										*/

										if($isDotExist != 0){
											/*
											* (B1) Words have one or more than one dot(s)
											*
											* 1 = chcek for part of symptom
											* 2 = chcek for n remedies splited by dot(.)
											* 3 = chcek for pruefer
											* 4 = chcek for reference with no author
											*/

											if($variablesArray['needApproval'] == 1){
												$variablesArray['remedyWithSymptomPriority'] = 0;
												$variablesArray['aaoHyphenPriority'] = 0;
												$variablesArray['hyphenPrueferPriority'] = 0;
												$variablesArray['hyphenReferencePriority'] = 0;
												$variablesArray['moreThanOneTagStringPriority'] = 0;
												$variablesArray['referencePriority'] = 0;
												$variablesArray['partOfSymptomPriority'] = 7;
												$variablesArray['remedyPriority'] = 8;
												$variablesArray['prueferPriority'] = 9;
												$variablesArray['referenceWithNoAuthorPriority'] = 10;
											}

										}else{
											/*
											* (B1) Words have NO dot(s)
											*
											* 1 = chcek for part of symptom
											* 2 = chcek for remedy
											* 3 = chcek for pruefer
											*/

											if($variablesArray['needApproval'] == 1){
												$variablesArray['referencePriority'] = 0;
												$variablesArray['referenceWithNoAuthorPriority'] = 0;
												$variablesArray['remedyWithSymptomPriority'] = 0;
												$variablesArray['aaoHyphenPriority'] = 0;
												$variablesArray['hyphenPrueferPriority'] = 0;
												$variablesArray['hyphenReferencePriority'] = 0;
												$variablesArray['moreThanOneTagStringPriority'] = 0;
												$variablesArray['partOfSymptomPriority'] = 8;
												$variablesArray['remedyPriority'] = 9;
												$variablesArray['prueferPriority'] = 10;
											}
										}

										/* 
										* (B) MORE THAN ONE WORD (case insensitive i.e., upper or lower case does not matter) END 
										*/
									}

								}
								// No Comma AND No Semicolon AND No Hyphen AND No , a. a. O. END
							}
							else if(($isCommaExist != 0 OR $isSemicolonExist != 0) AND $isHyphenExist == 0 AND $isAaoExist === false AND $isAaoWithoutSpaceExist === false AND $isAaoAllLowerWithoutSpaceExist === false AND $isAaoAllLowerWithSpaceExist === false)
							{
								// echo "Hello 2<pre><br>";
								// With Comma OR Semicolon AND NO Hyphen AND No , a. a. O. START
								if (mb_strpos($variablesArray['lastBracketedString'], ',') !== false) 
									$separator = ",";
								else
									$separator = ";";

								$commaFirstOccurrence = mb_stripos ( $variablesArray['lastBracketedString'], $separator );
								$beforeTheCommaString = trim( mb_substr ( $variablesArray['lastBracketedString'], 0, $commaFirstOccurrence ) );
								$afterTheCommaString = trim( ltrim( mb_substr ( $variablesArray['lastBracketedString'], $commaFirstOccurrence ), $separator ));
								$beforeTheCommaStringInArray = explode(" ", $beforeTheCommaString);
								$afterTheCommaStringInArray = explode(" ", $afterTheCommaString);

								$isDotExistInBeforeTheCommaString = mb_substr_count($beforeTheCommaString,".");
								$isDotExistInAfterTheCommaString = mb_substr_count($afterTheCommaString,".");
								
								$upperCaseCheckInBeforeTheCommaStr = isThereAnyUppercase($beforeTheCommaString);
								$upperCaseCheckInAfterTheCommaStr = isThereAnyUppercase($afterTheCommaString);
								$isFirstCharUpperBeforeTheCommaStr = isFirstCharacterUppercase($beforeTheCommaString);

								$workingString = trim($variablesArray['lastBracketedString']);

								/*
								* COMMON LOOKUP SECTION START
								*/

								/* REMEDY START */
								$checkRemedyApprovalStatus = 0;
								$expectedRemedyArray = explode($separator, $workingString);
								foreach ($expectedRemedyArray as $expectedRemedyKey => $expectedRemedyVal) {
									
									if($expectedRemedyVal == "")
										continue;	

									$cleanExpectedRemedyName = trim($expectedRemedyVal);
									$cleanRemedyString = (mb_substr ( $cleanExpectedRemedyName, mb_strlen ( $cleanExpectedRemedyName ) - 1, 1 ) == '.') ? $cleanExpectedRemedyName : $cleanExpectedRemedyName.'.'; 
									$remedyReturnArr = newLookupRemedy($cleanRemedyString);
									if(isset($remedyReturnArr['need_approval']) AND $remedyReturnArr['need_approval'] == 1){
										$checkRemedyApprovalStatus = 1;
										if(!empty($remedyReturnArr['data'])){
											foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
												// custom_in_array(needle, needle_field, array) 
												if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $variablesArray['remedyArray']) != true)
													$variablesArray['remedyArray'][] = $remedyReturnArr['data'][$remedyReturnKey];
											}

										}
										else{
											$dataArr = array();
											$dataArr['remedy_id'] = null;
											$dataArr['name'] = $cleanExpectedRemedyName;
											$dataArr['kuerzel'] = "";
											if(custom_in_array($dataArr['name'], 'name', $variablesArray['remedyArray']) != true)
												$variablesArray['remedyArray'][] = $dataArr;
										}
									}
									else{
										foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
											if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $variablesArray['remedyArray']) != true)
												$variablesArray['remedyArray'][] = $remedyReturnArr['data'][$remedyReturnKey];
										}
									}
								}
								// Setting last operations approval status to main approval checking variable 
								$variablesArray['needApproval'] = $checkRemedyApprovalStatus; 
								/* REMEDY END */

								/* REFERENCE START */
								if($variablesArray['needApproval'] == 1){
									$referenceReturnArr = lookupLiteratureReference($workingString);
									if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){

										if(!empty($referenceReturnArr['data'])){
											foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
												if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true)
													$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
											}
										}
										else{
											$fullReferenceInArray = explode(",", $workingString);
											if(count($fullReferenceInArray) >= 2){
												$referenceAutor = trim($fullReferenceInArray[0]);
												array_shift($fullReferenceInArray);
												$referenceTxt = rtrim(implode(",", $fullReferenceInArray), ",");
											}else{
												$referenceAutor = "";
												$referenceTxt = $workingString;
											}
											
											$dataArr = array();
											$dataArr['reference_id'] = null;
											$dataArr['full_reference'] = $workingString;
											$dataArr['autor'] = $referenceAutor;
											$dataArr['reference'] = $referenceTxt;
											if(custom_in_array($dataArr['full_reference'], 'full_reference', $variablesArray['referenceArray']) != true)
												$variablesArray['referenceArray'][] = $dataArr;
										}

									}else{
										$variablesArray['needApproval'] = 0;
										$variablesArray['remedyArray'] = array();
										foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
											if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
												$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
												$variablesArray['aLiteraturquellen'] [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
											}	
										}
									}
								}
								/* REFERENCE END */

								/* PRUEFER START */
								if($variablesArray['needApproval'] == 1){
									$checkPrueferApprovalStatus = 0;
									$expectedPruefersArray = explode($separator, $workingString);
									foreach ($expectedPruefersArray as $expectedPrueferKey => $expectedPrueferVal) {
										if($expectedPrueferVal == "")
											continue;

										$cleanPrueferString = trim($expectedPrueferVal); 
										$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
										$prueferReturnArr = lookupPruefer($cleanPrueferString);
										if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
											$checkPrueferApprovalStatus = 1;
											if(!empty($prueferReturnArr['data'])){
												foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
													if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
														$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
												}
											}
											else{
												$dataArr = array();
												$dataArr['pruefer_id'] = null;
												$dataArr['kuerzel'] = null;
												$dataArr['suchname'] = $cleanPrueferString;
												if(custom_in_array($dataArr['suchname'], 'suchname', $variablesArray['prueferArray']) != true)
													$variablesArray['prueferArray'][] = $dataArr;
											}
										}
										else{
											$variablesArray['remedyArray'] = array();
											$variablesArray['referenceArray'] = array();
											$variablesArray['aLiteraturquellen'] = array();
											foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
												if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
													$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
											}
										}	
									}

									$variablesArray['needApproval'] = $checkPrueferApprovalStatus; 
								}
								/* PRUEFER END */
								/*
								* COMMON LOOKUP SECTION END
								*/

								/* Rule 2 Conditions START */
								if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString != 0 AND $isDotExistInAfterTheCommaString !=0){
									/*
									* 2.1 Single word + dot before the comma and one or more words + dot after comma (no matter if upper or lower case)
									*
									* 1 = chcek for remedis by spliting by comma
									*/

									if($variablesArray['needApproval'] == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 0;
										$variablesArray['referencePriority'] = 0;
										$variablesArray['remedyPriority'] = 10;
									}

								}else if($isCommaExist == 1 AND ((count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 1) OR (count($afterTheCommaStringInArray) == 1 AND $isDotExistInAfterTheCommaString == 1))){
									/*
									* 2.2. Single word + dot before the comma or after a comma (only one dot and one comma)
									*
									* 1 = check for remedy with symptom text (Eg: Opi., during the day)(Eg: small boils in crops, Sulph.)
									* 2 = part of symptom
									*/
									if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 1){
										$similarRemedyString = $beforeTheCommaString;
										$similarSymptomString = $afterTheCommaString;	
									}else{
										$similarRemedyString = $afterTheCommaString;
										$similarSymptomString = $beforeTheCommaString;
									}
									$cleanRemedyWithSymptomString = (mb_substr ( $workingString, mb_strlen ( $workingString ) - 1, 1 ) == '.') ? $workingString : $workingString.'.'; 
									$remedyWithSymptomReturnArr = newLookupRemedyWithSymptom($cleanRemedyWithSymptomString, $similarRemedyString, $similarSymptomString);
									if(isset($remedyWithSymptomReturnArr['need_approval']) AND $remedyWithSymptomReturnArr['need_approval'] == 0){
										$variablesArray['needApproval'] = 0;
										$variablesArray['remedyArray'] = array();
										$variablesArray['referenceArray'] = array();
										$variablesArray['aLiteraturquellen'] = array();
										$variablesArray['prueferArray'] = array();
										if(isset($remedyWithSymptomReturnArr['data'][0]['remedy']))
											$variablesArray['remedyArray'] = $remedyWithSymptomReturnArr['data'][0]['remedy'];
										$variablesArray['symptomOfDifferentRemedy'] = (isset($remedyWithSymptomReturnArr['data'][0]['symptom_of_different_remedy'])) ? $remedyWithSymptomReturnArr['data'][0]['symptom_of_different_remedy'] : "";
									}else{
										$variablesArray['needApproval'] = 1;
									}

									if($variablesArray['needApproval'] == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['referencePriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 9;
										$variablesArray['partOfSymptomPriority'] = 10;
									}

								}else if(count($beforeTheCommaStringInArray) > 1 AND $upperCaseCheckInBeforeTheCommaStr === false AND $isDotExist == 0 AND count($afterTheCommaStringInArray) > 1){
									/*
									* 2.3. More than one word before comma in lower case (no dots) and no single word + dot in the bracket
									*
									* 1 = part of symptom
									*/

									if($variablesArray['needApproval'] == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['referencePriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 10;
									}
								}else if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 0 AND $isFirstCharUpperBeforeTheCommaStr === true){ 
									/*
									* 2.4. Single word upper case without dot before the comma
									*
									* 1 = check for reference
									* 2 = part of symptom
									* 3 = chcek for remedis by spliting by comma
									* 4 = pruefer
									*/

									if($variablesArray['needApproval'] == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['referencePriority'] = 7;
										$variablesArray['partOfSymptomPriority'] = 8;
										$variablesArray['remedyPriority'] = 9;
										$variablesArray['prueferPriority'] = 10;
									}
								}else if($upperCaseCheckInBeforeTheCommaStr === false AND $isDotExist == 0){
									/*
									* 2.5. One or more words lower case without dot before the comma (no dot in the bracket part)
									*
									* 1 = part of symptom
									*/

									if($variablesArray['needApproval'] == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['referencePriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 10;
									}
								}else if(count($beforeTheCommaStringInArray) > 1 AND $isFirstCharUpperBeforeTheCommaStr === true AND $isDotExistInBeforeTheCommaString != 0 ){
									/*
									* 2.6. More than one word with at least one dot before the comma(all words upper case)
									*
									* 1 = check for reference
									* 2 = check for pruefer
									* 3 = chcek for remedis by spliting by comma
									*/

									if($variablesArray['needApproval'] == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 0;
										$variablesArray['referencePriority'] = 8;
										$variablesArray['prueferPriority'] = 9;
										$variablesArray['remedyPriority'] = 10;
									}
								}else if(count($beforeTheCommaStringInArray) > 1 AND $isFirstCharUpperBeforeTheCommaStr === true AND $isDotExistInBeforeTheCommaString == 0){
									/*
									* 2.7. More than one word (no dots) before comma (all words upper case)
									*
									* 1 = check for reference
									* 2 = check for pruefer
									*/

									if($variablesArray['needApproval'] == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['referencePriority'] = 9;
										$variablesArray['prueferPriority'] = 10;
									}
								}else if(count($beforeTheCommaStringInArray) > 1 AND $isDotExistInBeforeTheCommaString == 0 AND $upperCaseCheckInBeforeTheCommaStr === true){
									/*
									* 2.8. More than one word mixed lower & upper case (no dots) before comma(all the words cannot be in one case)
									*
									* 1 = part of symptom
									* 2 = check for reference
									*/
									if($variablesArray['needApproval'] == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 9;
										$variablesArray['referencePriority'] = 10;
									}
								}else if(count($beforeTheCommaStringInArray) > 1 AND $upperCaseCheckInBeforeTheCommaStr === true AND $isDotExistInBeforeTheCommaString != 0){
									/*
									* 2.9. More than one word mixed lower & upper case with at least one dotbefore comma(all the words cannot be in one case)
									*
									* 1 = chcek for remedis by spliting by comma
									* 2 = check for reference
									*/ 

									if($variablesArray['needApproval'] == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 0;
										$variablesArray['remedyPriority'] = 9;
										$variablesArray['referencePriority'] = 10;
									}
								}
								/* Rule 2 Conditions END */

								// With Comma OR Semicolon AND NO Hyphen AND No , a. a. O. END
							}
							else if(($isAaoExist !== false OR $isAaoWithoutSpaceExist !== false OR $isAaoAllLowerWithoutSpaceExist !== false OR $isAaoAllLowerWithSpaceExist !== false) AND $isHyphenExist != 0)
							{
								// When string has both ", a. a. O." and hyphen START
								$workingString = trim($variablesArray['lastBracketedString']);
								$eachElement = explode(" - ", $workingString); 
								$variablesArray['referenceArray'] = array();
								$variablesArray['aLiteraturquellen'] = array();
								$variablesArray['prueferArray'] = array();
								$countUnknownElement = 0;
								foreach ($eachElement as $elementKey => $elementVal) {
									$innerApprovalChecking = 0;
									// Lookup in same import data 
									$elementString = str_replace("a. a. O.", "{#^#}", $elementVal);
									$elementString = str_replace("a.a.O.", "{#^#}", $elementString);
									$elementString = str_replace("a.a.o.", "{#^#}", $elementString);
									$elementString = str_replace("a. a. o.", "{#^#}", $elementString);
									$searchAuthorPreName = trim($elementString);
									$aaoPosition = mb_strpos($searchAuthorPreName, '{#^#}');
									if($aaoPosition !== false){
										$searchAuthorPreName = mb_substr($searchAuthorPreName, 0, $aaoPosition);
									}
									$searchAuthorPreName = str_replace("{#^#}", "", $searchAuthorPreName);
									$searchAuthorName = trim($searchAuthorPreName);

									if($searchAuthorName != ""){
										if($variablesArray['masterId'] != ""){
											/* 
											* Check the last appearence of this elemet in temp_approved_pruefer and temp_approved_reference table
											* if no match data found than "aao_hyphen_priority" question will be ask
											*/
											// Check reference
											$cleanReferenceString = trim($searchAuthorName);
											$referenceReturnArr = lookupReferenceInCurrentImport($cleanReferenceString, $variablesArray['masterId'], null);
											if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
												$innerApprovalChecking = 1;
											}else{
												$innerApprovalChecking = 0;
												foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
													if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
														$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
														$variablesArray['aLiteraturquellen'] [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
													}	
												}
											}

											if($innerApprovalChecking == 1){
												// Checking pruefer
												$cleanPrueferString = trim($searchAuthorName); 
												$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
												$prueferReturnArr = lookupPrueferInCurrentImport($cleanPrueferString, $variablesArray['masterId'], null);
												if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
													$innerApprovalChecking = 1;
												}
												else{
													$innerApprovalChecking = 0;
													foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
														if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
															$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
													}
												}
											}
										} else {
											$innerApprovalChecking = 1;
										}

										// Normal lookup
										// Checking Reference
										if($innerApprovalChecking == 1){
											$cleanReferenceString = trim($searchAuthorName);
											$referenceReturnArr = lookupLiteratureReference($cleanReferenceString);
											if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
												$innerApprovalChecking = 1;
												if(!empty($referenceReturnArr['data'])){
													foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
														if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
															$referenceReturnArr['data'][$referenceReturnKey]['is_one_unknown_element_in_hyphen'] = 1;
															$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
														}
													}
												}
											}else{
												$innerApprovalChecking = 0;
												foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
													if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
														$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
														$variablesArray['aLiteraturquellen'] [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
													}	
												}
											}
										}

										// Check pruefer
										if($innerApprovalChecking == 1){
											$cleanPrueferString = trim($searchAuthorName); 
											$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
											$prueferReturnArr = lookupPruefer($cleanPrueferString);
											if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
												$innerApprovalChecking = 1;
												if(!empty($prueferReturnArr['data'])){
													foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
														if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true){
															$prueferReturnArr['data'][$prueferReturnKey]['is_one_unknown_element_in_hyphen'] = 1;
															$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
														}
													}
												}
											}
											else{
												$innerApprovalChecking = 0;
												foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
													if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
														$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
												}
											}
										}
									}

									// If unknown Data found incrementing the counter and setting the element value to $hyphenApprovalString
									if($innerApprovalChecking == 1){
										$countUnknownElement++;
										$variablesArray['hyphenApprovalString'] = trim($elementVal);
									}
								}

								// Set need approval value if unknown data found
								if($countUnknownElement > 0){
									$variablesArray['needApproval'] = 1;
									if($countUnknownElement != 1)
										$variablesArray['hyphenApprovalString'] = "";
								}

								/*
								* Rule 3 Last bracket words:  â, a. a. O.â or ", a.a.O." and Hyphen (hyphenhasspacebeforeand after ( - )) (whenbothexist)
								*
								* 1 = Unknown data found with a. a. O. or Hyphen( - )
								*/ 
								if($variablesArray['needApproval'] == 1){
									if($countUnknownElement == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['referencePriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 9;
										$variablesArray['hyphenPrueferPriority'] = 10;
									}else{
										// Making pruefer and reference array empty because these elements will be cleared by direct oredr or by correcting the symptom string. Also seting aao_hyphen_priority value for asking the question
										$variablesArray['referenceArray'] = array();
										$variablesArray['aLiteraturquellen'] = array();
										$variablesArray['prueferArray'] = array();

										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['referencePriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 10;
									}
								}
								// When string has both ", a. a. O." and hyphen END 
							}
							else if($isHyphenExist != 0)
							{
								// When string has hyphen only START 
								$workingString = trim($variablesArray['lastBracketedString']);
								$eachElement = explode(" - ", $workingString);
								$variablesArray['referenceArray'] = array();
								$variablesArray['aLiteraturquellen'] = array();
								$variablesArray['prueferArray'] = array();
								$countUnknownElement = 0;

								/* REFERENCE START [FIRST CHECKING THE FULL STRING] */
								$referenceReturnArr = lookupLiteratureReference($workingString);
								if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
									$variablesArray['needApproval'] = 1;
								}else{
									$variablesArray['needApproval'] = 0;
									foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
										if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
											$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
											$variablesArray['aLiteraturquellen'] [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
										}	
									}
								}
								/* REFERENCE END [FIRST CHECKING THE FULL STRING] */

								if($variablesArray['needApproval'] == 1){
									foreach ($eachElement as $elementKey => $elementVal) {
										$innerApprovalChecking = 0;
										/* 
										* Check the last appearence of this elemet in temp_approved_pruefer and temp_approved_reference table
										* if no match data found than "aao_hyphen_priority" question will be ask
										*/
										// Check reference
										$cleanReferenceString = trim($elementVal);
										$referenceReturnArr = lookupLiteratureReference($cleanReferenceString);
										if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
											$innerApprovalChecking = 1;
											if(!empty($referenceReturnArr['data'])){
												foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
													if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
														$referenceReturnArr['data'][$referenceReturnKey]['is_one_unknown_element_in_hyphen'] = 1;
														$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
													}
												}
											}
										}else{
											$innerApprovalChecking = 0;
											foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
												if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
													$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
													$variablesArray['aLiteraturquellen'] [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
												}	
											}
										}

										if($innerApprovalChecking == 1){
											// Checking pruefer
											$cleanPrueferString = trim($elementVal); 
											$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
											$prueferReturnArr = lookupPruefer($cleanPrueferString);
											if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
												$innerApprovalChecking = 1;
												if(!empty($prueferReturnArr['data'])){
													foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
														if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true){
															$prueferReturnArr['data'][$prueferReturnKey]['is_one_unknown_element_in_hyphen'] = 1;
															$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
														}
													}
												}
											}
											else{ 
												$innerApprovalChecking = 0;
												foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
													if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
														$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
												}
											}
										}

										// If unknown Data found incrementing the counter and setting the element value to $hyphenApprovalString
										if($innerApprovalChecking == 1){
											$countUnknownElement++;
											$variablesArray['hyphenApprovalString'] = trim($elementVal);
										}
									}
								}

								// Set need approval value if unknown data found
								if($countUnknownElement > 0){
									$variablesArray['needApproval'] = 1;
									if($countUnknownElement != 1)
										$variablesArray['hyphenApprovalString'] = "";
								}

								/*
								* Rule 4 Last bracket words:  â, a. a. O.â or ", a.a.O." and Hyphen (hyphenhasspacebeforeand after ( - )) (whenbothexist)
								*
								* 1 = Unknown data found with a. a. O. or Hyphen( - )
								*/ 
								if($variablesArray['needApproval'] == 1){
									if($countUnknownElement == 1){
										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['referencePriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 9;
										$variablesArray['hyphenPrueferPriority'] = 10;
									}else{
										// Making pruefer and reference array empty because these elements will be cleared by direct oredr or by correcting the symptom string. Also seting aao_hyphen_priority value for asking the question
										$variablesArray['referenceArray'] = array();
										$variablesArray['aLiteraturquellen'] = array();
										$variablesArray['prueferArray'] = array();

										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['prueferPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['referencePriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 10;
									}
								}
								// When string has hyphen only START 
							}
							else if($isAaoExist !== false OR $isAaoWithoutSpaceExist !== false OR $isAaoAllLowerWithoutSpaceExist !== false OR $isAaoAllLowerWithSpaceExist !== false)
							{
								// When string has "a. a. O." only START 
								/* 
								* Check the last appearence of this elemet in temp_approved_pruefer and temp_approved_reference table
								* if no match data found than "aao_hyphen_priority" question will be ask
								*/
								$workingString = trim($variablesArray['lastBracketedString']);

								$elementString = str_replace("a. a. O.", "{#^#}", $workingString);
								$elementString = str_replace("a.a.O.", "{#^#}", $elementString);
								$elementString = str_replace("a.a.o.", "{#^#}", $elementString);
								$elementString = str_replace("a. a. o.", "{#^#}", $elementString);
								$searchAuthorPreName = trim($elementString);
								$aaoPosition = mb_strpos($searchAuthorPreName, '{#^#}');
								if($aaoPosition !== false){
									$searchAuthorPreName = mb_substr($searchAuthorPreName, 0, $aaoPosition);
								}
								$searchAuthorPreName = str_replace("{#^#}", "", $searchAuthorPreName);
								$searchAuthorName = rtrim(trim($searchAuthorPreName), ",");
								if($searchAuthorName != ""){
									$innerApprovalChecking = 0;
									if($variablesArray['masterId'] != ""){
										// Check reference
										$cleanReferenceString = trim($searchAuthorName);
										$referenceReturnArr = lookupReferenceInCurrentImport($cleanReferenceString, $variablesArray['masterId'], null);
										if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
											$innerApprovalChecking = 1;
										}else{
											$innerApprovalChecking = 0;
											foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
												if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
													$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
													$variablesArray['aLiteraturquellen'] [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
												}	
											}
										}

										if($innerApprovalChecking == 1){
											// Checking pruefer
											$cleanPrueferString = trim($searchAuthorName); 
											$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
											$prueferReturnArr = lookupPrueferInCurrentImport($cleanPrueferString, $variablesArray['masterId'], null);
											if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
												$innerApprovalChecking = 1;
											}
											else{
												$innerApprovalChecking = 0;
												foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
													if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
														$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
												}
											}
										}
									} else {
										$innerApprovalChecking = 1;
									}

									// Normal lookup
									// Checking Reference
									if($innerApprovalChecking == 1){
										$cleanReferenceString = trim($searchAuthorName);
										$referenceReturnArr = lookupLiteratureReference($cleanReferenceString);
										if(isset($referenceReturnArr['need_approval']) AND $referenceReturnArr['need_approval'] == 1){
											$variablesArray['referenceArray'] = array();
											$variablesArray['aLiteraturquellen'] = array();
											$innerApprovalChecking = 1;
											if(!empty($referenceReturnArr['data'])){
												foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
													if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true)
														$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
												}
											}
										}else{
											$innerApprovalChecking = 0;
											foreach ($referenceReturnArr['data'] as $referenceReturnKey => $referenceReturnVal) {
												if(custom_in_array($referenceReturnArr['data'][$referenceReturnKey]['reference_id'], 'reference_id', $variablesArray['referenceArray']) != true){
													$variablesArray['referenceArray'][] = $referenceReturnArr['data'][$referenceReturnKey];
													$variablesArray['aLiteraturquellen'] [] = ($referenceReturnArr['data'][$referenceReturnKey]['full_reference'] != "") ? trim($referenceReturnArr['data'][$referenceReturnKey]['full_reference']) : "";
												}	
											}
										}
									}

									// Check pruefer
									if($innerApprovalChecking == 1){
										$cleanPrueferString = trim($searchAuthorName); 
										$cleanPrueferString = (mb_substr ( $cleanPrueferString, mb_strlen ( $cleanPrueferString ) - 1, 1 ) == '.') ? $cleanPrueferString : $cleanPrueferString.'.'; 
										$prueferReturnArr = lookupPruefer($cleanPrueferString);
										if(isset($prueferReturnArr['need_approval']) AND $prueferReturnArr['need_approval'] == 1){
											$variablesArray['prueferArray'] = array();
											$innerApprovalChecking = 1;
											if(!empty($prueferReturnArr['data'])){
												foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
													if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
														$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
												}
											}
										}
										else{
											$innerApprovalChecking = 0;
											foreach ($prueferReturnArr['data'] as $prueferReturnKey => $prueferReturnVal) {
												if(custom_in_array($prueferReturnArr['data'][$prueferReturnKey]['pruefer_id'], 'pruefer_id', $variablesArray['prueferArray']) != true)
													$variablesArray['prueferArray'][] = $prueferReturnArr['data'][$prueferReturnKey];
											}
										}
									}

									if($innerApprovalChecking == 1)
										$variablesArray['needApproval'] = 1;

									/*
									* Rule 5 Last bracket words:  â, a. a. O.â or ", a.a.O." and Hyphen (hyphenhasspacebeforeand after ( - )) (whenbothexist)
									*
									* 1 = Unknown data found with a. a. O. or Hyphen( - )
									*/ 
									if($variablesArray['needApproval'] == 1){
										// Making pruefer and reference array empty because these elements will be cleared by direct oredr or by correcting the symptom string. Also seting aao_hyphen_priority value for asking the question
										// $referenceArray = array();
										// $aLiteraturquellen = array();
										// $prueferArray = array();

										$variablesArray['referenceWithNoAuthorPriority'] = 0;
										$variablesArray['moreThanOneTagStringPriority'] = 0;
										$variablesArray['remedyWithSymptomPriority'] = 0;
										$variablesArray['partOfSymptomPriority'] = 0;
										$variablesArray['remedyPriority'] = 0;
										$variablesArray['aaoHyphenPriority'] = 0;
										$variablesArray['hyphenPrueferPriority'] = 0;
										$variablesArray['hyphenReferencePriority'] = 0;
										$variablesArray['referencePriority'] = 9;
										$variablesArray['prueferPriority'] = 10;
									}
								}
								// When string has "a. a. O." only START 
							}
						}
					}
					/* If ending brackets are not null than examining its possibilities END */
				} else if(!empty($variablesArray['middleBracketArray']) AND count($variablesArray['middleBracketArray']) == 1){
					/* If middle brackets are not null than examining its possibilities START */
					// $approvalFor (0 = end bracket, 1 = middle bracket)
					$variablesArray['approvalFor'] = 1;
					$reArrangeMiddleBracketArray = array_values($variablesArray['middleBracketArray']);
					$variablesArray['middleBracketString'] = (isset($reArrangeMiddleBracketArray[0]) AND $reArrangeMiddleBracketArray[0] != "") ? trim($reArrangeMiddleBracketArray[0]) : null;
					if($variablesArray['middleBracketString'] != ""){
						// Checking the existance of , . ;
						$isCommaExist = mb_substr_count($variablesArray['middleBracketString'],",");
						$isSemicolonExist = mb_substr_count($variablesArray['middleBracketString'],";");
						$isDotExist = mb_substr_count($variablesArray['middleBracketString'], ".");

						/* Rule 6(Middle bracket) Conditions START */
						if(($isCommaExist != 0 OR $isSemicolonExist != 0) AND $isDotExist != 0){
							// With Comma OR Semicolon
							if (mb_strpos($variablesArray['middleBracketString'], ',') !== false) 
								$separator = ",";
							else
								$separator = ";";

							$commaFirstOccurrence = mb_stripos ( $variablesArray['middleBracketString'], $separator );
							$beforeTheCommaString = trim( mb_substr ( $variablesArray['middleBracketString'], 0, $commaFirstOccurrence ) );
							$afterTheCommaString = trim( ltrim( mb_substr ( $variablesArray['middleBracketString'], $commaFirstOccurrence ), $separator ));
							$beforeTheCommaStringInArray = explode(" ", $beforeTheCommaString);
							$afterTheCommaStringInArray = explode(" ", $afterTheCommaString);

							$isDotExistInBeforeTheCommaString = mb_substr_count($beforeTheCommaString,".");
							$isDotExistInAfterTheCommaString = mb_substr_count($afterTheCommaString,".");

							$workingString = trim($variablesArray['middleBracketString']);

							/* REMEDY START */
							$checkRemedyApprovalStatus = 0;
							$expectedRemedyArray = explode($separator, $workingString);
							foreach ($expectedRemedyArray as $expectedRemedyKey => $expectedRemedyVal) {
								
								if($expectedRemedyVal == "")
									continue;	

								$cleanExpectedRemedyName = trim($expectedRemedyVal);
								$cleanRemedyString = (mb_substr ( $cleanExpectedRemedyName, mb_strlen ( $cleanExpectedRemedyName ) - 1, 1 ) == '.') ? $cleanExpectedRemedyName : $cleanExpectedRemedyName.'.'; 
								$remedyReturnArr = newLookupRemedy($cleanRemedyString);
								if(isset($remedyReturnArr['need_approval']) AND $remedyReturnArr['need_approval'] == 1){
									$checkRemedyApprovalStatus = 1;
									if(!empty($remedyReturnArr['data'])){
										foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
											if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $variablesArray['remedyArray']) != true)
												$variablesArray['remedyArray'][] = $remedyReturnArr['data'][$remedyReturnKey];
										}

									}
									else{
										$dataArr = array();
										$dataArr['remedy_id'] = null;
										$dataArr['name'] = $cleanExpectedRemedyName;
										$dataArr['kuerzel'] = "";
										if(custom_in_array($dataArr['name'], 'name', $variablesArray['remedyArray']) != true)
											$variablesArray['remedyArray'][] = $dataArr;
									}
								}
								else{
									foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
										if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $variablesArray['remedyArray']) != true)
											$variablesArray['remedyArray'][] = $remedyReturnArr['data'][$remedyReturnKey];
									}
								}
							}
							// Setting last operations approval status to main approval checking variable 
							$variablesArray['needApproval'] = $checkRemedyApprovalStatus; 
							/* REMEDY END */

							if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString != 0 AND $isDotExistInAfterTheCommaString !=0){
								/*
								* 6.1 Single word + dot before the comma and one or more words + dot after comma (no matter if upper or lower case)
								*
								* 1 = chcek for remedis by spliting by comma
								*/

								if($variablesArray['needApproval'] == 1){
									$variablesArray['referenceWithNoAuthorPriority'] = 0;
									$variablesArray['aaoHyphenPriority'] = 0;
									$variablesArray['hyphenPrueferPriority'] = 0;
									$variablesArray['hyphenReferencePriority'] = 0;
									$variablesArray['moreThanOneTagStringPriority'] = 0;
									$variablesArray['remedyWithSymptomPriority'] = 0;
									$variablesArray['prueferPriority'] = 0;
									$variablesArray['partOfSymptomPriority'] = 0;
									$variablesArray['referencePriority'] = 0;
									$variablesArray['remedyPriority'] = 10;
								}
							}
							else if($isCommaExist == 1 AND ((count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 1) OR (count($afterTheCommaStringInArray) == 1 AND $isDotExistInAfterTheCommaString == 1)))
							{
								/*
								* 6.2. Single word + dot before the comma or after a comma (only one dot and one comma)
								*
								* 1 = check for remedy with symptom text (Eg: Opi., during the day)(Eg: small boils in crops, Sulph.)
								* 2 = part of symptom
								*/
								if(count($beforeTheCommaStringInArray) == 1 AND $isDotExistInBeforeTheCommaString == 1){
									$similarRemedyString = $beforeTheCommaString;
									$similarSymptomString = $afterTheCommaString;	
								}else{
									$similarRemedyString = $afterTheCommaString;
									$similarSymptomString = $beforeTheCommaString;
								}
								$cleanRemedyWithSymptomString = (mb_substr ( $workingString, mb_strlen ( $workingString ) - 1, 1 ) == '.') ? $workingString : $workingString.'.'; 
								$remedyWithSymptomReturnArr = newLookupRemedyWithSymptom($cleanRemedyWithSymptomString, $similarRemedyString, $similarSymptomString);
								if(isset($remedyWithSymptomReturnArr['need_approval']) AND $remedyWithSymptomReturnArr['need_approval'] == 0){
									$variablesArray['needApproval'] = 0;
									$variablesArray['remedyArray'] = array();
									$variablesArray['referenceArray'] = array();
									$variablesArray['aLiteraturquellen'] = array();
									$variablesArray['prueferArray'] = array();
									if(isset($remedyWithSymptomReturnArr['data'][0]['remedy']))
										$variablesArray['remedyArray'] = $remedyWithSymptomReturnArr['data'][0]['remedy'];
									$variablesArray['symptomOfDifferentRemedy'] = (isset($remedyWithSymptomReturnArr['data'][0]['symptom_of_different_remedy'])) ? $remedyWithSymptomReturnArr['data'][0]['symptom_of_different_remedy'] : "";
								}else{
									$variablesArray['needApproval'] = 1;
								}

								if($variablesArray['needApproval'] == 1){
									$variablesArray['referenceWithNoAuthorPriority'] = 0;
									$variablesArray['aaoHyphenPriority'] = 0;
									$variablesArray['hyphenPrueferPriority'] = 0;
									$variablesArray['hyphenReferencePriority'] = 0;
									$variablesArray['moreThanOneTagStringPriority'] = 0;
									$variablesArray['prueferPriority'] = 0;
									$variablesArray['referencePriority'] = 0;
									$variablesArray['remedyPriority'] = 0;
									$variablesArray['remedyWithSymptomPriority'] = 9;
									$variablesArray['partOfSymptomPriority'] = 10;
								}
							}
						}
						else if(($isCommaExist != 0 OR $isSemicolonExist != 0) OR $isDotExist == 1){
							/*
							* 6.3. One or more comma OR one dot
							*
							* 1 = part of symptom
							* 2 = chcek for remedis by spliting by comma
							*/
							$workingString = trim($variablesArray['middleBracketString']);
							if($isCommaExist != 0 OR $isSemicolonExist != 0){
								if (mb_strpos($workingString, ',') !== false)
									$separator = ",";
								else if (mb_strpos($workingString, ';') !== false)
									$separator = ";";
								$expectedRemedyArray = explode($separator, $workingString);
							}else{
								if (mb_strpos($workingString, '.') !== false){
									// Split by dot(.)
									$makeStringToExplode = str_replace('.', '.{#^#}', $workingString);
									$expectedRemedyArray = explode("{#^#}", $makeStringToExplode);
								}
								else
									$expectedRemedyArray[] = $workingString;
							}

							if(!empty($expectedRemedyArray)){
								/* REMEDY START */
								$checkRemedyApprovalStatus = 0;
								foreach ($expectedRemedyArray as $expectedRemedyKey => $expectedRemedyVal) {
									
									if($expectedRemedyVal == "")
										continue;	

									$cleanExpectedRemedyName = trim($expectedRemedyVal);
									$cleanRemedyString = (mb_substr ( $cleanExpectedRemedyName, mb_strlen ( $cleanExpectedRemedyName ) - 1, 1 ) == '.') ? $cleanExpectedRemedyName : $cleanExpectedRemedyName.'.'; 
									$remedyReturnArr = newLookupRemedy($cleanRemedyString);
									if(isset($remedyReturnArr['need_approval']) AND $remedyReturnArr['need_approval'] == 1){
										$checkRemedyApprovalStatus = 1;
										if(!empty($remedyReturnArr['data'])){
											foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
												// custom_in_array(needle, needle_field, array) 
												if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $variablesArray['remedyArray']) != true)
													$variablesArray['remedyArray'][] = $remedyReturnArr['data'][$remedyReturnKey];
											}

										}
										else{
											$dataArr = array();
											$dataArr['remedy_id'] = null;
											$dataArr['name'] = $cleanExpectedRemedyName;
											$dataArr['kuerzel'] = "";
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($dataArr['name'], 'name', $variablesArray['remedyArray']) != true)
												$variablesArray['remedyArray'][] = $dataArr;
										}
									}
									else{
										foreach ($remedyReturnArr['data'] as $remedyReturnKey => $remedyReturnVal) {
											// custom_in_array(needle, needle_field, array)
											if(custom_in_array($remedyReturnArr['data'][$remedyReturnKey]['remedy_id'], 'remedy_id', $variablesArray['remedyArray']) != true)
												$variablesArray['remedyArray'][] = $remedyReturnArr['data'][$remedyReturnKey];
										}
									}
								}
								// Setting last operations approval status to main approval checking variable 
								$variablesArray['needApproval'] = $checkRemedyApprovalStatus; 
								/* REMEDY END */
							}

							if($variablesArray['needApproval'] == 1){
								$variablesArray['referenceWithNoAuthorPriority'] = 0;
								$variablesArray['aaoHyphenPriority'] = 0;
								$variablesArray['hyphenPrueferPriority'] = 0;
								$variablesArray['hyphenReferencePriority'] = 0;
								$variablesArray['moreThanOneTagStringPriority'] = 0;
								$variablesArray['prueferPriority'] = 0;
								$variablesArray['referencePriority'] = 0;
								$variablesArray['remedyWithSymptomPriority'] = 0;
								$variablesArray['partOfSymptomPriority'] = 9;
								$variablesArray['remedyPriority'] = 10;
							}
						}
						/* Rule 6(Middle bracket) Conditions END */	
					}
					/* If middle brackets are not null than examining its possibilities END */	
				}
			}
			/* Extracting Pruefer Data and Literaturquellen data End */

			// echo htmlentities($variablesArray['searchableText'])." KKKK<br><br>";
			if( isset($variablesArray['lastBracketedString']) AND $variablesArray['lastBracketedString'] != "" ){
				$variablesArray['searchableText'] = removLastBracketedPart($variablesArray['searchableText'], '(', ')');
				$variablesArray['searchableText'] = removLastBracketedPart($variablesArray['searchableText'], '[', ']');
				// removing bracket brackets data from searchable text
				if(mb_strpos($variablesArray['searchableText'], $variablesArray['lastBracketedString']) !== false){
					$variablesArray['searchableText'] = str_replace($variablesArray['lastBracketedString'], "", $variablesArray['searchableText']);
				}
			}
			// echo htmlentities($variablesArray['searchableText'])." KKKK-UUUU<br><br>";
			// echo htmlentities($variablesArray['BeschreibungOriginal'])." KKKK-UUUU<br><br>";
			// Removing blank tags
			$variablesArray['searchableText'] = removeBlankTags($variablesArray['searchableText']);
			// Removing blank parentheses
			$variablesArray['searchableText'] = preg_replace('#\(\s*\)#', '', $variablesArray['searchableText']);
			$variablesArray['searchableText'] = str_replace("()", "", $variablesArray['searchableText']);
			// $searchableText = removeBlankParenthesesFormSearchableText($searchableText);
			$variablesArray['searchableText'] = removeBlankTags($variablesArray['searchableText']);
			// Removing blank square brackets
			$variablesArray['searchableText'] = preg_replace('#\[\s*\]#', '', $variablesArray['searchableText']);
			$variablesArray['searchableText'] = str_replace("[]", "", $variablesArray['searchableText']);
			// $searchableText = removeBlankBracketsFormSearchableText($searchableText);
			$variablesArray['searchableText'] = removeBlankTags($variablesArray['searchableText']);

			if(!empty($variablesArray['preDefinedaLiteraturquellen'])) {
				$variablesArray['aLiteraturquellen'] = array_merge($variablesArray['aLiteraturquellen'],$variablesArray['preDefinedaLiteraturquellen']);
			}
			if ($variablesArray['aLiteraturquellen']) {
				$variablesArray['EntnommenAus'] = join ( "\n", $variablesArray['aLiteraturquellen'] );
			}

			// Removeing blank spaces from the ending of the string..
			$tn = strip_tags($variablesArray['searchableText']);
			$symptomStr = removeEndingSpecialCharactersForString($tn);
			$endingFullStopsOrCommasArr = (isset($symptomStr['last_character_array']) AND $symptomStr['last_character_array'] != "") ? $symptomStr['last_character_array'] : array();
			if(!empty($endingFullStopsOrCommasArr)){
				$variablesArray['searchableText'] = removeUnwantedSpacesFromTheEnding($variablesArray['searchableText'], $endingFullStopsOrCommasArr);
			}

			$variablesArray['bracketedString'] = (!empty($variablesArray['allBrackets'])) ? implode(", ", $variablesArray['allBrackets']) : null;
			$variablesArray['middleBracketApprovalString'] = ( isset($variablesArray['middleBracketString']) AND $variablesArray['middleBracketString'] != "" ) ? mysqli_real_escape_string($db, $variablesArray['middleBracketString']) : null;
			$variablesArray['approvableString'] = ( isset($variablesArray['lastBracketedString']) AND $variablesArray['lastBracketedString'] != "" ) ? $variablesArray['lastBracketedString'] : $variablesArray['tagsApprovalString'];
		}
		$returnArr['string'] = $line;
		$returnArr['variablesArray'] = $variablesArray;

		// $returnArr = array(
		// 	'string' => $string,
		// 	'variablesArray' => $variablesArray,
		// );
		return $returnArr;
	}

	//direct order detection function
	function directOrderDetection($codeIn, $line){
		//$line = "@P:Hahnemann";
		$line = trim ( $line );
		$cleanline = strip_tags($line);
		$FirstChar = mb_substr ( $cleanline, 0, 1 );
		$returnArray = array();
		$codeDetected = "no";
		$param='';
		$code='';
		if($FirstChar == '@'){
			$p = mb_strpos ( $cleanline, ':' );
			if ($p > 0) {
				$code = mb_substr ( $cleanline, 1, $p - 1 );
				$param = mb_substr ( $cleanline, $p + 1 );
				$codeDetected = "yes";
			} else {
				$code = mb_substr ( $cleanline, 1 );
				$param = '';
			}
			$code = mb_strtoupper ( $code );
	
			switch ($codeIn) {
				// Graduierung
				case 'G' :
					if(trim(strip_tags($param)) == "END")
						$returnArray['Graduierung'] = "";
					else
						$returnArray['Graduierung'] = trim($param);
					break;
				
				// Kapitel, setzt in DS "KapitelID"
				// case 'B' :
				case 'K' :
					if(trim(strip_tags($param)) == "END")
						$returnArray['BereichID'] = "";
					else
						$returnArray['BereichID'] = $param;
					break;
				
				// Seite, setzt in DS "Seite"
				case 'S' :
					$tmp = explode ( '-', $param );
					$returnArray['SeiteOriginalVon'] = $tmp [0] + 0;
					if (sizeof ( $tmp ) > 1)
						$returnArray['SeiteOriginalBis'] = $tmp [1] + 0;
					else
						$returnArray['SeiteOriginalBis'] = $returnArray['SeiteOriginalVon'];
					break;
				
				// Symptom-Nr., setzt in DS "Symptomnummer"
				case 'N' :
					$NewSymptomNr = $param + 0;
					if ($NewSymptomNr == 0) {
						//$NewSymptomNr = 1;
						$returnArray['Symptomnummer'] = 0;
					}
					break;
				
				// Literaturquelle, setzt in DS "EntnommenAus"
				case 'L' :
					$returnArray['aLiteraturquellen'] [] = $param;
					break;
				
				// FuÃnote
				case 'F' :
					$returnArray['Fussnote'] = $param;
					break;
				
				// Verweiss
				case 'V' :
					$returnArray['Verweiss'] = $param;
					break;
				
				// @U: (Unklarheit, steht wie auch @F und @L VOR dem einen Symptom, welches betroffen ist)
				case 'U' :
					$returnArray['Unklarheiten'] = $param;
					break;
				
				// @C: (Kommentar, steht wie auch @F und @L VOR dem einen Symptom, welches betroffen ist)
				case 'C' :
					$returnArray['Kommentar'] = $param;
					break;
				
				// @P: PrÃ¼fer als KÃ¼rzel
				case 'P' :
					$returnArray['prueferFromParray'] [] = $param;
					break;
				
				default :
					//nothing;
			}
			//continue;
		}
		$returnArray['codeDetected'] = $codeDetected;
		$returnArray['code'] = $code;
		return $returnArray;
	}

	// 22-12-2023
	/*
	$dataArray = array(
			'function_called_from' => "single_source", //value = "single_source" or "saved_comparison"
			'comparison_completed_table' => $comparison_completed_table, //only when called from saved_comparison
			'symptom_id' => $symptom_id,
			'quelle_id' => $quelle_id,
			'symptom_type' => $symptom_type,
			'symptom_version' => $symptom_version,
			'BeschreibungOriginal_de' => $symptom_edit_de,
			'searchableText_de' => $symptom_edit_de,
			'BeschreibungOriginal_en' => $symptom_edit_en,
			'searchableText_en' => $symptom_edit_en
		);
	*/
	function storeEditedSymptom($dataArray, $gradingData){
		global $db;
		global $date;
		global $timeStringEndTagArray;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Operation failed'
		);
		try {
			if(isset($dataArray['symptom_id']) AND $dataArray['symptom_id'] != "" AND isset($dataArray['symptom_version']) AND $dataArray['symptom_version'] != ""){
				$data = array();
				$data['BeschreibungOriginal_de'] = (isset($dataArray['BeschreibungOriginal_de']) AND $dataArray['BeschreibungOriginal_de'] != "") ? mysqli_real_escape_string($db, $dataArray['BeschreibungOriginal_de']) : "";
				$data['searchable_text_de'] = (isset($dataArray['searchableText_de']) AND $dataArray['searchableText_de'] != "") ? mysqli_real_escape_string($db, $dataArray['searchableText_de']) : "";
				$data['BeschreibungOriginal_en'] = (isset($dataArray['BeschreibungOriginal_en']) AND $dataArray['BeschreibungOriginal_en'] != "") ? mysqli_real_escape_string($db, $dataArray['BeschreibungOriginal_en']) : "";
				$data['searchable_text_en'] = (isset($dataArray['searchableText_en']) AND $dataArray['searchableText_en'] != "") ? mysqli_real_escape_string($db, $dataArray['searchableText_en']) : "";
				$data['individual_upgrade_justification'] = (isset($dataArray['individual_upgrade_justification']) AND $dataArray['individual_upgrade_justification'] != "") ? mysqli_real_escape_string($db, $dataArray['individual_upgrade_justification']) : "";
				// only saved comparison parameters
				$data['comparison_completed_table'] = (isset($dataArray['comparison_completed_table']) AND $dataArray['comparison_completed_table'] != "") ? mysqli_real_escape_string($db, $dataArray['comparison_completed_table']) : "";
				$data['symptom_edit_de_imported_form'] = (isset($dataArray['symptom_edit_de_imported_form']) AND $dataArray['symptom_edit_de_imported_form'] != "") ? mysqli_real_escape_string($db, $dataArray['symptom_edit_de_imported_form']) : "";
				$data['symptom_edit_en_imported_form'] = (isset($dataArray['symptom_edit_en_imported_form']) AND $dataArray['symptom_edit_en_imported_form'] != "") ? mysqli_real_escape_string($db, $dataArray['symptom_edit_en_imported_form']) : "";
				$symptomEditCount = 1;

				switch($dataArray['function_called_from']){
	                case "single_source":{
	                    $symptomData = mysqli_query($db, "SELECT master_id, arznei_id, quelle_id, original_quelle_id, symptom_edit_count FROM quelle_import_test WHERE id = '".$dataArray['symptom_id']."'");
						if(mysqli_num_rows($symptomData) > 0){
							$symptomRow = mysqli_fetch_assoc($symptomData);
							$symptomEditCount = $symptomRow['symptom_edit_count'] + 1;
						}

						if($dataArray['symptom_version'] == "original"){
							$symptomUpdateInMainQuery="UPDATE quelle_import_test SET BeschreibungOriginal_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungOriginal_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), BeschreibungFull_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungFull_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), searchable_text_de = NULLIF('".$data['searchable_text_de']."', ''), searchable_text_en = NULLIF('".$data['searchable_text_en']."', ''), individual_upgrade_justification = NULLIF('".$data['individual_upgrade_justification']."', ''), symptom_edit_count = NULLIF('".$symptomEditCount."', '') WHERE id = '".$dataArray['symptom_id']."'";
							$db->query($symptomUpdateInMainQuery);
						}
						if($dataArray['symptom_version'] == "converted"){
							$symptomUpdateInMainQuery="UPDATE quelle_import_test SET BeschreibungFull_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungFull_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), searchable_text_de = NULLIF('".$data['searchable_text_de']."', ''), searchable_text_en = NULLIF('".$data['searchable_text_en']."', ''), individual_upgrade_justification = NULLIF('".$data['individual_upgrade_justification']."', ''), symptom_edit_count = NULLIF('".$symptomEditCount."', '') WHERE id = '".$dataArray['symptom_id']."'";
							$db->query($symptomUpdateInMainQuery);
						}
						// Updating the dynamic comparison table
						if(isset($dataArray['quelle_id']) AND $dataArray['quelle_id'] != ""){
							$quelle_ids = array($dataArray['quelle_id']);
							$allRelatedDynamicComparisonTables = getAllRelatedQuelleDetails($quelle_ids);
							if(!empty($allRelatedDynamicComparisonTables)){
								foreach ($allRelatedDynamicComparisonTables as $comKey => $comVal) {
									$dynamicComparisonTableName = $comVal;
									$dynamicComparisonCompletedTableName = $comVal."_completed";
									$dynamicComparisonHighestMatchesTableName = $comVal."_highest_matches";
									$checkComparisonTable = mysqli_query($db,"SHOW TABLES LIKE '".$dynamicComparisonTableName."'");
									if(mysqli_num_rows($checkComparisonTable) > 0){
										if($dataArray['symptom_version'] == "original"){
											$symptomUpdateInMainQuery="UPDATE ".$dynamicComparisonTableName." SET BeschreibungOriginal_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungOriginal_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), BeschreibungFull_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungFull_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), searchable_text_de = NULLIF('".$data['searchable_text_de']."', ''), searchable_text_en = NULLIF('".$data['searchable_text_en']."', ''), symptom_edit_count = NULLIF('".$symptomEditCount."', '') WHERE symptom_id = '".$dataArray['symptom_id']."'";
											$db->query($symptomUpdateInMainQuery);
										}
										if($dataArray['symptom_version'] == "converted"){
											$symptomUpdateInMainQuery="UPDATE ".$dynamicComparisonTableName." SET BeschreibungFull_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungFull_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), searchable_text_de = NULLIF('".$data['searchable_text_de']."', ''), searchable_text_en = NULLIF('".$data['searchable_text_en']."', ''), symptom_edit_count = NULLIF('".$symptomEditCount."', '') WHERE symptom_id = '".$dataArray['symptom_id']."'";
											$db->query($symptomUpdateInMainQuery);
										}	
									}
									$checkComparisonCompletedTable = mysqli_query($db,"SHOW TABLES LIKE '".$dynamicComparisonCompletedTableName."'");
									if(mysqli_num_rows($checkComparisonCompletedTable) > 0){
										if($dataArray['symptom_version'] == "original"){
											$symptomUpdateInMainQuery="UPDATE ".$dynamicComparisonCompletedTableName." SET BeschreibungOriginal_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungOriginal_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), BeschreibungFull_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungFull_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), searchable_text_de = NULLIF('".$data['searchable_text_de']."', ''), searchable_text_en = NULLIF('".$data['searchable_text_en']."', ''), symptom_edit_count = NULLIF('".$symptomEditCount."', '') WHERE symptom_id = '".$dataArray['symptom_id']."'";
											$db->query($symptomUpdateInMainQuery);
										}
										if($dataArray['symptom_version'] == "converted"){
											$symptomUpdateInMainQuery="UPDATE ".$dynamicComparisonCompletedTableName." SET BeschreibungFull_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungFull_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), searchable_text_de = NULLIF('".$data['searchable_text_de']."', ''), searchable_text_en = NULLIF('".$data['searchable_text_en']."', ''), symptom_edit_count = NULLIF('".$symptomEditCount."', '') WHERE symptom_id = '".$dataArray['symptom_id']."'";
											$db->query($symptomUpdateInMainQuery);
										}
									}
									$checkComparisonHighestMatchesTable = mysqli_query($db,"SHOW TABLES LIKE '".$dynamicComparisonHighestMatchesTableName."'");
									if(mysqli_num_rows($checkComparisonHighestMatchesTable) > 0){
										if($dataArray['symptom_version'] == "original"){
											$symptomUpdateInMainQuery="UPDATE ".$dynamicComparisonHighestMatchesTableName." SET BeschreibungOriginal_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungOriginal_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), BeschreibungFull_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungFull_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), searchable_text_de = NULLIF('".$data['searchable_text_de']."', ''), searchable_text_en = NULLIF('".$data['searchable_text_en']."', ''), symptom_edit_count = NULLIF('".$symptomEditCount."', '') WHERE symptom_id = '".$dataArray['symptom_id']."'";
											$db->query($symptomUpdateInMainQuery);
										}
										if($dataArray['symptom_version'] == "converted"){
											$symptomUpdateInMainQuery="UPDATE ".$dynamicComparisonHighestMatchesTableName." SET BeschreibungFull_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungFull_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), searchable_text_de = NULLIF('".$data['searchable_text_de']."', ''), searchable_text_en = NULLIF('".$data['searchable_text_en']."', ''), symptom_edit_count = NULLIF('".$symptomEditCount."', '') WHERE symptom_id = '".$dataArray['symptom_id']."'";
											$db->query($symptomUpdateInMainQuery);
										}	
									}
								}
							}
						} 
						$gradingRes = modifiyGradingSettingsForTheSymptom($dataArray, $gradingData);
						$returnArr['status'] = true;
				    	$returnArr['message'] = "Success";
	                    break;
	                }
	                case "saved_comparison":{
	                	if($data['comparison_completed_table'] != ""){
	                		$comparisonCompletedTable = $data['comparison_completed_table'];
	                		$checkComparisonCompletedTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonCompletedTable."'");
							if(mysqli_num_rows($checkComparisonCompletedTable) > 0){
								$symptomData = mysqli_query($db, "SELECT symptom_edit_count, is_final_version_available, swap, swap_ce FROM ".$comparisonCompletedTable." WHERE symptom_id = '".$dataArray['symptom_id']."'");
								if(mysqli_num_rows($symptomData) > 0)
									$symptomRow = mysqli_fetch_assoc($symptomData);
								$symptomEditCount = (isset($symptomRow['symptom_edit_count']) AND $symptomRow['symptom_edit_count'] != "") ? $symptomRow['symptom_edit_count'] + 1 : $symptomEditCount;
								$is_final_version_available = (isset($symptomRow['is_final_version_available']) AND $symptomRow['is_final_version_available'] != "") ? $symptomRow['is_final_version_available'] : 0;
								$swap = (isset($symptomRow['swap']) AND $symptomRow['swap'] != "") ? $symptomRow['swap'] : 0;
								$swap_ce = (isset($symptomRow['swap_ce']) AND $symptomRow['swap_ce'] != "") ? $symptomRow['swap_ce'] : 0;
								if($swap_ce !=0){
									$updateQuery = "UPDATE ".$comparisonCompletedTable." SET swap_value_ce_imported_form_de = NULLIF('".$data['symptom_edit_de_imported_form']."', ''), swap_value_ce_imported_form_en = NULLIF('".$data['symptom_edit_en_imported_form']."', ''), swap_value_ce_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), swap_value_ce_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), individual_upgrade_justification = NULLIF('".$data['individual_upgrade_justification']."', ''), symptom_edit_count = NULLIF('".$symptomEditCount."', '') WHERE symptom_id = '".$dataArray['symptom_id']."'";
									$db->query($updateQuery);
								}else if($swap !=0){
									$updateQuery = "UPDATE ".$comparisonCompletedTable." SET swap_value_imported_form_de = NULLIF('".$data['symptom_edit_de_imported_form']."', ''), swap_value_imported_form_en = NULLIF('".$data['symptom_edit_en_imported_form']."', ''), swap_value_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), swap_value_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), individual_upgrade_justification = NULLIF('".$data['individual_upgrade_justification']."', ''), symptom_edit_count = NULLIF('".$symptomEditCount."', '') WHERE symptom_id = '".$dataArray['symptom_id']."'";
									$db->query($updateQuery);
								}else if($is_final_version_available !=0){
									$updateQuery = "UPDATE ".$comparisonCompletedTable." SET final_version_imported_form_de = NULLIF('".$data['symptom_edit_de_imported_form']."', ''), final_version_imported_form_en = NULLIF('".$data['symptom_edit_en_imported_form']."', ''), final_version_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), final_version_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), individual_upgrade_justification = NULLIF('".$data['individual_upgrade_justification']."', ''), symptom_edit_count = NULLIF('".$symptomEditCount."', '') WHERE symptom_id = '".$dataArray['symptom_id']."'";
									$db->query($updateQuery);
								}else{
									if($dataArray['symptom_version'] == "original"){
										$symptomUpdateInMainQuery="UPDATE ".$comparisonCompletedTable." SET BeschreibungOriginal_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungOriginal_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), BeschreibungFull_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungFull_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), searchable_text_de = NULLIF('".$data['searchable_text_de']."', ''), searchable_text_en = NULLIF('".$data['searchable_text_en']."', ''), individual_upgrade_justification = NULLIF('".$data['individual_upgrade_justification']."', ''), symptom_edit_count = NULLIF('".$symptomEditCount."', '') WHERE symptom_id = '".$dataArray['symptom_id']."'";
										$db->query($symptomUpdateInMainQuery);

										// Updation in the main table
										$symptomUpdateInMainTableQuery="UPDATE quelle_import_test SET BeschreibungOriginal_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungOriginal_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), BeschreibungFull_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungFull_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), searchable_text_de = NULLIF('".$data['searchable_text_de']."', ''), searchable_text_en = NULLIF('".$data['searchable_text_en']."', ''), symptom_edit_count = NULLIF('".$symptomEditCount."', '') WHERE id = '".$dataArray['symptom_id']."'";
										$db->query($symptomUpdateInMainTableQuery);
									}
									if($dataArray['symptom_version'] == "converted"){
										$symptomUpdateInMainQuery="UPDATE ".$comparisonCompletedTable." SET BeschreibungFull_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungFull_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), searchable_text_de = NULLIF('".$data['searchable_text_de']."', ''), searchable_text_en = NULLIF('".$data['searchable_text_en']."', ''), individual_upgrade_justification = NULLIF('".$data['individual_upgrade_justification']."', ''), symptom_edit_count = NULLIF('".$symptomEditCount."', '') WHERE symptom_id = '".$dataArray['symptom_id']."'";
										$db->query($symptomUpdateInMainQuery);

										// Updation in the main table
										$symptomUpdateInMainTableQuery="UPDATE quelle_import_test SET BeschreibungFull_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungFull_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), searchable_text_de = NULLIF('".$data['searchable_text_de']."', ''), searchable_text_en = NULLIF('".$data['searchable_text_en']."', ''), symptom_edit_count = NULLIF('".$symptomEditCount."', '') WHERE id = '".$dataArray['symptom_id']."'";
										$db->query($symptomUpdateInMainTableQuery);
									}
								}
								$gradingRes = modifiyGradingSettingsForTheSymptom($dataArray, $gradingData);
								$returnArr['status'] = true;
				    			$returnArr['message'] = "Success";
							}
	                	}
	                    break;
	                }
	                default:
	                    break;
	            }
			}else{
				$returnArr['status'] = false;
		    	$returnArr['message'] = "Required data not found.";
			}
		} catch (Exception $e) {
	    	$returnArr['status'] = false;
		    $returnArr['message'] = $e->getMessage();
		}
		
		return $returnArr;
	}

	function modifiyGradingSettingsForTheSymptom($dataArray, $gradingData){
		global $db;
		global $date;
		global $timeStringEndTagArray;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Operation failed'
		);
		try {
			if((isset($dataArray['quelle_id']) AND $dataArray['quelle_id'] != "") AND (isset($dataArray['symptom_id']) AND $dataArray['symptom_id'] != "") AND !empty($gradingData)){
				$symptom_id = $dataArray['symptom_id'];
				$quelle_id = $dataArray['quelle_id'];
				// symptom type setting modification
				if(isset($dataArray['symptom_type']) AND $dataArray['symptom_type'] != ""){
					$symptom_type = $dataArray['symptom_type'];
					$symptomTypeResult = mysqli_query($db, "SELECT symptom_type_setting_id FROM symptom_type_setting WHERE symptom_id = '".$symptom_id."'");
					if(mysqli_num_rows($symptomTypeResult) > 0){
						$deleteSymptomType ="DELETE FROM symptom_type_setting WHERE symptom_id = '".$symptom_id."'";
						$db->query($deleteSymptomType);
					}

					if($symptom_type != ""){
						$symptomTypeInsertQuery="INSERT INTO symptom_type_setting (symptom_id, symptom_type, ersteller_datum) VALUES (NULLIF('".$symptom_id."', ''), NULLIF('".$symptom_type."', ''), NULLIF('".$date."', ''))";
						$db->query($symptomTypeInsertQuery);
					}
				}
				
				$sourceSettingData = array();
				$onlySourceGradingSettingData = array();
			    if($quelle_id != ""){
			    	$sourceSettingResult = mysqli_query($db, "SELECT normal, normal_within_parentheses, normal_end_with_t, normal_end_with_tt, normal_begin_with_degree, normal_end_with_degree, normal_begin_with_asterisk, normal_begin_with_asterisk_end_with_t, normal_begin_with_asterisk_end_with_tt, normal_begin_with_asterisk_end_with_degree, sperrschrift, sperrschrift_begin_with_degree, sperrschrift_begin_with_asterisk, sperrschrift_bold, sperrschrift_bold_begin_with_degree, sperrschrift_bold_begin_with_asterisk, kursiv, kursiv_end_with_t, kursiv_end_with_tt, kursiv_begin_with_degree, kursiv_end_with_degree, kursiv_begin_with_asterisk, kursiv_begin_with_asterisk_end_with_t, kursiv_begin_with_asterisk_end_with_tt, kursiv_begin_with_asterisk_end_with_degree, kursiv_bold, kursiv_bold_begin_with_asterisk_end_with_t, kursiv_bold_begin_with_asterisk_end_with_tt, kursiv_bold_begin_with_degree, kursiv_bold_begin_with_asterisk, kursiv_bold_begin_with_asterisk_end_with_degree, fett, fett_end_with_t, fett_end_with_tt, fett_begin_with_degree, fett_end_with_degree, fett_begin_with_asterisk, fett_begin_with_asterisk_end_with_t, fett_begin_with_asterisk_end_with_tt, fett_begin_with_asterisk_end_with_degree, fett_converted_spaced, fett_converted_spaced_degree_at_beginning, fett_converted_spaced_asterisk_at_beginning, gross, gross_begin_with_degree, gross_begin_with_asterisk, gross_bold, gross_bold_begin_with_degree, gross_bold_begin_with_asterisk, pi_sign, one_bar, two_bar, three_bar, three_and_half_bar, four_bar, four_and_half_bar, five_bar FROM quelle_grading_settings WHERE quelle_id = '".$quelle_id."'");
					if(mysqli_num_rows($sourceSettingResult) > 0){
						$sourceSettingData = mysqli_fetch_assoc($sourceSettingResult);
						$onlySourceGradingSettingData = $sourceSettingData;
					}
			    }
				if($symptom_id != ""){
					$symptomSettingResult = mysqli_query($db, "SELECT normal, normal_within_parentheses, normal_end_with_t, normal_end_with_tt, normal_begin_with_degree, normal_end_with_degree, normal_begin_with_asterisk, normal_begin_with_asterisk_end_with_t, normal_begin_with_asterisk_end_with_tt, normal_begin_with_asterisk_end_with_degree, sperrschrift, sperrschrift_begin_with_degree, sperrschrift_begin_with_asterisk, sperrschrift_bold, sperrschrift_bold_begin_with_degree, sperrschrift_bold_begin_with_asterisk, kursiv, kursiv_end_with_t, kursiv_end_with_tt, kursiv_begin_with_degree, kursiv_end_with_degree, kursiv_begin_with_asterisk, kursiv_begin_with_asterisk_end_with_t, kursiv_begin_with_asterisk_end_with_tt, kursiv_begin_with_asterisk_end_with_degree, kursiv_bold, kursiv_bold_begin_with_asterisk_end_with_t, kursiv_bold_begin_with_asterisk_end_with_tt, kursiv_bold_begin_with_degree, kursiv_bold_begin_with_asterisk, kursiv_bold_begin_with_asterisk_end_with_degree, fett, fett_end_with_t, fett_end_with_tt, fett_begin_with_degree, fett_end_with_degree, fett_begin_with_asterisk, fett_begin_with_asterisk_end_with_t, fett_begin_with_asterisk_end_with_tt, fett_begin_with_asterisk_end_with_degree, fett_converted_spaced, fett_converted_spaced_degree_at_beginning, fett_converted_spaced_asterisk_at_beginning, gross, gross_begin_with_degree, gross_begin_with_asterisk, gross_bold, gross_bold_begin_with_degree, gross_bold_begin_with_asterisk, pi_sign, one_bar, two_bar, three_bar, three_and_half_bar, four_bar, four_and_half_bar, five_bar FROM symptom_grading_settings WHERE symptom_id = '".$symptom_id."' AND active = 1 ORDER BY symptom_grading_settings_id DESC LIMIT 1");
					if(mysqli_num_rows($symptomSettingResult) > 0){
						$sourceSettingData = mysqli_fetch_assoc($symptomSettingResult);
					}
				}
				$isThereAnyGradingModifications = 0;
				if($gradingData == $onlySourceGradingSettingData)
					$isThereAnyGradingModifications = 0;
				else
					$isThereAnyGradingModifications = 1;

				if($isThereAnyGradingModifications == 0){
					$symptomGradingResult = mysqli_query($db, "SELECT symptom_grading_settings_id FROM symptom_grading_settings WHERE symptom_id = '".$symptom_id."'");
					if(mysqli_num_rows($symptomGradingResult) > 0){
						$deleteSymptomGrading ="DELETE FROM symptom_grading_settings WHERE symptom_id = '".$symptom_id."' AND (pre_comp_id = 0 OR pre_comp_id IS NULL)";
						$db->query($deleteSymptomGrading);
					}
				}else{
					$symptomGradingResult = mysqli_query($db, "SELECT symptom_grading_settings_id FROM symptom_grading_settings WHERE symptom_id = '".$symptom_id."'");
					if(mysqli_num_rows($symptomGradingResult) > 0){
						$deleteSymptomGrading ="DELETE FROM symptom_grading_settings WHERE symptom_id = '".$symptom_id."' AND (pre_comp_id = 0 OR pre_comp_id IS NULL)";
						$db->query($deleteSymptomGrading);
					}
					foreach ($gradingData as $gardingKey => $gradingVal) {
						$gradingData[$gardingKey] = (isset($gradingData[$gardingKey]) AND $gradingData[$gardingKey] != "") ? mysqli_real_escape_string($db, trim($gradingData[$gardingKey])) : "";
					}
					$symptomGradingInsertQuery="INSERT INTO symptom_grading_settings (symptom_id, normal, normal_within_parentheses, normal_end_with_t, normal_end_with_tt, normal_begin_with_degree, normal_end_with_degree, normal_begin_with_asterisk, normal_begin_with_asterisk_end_with_t, normal_begin_with_asterisk_end_with_tt, normal_begin_with_asterisk_end_with_degree, sperrschrift, sperrschrift_begin_with_degree, sperrschrift_begin_with_asterisk, sperrschrift_bold, sperrschrift_bold_begin_with_degree, sperrschrift_bold_begin_with_asterisk, kursiv, kursiv_end_with_t, kursiv_end_with_tt, kursiv_begin_with_degree, kursiv_end_with_degree, kursiv_begin_with_asterisk, kursiv_begin_with_asterisk_end_with_t, kursiv_begin_with_asterisk_end_with_tt, kursiv_begin_with_asterisk_end_with_degree, kursiv_bold, kursiv_bold_begin_with_asterisk_end_with_t, kursiv_bold_begin_with_asterisk_end_with_tt, kursiv_bold_begin_with_degree, kursiv_bold_begin_with_asterisk, kursiv_bold_begin_with_asterisk_end_with_degree, fett, fett_end_with_t, fett_end_with_tt, fett_begin_with_degree, fett_end_with_degree, fett_begin_with_asterisk, fett_begin_with_asterisk_end_with_t, fett_begin_with_asterisk_end_with_tt, fett_begin_with_asterisk_end_with_degree, fett_converted_spaced, fett_converted_spaced_degree_at_beginning, fett_converted_spaced_asterisk_at_beginning, gross, gross_begin_with_degree, gross_begin_with_asterisk, gross_bold, gross_bold_begin_with_degree, gross_bold_begin_with_asterisk, pi_sign, one_bar, two_bar, three_bar, three_and_half_bar, four_bar, four_and_half_bar, five_bar, ersteller_datum) VALUES (NULLIF('".$symptom_id."', ''), NULLIF('".$gradingData['normal']."', ''), NULLIF('".$gradingData['normal_within_parentheses']."', ''), NULLIF('".$gradingData['normal_end_with_t']."', ''), NULLIF('".$gradingData['normal_end_with_tt']."', ''), NULLIF('".$gradingData['normal_begin_with_degree']."', ''), NULLIF('".$gradingData['normal_end_with_degree']."', ''), NULLIF('".$gradingData['normal_begin_with_asterisk']."', ''), NULLIF('".$gradingData['normal_begin_with_asterisk_end_with_t']."', ''), NULLIF('".$gradingData['normal_begin_with_asterisk_end_with_tt']."', ''), NULLIF('".$gradingData['normal_begin_with_asterisk_end_with_degree']."', ''), NULLIF('".$gradingData['sperrschrift']."', ''), NULLIF('".$gradingData['sperrschrift_begin_with_degree']."', ''), NULLIF('".$gradingData['sperrschrift_begin_with_asterisk']."', ''), NULLIF('".$gradingData['sperrschrift_bold']."', ''), NULLIF('".$gradingData['sperrschrift_bold_begin_with_degree']."', ''), NULLIF('".$gradingData['sperrschrift_bold_begin_with_asterisk']."', ''), NULLIF('".$gradingData['kursiv']."', ''), NULLIF('".$gradingData['kursiv_end_with_t']."', ''), NULLIF('".$gradingData['kursiv_end_with_tt']."', ''), NULLIF('".$gradingData['kursiv_begin_with_degree']."', ''), NULLIF('".$gradingData['kursiv_end_with_degree']."', ''), NULLIF('".$gradingData['kursiv_begin_with_asterisk']."', ''), NULLIF('".$gradingData['kursiv_begin_with_asterisk_end_with_t']."', ''), NULLIF('".$gradingData['kursiv_begin_with_asterisk_end_with_tt']."', ''), NULLIF('".$gradingData['kursiv_begin_with_asterisk_end_with_degree']."', ''), NULLIF('".$gradingData['kursiv_bold']."', ''), NULLIF('".$gradingData['kursiv_bold_begin_with_asterisk_end_with_t']."', ''), NULLIF('".$gradingData['kursiv_bold_begin_with_asterisk_end_with_tt']."', ''), NULLIF('".$gradingData['kursiv_bold_begin_with_degree']."', ''), NULLIF('".$gradingData['kursiv_bold_begin_with_asterisk']."', ''), NULLIF('".$gradingData['kursiv_bold_begin_with_asterisk_end_with_degree']."', ''), NULLIF('".$gradingData['fett']."', ''), NULLIF('".$gradingData['fett_end_with_t']."', ''), NULLIF('".$gradingData['fett_end_with_tt']."', ''), NULLIF('".$gradingData['fett_begin_with_degree']."', ''), NULLIF('".$gradingData['fett_end_with_degree']."', ''), NULLIF('".$gradingData['fett_begin_with_asterisk']."', ''), NULLIF('".$gradingData['fett_begin_with_asterisk_end_with_t']."', ''), NULLIF('".$gradingData['fett_begin_with_asterisk_end_with_tt']."', ''), NULLIF('".$gradingData['fett_begin_with_asterisk_end_with_degree']."', ''), NULLIF('".$gradingData['fett_converted_spaced']."', ''), NULLIF('".$gradingData['fett_converted_spaced_degree_at_beginning']."', ''), NULLIF('".$gradingData['fett_converted_spaced_asterisk_at_beginning']."', ''), NULLIF('".$gradingData['gross']."', ''), NULLIF('".$gradingData['gross_begin_with_degree']."', ''), NULLIF('".$gradingData['gross_begin_with_asterisk']."', ''), NULLIF('".$gradingData['gross_bold']."', ''), NULLIF('".$gradingData['gross_bold_begin_with_degree']."', ''), NULLIF('".$gradingData['gross_bold_begin_with_asterisk']."', ''), NULLIF('".$gradingData['pi_sign']."', ''), NULLIF('".$gradingData['one_bar']."', ''), NULLIF('".$gradingData['two_bar']."', ''), NULLIF('".$gradingData['three_bar']."', ''), NULLIF('".$gradingData['three_and_half_bar']."', ''), NULLIF('".$gradingData['four_bar']."', ''), NULLIF('".$gradingData['four_and_half_bar']."', ''), NULLIF('".$gradingData['five_bar']."', ''), NULLIF('".$date."', ''))";
					$db->query($symptomGradingInsertQuery);
				}
				$returnArr['status'] = true;
				$returnArr['message'] = "Success";
			}else{
				$returnArr['status'] = false;
		    	$returnArr['message'] = "Required data not found.";
			}
		} catch (Exception $e) {
	    	$returnArr['status'] = false;
		    $returnArr['message'] = $e->getMessage();
		}
		
		return $returnArr;
	}

	/*
	$tempDataArray = array(
			'symptom_id' => $symptomIdToSend,
			'source_id' => $sourceIdToSend,
			'symptom_type' => $symptomTypeToSend,
			'pre_comp_id' => $preCompId, // pre_comparison_master table id
		);
	*/
	function updateEditedSymptomsSettings($tempDataArray, $gradingData){
		global $db;
		global $date;
		global $timeStringEndTagArray;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Operation failed'
		);
		try {
			if($tempDataArray['symptom_id'] != "" AND $tempDataArray['source_id'] != "" AND !empty($gradingData)){
				$symptom_id = $tempDataArray['symptom_id'];
				$quelle_id = $tempDataArray['source_id'];
				/*$symptom_type = $tempDataArray['symptom_type'];
				$symptomTypeResult = mysqli_query($db, "SELECT symptom_type_setting_id FROM symptom_type_setting WHERE symptom_id = '".$symptom_id."'");
				if(mysqli_num_rows($symptomTypeResult) > 0){
					$deleteSymptomType ="DELETE FROM symptom_type_setting WHERE symptom_id = '".$symptom_id."'";
					$db->query($deleteSymptomType);
				}

				if($symptom_type != ""){
					$symptomTypeInsertQuery="INSERT INTO symptom_type_setting (symptom_id, symptom_type, ersteller_datum) VALUES (NULLIF('".$symptom_id."', ''), NULLIF('".$symptom_type."', ''), NULLIF('".$date."', ''))";
					$db->query($symptomTypeInsertQuery);
				}*/

				$symptomGradingResult = mysqli_query($db, "SELECT symptom_grading_settings_id FROM symptom_grading_settings WHERE symptom_id = '".$symptom_id."'");
				if(mysqli_num_rows($symptomGradingResult) > 0){
					$deleteSymptomGrading ="DELETE FROM symptom_grading_settings WHERE symptom_id = '".$symptom_id."' AND (pre_comp_id = 0 OR pre_comp_id IS NULL)";
					$db->query($deleteSymptomGrading);
				}
				foreach ($gradingData as $gardingKey => $gradingVal) {
					$gradingData[$gardingKey] = (isset($gradingData[$gardingKey]) AND $gradingData[$gardingKey] != "") ? mysqli_real_escape_string($db, trim($gradingData[$gardingKey])) : "";
				}

				if(isset($tempDataArray['pre_comp_id']) AND $tempDataArray['pre_comp_id'] != "" AND $tempDataArray['pre_comp_id'] != 0) {
					$symptomGradingInsertQuery="INSERT INTO symptom_grading_settings (symptom_id, pre_comp_id, normal, normal_within_parentheses, normal_end_with_t, normal_end_with_tt, normal_begin_with_degree, normal_end_with_degree, normal_begin_with_asterisk, normal_begin_with_asterisk_end_with_t, normal_begin_with_asterisk_end_with_tt, normal_begin_with_asterisk_end_with_degree, sperrschrift, sperrschrift_begin_with_degree, sperrschrift_begin_with_asterisk, sperrschrift_bold, sperrschrift_bold_begin_with_degree, sperrschrift_bold_begin_with_asterisk, kursiv, kursiv_end_with_t, kursiv_end_with_tt, kursiv_begin_with_degree, kursiv_end_with_degree, kursiv_begin_with_asterisk, kursiv_begin_with_asterisk_end_with_t, kursiv_begin_with_asterisk_end_with_tt, kursiv_begin_with_asterisk_end_with_degree, kursiv_bold, kursiv_bold_begin_with_asterisk_end_with_t, kursiv_bold_begin_with_asterisk_end_with_tt, kursiv_bold_begin_with_degree, kursiv_bold_begin_with_asterisk, kursiv_bold_begin_with_asterisk_end_with_degree, fett, fett_end_with_t, fett_end_with_tt, fett_begin_with_degree, fett_end_with_degree, fett_begin_with_asterisk, fett_begin_with_asterisk_end_with_t, fett_begin_with_asterisk_end_with_tt, fett_begin_with_asterisk_end_with_degree, fett_converted_spaced, fett_converted_spaced_degree_at_beginning, fett_converted_spaced_asterisk_at_beginning, gross, gross_begin_with_degree, gross_begin_with_asterisk, gross_bold, gross_bold_begin_with_degree, gross_bold_begin_with_asterisk, pi_sign, one_bar, two_bar, three_bar, three_and_half_bar, four_bar, four_and_half_bar, five_bar, ersteller_datum) VALUES (NULLIF('".$symptom_id."', ''), NULLIF('".$tempDataArray['pre_comp_id']."', ''), NULLIF('".$gradingData['normal']."', ''), NULLIF('".$gradingData['normal_within_parentheses']."', ''), NULLIF('".$gradingData['normal_end_with_t']."', ''), NULLIF('".$gradingData['normal_end_with_tt']."', ''), NULLIF('".$gradingData['normal_begin_with_degree']."', ''), NULLIF('".$gradingData['normal_end_with_degree']."', ''), NULLIF('".$gradingData['normal_begin_with_asterisk']."', ''), NULLIF('".$gradingData['normal_begin_with_asterisk_end_with_t']."', ''), NULLIF('".$gradingData['normal_begin_with_asterisk_end_with_tt']."', ''), NULLIF('".$gradingData['normal_begin_with_asterisk_end_with_degree']."', ''), NULLIF('".$gradingData['sperrschrift']."', ''), NULLIF('".$gradingData['sperrschrift_begin_with_degree']."', ''), NULLIF('".$gradingData['sperrschrift_begin_with_asterisk']."', ''), NULLIF('".$gradingData['sperrschrift_bold']."', ''), NULLIF('".$gradingData['sperrschrift_bold_begin_with_degree']."', ''), NULLIF('".$gradingData['sperrschrift_bold_begin_with_asterisk']."', ''), NULLIF('".$gradingData['kursiv']."', ''), NULLIF('".$gradingData['kursiv_end_with_t']."', ''), NULLIF('".$gradingData['kursiv_end_with_tt']."', ''), NULLIF('".$gradingData['kursiv_begin_with_degree']."', ''), NULLIF('".$gradingData['kursiv_end_with_degree']."', ''), NULLIF('".$gradingData['kursiv_begin_with_asterisk']."', ''), NULLIF('".$gradingData['kursiv_begin_with_asterisk_end_with_t']."', ''), NULLIF('".$gradingData['kursiv_begin_with_asterisk_end_with_tt']."', ''), NULLIF('".$gradingData['kursiv_begin_with_asterisk_end_with_degree']."', ''), NULLIF('".$gradingData['kursiv_bold']."', ''), NULLIF('".$gradingData['kursiv_bold_begin_with_asterisk_end_with_t']."', ''), NULLIF('".$gradingData['kursiv_bold_begin_with_asterisk_end_with_tt']."', ''), NULLIF('".$gradingData['kursiv_bold_begin_with_degree']."', ''), NULLIF('".$gradingData['kursiv_bold_begin_with_asterisk']."', ''), NULLIF('".$gradingData['kursiv_bold_begin_with_asterisk_end_with_degree']."', ''), NULLIF('".$gradingData['fett']."', ''), NULLIF('".$gradingData['fett_end_with_t']."', ''), NULLIF('".$gradingData['fett_end_with_tt']."', ''), NULLIF('".$gradingData['fett_begin_with_degree']."', ''), NULLIF('".$gradingData['fett_end_with_degree']."', ''), NULLIF('".$gradingData['fett_begin_with_asterisk']."', ''), NULLIF('".$gradingData['fett_begin_with_asterisk_end_with_t']."', ''), NULLIF('".$gradingData['fett_begin_with_asterisk_end_with_tt']."', ''), NULLIF('".$gradingData['fett_begin_with_asterisk_end_with_degree']."', ''), NULLIF('".$gradingData['fett_converted_spaced']."', ''), NULLIF('".$gradingData['fett_converted_spaced_degree_at_beginning']."', ''), NULLIF('".$gradingData['fett_converted_spaced_asterisk_at_beginning']."', ''), NULLIF('".$gradingData['gross']."', ''), NULLIF('".$gradingData['gross_begin_with_degree']."', ''), NULLIF('".$gradingData['gross_begin_with_asterisk']."', ''), NULLIF('".$gradingData['gross_bold']."', ''), NULLIF('".$gradingData['gross_bold_begin_with_degree']."', ''), NULLIF('".$gradingData['gross_bold_begin_with_asterisk']."', ''), NULLIF('".$gradingData['pi_sign']."', ''), NULLIF('".$gradingData['one_bar']."', ''), NULLIF('".$gradingData['two_bar']."', ''), NULLIF('".$gradingData['three_bar']."', ''), NULLIF('".$gradingData['three_and_half_bar']."', ''), NULLIF('".$gradingData['four_bar']."', ''), NULLIF('".$gradingData['four_and_half_bar']."', ''), NULLIF('".$gradingData['five_bar']."', ''), NULLIF('".$date."', ''))";
				} else {
					$symptomGradingInsertQuery="INSERT INTO symptom_grading_settings (symptom_id, normal, normal_within_parentheses, normal_end_with_t, normal_end_with_tt, normal_begin_with_degree, normal_end_with_degree, normal_begin_with_asterisk, normal_begin_with_asterisk_end_with_t, normal_begin_with_asterisk_end_with_tt, normal_begin_with_asterisk_end_with_degree, sperrschrift, sperrschrift_begin_with_degree, sperrschrift_begin_with_asterisk, sperrschrift_bold, sperrschrift_bold_begin_with_degree, sperrschrift_bold_begin_with_asterisk, kursiv, kursiv_end_with_t, kursiv_end_with_tt, kursiv_begin_with_degree, kursiv_end_with_degree, kursiv_begin_with_asterisk, kursiv_begin_with_asterisk_end_with_t, kursiv_begin_with_asterisk_end_with_tt, kursiv_begin_with_asterisk_end_with_degree, kursiv_bold, kursiv_bold_begin_with_asterisk_end_with_t, kursiv_bold_begin_with_asterisk_end_with_tt, kursiv_bold_begin_with_degree, kursiv_bold_begin_with_asterisk, kursiv_bold_begin_with_asterisk_end_with_degree, fett, fett_end_with_t, fett_end_with_tt, fett_begin_with_degree, fett_end_with_degree, fett_begin_with_asterisk, fett_begin_with_asterisk_end_with_t, fett_begin_with_asterisk_end_with_tt, fett_begin_with_asterisk_end_with_degree, fett_converted_spaced, fett_converted_spaced_degree_at_beginning, fett_converted_spaced_asterisk_at_beginning, gross, gross_begin_with_degree, gross_begin_with_asterisk, gross_bold, gross_bold_begin_with_degree, gross_bold_begin_with_asterisk, pi_sign, one_bar, two_bar, three_bar, three_and_half_bar, four_bar, four_and_half_bar, five_bar, ersteller_datum) VALUES (NULLIF('".$symptom_id."', ''), NULLIF('".$gradingData['normal']."', ''), NULLIF('".$gradingData['normal_within_parentheses']."', ''), NULLIF('".$gradingData['normal_end_with_t']."', ''), NULLIF('".$gradingData['normal_end_with_tt']."', ''), NULLIF('".$gradingData['normal_begin_with_degree']."', ''), NULLIF('".$gradingData['normal_end_with_degree']."', ''), NULLIF('".$gradingData['normal_begin_with_asterisk']."', ''), NULLIF('".$gradingData['normal_begin_with_asterisk_end_with_t']."', ''), NULLIF('".$gradingData['normal_begin_with_asterisk_end_with_tt']."', ''), NULLIF('".$gradingData['normal_begin_with_asterisk_end_with_degree']."', ''), NULLIF('".$gradingData['sperrschrift']."', ''), NULLIF('".$gradingData['sperrschrift_begin_with_degree']."', ''), NULLIF('".$gradingData['sperrschrift_begin_with_asterisk']."', ''), NULLIF('".$gradingData['sperrschrift_bold']."', ''), NULLIF('".$gradingData['sperrschrift_bold_begin_with_degree']."', ''), NULLIF('".$gradingData['sperrschrift_bold_begin_with_asterisk']."', ''), NULLIF('".$gradingData['kursiv']."', ''), NULLIF('".$gradingData['kursiv_end_with_t']."', ''), NULLIF('".$gradingData['kursiv_end_with_tt']."', ''), NULLIF('".$gradingData['kursiv_begin_with_degree']."', ''), NULLIF('".$gradingData['kursiv_end_with_degree']."', ''), NULLIF('".$gradingData['kursiv_begin_with_asterisk']."', ''), NULLIF('".$gradingData['kursiv_begin_with_asterisk_end_with_t']."', ''), NULLIF('".$gradingData['kursiv_begin_with_asterisk_end_with_tt']."', ''), NULLIF('".$gradingData['kursiv_begin_with_asterisk_end_with_degree']."', ''), NULLIF('".$gradingData['kursiv_bold']."', ''), NULLIF('".$gradingData['kursiv_bold_begin_with_asterisk_end_with_t']."', ''), NULLIF('".$gradingData['kursiv_bold_begin_with_asterisk_end_with_tt']."', ''), NULLIF('".$gradingData['kursiv_bold_begin_with_degree']."', ''), NULLIF('".$gradingData['kursiv_bold_begin_with_asterisk']."', ''), NULLIF('".$gradingData['kursiv_bold_begin_with_asterisk_end_with_degree']."', ''), NULLIF('".$gradingData['fett']."', ''), NULLIF('".$gradingData['fett_end_with_t']."', ''), NULLIF('".$gradingData['fett_end_with_tt']."', ''), NULLIF('".$gradingData['fett_begin_with_degree']."', ''), NULLIF('".$gradingData['fett_end_with_degree']."', ''), NULLIF('".$gradingData['fett_begin_with_asterisk']."', ''), NULLIF('".$gradingData['fett_begin_with_asterisk_end_with_t']."', ''), NULLIF('".$gradingData['fett_begin_with_asterisk_end_with_tt']."', ''), NULLIF('".$gradingData['fett_begin_with_asterisk_end_with_degree']."', ''), NULLIF('".$gradingData['fett_converted_spaced']."', ''), NULLIF('".$gradingData['fett_converted_spaced_degree_at_beginning']."', ''), NULLIF('".$gradingData['fett_converted_spaced_asterisk_at_beginning']."', ''), NULLIF('".$gradingData['gross']."', ''), NULLIF('".$gradingData['gross_begin_with_degree']."', ''), NULLIF('".$gradingData['gross_begin_with_asterisk']."', ''), NULLIF('".$gradingData['gross_bold']."', ''), NULLIF('".$gradingData['gross_bold_begin_with_degree']."', ''), NULLIF('".$gradingData['gross_bold_begin_with_asterisk']."', ''), NULLIF('".$gradingData['pi_sign']."', ''), NULLIF('".$gradingData['one_bar']."', ''), NULLIF('".$gradingData['two_bar']."', ''), NULLIF('".$gradingData['three_bar']."', ''), NULLIF('".$gradingData['three_and_half_bar']."', ''), NULLIF('".$gradingData['four_bar']."', ''), NULLIF('".$gradingData['four_and_half_bar']."', ''), NULLIF('".$gradingData['five_bar']."', ''), NULLIF('".$date."', ''))";
				}
				$db->query($symptomGradingInsertQuery);

				$returnArr['status'] = true;
				$returnArr['message'] = "Success";
			}
		} catch (Exception $e) {
	    	$returnArr['status'] = false;
		    $returnArr['message'] = $e->getMessage();
		}
		
		return $returnArr;
	}

	// 24-01-2024
	function deleteSymptomsIndividualSettings($symptomId, $preCompId){
		global $db;
		global $date;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Operation failed'
		);
		try {
			if($symptomId != ""){
				if($preCompId != "" && $preCompId !=0)
					$deleteSymptomGrading ="DELETE FROM symptom_grading_settings WHERE symptom_id = '".$symptomId."' AND pre_comp_id = $preCompId";
				else
					$deleteSymptomGrading ="DELETE FROM symptom_grading_settings WHERE symptom_id = '".$symptomId."'";
				$db->query($deleteSymptomGrading);

				$returnArr['status'] = true;
				$returnArr['message'] = "Success";
			}
		} catch (Exception $e) {
	    	$returnArr['status'] = false;
		    $returnArr['message'] = $e->getMessage();
		}
		
		return $returnArr;
	}
	
	function deactiveSymptomsIndividualSettings($symptomId, $preCompId){
		global $db;
		global $date;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Operation failed'
		);
		try {
			if($symptomId != ""){
				if($preCompId != "" && $preCompId !=0){
					$updateSymptomGrading = "UPDATE symptom_grading_settings SET active = 0 WHERE symptom_id = '".$symptomId."' AND pre_comp_id = $preCompId";
					$db->query($updateSymptomGrading);
				}
				$returnArr['status'] = true;
				$returnArr['message'] = "Success";
			}
		} catch (Exception $e) {
	    	$returnArr['status'] = false;
		    $returnArr['message'] = $e->getMessage();
		}
		
		return $returnArr;
	}

	// 10-04-2024
	function reActivatingSymptomGradingSettingForComarison($sourceIdsArray){
		global $db;
		global $date;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Operation failed'
		);
		try {
			if($sourceIdsArray != ""){
				foreach($sourceIdsArray as $key => $val){
					$masterResult = mysqli_query($db, "SELECT id FROM pre_comparison_master_data WHERE quelle_id = '".$val."'");
					if(mysqli_num_rows($masterResult) > 0){
						$masterRow = mysqli_fetch_assoc($masterResult);
						$preCompId = (isset($masterRow['id']) AND $masterRow['id'] != "") ? $masterRow['id'] : "";
						if($preCompId != ""){
							$updateSymptomGrading = "UPDATE symptom_grading_settings SET active = 1 WHERE pre_comp_id = $preCompId";
							$db->query($updateSymptomGrading);
						}
					}
				}

				$returnArr['status'] = true;
				$returnArr['message'] = "Success";
			}
		} catch (Exception $e) {
	    	$returnArr['status'] = false;
		    $returnArr['message'] = $e->getMessage();
		}
		
		return $returnArr;
	}

	// 22-09-2022
	// Edit symptom original or converted
	function editSymptomOriginalOrConverted($symptomId, $string, $language, $symptomVersion, $comparisonTable=NULL){
		global $db;
		global $date;
		global $timeStringEndTagArray;

		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Operation failed'
		);
		try{
			if($symptomId != "" AND $string != "" AND $language != "" AND $symptomVersion != ""){
				// $string = html_entity_decode($string);
				// $string = htmlentities($string);
				// $a = $string;
				$line = str_replace ( '</em><em>', '', $string );
				$line = str_replace ( array (
					"\r",
					"\t" 
				), '', $line );
				$line = trim ( $line );
				$line = strip_tags ( $line, '<b><i><strong><em><u><sup><span>' );
				$line = trim ( str_replace ( '&nbsp;', ' ', htmlentities( $line ) ) );
				$line = html_entity_decode($line);
				// Replacing Colored sentences's tag to our custom tag "<clr>"
				$coloredTextCnt = 0; 
				do { 
					$line = preg_replace("#<span[^>]*style=(\"|')[^>]*color:(.+?);[^>]*(\"|')>(.+?)</span>#is", "<clr style=\"color:$2;\">$4</clr>", $line, -1, $coloredTextCnt ); 
				} while ( $coloredTextCnt > 0 );
				// Replacing Spaced sentences's tag to our custom tag "<ss>"
				$letterSpaceCntV1 = 0; 
				do { 
					$line = preg_replace("#<span[^>]*style=(\"|')[^>]*letter-spacing:[^>]*>(.+?)</span>#is", "<strong>$2</strong>", $line, -1, $letterSpaceCntV1 ); 
				} while ( $letterSpaceCntV1 > 0 );
				$letterSpaceCntV2 = 0; 
				do { 
					$line = preg_replace("#<span[^>]*class=(\"|')text-sperrschrift(\"|')>(.+?)</span>#is", "<strong>$3</strong>", $line, -1, $letterSpaceCntV2 ); 
				} while ( $letterSpaceCntV2 > 0 );
				$line = strip_tags ( $line, '<b><i><strong><em><u><sup><ss><clr>' );
				$line = trim ( $line );
				
				$cleanline = strip_tags($line);
				$FirstChar = mb_substr ( $cleanline, 0, 1 );
				$LastChar = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 1 );
				$LastTwoChar = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 2 );

				$FirstCharCheck = mb_substr ( trim($line), 0, 1 );
				$FirstOneChar = trim(mb_substr(strip_tags($line), 0, 1));
				$FirstTwoChar = trim(mb_substr(strip_tags($line), 0, 2));
				$FirstThreeChar = trim(mb_substr(strip_tags($line), 0, 3));
				$FirstFourChar = trim(mb_substr(strip_tags($line), 0, 4));
				$FirstFiveChar = trim(mb_substr(strip_tags($line), 0, 5));

				$cleanLineToGetLastChar = rtrim(trim($line), '.');
				$cleanLineToGetLastChar = rtrim(trim($cleanLineToGetLastChar), ',');
				$cleanLineToGetLastChar = rtrim(trim($cleanLineToGetLastChar), ';');
				$LastCharCheck = mb_substr ( trim($cleanLineToGetLastChar), mb_strlen ( trim($cleanLineToGetLastChar) ) - 1 );
				// Checking is there any open tag
				preg_match_all("#<[^/>]*>#i", $line, $matcheOpenTags, PREG_OFFSET_CAPTURE);
				// Count the number of occurance of- *,Â°
				$totalAsterisks = mb_substr_count($line, "*"); 
				$totalDegrees = mb_substr_count($line, "Â°");

				if($FirstFiveChar == "|||||") {
					// E.g. |||||symptom strong
					$line = ltrim($line,"|||||");
					$line = '<bar-five-normal>'.$line.'</bar-five-normal>';
				} else if($FirstFiveChar == "||||-") {
					// E.g. ||||-symptom strong
					$line = ltrim($line,"||||-");
					$line = '<bar-four-and-half-normal>'.$line.'</bar-four-and-half-normal>';
				} else if($FirstFourChar == "||||") {
					// E.g. ||||symptom strong
					$line = ltrim($line,"||||");
					$line = '<bar-four-normal>'.$line.'</bar-four-normal>';
				} else if($FirstFourChar == "|||-") {
					// E.g. |||-symptom strong
					$line = ltrim($line,"|||-");
					$line = '<bar-three-and-half-normal>'.$line.'</bar-three-and-half-normal>';
				} else if($FirstThreeChar == "|||") {
					// E.g. |||symptom strong
					$line = ltrim($line,"|||");
					$line = '<bar-three-normal>'.$line.'</bar-three-normal>';
				} else if($FirstTwoChar == "||") {
					// E.g. ||symptom strong
					$line = ltrim($line,"||");
					$line = '<bar-two-normal>'.$line.'</bar-two-normal>';
				} else if($FirstOneChar == "|") {
					// E.g. |symptom strong
					$line = ltrim($line,"|");
					$line = '<bar-one-normal>'.$line.'</bar-one-normal>';
				} else if($FirstOneChar == "Ï") {
					// E.g. Ïsymptom strong
					$line = ltrim($line,"Ï");
					$line = '<pi-normal>'.$line.'</pi-normal>';
				} else if($FirstCharCheck == "(" AND $LastCharCheck == ")") {
					// It is format - (Normal)
					$line = '<parentheses-normal>'.$line.'</parentheses-normal>';
				} 
				else if($LastCharCheck == "Â°" AND $totalDegrees == 1 AND $totalAsterisks == 0)
				{
					// It is format - Kursiv,Â° Normal,Â° Fett,Â°
					$line = structureEndingWithDegreeFormatString($line, 'endwithdegree');
				} else {
					$line = separateTheApplicableStratingSign($line, '*');
					$line = separateTheApplicableStratingSign($line, 'Â°');
					$line = removeBlankTags($line);

					$line = convertPatternPortions($line, '*', 'asterisk');
					$line = convertPatternPortions($line, 'Â°', 'degree');
					// Structure the non * and Â° portion strings
					$line = structureNonAsteriskAndDegreePortions($line, 'non-asterisk-degree');
				}
				$line = removeBlankTags($line);
				$line = removeCustomParentTags($line);
				$line = str_replace ( array (
					'<ss>',
					'</ss>' 
				), array (
					"<span class=\"text-sperrschrift\">",
					"</span>" 
				), $line );
				$line = str_replace ( array (
					'<clr',
					'</clr>' 
				), array (
					"<span",
					"</span>" 
				), $line );
		
				$escapeCustomTags = "<parentheses-normal><bar-one-normal><bar-two-normal><bar-three-normal><bar-four-normal><bar-five-normal><bar-four-and-half-normal><bar-three-and-half-normal><pi-normal>";
				$parentCustomTagArr = array('endwithdegree', 'asterisk', 'degree', 'non-asterisk-degree', 'asterisk-degree');
				foreach ($parentCustomTagArr as $tagKey => $tagVal) {
					$escapeCustomTags .= "<".$tagVal."-ssbold>";
					$escapeCustomTags .= "<".$tagVal."-embold>";
					$escapeCustomTags .= "<".$tagVal."-ssem>";
					$escapeCustomTags .= "<".$tagVal."-ss>";
					$escapeCustomTags .= "<".$tagVal."-em>";
					$escapeCustomTags .= "<".$tagVal."-normalgross>";
					$escapeCustomTags .= "<".$tagVal."-normal>";
					$escapeCustomTags .= "<".$tagVal."-bold>";
					$escapeCustomTags .= "<".$tagVal."-grossbold>";
				}
				$BeschreibungOriginal = strip_tags ( $line, '<b><i><strong><em><u><sup><span>'.$escapeCustomTags );
				$BeschreibungOriginal = removeBlankTags($BeschreibungOriginal);
				// $searchableText here we are going to store only symptom part excluding prufer, remedi, time data, etc.
				$searchableText = $BeschreibungOriginal;

				// Removing Or properly arranging the sepecial characters at the ending of the string
				// E.g. *The child was intolerably violent and difficult to quiet, (Hnf. Fsjk yhak)  , . 
				$returnCleanlineData = removeEndingSpecialCharactersForString($cleanline);
				$cleanline = (isset($returnCleanlineData['symptom_string']) AND $returnCleanlineData['symptom_string'] != "") ? $returnCleanlineData['symptom_string'] : $cleanline;
				// echo print_r($returnCleanlineData['last_character_array']);
				/* Creating Original Symptom text end */

				/* Find all time data in the entire Symptom string */
				$allTimeStringsArray = getAllTimeData($cleanline, $timeStringEndTagArray);
				if(!empty($allTimeStringsArray)){
					$timeString = implode(', ', $allTimeStringsArray);
				}
				// Removing time strings
				if(!empty($allTimeStringsArray)){
					foreach ($allTimeStringsArray as $timeStrKey => $timeStrVal) {
						if(mb_strpos($cleanline, $timeStrVal) !== false)
							$cleanline = str_replace($timeStrVal, "", $cleanline);
						if(mb_strpos($searchableText, $timeStrVal) !== false)
							$searchableText = str_replace($timeStrVal, "", $searchableText);
					}
				}
				/* Getting ending bracketed strings */
				$endingBracketsArray = array();
				$cleanlineNewLastChar = mb_substr ( $cleanline, mb_strlen ( $cleanline ) - 1 );
				if ($cleanlineNewLastChar == ')') {
					$endingBracketsArray = getAllEndingBracketedStrings($cleanline, "(", ")");
				} else if($cleanlineNewLastChar == ']') {
					$endingBracketsArray = getAllEndingBracketedStrings($cleanline, "[", "]");
				}

				/* Getting all bracketed strings */
				$allParentheses = getAllbracketedStrings($cleanline, "(", ")");
				$allSquareBrackets = getAllbracketedStrings($cleanline, "[", "]");
				$allBrackets = array_merge($allParentheses, $allSquareBrackets);
				$middleBracketArray = array_diff($allBrackets,$endingBracketsArray);

				$lastBracketedString = (isset($endingBracketsArray[0]) AND $endingBracketsArray[0] != "") ? trim($endingBracketsArray[0]) : null;

				if( isset($lastBracketedString) AND $lastBracketedString != "" ){
					$searchableText = removLastBracketedPart($searchableText, '(', ')');
					$searchableText = removLastBracketedPart($searchableText, '[', ']');
					// removing bracket brackets data from searchable text
					if(mb_strpos($searchableText, $lastBracketedString) !== false){
						$searchableText = str_replace($lastBracketedString, "", $searchableText);
					}
				}

				// Removing blank tags
				$searchableText = removeBlankTags($searchableText);
				// Removing blank parentheses
				$searchableText = preg_replace('#\(\s*\)#', '', $searchableText);
				$searchableText = str_replace("()", "", $searchableText);
				$searchableText = removeBlankParenthesesFormSearchableText($searchableText);
				$searchableText = removeBlankTags($searchableText);

				// Removing blank square brackets
				$searchableText = preg_replace('#\[\s*\]#', '', $searchableText);
				$searchableText = str_replace("[]", "", $searchableText);
				$searchableText = removeBlankBracketsFormSearchableText($searchableText);
				$searchableText = removeBlankTags($searchableText);

				// Removeing blank spaces from the ending of the string..
				$tn = strip_tags($searchableText);
				$symptomStr = removeEndingSpecialCharactersForString($tn);
				$endingFullStopsOrCommasArr = (isset($symptomStr['last_character_array']) AND $symptomStr['last_character_array'] != "") ? $symptomStr['last_character_array'] : array();
				if(!empty($endingFullStopsOrCommasArr)){
					$searchableText = removeUnwantedSpacesFromTheEnding($searchableText, $endingFullStopsOrCommasArr);
				}

				$data = array();
				$data['BeschreibungOriginal'] = ($BeschreibungOriginal != "") ? mysqli_real_escape_string($db, $BeschreibungOriginal) : "";
				$data['searchable_text'] = ($searchableText != "") ? mysqli_real_escape_string($db, $searchableText) : "";

				// $returnArr['status'] = true;
		  //   	$returnArr['message'] = "Success";
		  //   	$returnArr['return_data'] = $data;
		  //   	return $returnArr; exit;

				if($symptomVersion == "original"){
					if(isset($comparisonTable) AND $comparisonTable != ""){
						$checkComparisonTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonTable."'");
						if(mysqli_num_rows($checkComparisonTable) > 0){
							$symptomUpdateQuery="UPDATE $comparisonTable SET BeschreibungOriginal_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', ''), final_version_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_ce_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE symptom_id = '".$symptomId."'";
							$db->query($symptomUpdateQuery);
						}

						//updating connections starts
						$comparisonTableConnections = $comparisonTable.'_connections';
						$comparisonTableHighestMatchTable = $comparisonTable.'_highest_matches';
						$comparisonCompletedTable = $comparisonTable.'_completed';
						/*$checkComparisonConnTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonTableConnections."'");
						if(mysqli_num_rows($checkComparisonConnTable) > 0){
							$symptomConnUpdateQuery = "";
							if($data['BeschreibungOriginal'] != ""){
								$symptomConnUpdateQuery="UPDATE $comparisonTableConnections SET comparing_symptom_".$language." = NULLIF('".$data['BeschreibungOriginal']."', '') WHERE comparing_symptom_id = '".$symptomId."'";
							}
							if($data['searchable_text'] != ""){
								$symptomConnUpdateQuery="UPDATE $comparisonTableConnections SET comparing_symptom_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE comparing_symptom_id = '".$symptomId."'";
							}
							if($symptomConnUpdateQuery != "")
								$db->query($symptomConnUpdateQuery);
						}*/
						//updating connections ends

						//updating in highest matched table
						$checkComparisonHighestMatchTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonTableHighestMatchTable."'");
						if(mysqli_num_rows($checkComparisonHighestMatchTable) > 0){
							$symptomUpdateHMQuery="UPDATE $comparisonTableHighestMatchTable SET BeschreibungOriginal_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', ''), final_version_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_ce_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE symptom_id = '".$symptomId."'";
							$db->query($symptomUpdateHMQuery);
						}

						// updating completed table
						$checkComparisonCompletedTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonCompletedTable."'");
						if(mysqli_num_rows($checkComparisonCompletedTable) > 0){
							$symptomUpdateCompletedQuery="UPDATE $comparisonCompletedTable SET BeschreibungOriginal_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', ''), final_version_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_ce_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE symptom_id = '".$symptomId."'";
							$db->query($symptomUpdateCompletedQuery);
						}
					}
					$symptomUpdateInMainQuery="UPDATE quelle_import_test SET BeschreibungOriginal_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE id = '".$symptomId."'";
					$db->query($symptomUpdateInMainQuery);
				}
				if($symptomVersion == "converted"){
					if(isset($comparisonTable) AND $comparisonTable != ""){
						$checkComparisonTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonTable."'");
						if(mysqli_num_rows($checkComparisonTable) > 0){
							$symptomUpdateQuery="UPDATE $comparisonTable SET BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', ''), final_version_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_ce_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE symptom_id = '".$symptomId."'";
							$db->query($symptomUpdateQuery);
						}

						//updating connections starts
						$comparisonTableConnections = $comparisonTable.'_connections';
						$comparisonTableHighestMatchTable = $comparisonTable.'_highest_matches';
						$comparisonCompletedTable = $comparisonTable.'_completed';
						/*$checkComparisonConnTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonTableConnections."'");
						if(mysqli_num_rows($checkComparisonConnTable) > 0){
							$symptomConnUpdateQuery = "";
							if($data['BeschreibungOriginal'] != ""){
								$symptomConnUpdateQuery="UPDATE $comparisonTableConnections SET comparing_symptom_".$language." = NULLIF('".$data['BeschreibungOriginal']."', '') WHERE comparing_symptom_id = '".$symptomId."'";
							}
							if($data['searchable_text'] != ""){
								$symptomConnUpdateQuery="UPDATE $comparisonTableConnections SET comparing_symptom_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE comparing_symptom_id = '".$symptomId."'";
							}
							if($symptomConnUpdateQuery != "")
								$db->query($symptomConnUpdateQuery);
						}*/
						//updating connections ends

						//updating in highest matched table
						$checkComparisonHighestMatchTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonTableHighestMatchTable."'");
						if(mysqli_num_rows($checkComparisonHighestMatchTable) > 0){
							$symptomUpdateHMQuery="UPDATE $comparisonTableHighestMatchTable SET BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', ''), final_version_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_ce_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE symptom_id = '".$symptomId."'";
							$db->query($symptomUpdateHMQuery);
						}

						// updating completed table
						$checkComparisonCompletedTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonCompletedTable."'");
						if(mysqli_num_rows($checkComparisonCompletedTable) > 0){
							$symptomUpdateCompletedQuery="UPDATE $comparisonCompletedTable SET BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', ''), final_version_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_ce_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE symptom_id = '".$symptomId."'";
							$db->query($symptomUpdateCompletedQuery);
						}
					}
					$symptomUpdateInMainQuery="UPDATE quelle_import_test SET BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE id = '".$symptomId."'";
					$db->query($symptomUpdateInMainQuery);
				}

				$returnArr['status'] = true;
		    	$returnArr['message'] = "Success";
			}
		}catch (Exception $e) {
	    	$returnArr['status'] = false;
		    $returnArr['message'] = $e->getMessage();
		}
		
		return $returnArr;
	}

	// 19-10-2022
	// Edit symptom as blank original or converted
	function editSymptomAsBlankOriginalOrConverted($symptomId, $language, $symptomVersion, $comparisonTable=NULL){
		global $db;
		global $date;
		global $timeStringEndTagArray;

		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Operation failed'
		);
		try{
			if($symptomId != "" AND $language != "" AND $symptomVersion != ""){
				$data = array();
				$data['BeschreibungOriginal'] = "";
				$data['searchable_text'] = "";
				if($symptomVersion == "original"){
					if(isset($comparisonTable) AND $comparisonTable != ""){
						$checkComparisonTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonTable."'");
						if(mysqli_num_rows($checkComparisonTable) > 0){
							$symptomUpdateQuery="UPDATE $comparisonTable SET BeschreibungOriginal_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', ''), final_version_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_ce_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE symptom_id = '".$symptomId."'";
							$db->query($symptomUpdateQuery);
						}

						//updating connections starts
						$comparisonTableConnections = $comparisonTable.'_connections';
						$comparisonTableHighestMatchTable = $comparisonTable.'_highest_matches';
						$comparisonCompletedTable = $comparisonTable.'_completed';
						/*$checkComparisonConnTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonTableConnections."'");
						if(mysqli_num_rows($checkComparisonConnTable) > 0){
							$symptomConnUpdateQuery = "";
							if($data['BeschreibungOriginal'] != ""){
								$symptomConnUpdateQuery="UPDATE $comparisonTableConnections SET comparing_symptom_".$language." = NULLIF('".$data['BeschreibungOriginal']."', '') WHERE comparing_symptom_id = '".$symptomId."'";
							}
							if($data['searchable_text'] != ""){
								$symptomConnUpdateQuery="UPDATE $comparisonTableConnections SET comparing_symptom_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE comparing_symptom_id = '".$symptomId."'";
							}
							if($symptomConnUpdateQuery != "")
								$db->query($symptomConnUpdateQuery);
						}*/
						//updating connections ends

						//updating in highest matched table
						$checkComparisonHighestMatchTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonTableHighestMatchTable."'");
						if(mysqli_num_rows($checkComparisonHighestMatchTable) > 0){
							$symptomUpdateHMQuery="UPDATE $comparisonTableHighestMatchTable SET BeschreibungOriginal_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', ''), final_version_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_ce_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE symptom_id = '".$symptomId."'";
							$db->query($symptomUpdateHMQuery);
						}

						// updating completed table
						$checkComparisonCompletedTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonCompletedTable."'");
						if(mysqli_num_rows($checkComparisonCompletedTable) > 0){
							$symptomUpdateCompletedQuery="UPDATE $comparisonCompletedTable SET BeschreibungOriginal_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', ''), final_version_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_ce_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE symptom_id = '".$symptomId."'";
							$db->query($symptomUpdateCompletedQuery);
						}
					}
					$symptomUpdateInMainQuery="UPDATE quelle_import_test SET BeschreibungOriginal_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE id = '".$symptomId."'";
					$db->query($symptomUpdateInMainQuery);
				}
				if($symptomVersion == "converted"){
					if(isset($comparisonTable) AND $comparisonTable != ""){
						$checkComparisonTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonTable."'");
						if(mysqli_num_rows($checkComparisonTable) > 0){
							$symptomUpdateQuery="UPDATE $comparisonTable SET BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', ''), final_version_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_ce_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE symptom_id = '".$symptomId."'";
							$db->query($symptomUpdateQuery);
						}

						//updating connections starts
						$comparisonTableConnections = $comparisonTable.'_connections';
						$comparisonTableHighestMatchTable = $comparisonTable.'_highest_matches';
						$comparisonCompletedTable = $comparisonTable.'_completed';
						/*$checkComparisonConnTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonTableConnections."'");
						if(mysqli_num_rows($checkComparisonConnTable) > 0){
							$symptomConnUpdateQuery = "";
							if($data['BeschreibungOriginal'] != ""){
								$symptomConnUpdateQuery="UPDATE $comparisonTableConnections SET comparing_symptom_".$language." = NULLIF('".$data['BeschreibungOriginal']."', '') WHERE comparing_symptom_id = '".$symptomId."'";
							}
							if($data['searchable_text'] != ""){
								$symptomConnUpdateQuery="UPDATE $comparisonTableConnections SET comparing_symptom_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE comparing_symptom_id = '".$symptomId."'";
							}
							if($symptomConnUpdateQuery != "")
								$db->query($symptomConnUpdateQuery);
						}*/
						//updating connections ends

						//updating in highest matched table
						$checkComparisonHighestMatchTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonTableHighestMatchTable."'");
						if(mysqli_num_rows($checkComparisonHighestMatchTable) > 0){
							$symptomUpdateHMQuery="UPDATE $comparisonTableHighestMatchTable SET BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', ''), final_version_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_ce_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE symptom_id = '".$symptomId."'";
							$db->query($symptomUpdateHMQuery);
						}

						// updating completed table
						$checkComparisonCompletedTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonCompletedTable."'");
						if(mysqli_num_rows($checkComparisonCompletedTable) > 0){
							$symptomUpdateCompletedQuery="UPDATE $comparisonCompletedTable SET BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', ''), final_version_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_".$language." = NULLIF('".$data['searchable_text']."', ''), swap_value_ce_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE symptom_id = '".$symptomId."'";
							$db->query($symptomUpdateCompletedQuery);
						}
					}
					$symptomUpdateInMainQuery="UPDATE quelle_import_test SET BeschreibungFull_".$language." = NULLIF('".$data['BeschreibungOriginal']."', ''), searchable_text_".$language." = NULLIF('".$data['searchable_text']."', '') WHERE id = '".$symptomId."'";
					$db->query($symptomUpdateInMainQuery);
				}

				$returnArr['status'] = true;
		    	$returnArr['message'] = "Success";
			}
		}catch (Exception $e) {
	    	$returnArr['status'] = false;
		    $returnArr['message'] = $e->getMessage();
		}
		
		return $returnArr;
	}

	// 18-10-2022
	// Edit Connected symptom in dynamic connection table
	function editConnectedSymptom($symptomId, $string, $language, $symptomVersion, $connectionId, $comparisonTable=NULL){
		global $db;
		global $date;
		global $timeStringEndTagArray;
		$globalStopWords = array();
		$globalStopWords = getStopWords();

		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Operation failed'
		);
		try{
			if($symptomId != "" AND $string != "" AND $language != "" AND $symptomVersion != "" AND $connectionId != "" AND $comparisonTable != ""){
				$checkComparisonConnectionTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonTable."_connections'");
				if(mysqli_num_rows($checkComparisonConnectionTable) > 0){
					$connectedSymptomResult = mysqli_query($db, "SELECT * FROM ".$comparisonTable."_connections WHERE id = '".$connectionId."' LIMIT 1");
					if(mysqli_num_rows($connectedSymptomResult) > 0){
						$conRow = mysqli_fetch_assoc($connectedSymptomResult);
						$highlightedEditedSymptom = $string;
						// $editedSymptom = mysqli_real_escape_string($db, $string);
						if($conRow['initial_symptom_id'] == $symptomId) {
							$symptomResult = mysqli_query($db, "SELECT * FROM ".$comparisonTable." WHERE symptom_id = '".$conRow['comparing_symptom_id']."' LIMIT 1");
							if(mysqli_num_rows($symptomResult) > 0){
								$symRow = mysqli_fetch_assoc($symptomResult);
								if($symRow['searchable_text_'.$language] != "" AND $symRow['original_quelle_id'] != "" AND $symRow['arznei_id'] != "") {
									// Converting the symptoms to it's applicable format according to the settings to present it in front of the user
									// [1st parameter] $symptom symptom string
									// [2nd parameter] $originalQuelleId the quelle_id of the symptom, that the particular symptom originaly belongs. 
									// [3rd parameter] $arzneiId arzneiId 
									// [4th parameter] $isFinalVersionAvailable values (0 = No, 1 = Connect edit, 2 = Paste edit)
									// [5th parameter] $includeGrade values (0 = Gragde number will not include, 1 = Will include Grade number)
									// [6th parameter] $symptomId the symptom_id of the symptombelong
									// [7th parameter(only if available)] $originalSymptomId the symptom_id of the symptom where he originally belongs.(where he fist created)
									$comSymptomString = convertTheSymptom(0, $symRow['searchable_text_'.$language], $symRow['original_quelle_id'], $symRow['arznei_id'], $symRow['is_final_version_available'], 0, $symRow['symptom_id']);
									$initialSymptomsAllSynonyms = array();
									$compareResult = compareSymptomWithSynonyms($string, $comSymptomString, $globalStopWords, $initialSymptomsAllSynonyms);
									$highlightedEditedSymptom = (isset($compareResult['initial_source_symptom_highlighted']) AND $compareResult['initial_source_symptom_highlighted'] != "") ? $compareResult['initial_source_symptom_highlighted'] : $highlightedEditedSymptom;
								}
							}

							$editedSymptom = mysqli_real_escape_string($db, $highlightedEditedSymptom);
							$updateQuery="UPDATE ".$comparisonTable."_connections SET highlighted_initial_symptom_".$language." = NULLIF('".$editedSymptom."', '') WHERE id = '".$connectionId."'";
							$db->query($updateQuery);
						} else if($conRow['comparing_symptom_id'] == $symptomId) {
							$symptomResult = mysqli_query($db, "SELECT * FROM ".$comparisonTable." WHERE symptom_id = '".$conRow['initial_symptom_id']."' LIMIT 1");
							if(mysqli_num_rows($symptomResult) > 0){
								$symRow = mysqli_fetch_assoc($symptomResult);
								if($symRow['searchable_text_'.$language] != "" AND $symRow['original_quelle_id'] != "" AND $symRow['arznei_id'] != "") {
									// Converting the symptoms to it's applicable format according to the settings to present it in front of the user
									// [1st parameter] $symptom symptom string
									// [2nd parameter] $originalQuelleId the quelle_id of the symptom, that the particular symptom originaly belongs. 
									// [3rd parameter] $arzneiId arzneiId 
									// [4th parameter] $isFinalVersionAvailable values (0 = No, 1 = Connect edit, 2 = Paste edit)
									// [5th parameter] $includeGrade values (0 = Gragde number will not include, 1 = Will include Grade number)
									// [6th parameter] $symptomId the symptom_id of the symptombelong
									// [7th parameter(only if available)] $originalSymptomId the symptom_id of the symptom where he originally belongs.(where he fist created)
									$iniSymptomString = convertTheSymptom(0, $symRow['searchable_text_'.$language], $symRow['original_quelle_id'], $symRow['arznei_id'], $symRow['is_final_version_available'], 0, $symRow['symptom_id']);
									$initialSymptomsAllSynonyms = array();
									$compareResult = compareSymptomWithSynonyms($iniSymptomString, $string, $globalStopWords, $initialSymptomsAllSynonyms);
									$highlightedEditedSymptom = (isset($compareResult['comparing_source_symptom_highlighted']) AND $compareResult['comparing_source_symptom_highlighted'] != "") ? $compareResult['comparing_source_symptom_highlighted'] : $highlightedEditedSymptom;
								}
							}

							$editedSymptom = mysqli_real_escape_string($db, $highlightedEditedSymptom);
							$updateQuery="UPDATE ".$comparisonTable."_connections SET highlighted_comparing_symptom_".$language." = NULLIF('".$editedSymptom."', '') WHERE id = '".$connectionId."'";
							$db->query($updateQuery);
						}
					}
				}

				$returnArr['status'] = true;
		    	$returnArr['message'] = "Success";
			}
		}catch (Exception $e) {
	    	$returnArr['status'] = false;
		    $returnArr['message'] = $e->getMessage();
		}
		
		return $returnArr;
	}

	// 19-10-2022
	// Edit Connected symptom As blnak in dynamic connection table
	function editConnectedSymptomAsBlnak($symptomId, $language, $symptomVersion, $connectionId, $comparisonTable=NULL){
		global $db;
		global $date;
		global $timeStringEndTagArray;

		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Operation failed'
		);
		try{
			if($symptomId != "" AND $language != "" AND $symptomVersion != "" AND $connectionId != "" AND $comparisonTable != ""){
				$string = "";
				$checkComparisonConnectionTable = mysqli_query($db,"SHOW TABLES LIKE '".$comparisonTable."_connections'");
				if(mysqli_num_rows($checkComparisonConnectionTable) > 0){
					$connectedSymptomResult = mysqli_query($db, "SELECT * FROM ".$comparisonTable."_connections WHERE id = '".$connectionId."' LIMIT 1");
					if(mysqli_num_rows($connectedSymptomResult) > 0){
						$conRow = mysqli_fetch_assoc($connectedSymptomResult);
						$highlightedEditedSymptom = $string;
						// $editedSymptom = mysqli_real_escape_string($db, $string);
						if($conRow['initial_symptom_id'] == $symptomId) {
							$editedSymptom = mysqli_real_escape_string($db, $highlightedEditedSymptom);
							$updateQuery="UPDATE ".$comparisonTable."_connections SET highlighted_initial_symptom_".$language." = NULLIF('".$editedSymptom."', '') WHERE id = '".$connectionId."'";
							$db->query($updateQuery);
						} else if($conRow['comparing_symptom_id'] == $symptomId) {
							$editedSymptom = mysqli_real_escape_string($db, $highlightedEditedSymptom);
							$updateQuery="UPDATE ".$comparisonTable."_connections SET highlighted_comparing_symptom_".$language." = NULLIF('".$editedSymptom."', '') WHERE id = '".$connectionId."'";
							$db->query($updateQuery);
						}
					}
				}

				$returnArr['status'] = true;
		    	$returnArr['message'] = "Success";
			}
		}catch (Exception $e) {
	    	$returnArr['status'] = false;
		    $returnArr['message'] = $e->getMessage();
		}
		
		return $returnArr;
	}


	// 
	function instantReflectionDataForNormalConnectAndPaste($mainParentInitialSymptomIdsArr, $comparison_initial_source_id, $comparing_source_ids, $matched_symptom_ids, $source_arznei_id, $similarity_rate, $comparison_option, $individual_comparison_language)
	{
		global $db;
		global $date;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Operation failed'
		);
		
		/* MySQL Transaction START */
		try{

			$dataArr = array();
			if(!empty($mainParentInitialSymptomIdsArr)){
				foreach ($mainParentInitialSymptomIdsArr as $parentInitialSymptomKey => $parentInitialSymptomVal) {
					$matchedSymptomIdsToSent = "";

					$mainInitialSymptomId = $parentInitialSymptomVal;
					$arzneiId = (isset($source_arznei_id) AND $source_arznei_id != "") ? $source_arznei_id : null;
					$mainInitialSourceId = (isset($comparison_initial_source_id) AND !empty($comparison_initial_source_id)) ? $comparison_initial_source_id : array();
					$comparingSources = (isset($comparing_source_ids) AND !empty($comparing_source_ids)) ? explode(',', $comparing_source_ids) : array();
					$similarityRate = (isset($similarity_rate) AND $similarity_rate != "") ? $similarity_rate : null;
					$comparisonOption = (isset($comparison_option) AND $comparison_option != "") ? $comparison_option : null;
					$matchedSymptomIds = (isset($matched_symptom_ids) AND !empty($matched_symptom_ids)) ? explode(',', $matched_symptom_ids) : array();
					$individual_comparison_language = (isset($individual_comparison_language) AND $individual_comparison_language != "") ? $individual_comparison_language : null;
					$matchedSymptomIdsArray = $matchedSymptomIds;
					$initialSourceArray = array();
					$comparingSourcesArray = array();

					if($mainInitialSymptomId != "" AND $comparingSources != "" AND $arzneiId != ""){

						$InitialQuelleResult = mysqli_query($db,"SELECT quelle.quelle_id, quelle.code, quelle.jahr, quelle.quelle_type_id FROM quelle WHERE quelle.quelle_id = '".$mainInitialSourceId."'");
						if(mysqli_num_rows($InitialQuelleResult) > 0){
							$iniRow = mysqli_fetch_assoc($InitialQuelleResult);
							if($iniRow['quelle_type_id'] == 3)
								$preparedQuelleCode = $iniRow['code'];
							else{
								if($iniRow['jahr'] != "" AND $iniRow['code'] != "")
									$rowQuelleCode = trim(str_replace(trim($iniRow['jahr']), '', $iniRow['code']));
								else
									$rowQuelleCode = trim($iniRow['code']);
								$preparedQuelleCode = trim($rowQuelleCode." ".$iniRow['jahr']);
							}

							$initialSourceArray[] = array(
								'quelle_id' => $iniRow['quelle_id'],
								'quelle' => $preparedQuelleCode
							);
						}

						$comparingSourceIdsArr = (is_array($comparingSources)) ? $comparingSources : explode(',', $comparingSources);
						foreach ($comparingSourceIdsArr as $getKey => $getVal) {
							$comparingQuelleResult = mysqli_query($db,"SELECT quelle.quelle_id, quelle.code, quelle.jahr, quelle.quelle_type_id FROM quelle WHERE quelle.quelle_id = '".$getVal."'");
							if(mysqli_num_rows($comparingQuelleResult) > 0){
								while($comparingRow = mysqli_fetch_array($comparingQuelleResult)){
									if($comparingRow['quelle_id'] != $mainInitialSourceId){
										if($comparingRow['quelle_type_id'] == 3)
											$preparedQuelleCodeForCom = $comparingRow['code'];
										else{
											if($comparingRow['jahr'] != "" AND $comparingRow['code'] != "")
												$rowQuelleCodeForCom = trim(str_replace(trim($comparingRow['jahr']), '', $comparingRow['code']));
											else
												$rowQuelleCodeForCom = trim($comparingRow['code']);
											$preparedQuelleCodeForCom = trim($rowQuelleCodeForCom." ".$comparingRow['jahr']);
										}

										$comparingSourcesArray[] = array(
											'quelle_id' => $comparingRow['quelle_id'],
											'quelle' => $preparedQuelleCodeForCom,
											'year' => trim($comparingRow['jahr'])
										);
									}
								}
							}
						}

						if(!empty($comparingSourcesArray)){
							$quelleYear = array();
							foreach ($comparingSourcesArray as $key => $row)
							{
							    $quelleYear[$key] = $row['year'];
							}
							array_multisort($quelleYear, SORT_ASC, $comparingSourcesArray);
						}

						$initialQuelleId = (isset($initialSourceArray[0]['quelle_id']) AND $initialSourceArray[0]['quelle_id'] != "") ? $initialSourceArray[0]['quelle_id'] : null;
						$initialQuelle = (isset($initialSourceArray[0]['quelle']) AND $initialSourceArray[0]['quelle'] != "") ? $initialSourceArray[0]['quelle'] : null;

						$allComparedSourcers = array();
						$comparedSourcersOfInitialSource = array();
						$queryConditionForComparative = '';
						$queryCondition = '';
						$workingSourceIdsArr = array();
						$workingSourceIdsArr = $comparingSourceIdsArr;
						if($initialQuelleId != ""){
							array_push($workingSourceIdsArr, $initialQuelleId);
						}

						if(!empty($workingSourceIdsArr)){
							$returnedIds = getAllComparedSourceIds($workingSourceIdsArr);
							if(!empty($returnedIds)){
								foreach ($returnedIds as $IdVal) {
									if(!in_array($IdVal, $workingSourceIdsArr))
										array_push($workingSourceIdsArr, $IdVal);
								}
							}	
						}

						// Collecting initial source's already compared sources ids of initial source
						$initialQuelleIdInArr = explode(',', $initialQuelleId);
						if(!empty($initialQuelleIdInArr)){
							$returnedIds = getAllComparedSourceIds($initialQuelleIdInArr);
							if(!empty($returnedIds)){
								foreach ($returnedIds as $IdVal) {
									if(!in_array($IdVal, $comparedSourcersOfInitialSource))
										array_push($comparedSourcersOfInitialSource, $IdVal);
								}
							}	
						}

						$newComparedSourcersOfInitialSource = array();
						foreach ($workingSourceIdsArr as $wKey => $wVal) {
							if(!in_array($wVal, $comparedSourcersOfInitialSource))
								array_push($newComparedSourcersOfInitialSource, $wVal);
						}

						$conditionIds = (!empty($workingSourceIdsArr)) ? rtrim(implode(',', $workingSourceIdsArr), ',') : null;
						$conditionIdsForComparative = (!empty($newComparedSourcersOfInitialSource)) ? rtrim(implode(',', $newComparedSourcersOfInitialSource), ',') : null;
						if($conditionIds != "")
							$queryCondition .= " AND (initial_source_id IN (".$conditionIds.") AND comparing_source_id IN (".$conditionIds."))";
						if($conditionIdsForComparative != "")
							$queryConditionForComparative .= " AND (initial_source_id IN (".$conditionIdsForComparative.") AND comparing_source_id IN (".$conditionIdsForComparative."))";

						if($arzneiId != ""){
							$queryCondition .= " AND source_arznei_id = '".$arzneiId."'"; 
							$queryConditionForComparative .= " AND source_arznei_id = '".$arzneiId."'"; 
						}

						$compareResultArray = array();
						$InitialQuelleResult = mysqli_query($db,"SELECT quelle_import_test.original_symptom_id, quelle_import_test.quelle_code, quelle_import_test.original_quelle_id, quelle_import_test.arznei_id, quelle_import_test.final_version_de, quelle_import_test.final_version_en, quelle_import_test.BeschreibungPlain_de, quelle_import_test.BeschreibungPlain_en, quelle_import_test.BeschreibungOriginal_de, quelle_import_test.BeschreibungOriginal_en, quelle_import_test.BeschreibungFull_de, quelle_import_test.BeschreibungFull_en, quelle_import_test.searchable_text_de, quelle_import_test.searchable_text_en, quelle_import_test.is_final_version_available, quelle_import_test.id, quelle_import_test.Kommentar, quelle_import_test.Fussnote FROM quelle_import_test WHERE quelle_import_test.id = '".$mainInitialSymptomId."' AND quelle_import_test.quelle_id = '".$initialQuelleId."' AND quelle_import_test.arznei_id = '".$arzneiId."' AND quelle_import_test.is_appended_symptom_active = 1");
						if(mysqli_num_rows($InitialQuelleResult) > 0){
							while($iniSymRow = mysqli_fetch_array($InitialQuelleResult)){
								// is_final_version_available values (0 = No, 1 = Connect edit, 2 = Paste edit)
								if($iniSymRow['is_final_version_available'] != 0){
									$iniSymptomString_de =  ($iniSymRow['final_version_de'] !="") ? $iniSymRow['final_version_de'] : "";
									$iniSymptomString_en = ($iniSymRow['final_version_en'] !="") ? $iniSymRow['final_version_en'] : "";
								}else{
									if($comparisonOption == 1){
										$iniSymptomString_de =  ($iniSymRow['searchable_text_de'] !="") ? $iniSymRow['searchable_text_de'] : "";
										$iniSymptomString_en =  ($iniSymRow['searchable_text_en'] !="") ? $iniSymRow['searchable_text_en'] : "";
									}else{
										$iniSymptomString_de =  ($iniSymRow['BeschreibungFull_de'] !="") ? $iniSymRow['BeschreibungFull_de'] : "";
										$iniSymptomString_en =  ($iniSymRow['BeschreibungFull_en'] !="") ? $iniSymRow['BeschreibungFull_en'] : "";
									}
								}

								// initial source symptom string Bfore convertion(this string is used to store in the connecteion table)  
								$iniSymptomStringBeforeConversion_de = ($iniSymptomString_de != "") ? base64_encode($iniSymptomString_de) : "";
								$iniSymptomStringBeforeConversion_en = ($iniSymptomString_en != "") ? base64_encode($iniSymptomString_en) : "";

								// Apply dynamic conversion
								if($iniSymptomString_de != ""){
									$iniSymptomString_de = convertTheSymptom(0, $iniSymptomString_de, $iniSymRow['original_quelle_id'], $iniSymRow['arznei_id'], $iniSymRow['is_final_version_available'], 0, $iniSymRow['id'], $iniSymRow['original_symptom_id']);
									$iniSymptomString_de = base64_encode($iniSymptomString_de);
								}
								if($iniSymptomString_en != ""){
									$iniSymptomString_en = convertTheSymptom(0, $iniSymptomString_en, $iniSymRow['original_quelle_id'], $iniSymRow['arznei_id'], $iniSymRow['is_final_version_available'], 0, $iniSymRow['id'], $iniSymRow['original_symptom_id']);
									$iniSymptomString_en = base64_encode($iniSymptomString_en);
								}

								$iniHasConnections = 0;
								$isFurtherConnectionsAreSaved = 1;
								$is_paste_disabled = 0;
								$is_ns_paste_disabled = 1;
								$is_connect_disabled = 0;
								$is_ns_connect_disabled = 1;
								$ceheckConnectionResult = mysqli_query($db,"SELECT id, is_saved FROM symptom_connections WHERE (initial_source_symptom_id = '".$iniSymRow['id']."' OR comparing_source_symptom_id = '".$iniSymRow['id']."') AND (is_connected = 1 OR is_pasted = 1)".$queryCondition);
								if(mysqli_num_rows($ceheckConnectionResult) > 0){
									$iniHasConnections = 1;
									while($checkConRow = mysqli_fetch_array($ceheckConnectionResult)){
										if($checkConRow['is_saved'] == 0){
											$isFurtherConnectionsAreSaved = 0;
											break;
										}
									}
								}

								// get Origin Jahr/Year
								$originInitialSourceYear = "";
								$originInitialSourceLanguage = "";
								$originInitialQuelleResult = mysqli_query($db,"SELECT quelle.jahr, quelle.quelle_type_id, quelle.sprache FROM quelle WHERE quelle.quelle_id = '".$iniSymRow['original_quelle_id']."'");
								if(mysqli_num_rows($originInitialQuelleResult) > 0){
									$originIniQuelleRow = mysqli_fetch_assoc($originInitialQuelleResult);
									$originInitialSourceYear = $originIniQuelleRow['jahr'];
									if($originIniQuelleRow['sprache'] == "deutsch")
										$originInitialSourceLanguage = "de";
									else if($originIniQuelleRow['sprache'] == "englisch") 
										$originInitialSourceLanguage = "en";
								}

								$compareResultArray[] = array(
									"no_of_match" => 0,
									"percentage" => 0,
									"comparison_initial_source_id" => ($initialQuelleId != "") ? $initialQuelleId : "",
									"source_arznei_id" => ($arzneiId != "") ? $arzneiId : "",
									"initial_source_id" => ($initialQuelleId != "") ? $initialQuelleId : "",
									"initial_original_source_id" => ($iniSymRow['original_quelle_id'] != "") ? $iniSymRow['original_quelle_id'] : "",
									"initial_source_code" => ($iniSymRow['quelle_code'] != "") ? $iniSymRow['quelle_code'] : "",
									"initial_source_year" => ($originInitialSourceYear != "") ? $originInitialSourceYear : "",
									"initial_source_original_language" => ($originInitialSourceLanguage != "") ? $originInitialSourceLanguage : "",
									"initial_saved_version_source_code" => ($initialQuelle != "") ? $initialQuelle : "",
									"initial_source_symptom_highlighted_de" => ($iniSymptomString_de != "") ? $iniSymptomString_de : "",
									"initial_source_symptom_highlighted_en" => ($iniSymptomString_en != "") ? $iniSymptomString_en : "",
									"initial_source_symptom_de" => ($iniSymptomString_de != "") ? $iniSymptomString_de : "",
									"initial_source_symptom_en" => ($iniSymptomString_en != "") ? $iniSymptomString_en : "",
									"initial_source_symptom_before_conversion_highlighted_de" => ($iniSymptomStringBeforeConversion_de != "") ? $iniSymptomStringBeforeConversion_de : "",
									"initial_source_symptom_before_conversion_highlighted_en" => ($iniSymptomStringBeforeConversion_en != "") ? $iniSymptomStringBeforeConversion_en : "",
									"initial_source_symptom_before_conversion_de" => ($iniSymptomStringBeforeConversion_de != "") ? $iniSymptomStringBeforeConversion_de : "",
									"initial_source_symptom_before_conversion_en" => ($iniSymptomStringBeforeConversion_en != "") ? $iniSymptomStringBeforeConversion_en : "",
									"initial_source_symptom_id" => ($iniSymRow['id'] != "") ? $iniSymRow['id'] : "",
									"main_parent_initial_symptom_id" => ($iniSymRow['id'] != "") ? $iniSymRow['id'] : "",
									"connections_main_parent_symptom_id" => ($iniSymRow['id'] != "") ? $iniSymRow['id'] : "",
									"initial_source_symptom_comment" => ($iniSymRow['Kommentar'] != "") ? $iniSymRow['Kommentar'] : "",
									"initial_source_symptom_footnote" => ($iniSymRow['Fussnote'] != "") ? $iniSymRow['Fussnote'] : "",
									"comparing_source_id" => "",
									"comparing_original_source_id" => "",
									"comparing_source_code" => "",
									"comparing_source_year" => "",
									"comparing_source_original_language" => "",
									"comparing_saved_version_source_code" => "",
									"comparing_source_symptom_highlighted_de" => "",
									"comparing_source_symptom_highlighted_en" => "",
									"comparing_source_symptom_de" => "",
									"comparing_source_symptom_en" => "",
									"comparing_source_symptom_before_conversion_highlighted_de" => "",
									"comparing_source_symptom_before_conversion_highlighted_en" => "",
									"comparing_source_symptom_before_conversion_de" => "",
									"comparing_source_symptom_before_conversion_en" => "",
									"comparing_source_symptom_id" => "",
									"comparing_source_symptom_comment" => "",
									"comparing_source_symptom_footnote" => "",
									"comparison_language" => ($individual_comparison_language != "") ? $individual_comparison_language : "",
									// "main_initial_symptom_id" => $iniSymRow['id'],
									"has_connections" => ($iniHasConnections !="") ? $iniHasConnections : "",
									"is_final_version_available" => ($iniSymRow['is_final_version_available'] !="") ? $iniSymRow['is_final_version_available'] : "",
									"is_further_connections_are_saved" => ($isFurtherConnectionsAreSaved !="") ? $isFurtherConnectionsAreSaved : "",
									"should_swap_connect_be_active" => 1,
									"is_pasted" => 0,
									"is_ns_paste" => 0,
									"ns_paste_note" => "",
									"is_initial_source" => 1,
									"active_symptom_type" => "initial",
									"similarity_rate" => ($similarityRate !="") ? $similarityRate : "",
									"comparison_option" => ($comparisonOption !="") ? $comparisonOption : "",
									"is_unmatched_symptom" => 0,
									"is_paste_disabled" => ($is_paste_disabled !="") ? $is_paste_disabled : "",
									"is_ns_paste_disabled" => ($is_ns_paste_disabled !="") ? $is_ns_paste_disabled : "",
									"is_connect_disabled" => ($is_connect_disabled !="") ? $is_connect_disabled : "",
									"is_ns_connect_disabled" => ($is_ns_connect_disabled !="") ? $is_ns_connect_disabled : ""
								);

								if(!empty($comparingSourcesArray)){
									$matchedSymptomArray = array();
									foreach($comparingSourcesArray as $comSrcKey => $comSrcVal){
										$comparingQuelleId = $comparingSourcesArray[$comSrcKey]['quelle_id'];
										$comparingQuelle = $comparingSourcesArray[$comSrcKey]['quelle'];
										$quelleComparingSymptomResult = mysqli_query($db,"SELECT quelle_import_test.original_symptom_id, quelle_import_test.quelle_code, quelle_import_test.original_quelle_id, quelle_import_test.arznei_id, quelle_import_test.final_version_de, quelle_import_test.final_version_en, quelle_import_test.BeschreibungPlain_de, quelle_import_test.BeschreibungPlain_en, quelle_import_test.BeschreibungOriginal_de, quelle_import_test.BeschreibungOriginal_en, quelle_import_test.BeschreibungFull_de, quelle_import_test.BeschreibungFull_en, quelle_import_test.searchable_text_de, quelle_import_test.searchable_text_en, quelle_import_test.is_final_version_available, quelle_import_test.id, quelle_import_test.Kommentar, quelle_import_test.Fussnote FROM quelle_import_test WHERE quelle_import_test.quelle_id = '".$comparingQuelleId."' AND quelle_import_test.arznei_id = '".$arzneiId."' AND quelle_import_test.is_appended_symptom_active = 1");
										while($quelleComparingSymptomRow = mysqli_fetch_array($quelleComparingSymptomResult)){
											// is_final_version_available values (0 = No, 1 = Connect edit, 2 = Paste edit)
											if($quelleComparingSymptomRow['is_final_version_available'] != 0){
												$compSymptomString_de =  ($quelleComparingSymptomRow['final_version_de'] !="") ? $quelleComparingSymptomRow['final_version_de'] : "";
												$compSymptomString_en =  ($quelleComparingSymptomRow['final_version_en'] !="") ? $quelleComparingSymptomRow['final_version_en'] : "";
											}else{
												if($comparisonOption == 1){
													$compSymptomString_de =  ($quelleComparingSymptomRow['searchable_text_de'] !="") ? $quelleComparingSymptomRow['searchable_text_de'] : "";
													$compSymptomString_en =  ($quelleComparingSymptomRow['searchable_text_en'] !="") ? $quelleComparingSymptomRow['searchable_text_en'] : "";
												}else{
													$compSymptomString_de =  ($quelleComparingSymptomRow['BeschreibungFull_de'] !="") ? $quelleComparingSymptomRow['BeschreibungFull_de'] : "";
													$compSymptomString_en =  ($quelleComparingSymptomRow['BeschreibungFull_en'] !="") ? $quelleComparingSymptomRow['BeschreibungFull_en'] : "";
												}
											}

											// comparing source symptom string Bfore convertion(this string is used to store in the connecteion table)  
											$compSymptomStringBeforeConversion_de = ($compSymptomString_de != "") ? base64_encode($compSymptomString_de) : "";
											$compSymptomStringBeforeConversion_en = ($compSymptomString_en != "") ? base64_encode($compSymptomString_en) : "";

											// Apply dynamic conversion
											if($compSymptomString_de != ""){
												$compSymptomString_de = convertTheSymptom(0, $compSymptomString_de, $quelleComparingSymptomRow['original_quelle_id'], $quelleComparingSymptomRow['arznei_id'], $quelleComparingSymptomRow['is_final_version_available'], 0, $quelleComparingSymptomRow['id'], $quelleComparingSymptomRow['original_symptom_id']);
												$compSymptomString_de = base64_encode($compSymptomString_de);	
											}
											if($compSymptomString_en != ""){
												$compSymptomString_en = convertTheSymptom(0, $compSymptomString_en, $quelleComparingSymptomRow['original_quelle_id'], $quelleComparingSymptomRow['arznei_id'], $quelleComparingSymptomRow['is_final_version_available'], 0, $quelleComparingSymptomRow['id'], $quelleComparingSymptomRow['original_symptom_id']);
												$compSymptomString_en = base64_encode($compSymptomString_en);	
											}

											$connectedSymptomResult = mysqli_query($db, "SELECT id FROM symptom_connections WHERE ((initial_source_symptom_id = '".$quelleComparingSymptomRow['id']."' OR comparing_source_symptom_id = '".$quelleComparingSymptomRow['id']."') AND (initial_source_symptom_id = '".$iniSymRow['id']."' OR comparing_source_symptom_id = '".$iniSymRow['id']."')) AND (is_connected = 1 OR is_pasted = 1)".$queryConditionForComparative);
											if(mysqli_num_rows($connectedSymptomResult) == 0){

												if($individual_comparison_language == "en"){
													// English
													$resultArray = comareSymptom2($iniSymptomString_en, $compSymptomString_en, $iniSymptomStringBeforeConversion_en, $compSymptomStringBeforeConversion_en);
													$no_of_match = (isset($resultArray['no_of_match'])) ? $resultArray['no_of_match'] : 0;
													$percentage = (isset($resultArray['percentage'])) ? $resultArray['percentage'] : 0;
													$initial_source_symptom_highlighted_en = (isset($resultArray['initial_source_symptom_highlighted'])) ? $resultArray['initial_source_symptom_highlighted'] : "";
													// $initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
													$comparing_source_symptom_highlighted_en = (isset($resultArray['comparing_source_symptom_highlighted'])) ? $resultArray['comparing_source_symptom_highlighted'] : "";
													// $comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
													$initial_source_symptom_before_conversion_highlighted_en = (isset($resultArray['initial_source_symptom_before_conversion_highlighted'])) ? $resultArray['initial_source_symptom_before_conversion_highlighted'] : "";
													$comparing_source_symptom_before_conversion_highlighted_en = (isset($resultArray['comparing_source_symptom_before_conversion_highlighted'])) ? $resultArray['comparing_source_symptom_before_conversion_highlighted'] : "";	

													// German
													$initial_source_symptom_highlighted_de = (isset($iniSymptomString_de)) ? $iniSymptomString_de : "";
													$comparing_source_symptom_highlighted_de = (isset($compSymptomString_de)) ? $compSymptomString_de : "";
													$initial_source_symptom_before_conversion_highlighted_de = (isset($iniSymptomString_de)) ? $iniSymptomString_de : "";
													$comparing_source_symptom_before_conversion_highlighted_de = (isset($compSymptomString_de)) ? $compSymptomString_de : "";
												} else {
													// German
													$resultArray = comareSymptom2($iniSymptomString_de, $compSymptomString_de, $iniSymptomStringBeforeConversion_de, $compSymptomStringBeforeConversion_de);
													$no_of_match = (isset($resultArray['no_of_match'])) ? $resultArray['no_of_match'] : 0;
													$percentage = (isset($resultArray['percentage'])) ? $resultArray['percentage'] : 0;
													$initial_source_symptom_highlighted_de = (isset($resultArray['initial_source_symptom_highlighted'])) ? $resultArray['initial_source_symptom_highlighted'] : "";
													// $initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
													$comparing_source_symptom_highlighted_de = (isset($resultArray['comparing_source_symptom_highlighted'])) ? $resultArray['comparing_source_symptom_highlighted'] : "";
													// $comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
													$initial_source_symptom_before_conversion_highlighted_de = (isset($resultArray['initial_source_symptom_before_conversion_highlighted'])) ? $resultArray['initial_source_symptom_before_conversion_highlighted'] : "";
													$comparing_source_symptom_before_conversion_highlighted_de = (isset($resultArray['comparing_source_symptom_before_conversion_highlighted'])) ? $resultArray['comparing_source_symptom_before_conversion_highlighted'] : "";

													// English
													$initial_source_symptom_highlighted_en = (isset($iniSymptomString_en)) ? $iniSymptomString_en : "";
													$comparing_source_symptom_highlighted_en = (isset($compSymptomString_en)) ? $compSymptomString_en : "";
													$initial_source_symptom_before_conversion_highlighted_en = (isset($iniSymptomString_en)) ? $iniSymptomString_en : "";
													$comparing_source_symptom_before_conversion_highlighted_en = (isset($compSymptomString_en)) ? $compSymptomString_en : "";
												}
												
												if($percentage >= $similarityRate){

													if(!in_array($quelleComparingSymptomRow['id'], $matchedSymptomIdsArray))
														array_push($matchedSymptomIdsArray, $quelleComparingSymptomRow['id']);

													$comHasConnections = 0;
													$isFurtherConnectionsAreSaved = 1;
													$is_paste_disabled = 0;
													$is_ns_paste_disabled = 1;
													$is_connect_disabled = 0;
													$is_ns_connect_disabled = 1;
													$should_swap_connect_be_active = 1;
													$ceheckConnectionResult = mysqli_query($db,"SELECT id, is_saved, is_connected, is_pasted, initial_source_id, comparing_source_id FROM symptom_connections WHERE (initial_source_symptom_id = '".$quelleComparingSymptomRow['id']."' OR comparing_source_symptom_id = '".$quelleComparingSymptomRow['id']."') AND (initial_source_symptom_id != '".$iniSymRow['id']."' AND comparing_source_symptom_id != '".$iniSymRow['id']."') AND (is_connected = 1 OR is_pasted = 1)".$queryConditionForComparative);
													if(mysqli_num_rows($ceheckConnectionResult) > 0){
														$comHasConnections = 1;
														while($conRow = mysqli_fetch_array($ceheckConnectionResult)){
															if($conRow['is_saved'] == 0)
																$isFurtherConnectionsAreSaved = 0;

															if($conRow['initial_source_id'] == $initialQuelleId)
																$should_swap_connect_be_active = 0;

															if($conRow['initial_source_id'] == $initialQuelleId OR $conRow['comparing_source_id'] == $initialQuelleId){
																if($conRow['is_connected'] == 1)
																{
																	$is_paste_disabled = 1;
																}
																else if($conRow['is_pasted'] == 1) 
																{
																	$is_connect_disabled = 1;
																	$is_paste_disabled = 1;
																}
															}
														}
													}

													// get Origin Jahr/Year
													$originComparingSourceYear = "";
													$originComparingSourceLanguage = "";
													$originComparingQuelleResult = mysqli_query($db,"SELECT quelle.jahr, quelle.quelle_type_id, quelle.sprache FROM quelle WHERE quelle.quelle_id = '".$quelleComparingSymptomRow['original_quelle_id']."'");
													if(mysqli_num_rows($originComparingQuelleResult) > 0){
														$originComQuelleRow = mysqli_fetch_assoc($originComparingQuelleResult);
														$originComparingSourceYear = $originComQuelleRow['jahr'];
														if($originComQuelleRow['sprache'] == "deutsch")
															$originComparingSourceLanguage = "de";
														else if($originComQuelleRow['sprache'] == "englisch") 
															$originComparingSourceLanguage = "en";
													}

													$matchedSymptomArray[] = array(
														"no_of_match" => ($no_of_match != "") ? $no_of_match : "",
														"percentage" => ($percentage != "") ? $percentage : "",
														"comparison_initial_source_id" => ($initialQuelleId != "") ? $initialQuelleId : "",
														"source_arznei_id" => ($arzneiId != "") ? $arzneiId : "",
														"initial_source_id" => ($initialQuelleId != "") ? $initialQuelleId : "",
														"initial_original_source_id" => ($iniSymRow['original_quelle_id'] != "") ? $iniSymRow['original_quelle_id'] : "",
														"initial_source_code" => ($iniSymRow['quelle_code'] != "") ? $iniSymRow['quelle_code'] : "",
														"initial_source_year" => ($originInitialSourceYear != "") ? $originInitialSourceYear : "",
														"initial_source_original_language" => ($originInitialSourceLanguage != "") ? $originInitialSourceLanguage : "",
														"initial_saved_version_source_code" => ($initialQuelle != "") ? $initialQuelle : "",
														"initial_source_symptom_highlighted_de" => ($initial_source_symptom_highlighted_de != "") ? $initial_source_symptom_highlighted_de : "",
														"initial_source_symptom_highlighted_en" => ($initial_source_symptom_highlighted_en != "") ? $initial_source_symptom_highlighted_en : "",
														"initial_source_symptom_de" => ($iniSymptomString_de != "") ? $iniSymptomString_de : "",
														"initial_source_symptom_en" => ($iniSymptomString_en != "") ? $iniSymptomString_en : "",
														"initial_source_symptom_before_conversion_highlighted_de" => ($initial_source_symptom_before_conversion_highlighted_de != "") ? $initial_source_symptom_before_conversion_highlighted_de : "",
														"initial_source_symptom_before_conversion_highlighted_en" => ($initial_source_symptom_before_conversion_highlighted_en != "") ? $initial_source_symptom_before_conversion_highlighted_en : "",
														"initial_source_symptom_before_conversion_de" => ($iniSymptomStringBeforeConversion_de != "") ? $iniSymptomStringBeforeConversion_de : "",
														"initial_source_symptom_before_conversion_en" => ($iniSymptomStringBeforeConversion_en != "") ? $iniSymptomStringBeforeConversion_en : "",
														"initial_source_symptom_id" => ($iniSymRow['id'] != "") ? $iniSymRow['id'] : "",
														"main_parent_initial_symptom_id" => ($iniSymRow['id'] != "") ? $iniSymRow['id'] : "",
														"connections_main_parent_symptom_id" => ($quelleComparingSymptomRow['id'] != "") ? $quelleComparingSymptomRow['id'] : "",
														"initial_source_symptom_comment" => ($iniSymRow['Kommentar'] != "") ? $iniSymRow['Kommentar'] : "",
														"initial_source_symptom_footnote" => ($iniSymRow['Fussnote'] != "") ? $iniSymRow['Fussnote'] : "",
														"comparing_source_id" => ($comparingQuelleId != "") ? $comparingQuelleId : "",
														"comparing_original_source_id" => ($quelleComparingSymptomRow['original_quelle_id'] != "") ? $quelleComparingSymptomRow['original_quelle_id'] : "",
														"comparing_source_code" => ($quelleComparingSymptomRow['quelle_code'] != "") ? $quelleComparingSymptomRow['quelle_code'] : "",
														"comparing_source_year" => ($originComparingSourceYear != "") ? $originComparingSourceYear : "",
														"comparing_source_original_language" => ($originComparingSourceLanguage != "") ? $originComparingSourceLanguage : "",
														"comparing_saved_version_source_code" => ($comparingQuelle != "") ? $comparingQuelle : "",
														"comparing_source_symptom_highlighted_de" => ($comparing_source_symptom_highlighted_de !="") ? $comparing_source_symptom_highlighted_de : "",
														"comparing_source_symptom_highlighted_en" => ($comparing_source_symptom_highlighted_en !="") ? $comparing_source_symptom_highlighted_en : "",
														"comparing_source_symptom_de" => ($compSymptomString_de !="") ? $compSymptomString_de : "",
														"comparing_source_symptom_en" => ($compSymptomString_en !="") ? $compSymptomString_en : "",
														"comparing_source_symptom_before_conversion_highlighted_de" => ($comparing_source_symptom_before_conversion_highlighted_de != "") ? $comparing_source_symptom_before_conversion_highlighted_de : "",
														"comparing_source_symptom_before_conversion_highlighted_en" => ($comparing_source_symptom_before_conversion_highlighted_en != "") ? $comparing_source_symptom_before_conversion_highlighted_en : "",
														"comparing_source_symptom_before_conversion_de" => ($compSymptomStringBeforeConversion_de != "") ? $compSymptomStringBeforeConversion_de : "",
														"comparing_source_symptom_before_conversion_en" => ($compSymptomStringBeforeConversion_en != "") ? $compSymptomStringBeforeConversion_en : "",
														"comparing_source_symptom_id" => ($quelleComparingSymptomRow['id'] != "") ? $quelleComparingSymptomRow['id'] : "",
														"comparing_source_symptom_comment" => ($quelleComparingSymptomRow['Kommentar'] != "") ? $quelleComparingSymptomRow['Kommentar'] : "",
														"comparing_source_symptom_footnote" => ($quelleComparingSymptomRow['Fussnote'] != "") ? $quelleComparingSymptomRow['Fussnote'] : "",
														"comparison_language" => ($individual_comparison_language != "") ? $individual_comparison_language : "",
														// "main_initial_symptom_id" => $iniSymRow['id'],
														"has_connections" => ($comHasConnections != "") ? $comHasConnections : "",
														"is_final_version_available" => ($quelleComparingSymptomRow['is_final_version_available'] != "") ? $quelleComparingSymptomRow['is_final_version_available'] : "",
														"is_further_connections_are_saved" => ($isFurtherConnectionsAreSaved != "") ? $isFurtherConnectionsAreSaved : "",
														"should_swap_connect_be_active" => ($should_swap_connect_be_active != "") ? $should_swap_connect_be_active : "",
														"is_pasted" => 0,
														"is_ns_paste" => 0,
														"ns_paste_note" => "",
														"is_initial_source" => 0,
														"active_symptom_type" => "comparing",
														"similarity_rate" => ($similarityRate != "") ? $similarityRate : "",
														"comparison_option" => ($comparisonOption != "") ? $comparisonOption : "",
														"is_unmatched_symptom" => 0,
														"is_paste_disabled" => ($is_paste_disabled != "") ? $is_paste_disabled : "",
														"is_ns_paste_disabled" => ($is_ns_paste_disabled != "") ? $is_ns_paste_disabled : "",
														"is_connect_disabled" => ($is_connect_disabled != "") ? $is_connect_disabled : "",
														"is_ns_connect_disabled" => ($is_ns_connect_disabled != "") ? $is_ns_connect_disabled : ""
													);
												}
											}
										}
									}

									if(!empty($matchedSymptomIdsArray))
										$matchedSymptomIdsToSent = implode(',', $matchedSymptomIdsArray);

									// Short the matched symptoms DESC
									if(!empty($matchedSymptomArray)){
										$per = array();
										foreach ($matchedSymptomArray as $key => $row)
										{
										    $per[$key] = $row['percentage'];
										}
										array_multisort($per, SORT_DESC, $matchedSymptomArray);
										foreach ($matchedSymptomArray as $key => $value) {
											$compareResultArray[] = $value;
										}
									}
								}
							}
						}

						$dataArr[$mainInitialSymptomId] = $compareResultArray;
						$dataArr[$mainInitialSymptomId]['matched_symptom_ids'] = $matchedSymptomIdsToSent;
					}
				}
			}

			$returnArr['status'] = true;
		    $returnArr['message'] = "Success";
			$returnArr['return_data'] = $dataArr;
			
		}catch (Exception $e) {
	    	$db->rollback();
		    $returnArr['message'] = $e->getMessage();
		}
		/* MySQL Transaction END */

		return $returnArr;
	}


	function getStopWords(){
		global $db;
		$returnArr = array();
		return $returnArr;

		$swResult = mysqli_query($db,"SELECT name, active FROM stop_words WHERE active = 1");
		while($swRow = mysqli_fetch_array($swResult)){
			$stopWords[] = $swRow['name'];
		}
		$stopWords = array_map('strtolower', $stopWords);
		$returnArr = $stopWords;
		return $returnArr;
	}

	function addPreComparisons($quelleId, $arzneiId){
		global $db;
		global $date;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Operation failed'
		);
		
		if($quelleId != "" AND $arzneiId != ""){
			try{
				$comparingQuelleDe = array();
				$comparingQuelleEn = array();
				$initialQuelle = array();

				$initialQuelleYear = "";
				$InitialQuelleResult = mysqli_query($db,"SELECT m.id, m.quelle_id, m.is_symptoms_available_in_de, m.is_symptoms_available_in_en, q.jahr FROM quelle_import_master AS m JOIN quelle AS q ON m.quelle_id = q.quelle_id WHERE m.quelle_id = '".$quelleId."'");
				if(mysqli_num_rows($InitialQuelleResult) > 0){
					$initialQuelleRow = mysqli_fetch_assoc($InitialQuelleResult);
					$initialQuelleYear = $initialQuelleRow['jahr'];
					$initialQuelle['master_id'] = $initialQuelleRow['id'];
					$initialQuelle['quelle_id'] = $initialQuelleRow['quelle_id'];
					$initialQuelle['is_symptoms_available_in_de'] = $initialQuelleRow['is_symptoms_available_in_de'];
					$initialQuelle['is_symptoms_available_in_en'] = $initialQuelleRow['is_symptoms_available_in_en'];
				}

				$comparingQuelleResult = mysqli_query($db,"SELECT m.id, m.quelle_id, m.is_symptoms_available_in_de, m.is_symptoms_available_in_en, q.jahr FROM quelle_import_master AS m JOIN quelle AS q ON m.quelle_id = q.quelle_id WHERE m.arznei_id = '".$arzneiId."' AND m.quelle_id != ".$quelleId);
				if(mysqli_num_rows($comparingQuelleResult) > 0){
					while($quelle = mysqli_fetch_array($comparingQuelleResult)){
						if($quelle['jahr'] >= $initialQuelleYear){
							if($quelle['is_symptoms_available_in_de'] == 1){
								$comparingQuelleDe[] = $quelle['quelle_id'];
							}
							if($quelle['is_symptoms_available_in_en'] == 1){
								$comparingQuelleEn[] = $quelle['quelle_id'];
							}
						}
					}
				}
				$initialQuelleCode = getQuelleCode($quelleId);	
				if(isset($initialQuelle['is_symptoms_available_in_de']) AND $initialQuelle['is_symptoms_available_in_de'] == 1 AND !empty($comparingQuelleDe)){
					$comparingSourceCombinations = array();
					depth_picker($comparingQuelleDe, "", $comparingSourceCombinations);
					$uniqueComparingSourceCombinations = getUniqueCombinations($comparingSourceCombinations);
					
					foreach ($uniqueComparingSourceCombinations as $keyDe => $valDe) {
						$comparingQuelleIdsArr = ($valDe != "") ? explode('_', $valDe) : array();
						$comparingQuelleCodes = array();
						foreach ($comparingQuelleIdsArr as $val) {
							$comparingQuelleCode = getQuelleCode($val);
							$comparingQuelleCodes[] = $comparingQuelleCode;
						}
						
						$comparingQuelleCodeCombined = (!empty($comparingQuelleCodes)) ? implode("_", $comparingQuelleCodes) : "";
						$comparisonName = $initialQuelleCode;
						if($comparingQuelleCodeCombined != "")
							$comparisonName .= "_".$comparingQuelleCodeCombined;  
						$tableName = $arzneiId."_".$quelleId."_".$valDe."_de";
						$checkIfExist = mysqli_query($db,"SELECT id FROM pre_comparison_master_data  WHERE table_name = '".$tableName."'");
						if(mysqli_num_rows($checkIfExist) == 0){
							$comparingSources = implode(',', explode('_', $valDe));
							$masterDataInsertQuery="INSERT INTO pre_comparison_master_data (table_name, comparison_name, similarity_rate, comparison_language, arznei_id, comparison_option, initial_source, comparing_sources, ersteller_datum) VALUES (NULLIF('".$tableName."', ''), NULLIF('".$comparisonName."', ''), 1, 'de', NULLIF('".$arzneiId."', ''), 1, NULLIF('".$quelleId."', ''), NULLIF('".$comparingSources."', ''), NULLIF('".$date."', ''))";
				            $db->query($masterDataInsertQuery);
				    //         $masterDataId = $db->insert_id;
				    //         if($masterDataId != "")
								// compareAndStore($arzneiId, $quelleId, $valDe, 'de', $tableName);
						}
					}
				}

				if(isset($initialQuelle['is_symptoms_available_in_en']) AND $initialQuelle['is_symptoms_available_in_en'] == 1 AND !empty($comparingQuelleEn)){
					$comparingSourceCombinations = array();
					depth_picker($comparingQuelleEn, "", $comparingSourceCombinations);
					$uniqueComparingSourceCombinations = getUniqueCombinations($comparingSourceCombinations);

					foreach ($uniqueComparingSourceCombinations as $keyEn => $valEn) {
						$comparingQuelleIdsArr = ($valEn != "") ? explode('_', $valEn) : array();
						$comparingQuelleCodes = array();
						foreach ($comparingQuelleIdsArr as $val) {
							$comparingQuelleCode = getQuelleCode($val);
							$comparingQuelleCodes[] = $comparingQuelleCode;
						}
						$comparingQuelleCodeCombined = (!empty($comparingQuelleCodes)) ? implode("_", $comparingQuelleCodes) : "";
						$comparisonName = $initialQuelleCode;
						if($comparingQuelleCodeCombined != "")
							$comparisonName .= "_".$comparingQuelleCodeCombined; 
						$tableName = $arzneiId."_".$quelleId."_".$valEn."_en";
						$checkIfExist = mysqli_query($db,"SELECT id FROM pre_comparison_master_data  WHERE table_name = '".$tableName."'");
						if(mysqli_num_rows($checkIfExist) == 0){
							$comparingSources = implode(',', explode('_', $valEn));
							$masterDataInsertQuery="INSERT INTO pre_comparison_master_data (table_name, comparison_name, similarity_rate, comparison_language, arznei_id, comparison_option, initial_source, comparing_sources, ersteller_datum) VALUES (NULLIF('".$tableName."', ''), NULLIF('".$comparisonName."', ''), 1, 'en', NULLIF('".$arzneiId."', ''), 1, NULLIF('".$quelleId."', ''), NULLIF('".$comparingSources."', ''), NULLIF('".$date."', ''))";
				            $db->query($masterDataInsertQuery);
				    //         $masterDataId = $db->insert_id;
				    //         if($masterDataId != "")
								// compareAndStore($arzneiId, $quelleId, $valEn, 'en', $tableName);
						}
					}
				}

				$returnArr['status'] = true;
			    $returnArr['message'] = "Success";
				$returnArr['return_data'] = array();
				
			}catch (Exception $e) {
		    	$db->rollback();
			    $returnArr['message'] = $e->getMessage();
			}
		}
		
		return $returnArr;
	}

	function depth_picker($arr, $temp_string, &$collect) {
	    if ($temp_string != "") 
	        $collect []= $temp_string;

	    for ($i=0, $iMax = sizeof($arr); $i < $iMax; $i++) {
	        $arrcopy = $arr;
	        $elem = array_splice($arrcopy, $i, 1); // removes and returns the i'th element
	        if (sizeof($arrcopy) > 0) {
	            depth_picker($arrcopy, $temp_string ." " . $elem[0], $collect);
	        } else {
	            $collect []= $temp_string. " " . $elem[0];
	        }   
	    }   
	}

	function getUniqueCombinations($collect){
		$newArray = array();
		foreach ($collect as $key => $val) {
			$arr = explode(" ", $val);
			sort($arr);
			$arr = array_filter($arr, 'strlen');
			$idsString = implode('_', $arr);
			if(!in_array($idsString, $newArray))
				$newArray[] = $idsString;
		}
		return $newArray;
	}

	function getQuelleCode($quelleId){
		global $db;
		$returnData = "";
		if($quelleId != ""){
			$quelleResult = mysqli_query($db,"SELECT quelle.quelle_id, quelle.code, quelle.jahr, quelle.quelle_type_id, quelle.titel FROM quelle WHERE quelle.quelle_id = '".$quelleId."'");
			if(mysqli_num_rows($quelleResult) > 0){
				$row = mysqli_fetch_assoc($quelleResult);
				if($row['quelle_type_id'] == 3){
					if($row['code'] != "")
						$preparedQuelleCode = $row['code'];
					else
						$preparedQuelleCode = $row['titel'];
				}
				else{
					if($row['jahr'] != "" AND $row['code'] != "")
						$rowQuelleCode = trim(str_replace(trim($row['jahr']), '', $row['code']));
					else
						$rowQuelleCode = trim($row['code']);
					$preparedQuelleCode = trim($rowQuelleCode." ".$row['jahr']);
				}

				$returnData = $preparedQuelleCode;
			}
		}
		return $returnData;
	}

	function compareAndStore($arzneiId, $initialQuelleId, $comparingQuelleIds, $language, $tableName){
		global $db;
		global $date;

		$matchedSymptomIds = array();
		$compareResultArray = array();
		$unMatchedComparativeSymptomArray = array();
		// Generating Comparing symptoms array start
		$comparingSymptomsArr = array();

		$createTempTable = "CREATE TABLE ".$tableName." ( 
								id INT NOT NULL AUTO_INCREMENT,
								no_of_match INT NULL DEFAULT 0,
								percentage INT NULL DEFAULT 0,
								comparison_initial_source_id INT NULL DEFAULT NULL,
								source_arznei_id INT NULL DEFAULT NULL,
								initial_source_id INT NULL DEFAULT NULL,
								initial_original_source_id INT NULL DEFAULT NULL,
								initial_source_code VARCHAR(255) NULL DEFAULT NULL,
								initial_source_year VARCHAR(100) NULL DEFAULT NULL,
								initial_source_original_language VARCHAR(100) NULL DEFAULT NULL,
								initial_saved_version_source_code VARCHAR(255) NULL DEFAULT NULL,
								initial_source_symptom_highlighted_de TEXT DEFAULT NULL,
								initial_source_symptom_de TEXT DEFAULT NULL,
								initial_source_symptom_before_conversion_highlighted_de TEXT DEFAULT NULL,
								initial_source_symptom_before_conversion_de TEXT DEFAULT NULL,
								initial_source_symptom_highlighted_en TEXT DEFAULT NULL,
								initial_source_symptom_en TEXT DEFAULT NULL,
								initial_source_symptom_before_conversion_highlighted_en TEXT DEFAULT NULL,
								initial_source_symptom_before_conversion_en TEXT DEFAULT NULL,
								initial_source_symptom_id INT NULL DEFAULT NULL,
								main_parent_initial_symptom_id INT NULL DEFAULT NULL,
								connections_main_parent_symptom_id INT NULL DEFAULT NULL,
								initial_source_symptom_comment VARCHAR(255) NULL DEFAULT NULL,
								initial_source_symptom_footnote VARCHAR(255) NULL DEFAULT NULL,
								comparing_source_id INT NULL DEFAULT NULL,
								comparing_original_source_id INT NULL DEFAULT NULL,
								comparing_source_code VARCHAR(255) NULL DEFAULT NULL,
								comparing_source_year VARCHAR(100) NULL DEFAULT NULL,
								comparing_source_original_language VARCHAR(100) NULL DEFAULT NULL,
								comparing_saved_version_source_code VARCHAR(255) NULL DEFAULT NULL,
								comparing_source_symptom_highlighted_de TEXT DEFAULT NULL,
								comparing_source_symptom_de TEXT DEFAULT NULL,
								comparing_source_symptom_before_conversion_highlighted_de TEXT DEFAULT NULL,
								comparing_source_symptom_before_conversion_de TEXT DEFAULT NULL,
								comparing_source_symptom_highlighted_en TEXT DEFAULT NULL,
								comparing_source_symptom_en TEXT DEFAULT NULL,
								comparing_source_symptom_before_conversion_highlighted_en TEXT DEFAULT NULL,
								comparing_source_symptom_before_conversion_en TEXT DEFAULT NULL,
								comparing_source_symptom_id INT NULL DEFAULT NULL,
								comparing_source_symptom_comment VARCHAR(255) NULL DEFAULT NULL,
								comparing_source_symptom_footnote VARCHAR(255) NULL DEFAULT NULL,
								comparison_language VARCHAR(100) NULL DEFAULT NULL,
								has_connections INT NULL DEFAULT NULL,
								is_final_version_available INT NULL DEFAULT NULL,
								is_further_connections_are_saved INT NULL DEFAULT NULL,
								should_swap_connect_be_active INT NULL DEFAULT 1,
								is_pasted INT NULL DEFAULT 0,
								is_ns_paste INT NULL DEFAULT 0,
								ns_paste_note VARCHAR(255) NULL DEFAULT NULL,
								is_initial_source INT NULL DEFAULT 1,
								active_symptom_type VARCHAR(100) NULL DEFAULT NULL,
								similarity_rate INT NULL DEFAULT NULL,
								comparison_option INT NULL DEFAULT NULL,
								is_unmatched_symptom INT NULL DEFAULT 0,
								is_paste_disabled INT NULL DEFAULT NULL,
								is_ns_paste_disabled INT NULL DEFAULT NULL,
								is_connect_disabled INT NULL DEFAULT NULL,
								is_ns_connect_disabled INT NULL DEFAULT NULL,
								PRIMARY KEY (id)
							) ENGINE = InnoDB DEFAULT CHARSET = utf8";
		mysqli_query($db, $createTempTable);


		$comparingSourcesArray = explode('_', $comparingQuelleIds);
		foreach ($comparingSourcesArray as $comparingQuelleId) {
			$quelleComparingSymptomResult = mysqli_query($db,"SELECT quelle_import_test.original_symptom_id, quelle_import_test.quelle_code, quelle_import_test.arznei_id, quelle_import_test.original_quelle_id, quelle_import_test.final_version_de, quelle_import_test.final_version_en, quelle_import_test.BeschreibungPlain_de, quelle_import_test.BeschreibungPlain_en, quelle_import_test.BeschreibungOriginal_de, quelle_import_test.BeschreibungOriginal_en, quelle_import_test.BeschreibungFull_de, quelle_import_test.BeschreibungFull_en, quelle_import_test.searchable_text_de, quelle_import_test.searchable_text_en, quelle_import_test.is_final_version_available, quelle_import_test.id, quelle_import_test.Kommentar, quelle_import_test.Fussnote, quelle.quelle_id, quelle.code, quelle.jahr, quelle.quelle_type_id FROM quelle_import_test LEFT JOIN quelle ON quelle_import_test.quelle_id = quelle.quelle_id JOIN quelle_import_master ON quelle_import_test.master_id = quelle_import_master.id WHERE quelle_import_test.quelle_id = '".$comparingQuelleId."' AND quelle_import_test.arznei_id = '".$arzneiId."' AND quelle_import_test.is_appended_symptom_active = 1");
			while($quelleComparingSymptomRowPre = mysqli_fetch_array($quelleComparingSymptomResult)){
				if($quelleComparingSymptomRowPre['quelle_type_id'] == 3)
					$comparingQuelle = $quelleComparingSymptomRowPre['code'];
				else{
					if($quelleComparingSymptomRowPre['jahr'] != "" AND $quelleComparingSymptomRowPre['code'] != "")
						$rowQuelleCodeForCom = trim(str_replace(trim($quelleComparingSymptomRowPre['jahr']), '', $quelleComparingSymptomRowPre['code']));
					else
						$rowQuelleCodeForCom = trim($quelleComparingSymptomRowPre['code']);
					$comparingQuelle = trim($rowQuelleCodeForCom." ".$quelleComparingSymptomRowPre['jahr']);
				}

				$dataArray = array();
				$dataArray['original_symptom_id'] = $quelleComparingSymptomRowPre['original_symptom_id'];
				$dataArray['quelle_code'] = $quelleComparingSymptomRowPre['quelle_code'];
				$dataArray['arznei_id'] = $quelleComparingSymptomRowPre['arznei_id'];
				$dataArray['original_quelle_id'] = $quelleComparingSymptomRowPre['original_quelle_id'];
				$dataArray['final_version_de'] = $quelleComparingSymptomRowPre['final_version_de'];
				$dataArray['final_version_en'] = $quelleComparingSymptomRowPre['final_version_en'];
				$dataArray['BeschreibungPlain_de'] = $quelleComparingSymptomRowPre['BeschreibungPlain_de'];
				$dataArray['BeschreibungPlain_en'] = $quelleComparingSymptomRowPre['BeschreibungPlain_en'];
				$dataArray['BeschreibungOriginal_de'] = $quelleComparingSymptomRowPre['BeschreibungOriginal_de'];
				$dataArray['BeschreibungOriginal_en'] = $quelleComparingSymptomRowPre['BeschreibungOriginal_en'];
				$dataArray['BeschreibungFull_de'] = $quelleComparingSymptomRowPre['BeschreibungFull_de'];
				$dataArray['BeschreibungFull_en'] = $quelleComparingSymptomRowPre['BeschreibungFull_en'];
				$dataArray['searchable_text_de'] = $quelleComparingSymptomRowPre['searchable_text_de'];
				$dataArray['searchable_text_en'] = $quelleComparingSymptomRowPre['searchable_text_en'];
				$dataArray['is_final_version_available'] = $quelleComparingSymptomRowPre['is_final_version_available'];
				$dataArray['id'] = $quelleComparingSymptomRowPre['id'];
				$dataArray['Kommentar'] = $quelleComparingSymptomRowPre['Kommentar'];
				$dataArray['Fussnote'] = $quelleComparingSymptomRowPre['Fussnote'];
				$dataArray['comparingQuelleId'] = $comparingQuelleId;
				$dataArray['comparingQuelle'] = $comparingQuelle;
				$comparingSymptomsArr[] = $dataArray;
			}
			// Generating Comparing symptoms array end
		}

		$InitialQuelleResult = mysqli_query($db,"SELECT quelle_import_test.original_symptom_id, quelle_import_test.quelle_code, quelle_import_test.arznei_id, quelle_import_test.original_quelle_id, quelle_import_test.final_version_de, quelle_import_test.final_version_en, quelle_import_test.BeschreibungPlain_de, quelle_import_test.BeschreibungPlain_en, quelle_import_test.BeschreibungOriginal_de, quelle_import_test.BeschreibungOriginal_en, quelle_import_test.BeschreibungFull_de, quelle_import_test.BeschreibungFull_en, quelle_import_test.searchable_text_de, quelle_import_test.searchable_text_en, quelle_import_test.is_final_version_available, quelle_import_test.id, quelle_import_test.Kommentar, quelle_import_test.Fussnote FROM quelle_import_test JOIN quelle_import_master ON quelle_import_test.master_id = quelle_import_master.id WHERE quelle_import_test.quelle_id = '".$initialQuelleId."' AND quelle_import_test.arznei_id = '".$arzneiId."' AND quelle_import_test.is_appended_symptom_active = 1");
		if(mysqli_num_rows($InitialQuelleResult) > 0){
			while($iniSymRow = mysqli_fetch_array($InitialQuelleResult)){
				// is_final_version_available values (0 = No, 1 = Connect edit, 2 = Paste edit)
				if($iniSymRow['is_final_version_available'] != 0){
					$iniSymptomString_de =  ($iniSymRow['final_version_de'] != "") ? $iniSymRow['final_version_de'] : "";
					$iniSymptomString_en =  ($iniSymRow['final_version_en'] != "") ? $iniSymRow['final_version_en'] : "";
				} else {
					if($comparisonOption == 1){
						$iniSymptomString_de =  ($iniSymRow['searchable_text_de'] != "") ? $iniSymRow['searchable_text_de'] : "";
						$iniSymptomString_en =  ($iniSymRow['searchable_text_en'] != "") ? $iniSymRow['searchable_text_en'] : "";
					}else{
						$iniSymptomString_de =  ($iniSymRow['BeschreibungFull_de'] != "") ? $iniSymRow['BeschreibungFull_de'] : "";
						$iniSymptomString_en =  ($iniSymRow['BeschreibungFull_en'] != "") ? $iniSymRow['BeschreibungFull_en'] : "";
					}
				}

				// initial source symptom string Bfore convertion(this string is used to store in the connecteion table)  
				$iniSymptomStringBeforeConversion_de = ($iniSymptomString_de != "") ? base64_encode($iniSymptomString_de) : "";
				$iniSymptomStringBeforeConversion_en = ($iniSymptomString_en != "") ? base64_encode($iniSymptomString_en) : "";
				
				// Apply dynamic conversion (this string is used in displying the symptom)
				if($iniSymptomString_de != ""){
					$iniSymptomString_de = convertTheSymptom(0, $iniSymptomString_de, $iniSymRow['original_quelle_id'], $iniSymRow['arznei_id'], $iniSymRow['is_final_version_available'], 0, $iniSymRow['id'], $iniSymRow['original_symptom_id']);
					$iniSymptomString_de = base64_encode($iniSymptomString_de);
				}
				if($iniSymptomString_en != ""){
					$iniSymptomString_en = convertTheSymptom(0, $iniSymptomString_en, $iniSymRow['original_quelle_id'], $iniSymRow['arznei_id'], $iniSymRow['is_final_version_available'], 0, $iniSymRow['id'], $iniSymRow['original_symptom_id']);
					$iniSymptomString_en = base64_encode($iniSymptomString_en);
				}

				$iniHasConnections = 0;
				$isFurtherConnectionsAreSaved = 1;
				$is_paste_disabled = 0;
				$is_ns_paste_disabled = 1;
				$is_connect_disabled = 0;
				$is_ns_connect_disabled = 1;

				// get Origin Jahr/Year
				$originInitialSourceYear = "";
				$originInitialSourceLanguage = "";
				$originInitialQuelleResult = mysqli_query($db,"SELECT quelle.jahr, quelle.quelle_type_id, quelle.sprache FROM quelle WHERE quelle.quelle_id = '".$iniSymRow['original_quelle_id']."'");
				if(mysqli_num_rows($originInitialQuelleResult) > 0){
					$originIniQuelleRow = mysqli_fetch_assoc($originInitialQuelleResult);
					$originInitialSourceYear = $originIniQuelleRow['jahr'];
					if($originIniQuelleRow['sprache'] == "deutsch")
						$originInitialSourceLanguage = "de";
					else if($originIniQuelleRow['sprache'] == "englisch") 
						$originInitialSourceLanguage = "en";
				}

				$compareResultArray[] = array(
					"no_of_match" => 0,
					"percentage" => 0,
					"comparison_initial_source_id" => ($initialQuelleId != "") ? $initialQuelleId : "",
					"source_arznei_id" => ($arzneiId != "") ? $arzneiId : "",
					"initial_source_id" => ($initialQuelleId != "") ? $initialQuelleId : "",
					"initial_original_source_id" => ($iniSymRow['original_quelle_id'] != "") ? $iniSymRow['original_quelle_id'] : "",
					"initial_source_code" => ($iniSymRow['quelle_code'] != "") ? $iniSymRow['quelle_code'] : "",
					"initial_source_year" => ($originInitialSourceYear != "") ? $originInitialSourceYear : "",
					"initial_source_original_language" => ($originInitialSourceLanguage != "") ? $originInitialSourceLanguage : "",
					"initial_saved_version_source_code" => ($iniSymRow['quelle_code'] != "") ? $iniSymRow['quelle_code'] : "",
					"initial_source_symptom_highlighted_de" => ($iniSymptomString_de != "") ? $iniSymptomString_de : "",
					"initial_source_symptom_de" => ($iniSymptomString_de != "") ? $iniSymptomString_de : "",
					"initial_source_symptom_before_conversion_highlighted_de" => ($iniSymptomStringBeforeConversion_de != "") ? $iniSymptomStringBeforeConversion_de : "",
					"initial_source_symptom_before_conversion_de" => ($iniSymptomStringBeforeConversion_de != "") ? $iniSymptomStringBeforeConversion_de : "",
					"initial_source_symptom_highlighted_en" => ($iniSymptomString_en != "") ? $iniSymptomString_en : "",
					"initial_source_symptom_en" => ($iniSymptomString_en != "") ? $iniSymptomString_en : "",
					"initial_source_symptom_before_conversion_highlighted_en" => ($iniSymptomStringBeforeConversion_en != "") ? $iniSymptomStringBeforeConversion_en : "",
					"initial_source_symptom_before_conversion_en" => ($iniSymptomStringBeforeConversion_en != "") ? $iniSymptomStringBeforeConversion_en : "",
					"initial_source_symptom_id" => ($iniSymRow['id'] != "") ? $iniSymRow['id'] : "",
					"main_parent_initial_symptom_id" => ($iniSymRow['id'] != "") ? $iniSymRow['id'] : "",
					"connections_main_parent_symptom_id" => ($iniSymRow['id'] != "") ? $iniSymRow['id'] : "",
					"initial_source_symptom_comment" => ($iniSymRow['Kommentar'] != "") ? $iniSymRow['Kommentar'] : "",
					"initial_source_symptom_footnote" => ($iniSymRow['Fussnote'] != "") ? $iniSymRow['Fussnote'] : "",
					"comparing_source_id" => "",
					"comparing_original_source_id" => "",
					"comparing_source_code" => "",
					"comparing_source_year" => "",
					"comparing_source_original_language" => "",
					"comparing_saved_version_source_code" => "",
					"comparing_source_symptom_highlighted_de" => "",
					"comparing_source_symptom_de" => "",
					"comparing_source_symptom_before_conversion_highlighted_de" => "",
					"comparing_source_symptom_before_conversion_de" => "",
					"comparing_source_symptom_highlighted_en" => "",
					"comparing_source_symptom_en" => "",
					"comparing_source_symptom_before_conversion_highlighted_en" => "",
					"comparing_source_symptom_before_conversion_en" => "",
					"comparing_source_symptom_id" => "",
					"comparing_source_symptom_comment" => "",
					"comparing_source_symptom_footnote" => "",
					"comparison_language" => ($language != "") ? $language : "",
					// "main_initial_symptom_id" => $iniSymRow['id'],
					"has_connections" => ($iniHasConnections != "") ? $iniHasConnections : "",
					"is_final_version_available" => ($iniSymRow['is_final_version_available'] != "") ? $iniSymRow['is_final_version_available'] : "",
					"is_further_connections_are_saved" => ($isFurtherConnectionsAreSaved != "") ? $isFurtherConnectionsAreSaved : "",
					"should_swap_connect_be_active" => 1,
					"is_pasted" => 0,
					"is_ns_paste" => 0,
					"ns_paste_note" => "",
					"is_initial_source" => 1,
					"active_symptom_type" => "initial",
					"similarity_rate" => 1,
					"comparison_option" => 1,
					"is_unmatched_symptom" => 0,
					"is_paste_disabled" => ($is_paste_disabled != "") ? $is_paste_disabled : "",
					"is_ns_paste_disabled" => ($is_ns_paste_disabled != "") ? $is_ns_paste_disabled : "",
					"is_connect_disabled" => ($is_connect_disabled != "") ? $is_connect_disabled : "",
					"is_ns_connect_disabled" => ($is_ns_connect_disabled != "") ? $is_ns_connect_disabled : ""
				);

				if(!empty($comparingSymptomsArr)){
					$matchedSymptomArray = array();
					// Comparing with the main initial source symptoms START
					foreach ($comparingSymptomsArr as $key => $quelleComparingSymptomRow) {
						// is_final_version_available values (0 = No, 1 = Connect edit, 2 = Paste edit)
						if($quelleComparingSymptomRow['is_final_version_available'] != 0){
							$compSymptomString_de =  ($quelleComparingSymptomRow['final_version_de'] != "") ? $quelleComparingSymptomRow['final_version_de'] : "";
							$compSymptomString_en =  ($quelleComparingSymptomRow['final_version_en'] != "") ? $quelleComparingSymptomRow['final_version_en'] : "";
						}else{
							if($comparisonOption == 1){
								$compSymptomString_de =  ($quelleComparingSymptomRow['searchable_text_de'] != "") ? $quelleComparingSymptomRow['searchable_text_de'] : "";
								$compSymptomString_en =  ($quelleComparingSymptomRow['searchable_text_en'] != "") ? $quelleComparingSymptomRow['searchable_text_en'] : "";
							}else{
								$compSymptomString_de =  ($quelleComparingSymptomRow['BeschreibungFull_de'] != "") ? $quelleComparingSymptomRow['BeschreibungFull_de'] : "";
								$compSymptomString_en =  ($quelleComparingSymptomRow['BeschreibungFull_en'] != "") ? $quelleComparingSymptomRow['BeschreibungFull_en'] : "";
							}
						}

						// comparing source symptom string Bfore convertion(this string is used to store in the connecteion table)  
						$compSymptomStringBeforeConversion_de = ($compSymptomString_de != "") ? base64_encode($compSymptomString_de) : "";
						$compSymptomStringBeforeConversion_en = ($compSymptomString_en != "") ? base64_encode($compSymptomString_en) : "";

						// Apply dynamic conversion
						if($compSymptomString_de != ""){
							$compSymptomString_de = convertTheSymptom(0, $compSymptomString_de, $quelleComparingSymptomRow['original_quelle_id'], $quelleComparingSymptomRow['arznei_id'], $quelleComparingSymptomRow['is_final_version_available'], 0, $quelleComparingSymptomRow['id'], $quelleComparingSymptomRow['original_symptom_id']);
							$compSymptomString_de = base64_encode($compSymptomString_de);
						}
						if($compSymptomString_en != ""){
							$compSymptomString_en = convertTheSymptom(0, $compSymptomString_en, $quelleComparingSymptomRow['original_quelle_id'], $quelleComparingSymptomRow['arznei_id'], $quelleComparingSymptomRow['is_final_version_available'], 0, $quelleComparingSymptomRow['id'], $quelleComparingSymptomRow['original_symptom_id']);
							$compSymptomString_en = base64_encode($compSymptomString_en);
						}

						if($comparisonLanguage == "en"){
							// English
							$resultArray = comareSymptom2($iniSymptomString_en, $compSymptomString_en, $iniSymptomStringBeforeConversion_en, $compSymptomStringBeforeConversion_en);
							$no_of_match = (isset($resultArray['no_of_match'])) ? $resultArray['no_of_match'] : 0;
							$percentage = (isset($resultArray['percentage'])) ? $resultArray['percentage'] : 0;
							$initial_source_symptom_highlighted_en = (isset($resultArray['initial_source_symptom_highlighted'])) ? $resultArray['initial_source_symptom_highlighted'] : "";
							// $initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
							$comparing_source_symptom_highlighted_en = (isset($resultArray['comparing_source_symptom_highlighted'])) ? $resultArray['comparing_source_symptom_highlighted'] : "";
							// $comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
							$initial_source_symptom_before_conversion_highlighted_en = (isset($resultArray['initial_source_symptom_before_conversion_highlighted'])) ? $resultArray['initial_source_symptom_before_conversion_highlighted'] : "";
							$comparing_source_symptom_before_conversion_highlighted_en = (isset($resultArray['comparing_source_symptom_before_conversion_highlighted'])) ? $resultArray['comparing_source_symptom_before_conversion_highlighted'] : "";

							// German
							$initial_source_symptom_highlighted_de = (isset($iniSymptomString_de)) ? $iniSymptomString_de : "";
							$comparing_source_symptom_highlighted_de = (isset($compSymptomString_de)) ? $compSymptomString_de : "";
							$initial_source_symptom_before_conversion_highlighted_de = (isset($iniSymptomString_de)) ? $iniSymptomString_de : "";
							$comparing_source_symptom_before_conversion_highlighted_de = (isset($compSymptomString_de)) ? $compSymptomString_de : "";
						} else {
							// German
							$resultArray = comareSymptom2($iniSymptomString_de, $compSymptomString_de, $iniSymptomStringBeforeConversion_de, $compSymptomStringBeforeConversion_de);
							$no_of_match = (isset($resultArray['no_of_match'])) ? $resultArray['no_of_match'] : 0;
							$percentage = (isset($resultArray['percentage'])) ? $resultArray['percentage'] : 0;
							$initial_source_symptom_highlighted_de = (isset($resultArray['initial_source_symptom_highlighted'])) ? $resultArray['initial_source_symptom_highlighted'] : "";
							// $initial_source_symptom_highlighted = htmlentities($initial_source_symptom_highlighted);
							$comparing_source_symptom_highlighted_de = (isset($resultArray['comparing_source_symptom_highlighted'])) ? $resultArray['comparing_source_symptom_highlighted'] : "";
							// $comparing_source_symptom_highlighted = htmlentities($comparing_source_symptom_highlighted);
							$initial_source_symptom_before_conversion_highlighted_de = (isset($resultArray['initial_source_symptom_before_conversion_highlighted'])) ? $resultArray['initial_source_symptom_before_conversion_highlighted'] : "";
							$comparing_source_symptom_before_conversion_highlighted_de = (isset($resultArray['comparing_source_symptom_before_conversion_highlighted'])) ? $resultArray['comparing_source_symptom_before_conversion_highlighted'] : "";

							// English
							$initial_source_symptom_highlighted_en = (isset($iniSymptomString_en)) ? $iniSymptomString_en : "";
							$comparing_source_symptom_highlighted_en = (isset($compSymptomString_en)) ? $compSymptomString_en : "";
							$initial_source_symptom_before_conversion_highlighted_en = (isset($iniSymptomString_en)) ? $iniSymptomString_en : "";
							$comparing_source_symptom_before_conversion_highlighted_en = (isset($compSymptomString_en)) ? $compSymptomString_en : "";
						}

						if($percentage >= 1){
							array_push($matchedSymptomIds, $quelleComparingSymptomRow['id']);

							$comHasConnections = 0;
							$isFurtherConnectionsAreSaved = 1;
							$is_paste_disabled = 0;
							$is_ns_paste_disabled = 1;
							$is_connect_disabled = 0;
							$is_ns_connect_disabled = 1;
							$should_swap_connect_be_active = 1;

							// get Origin Jahr/Year
							$originComparingSourceYear = "";
							$originComparingSourceLanguage = "";
							$originComparingQuelleResult = mysqli_query($db,"SELECT quelle.jahr, quelle.quelle_type_id, quelle.sprache FROM quelle WHERE quelle.quelle_id = '".$quelleComparingSymptomRow['original_quelle_id']."'");
							if(mysqli_num_rows($originComparingQuelleResult) > 0){
								$originComQuelleRow = mysqli_fetch_assoc($originComparingQuelleResult);
								$originComparingSourceYear = $originComQuelleRow['jahr'];
								if($originComQuelleRow['sprache'] == "deutsch")
									$originComparingSourceLanguage = "de";
								else if($originComQuelleRow['sprache'] == "englisch") 
									$originComparingSourceLanguage = "en";
							}

							$matchedSymptomArray[] = array(
								"no_of_match" => ($no_of_match !="") ? $no_of_match : "",
								"percentage" => ($percentage != "") ? $percentage : "",
								"comparison_initial_source_id" => ($initialQuelleId != "") ? $initialQuelleId : "",
								"source_arznei_id" => ($arzneiId != "") ? $arzneiId : "",
								"initial_source_id" => ($initialQuelleId != "") ? $initialQuelleId : "",
								"initial_original_source_id" => ($iniSymRow['original_quelle_id'] != "") ? $iniSymRow['original_quelle_id'] : "",
								"initial_source_code" => ($iniSymRow['quelle_code'] != "") ? $iniSymRow['quelle_code'] : "",
								"initial_source_year" => ($originInitialSourceYear != "") ? $originInitialSourceYear : "",
								"initial_source_original_language" => ($originInitialSourceLanguage != "") ? $originInitialSourceLanguage : "",
								"initial_saved_version_source_code" => ($iniSymRow['quelle_code'] != "") ? $iniSymRow['quelle_code'] : "",
								"initial_source_symptom_highlighted_de" => ($initial_source_symptom_highlighted_de != "") ? $initial_source_symptom_highlighted_de : "",
								"initial_source_symptom_de" => ($iniSymptomString_de != "") ? $iniSymptomString_de : "",
								"initial_source_symptom_before_conversion_highlighted_de" => ($initial_source_symptom_before_conversion_highlighted_de != "") ? $initial_source_symptom_before_conversion_highlighted_de : "",
								"initial_source_symptom_before_conversion_de" => ($iniSymptomStringBeforeConversion_de !="") ? $iniSymptomStringBeforeConversion_de : "",
								"initial_source_symptom_highlighted_en" => ($initial_source_symptom_highlighted_en !="") ? $initial_source_symptom_highlighted_en : "",
								"initial_source_symptom_en" => ($iniSymptomString_en !="") ? $iniSymptomString_en : "",
								"initial_source_symptom_before_conversion_highlighted_en" => ($initial_source_symptom_before_conversion_highlighted_en !="") ? $initial_source_symptom_before_conversion_highlighted_en : "",
								"initial_source_symptom_before_conversion_en" => ($iniSymptomStringBeforeConversion_en !="") ? $iniSymptomStringBeforeConversion_en : "",
								"initial_source_symptom_id" => ($iniSymRow['id'] !="") ? $iniSymRow['id'] : "",
								"main_parent_initial_symptom_id" => ($iniSymRow['id'] !="") ? $iniSymRow['id'] : "",
								"connections_main_parent_symptom_id" => ($quelleComparingSymptomRow['id'] !="") ? $quelleComparingSymptomRow['id'] : "",
								"initial_source_symptom_comment" => ($iniSymRow['Kommentar'] !="") ? $iniSymRow['Kommentar'] : "",
								"initial_source_symptom_footnote" => ($iniSymRow['Fussnote'] !="") ? $iniSymRow['Fussnote'] : "",
								"comparing_source_id" => ($quelleComparingSymptomRow['comparingQuelleId'] !="") ? $quelleComparingSymptomRow['comparingQuelleId'] : "",
								"comparing_original_source_id" => ($quelleComparingSymptomRow['original_quelle_id'] !="") ? $quelleComparingSymptomRow['original_quelle_id'] : "",
								"comparing_source_code" => ($quelleComparingSymptomRow['quelle_code'] !="") ? $quelleComparingSymptomRow['quelle_code'] : "",
								"comparing_source_year" => ($originComparingSourceYear !="") ? $originComparingSourceYear : "",
								"comparing_source_original_language" => ($originComparingSourceLanguage !="") ? $originComparingSourceLanguage : "",
								"comparing_saved_version_source_code" => ($quelleComparingSymptomRow['comparingQuelle'] !="") ? $quelleComparingSymptomRow['comparingQuelle'] : "",
								"comparing_source_symptom_highlighted_de" => ($comparing_source_symptom_highlighted_de !="") ? $comparing_source_symptom_highlighted_de : "",
								"comparing_source_symptom_de" => ($compSymptomString_de !="") ? $compSymptomString_de : "",
								"comparing_source_symptom_before_conversion_highlighted_de" => ($comparing_source_symptom_before_conversion_highlighted_de != "") ? $comparing_source_symptom_before_conversion_highlighted_de : "",
								"comparing_source_symptom_before_conversion_de" => ($compSymptomStringBeforeConversion_de != "") ? $compSymptomStringBeforeConversion_de : "",
								"comparing_source_symptom_highlighted_en" => ($comparing_source_symptom_highlighted_en != "") ? $comparing_source_symptom_highlighted_en : "",
								"comparing_source_symptom_en" => ($compSymptomString_en != "") ? $compSymptomString_en : "",
								"comparing_source_symptom_before_conversion_highlighted_en" => ($comparing_source_symptom_before_conversion_highlighted_en != "") ? $comparing_source_symptom_before_conversion_highlighted_en : "",
								"comparing_source_symptom_before_conversion_en" => ($compSymptomStringBeforeConversion_en != "") ? $compSymptomStringBeforeConversion_en : "",
								"comparing_source_symptom_id" => ($quelleComparingSymptomRow['id'] != "") ? $quelleComparingSymptomRow['id'] : "",
								"comparing_source_symptom_comment" => ($quelleComparingSymptomRow['Kommentar'] != "") ? $quelleComparingSymptomRow['Kommentar'] : "",
								"comparing_source_symptom_footnote" => ($quelleComparingSymptomRow['Fussnote'] != "") ? $quelleComparingSymptomRow['Fussnote'] : "",
								"comparison_language" => ($language != "") ? $language : "",
								// "main_initial_symptom_id" => $iniSymRow['id'],
								"has_connections" => ($comHasConnections != "") ? $comHasConnections : "",
								"is_final_version_available" => ($quelleComparingSymptomRow['is_final_version_available'] != "") ? $quelleComparingSymptomRow['is_final_version_available'] : "",
								"is_further_connections_are_saved" => ($isFurtherConnectionsAreSaved != "") ? $isFurtherConnectionsAreSaved : "",
								"should_swap_connect_be_active" => ($should_swap_connect_be_active != "") ? $should_swap_connect_be_active : "",
								"is_pasted" => 0,
								"is_ns_paste" => 0,
								"ns_paste_note" => "",
								"is_initial_source" => 0,
								"active_symptom_type" => "comparing",
								"similarity_rate" => 1,
								"comparison_option" => 1,
								"is_unmatched_symptom" => 0,
								"is_paste_disabled" => ($is_paste_disabled != "") ? $is_paste_disabled : "",
								"is_ns_paste_disabled" => ($is_ns_paste_disabled != "") ? $is_ns_paste_disabled : "",
								"is_connect_disabled" => ($is_connect_disabled != "") ? $is_connect_disabled : "",
								"is_ns_connect_disabled" => ($is_ns_connect_disabled != "") ? $is_ns_connect_disabled : ""
							);
						}
					}

					if(!empty($matchedSymptomArray)){
						// Short the matched symptoms Percentage DESC
						$per = array();
						foreach ($matchedSymptomArray as $key => $row)
						{
						    $per[$key] = $row['percentage'];
						}
						array_multisort($per, SORT_DESC, $matchedSymptomArray);
						foreach ($matchedSymptomArray as $key => $value) {
							$compareResultArray[] = $value;
						}
					}
				}
			}
		}

		// Inserting in the temp table
		if(!empty($compareResultArray)){
			foreach ($compareResultArray as $key => $tempRow) {
				$tempInsertQuery = "INSERT INTO ".$tableName." (no_of_match, percentage, comparison_initial_source_id, source_arznei_id, initial_source_id, initial_original_source_id, initial_source_code, initial_source_year, initial_source_original_language, initial_saved_version_source_code, initial_source_symptom_highlighted_de, initial_source_symptom_de, initial_source_symptom_before_conversion_highlighted_de, initial_source_symptom_before_conversion_de, initial_source_symptom_highlighted_en, initial_source_symptom_en, initial_source_symptom_before_conversion_highlighted_en, initial_source_symptom_before_conversion_en, initial_source_symptom_id, main_parent_initial_symptom_id, connections_main_parent_symptom_id, initial_source_symptom_comment, initial_source_symptom_footnote, comparing_source_id, comparing_original_source_id, comparing_source_code, comparing_source_year, comparing_source_original_language, comparing_saved_version_source_code, comparing_source_symptom_highlighted_de, comparing_source_symptom_de, comparing_source_symptom_before_conversion_highlighted_de, comparing_source_symptom_before_conversion_de, comparing_source_symptom_highlighted_en, comparing_source_symptom_en, comparing_source_symptom_before_conversion_highlighted_en, comparing_source_symptom_before_conversion_en, comparing_source_symptom_id, comparing_source_symptom_comment, comparing_source_symptom_footnote, comparison_language, has_connections, is_final_version_available, is_further_connections_are_saved, should_swap_connect_be_active, is_pasted, is_ns_paste, ns_paste_note, is_initial_source, active_symptom_type, similarity_rate, comparison_option, is_unmatched_symptom, is_paste_disabled, is_ns_paste_disabled, is_connect_disabled, is_ns_connect_disabled) VALUES (NULLIF('".$tempRow['no_of_match']."', ''), NULLIF('".$tempRow['percentage']."', ''), NULLIF('".$tempRow['comparison_initial_source_id']."', ''), NULLIF('".$tempRow['source_arznei_id']."', ''), NULLIF('".$tempRow['initial_source_id']."', ''), NULLIF('".$tempRow['initial_original_source_id']."', ''), NULLIF('".$tempRow['initial_source_code']."', ''), NULLIF('".$tempRow['initial_source_year']."', ''), NULLIF('".$tempRow['initial_source_original_language']."', ''), NULLIF('".$tempRow['initial_saved_version_source_code']."', ''), NULLIF('".$tempRow['initial_source_symptom_highlighted_de']."', ''), NULLIF('".$tempRow['initial_source_symptom_de']."', ''), NULLIF('".$tempRow['initial_source_symptom_before_conversion_highlighted_de']."', ''), NULLIF('".$tempRow['initial_source_symptom_before_conversion_de']."', ''), NULLIF('".$tempRow['initial_source_symptom_highlighted_en']."', ''), NULLIF('".$tempRow['initial_source_symptom_en']."', ''), NULLIF('".$tempRow['initial_source_symptom_before_conversion_highlighted_en']."', ''), NULLIF('".$tempRow['initial_source_symptom_before_conversion_en']."', ''), NULLIF('".$tempRow['initial_source_symptom_id']."', ''), NULLIF('".$tempRow['main_parent_initial_symptom_id']."', ''), NULLIF('".$tempRow['connections_main_parent_symptom_id']."', ''), NULLIF('".$tempRow['initial_source_symptom_comment']."', ''), NULLIF('".$tempRow['initial_source_symptom_footnote']."', ''), NULLIF('".$tempRow['comparing_source_id']."', ''), NULLIF('".$tempRow['comparing_original_source_id']."', ''), NULLIF('".$tempRow['comparing_source_code']."', ''), NULLIF('".$tempRow['comparing_source_year']."', ''), NULLIF('".$tempRow['comparing_source_original_language']."', ''), NULLIF('".$tempRow['comparing_saved_version_source_code']."', ''), NULLIF('".$tempRow['comparing_source_symptom_highlighted_de']."', ''), NULLIF('".$tempRow['comparing_source_symptom_de']."', ''), NULLIF('".$tempRow['comparing_source_symptom_before_conversion_highlighted_de']."', ''), NULLIF('".$tempRow['comparing_source_symptom_before_conversion_de']."', ''), NULLIF('".$tempRow['comparing_source_symptom_highlighted_en']."', ''), NULLIF('".$tempRow['comparing_source_symptom_en']."', ''), NULLIF('".$tempRow['comparing_source_symptom_before_conversion_highlighted_en']."', ''), NULLIF('".$tempRow['comparing_source_symptom_before_conversion_en']."', ''), NULLIF('".$tempRow['comparing_source_symptom_id']."', ''), NULLIF('".$tempRow['comparing_source_symptom_comment']."', ''), NULLIF('".$tempRow['comparing_source_symptom_footnote']."', ''), NULLIF('".$tempRow['comparison_language']."', ''), NULLIF('".$tempRow['has_connections']."', ''), NULLIF('".$tempRow['is_final_version_available']."', ''), NULLIF('".$tempRow['is_further_connections_are_saved']."', ''), NULLIF('".$tempRow['should_swap_connect_be_active']."', ''), NULLIF('".$tempRow['is_pasted']."', ''), NULLIF('".$tempRow['is_ns_paste']."', ''), NULLIF('".$tempRow['ns_paste_note']."', ''), NULLIF('".$tempRow['is_initial_source']."', ''), NULLIF('".$tempRow['active_symptom_type']."', ''), NULLIF('".$tempRow['similarity_rate']."', ''), NULLIF('".$tempRow['comparison_option']."', ''), NULLIF('".$tempRow['is_unmatched_symptom']."', ''), NULLIF('".$tempRow['is_paste_disabled']."', ''), NULLIF('".$tempRow['is_ns_paste_disabled']."', ''), NULLIF('".$tempRow['is_connect_disabled']."', ''), NULLIF('".$tempRow['is_ns_connect_disabled']."', ''));";
				mysqli_query($db, $tempInsertQuery);
			}
		}
	}

	function teaser( $html ) {
	    $html = str_replace( '&nbsp;', ' ', $html );
	    do {
	        $tmp = $html;
	        $html = preg_replace('#<([^ >]+)[^>]*>[[:space:]]*</\1>#', '', $html );
	    } while ( $html !== $tmp );

	    return $html;
	}

	// Creating initial source selectbox options html
	function getInitialSourceSelectbox($initialSourceId, $arzneiId){
		global $db;
		global $date;
		$returnData = "";
		if($initialSourceId != "" AND $arzneiId != ""){
			$htmlComparisons = '<optgroup label="Comparisons">';
   			$htmlSingleSources = '<optgroup label="Single sources">';
			$htmlSingleSourcesInner = '';
			$htmlComparisonsInner = '';
			$query = "SELECT AQ.quelle_id, Q.code, Q.titel, Q.jahr, Q.band, Q.nummer, Q.auflage, Q.quelle_type_id, Q.autor_or_herausgeber as bucher_autor_or_herausgeber, autor.suchname as zeitschriften_autor_suchname, autor.vorname as zeitschriften_autor_vorname, autor.nachname as zeitschriften_autor_nachname, QIM.is_symptoms_available_in_de, QIM.is_symptoms_available_in_en FROM arznei_quelle as AQ JOIN quelle as Q ON AQ.quelle_id = Q.quelle_id LEFT JOIN quelle_autor ON Q.quelle_id = quelle_autor.quelle_id LEFT JOIN autor ON quelle_autor.autor_id = autor.autor_id JOIN quelle_import_master as QIM ON Q.quelle_id = QIM.quelle_id WHERE AQ.arznei_id = '".$arzneiId."' AND QIM.arznei_id = '".$arzneiId."' AND Q.comparison_save_status = 2 GROUP BY AQ.quelle_id ORDER BY Q.jahr ASC";
			echo "pop   ".$query."   pop";
			$quelleArzneiResult = mysqli_query($db,$query);
			while($quelleRow = mysqli_fetch_array($quelleArzneiResult)){
				echo " dabb   ".$initialSourceId." ".$quelleRow['quelle_id']."   dabb ";
				$selected = ($initialSourceId == $quelleRow['quelle_id']) ? 'selected' : '';
				$quellen_value = "";
				if($quelleRow['quelle_type_id'] == 1 OR $quelleRow['quelle_type_id'] == 2){
					$quellen_value = "";
					$quellen_value = getQuelleAbbreviationForMainSection($quelleRow['quelle_id']);
					$quellen_value .= ($quellen_value != "") ? ', '.$quelleRow['titel'] : $quelleRow['titel'];
				} else {
					// $quellen_value = $quelleRow['code'];
					$quellen_value = getQuelleAbbreviationForMainSection($quelleRow['quelle_id']);
				}

			   	// $quellen_value = $quelleRow['code'];
			   	// if(!empty($quelleRow['jahr'])) $quellen_value .= ($quellen_value != "") ? ', '.$quelleRow['jahr'] : $quelleRow['jahr'];
				// if($quelleRow['code'] != $quelleRow['titel'])
				// 	if(!empty($quelleRow['titel'])) $quellen_value .= ', '.$quelleRow['titel'];
				// if($quelleRow['quelle_type_id'] == 1){
				// 	if(!empty($quelleRow['bucher_autor_or_herausgeber'])) $quellen_value .= ', '.$quelleRow['bucher_autor_or_herausgeber'];
				// }else if($quelleRow['quelle_type_id'] == 2){
				// 	if(!empty($quelleRow['zeitschriften_autor_suchname']) ) 
				// 		$zeitschriften_autor = $quelleRow['zeitschriften_autor_suchname']; 
				// 	else 
				// 		$zeitschriften_autor = $quelleRow['zeitschriften_autor_vorname'].' '.$quelleRow['zeitschriften_autor_nachname'];
				// 	if(!empty($zeitschriften_autor)) $quellen_value .= ', '.$zeitschriften_autor;
				// }


				if($quelleRow['quelle_type_id'] == 3)
					$htmlComparisonsInner .= '<option data-is-symptoms-available-in-de="'.$quelleRow['is_symptoms_available_in_de'].'" data-is-symptoms-available-in-en="'.$quelleRow['is_symptoms_available_in_en'].'" '.$selected.' value="'.$quelleRow['quelle_id'].'">'.$quellen_value.'</option>';
				else
					$htmlSingleSourcesInner .= '<option data-is-symptoms-available-in-de="'.$quelleRow['is_symptoms_available_in_de'].'" data-is-symptoms-available-in-en="'.$quelleRow['is_symptoms_available_in_en'].'" '.$selected.' value="'.$quelleRow['quelle_id'].'">'.$quellen_value.'</option>';
			}

			if($htmlComparisonsInner == '')
				$htmlComparisons .= '<option value="" disabled="disabled">None</option>';
			else
				$htmlComparisons .= $htmlComparisonsInner;
			if($htmlSingleSourcesInner == '')
				$htmlSingleSources .= '<option value="" disabled="disabled">None</option>';
			else
				$htmlSingleSources .= $htmlSingleSourcesInner;

			$htmlComparisons .= '</optgroup>';
			$htmlSingleSources .= '</optgroup>';

			$returnData .= $htmlComparisons.$htmlSingleSources;

		}
		return $returnData;
	}

	// Creating comparing source selectbox options html
	function getComparingSourceSelectbox($initialSourceId, $comparingSourceIds = array(), $arzneiId){
		global $db;
		global $date;
		$returnData = "";
		if($initialSourceId != "" AND !empty($comparingSourceIds) AND $arzneiId != ""){
			$htmlComparisons = '<optgroup label="Comparisons">';
			$htmlSingleSources = '<optgroup label="Single sources">';
			$htmlSingleSourcesInner = '';
			$htmlComparisonsInner = '';
			// fetching compared source ids which are related to the selected initial source id.
			$allComparedSourcers = array();
			array_push($allComparedSourcers, $initialSourceId);
			
			if(!empty($allComparedSourcers)){
				$returnedIds = getAllComparedSourceIds($allComparedSourcers);
				if(!empty($returnedIds)){
					foreach ($returnedIds as $IdVal) {
						if(!in_array($IdVal, $allComparedSourcers))
							array_push($allComparedSourcers, $IdVal);
					}
				}	
			}
			$comparingSourceIdsCommaSeparat = implode(',', $comparingSourceIds);
			$quelleArzneiResult = mysqli_query($db,"SELECT AQ.quelle_id, Q.code, Q.titel, Q.jahr, Q.band, Q.nummer, Q.auflage, Q.quelle_type_id, Q.autor_or_herausgeber as bucher_autor_or_herausgeber, autor.suchname as zeitschriften_autor_suchname, autor.vorname as zeitschriften_autor_vorname, autor.nachname as zeitschriften_autor_nachname, QIM.is_symptoms_available_in_de, QIM.is_symptoms_available_in_en FROM arznei_quelle as AQ JOIN quelle as Q ON AQ.quelle_id = Q.quelle_id LEFT JOIN quelle_autor ON Q.quelle_id = quelle_autor.quelle_id LEFT JOIN autor ON quelle_autor.autor_id = autor.autor_id JOIN quelle_import_master as QIM ON Q.quelle_id = QIM.quelle_id WHERE AQ.arznei_id = '".$arzneiId."' AND QIM.arznei_id = '".$arzneiId."' AND Q.comparison_save_status = 2 GROUP BY AQ.quelle_id ORDER BY Q.jahr ASC");
			while($quelleRow = mysqli_fetch_array($quelleArzneiResult)){
				$disabledHtml = '';
				$is_disabled = 0;
				if(in_array($quelleRow['quelle_id'], $allComparedSourcers))
				{
					$is_disabled = 1;
				}
				else
				{
					$sourceIdsToSend = array();
					$getComparedSourcesQuery = $db->query("SELECT initial_source_id, comparing_source_ids FROM saved_comparisons WHERE quelle_id = ".$quelleRow['quelle_id']);
					if($getComparedSourcesQuery->num_rows > 0){
						$comparedSourcesData = mysqli_fetch_assoc($getComparedSourcesQuery);
						$initialSourceInSave = (isset($comparedSourcesData['initial_source_id']) AND $comparedSourcesData['initial_source_id'] != "") ? trim($comparedSourcesData['initial_source_id']) : null;
						$comparingSourcesInSave = (isset($comparedSourcesData['comparing_source_ids']) AND $comparedSourcesData['comparing_source_ids'] != "") ? explode(',', $comparedSourcesData['comparing_source_ids']) : array();
						if(in_array($initialSourceInSave, $allComparedSourcers))
							$is_disabled = 1;
						array_push($sourceIdsToSend, $initialSourceInSave);

						foreach ($comparingSourcesInSave as $cSourceKey => $cSourceVal) {
							if(in_array($cSourceVal, $allComparedSourcers))
								$is_disabled = 1;
							array_push($sourceIdsToSend, $cSourceVal);
						}
						$newComparedSourcesIds = array();
						if($is_disabled == 0 AND !empty($sourceIdsToSend)){
							$returnedIds = getAllComparedSourceIds($sourceIdsToSend);
							if(!empty($returnedIds)){
								foreach ($returnedIds as $IdVal) {
									if(!in_array($IdVal, $newComparedSourcesIds))
										array_push($newComparedSourcesIds, $IdVal);
								}
							}
						}

						if(in_array($initialSourceId, $newComparedSourcesIds))
							$is_disabled = 1;

						foreach ($allComparedSourcers as $comparedSKey => $comparedSVal) {
							if(in_array($comparedSVal, $newComparedSourcesIds))
								$is_disabled = 1;
						}
					}
				}

				$getInitialQuelleYear = $db->query("SELECT jahr FROM quelle WHERE quelle_id = ".$initialSourceId);
				if($getInitialQuelleYear->num_rows > 0)
					$yearData = mysqli_fetch_assoc($getInitialQuelleYear);
				$initialSourceYear = (isset($yearData['jahr']) AND $yearData['jahr'] != "") ? $yearData['jahr'] : "";
				if($quelleRow['jahr'] < $initialSourceYear)
					$is_disabled = 1;

				if($is_disabled == 1)
					$disabledHtml = 'disabled="disabled"';
											    											
				$selected = (in_array($quelleRow['quelle_id'], $comparingSourceIds)) ? 'selected' : '';

				$quellen_value = "";
				if($quelleRow['quelle_type_id'] == 1 OR $quelleRow['quelle_type_id'] == 2){
					$quellen_value = "";
					$quellen_value = getQuelleAbbreviationForMainSection($quelleRow['quelle_id']);
					$quellen_value .= ($quellen_value != "") ? ', '.$quelleRow['titel'] : $quelleRow['titel'];
				} else {
					// $quellen_value = $quelleRow['code'];
					$quellen_value = getQuelleAbbreviationForMainSection($quelleRow['quelle_id']);
				}

				// $quellen_value = $quelleRow['code'];
				// if(!empty($quelleRow['jahr'])) $quellen_value .= ($quellen_value != "") ? ', '.$quelleRow['jahr'] : $quelleRow['jahr'];
				// if($quelleRow['code'] != $quelleRow['titel'])
				// 	if(!empty($quelleRow['titel'])) $quellen_value .= ', '.$quelleRow['titel'];
				// if($quelleRow['quelle_type_id'] == 1){
				// 	if(!empty($quelleRow['bucher_autor_or_herausgeber'])) $quellen_value .= ', '.$quelleRow['bucher_autor_or_herausgeber'];
				// }else if($quelleRow['quelle_type_id'] == 2){
				// 	if(!empty($quelleRow['zeitschriften_autor_suchname']) ) 
				// 		$zeitschriften_autor = $quelleRow['zeitschriften_autor_suchname']; 
				// 	else 
				// 		$zeitschriften_autor = $quelleRow['zeitschriften_autor_vorname'].' '.$quelleRow['zeitschriften_autor_nachname'];
				// 	if(!empty($zeitschriften_autor)) $quellen_value .= ', '.$zeitschriften_autor;
				// }
				// $disabledHtml = '';  // I have to remove this line to make the disabled concept (comparing source will always be younger then initial source) active again
				if($quelleRow['quelle_type_id'] == 3)
					$htmlComparisonsInner .= '<option data-is-symptoms-available-in-de="'.$quelleRow['is_symptoms_available_in_de'].'" data-is-symptoms-available-in-en="'.$quelleRow['is_symptoms_available_in_en'].'" '.$selected.' value="'.$quelleRow['quelle_id'].'" '.$disabledHtml.'>'.$quellen_value.'</option>';
				else
					$htmlSingleSourcesInner .= '<option data-is-symptoms-available-in-de="'.$quelleRow['is_symptoms_available_in_de'].'" data-is-symptoms-available-in-en="'.$quelleRow['is_symptoms_available_in_en'].'" '.$selected.' value="'.$quelleRow['quelle_id'].'" '.$disabledHtml.'>'.$quellen_value.'</option>';
			}
			if($htmlComparisonsInner == '')
				$htmlComparisons .= '<option value="" disabled="disabled">None</option>';
			else
				$htmlComparisons .= $htmlComparisonsInner;
			if($htmlSingleSourcesInner == '')
				$htmlSingleSources .= '<option value="" disabled="disabled">None</option>';
			else
				$htmlSingleSources .= $htmlSingleSourcesInner;
			
			$htmlSingleSources .= '</optgroup>';
			$htmlComparisons .= '</optgroup>';
			$returnData .= $htmlComparisons.$htmlSingleSources;
		}
		return $returnData;
	}

	function getRemedySelectBoxOptions(){
		global $db;
		global $date;
		$returnData = "";
		$html = "";
		$arzneiResult = mysqli_query($db,"SELECT arznei_id, titel, kuerzel FROM arznei ORDER BY ersteller_datum DESC");
		while($arzneiRow = mysqli_fetch_array($arzneiResult)){
			if($arzneiRow['kuerzel'] != "")
				$html .= '<option value="'.$arzneiRow['arznei_id'].'">'.$arzneiRow['titel'].' ('.$arzneiRow['kuerzel'].')</option>';
			else
				$html .= '<option value="'.$arzneiRow['arznei_id'].'">'.$arzneiRow['titel'].'</option>';
		}
		$returnData = $html;
		return $returnData;
	}

	function getAllSourcesSelectBox(){
		global $db;
		global $date;
		$returnData = "";
		$htmlComparisons = '<optgroup label="Comparisons">';
		$htmlSingleSources = '<optgroup label="Single sources">';
		$htmlComparisonsInner = '';
		$htmlSingleSourcesInner = '';
		$quelleResult = mysqli_query($db,"SELECT quelle.quelle_id, quelle.code, quelle.titel, quelle.jahr, quelle.band, quelle.nummer, quelle.auflage, quelle.quelle_type_id, quelle.autor_or_herausgeber as bucher_autor_or_herausgeber, autor.suchname as zeitschriften_autor_suchname, autor.vorname as zeitschriften_autor_vorname, autor.nachname as zeitschriften_autor_nachname, QIM.is_symptoms_available_in_de, QIM.is_symptoms_available_in_en FROM quelle LEFT JOIN quelle_autor ON quelle.quelle_id = quelle_autor.quelle_id LEFT JOIN autor ON quelle_autor.autor_id = autor.autor_id LEFT JOIN quelle_import_master as QIM ON quelle.quelle_id = QIM.quelle_id WHERE quelle.is_materia_medica = 1 AND quelle.comparison_save_status = 2 ORDER BY quelle.quelle_type_id ASC");
		while($quelleRow = mysqli_fetch_array($quelleResult)){
			$quelleSymptomResultSearch = mysqli_query($db,"SELECT id FROM quelle_import_test WHERE quelle_id = '".$quelleRow['quelle_id']."'");
	    	if(mysqli_num_rows($quelleSymptomResultSearch) > 0){
	    		$quellen_value = "";
				if($quelleRow['quelle_type_id'] == 1 OR $quelleRow['quelle_type_id'] == 2){
					$quellen_value = "";
					$quellen_value = getQuelleAbbreviationForMainSection($quelleRow['quelle_id']);
					$quellen_value .= ($quellen_value != "") ? ', '.$quelleRow['titel'] : $quelleRow['titel'];
				} else {
					// $quellen_value = $quelleRow['code'];
					$quellen_value = getQuelleAbbreviationForMainSection($quelleRow['quelle_id']);
				}
	    		
	    		// $quellen_value = $quelleRow['code'];
				// if(!empty($quelleRow['jahr'])) $quellen_value .= ($quellen_value != "") ? ', '.$quelleRow['jahr'] : $quelleRow['jahr'];
				// if($quelleRow['code'] != $quelleRow['titel'])
				// 	if(!empty($quelleRow['titel'])) $quellen_value .= ', '.$quelleRow['titel'];
				// if($quelleRow['quelle_type_id'] == 1){
				// 	if(!empty($quelleRow['bucher_autor_or_herausgeber'])) $quellen_value .= ', '.$quelleRow['bucher_autor_or_herausgeber'];
				// }else if($quelleRow['quelle_type_id'] == 2){
				// 	if(!empty($quelleRow['zeitschriften_autor_suchname']) ) 
				// 		$zeitschriften_autor = $quelleRow['zeitschriften_autor_suchname']; 
				// 	else 
				// 		$zeitschriften_autor = $quelleRow['zeitschriften_autor_vorname'].' '.$quelleRow['zeitschriften_autor_nachname'];
				// 	if(!empty($zeitschriften_autor)) $quellen_value .= ', '.$zeitschriften_autor;
				// }
				if($quelleRow['quelle_type_id'] == 3)
					$htmlComparisonsInner .= '<option data-is-symptoms-available-in-de="'.$quelleRow['is_symptoms_available_in_de'].'" data-is-symptoms-available-in-en="'.$quelleRow['is_symptoms_available_in_en'].'" value="'.$quelleRow['quelle_id'].'">'.$quellen_value.'</option>';
				else
					$htmlSingleSourcesInner .= '<option data-is-symptoms-available-in-de="'.$quelleRow['is_symptoms_available_in_de'].'" data-is-symptoms-available-in-en="'.$quelleRow['is_symptoms_available_in_en'].'" value="'.$quelleRow['quelle_id'].'">'.$quellen_value.'</option>'; 
	    	}
		}
		if($htmlComparisonsInner == '')
			$htmlComparisons .= '<option value="" disabled="disabled">None</option>';
		else
			$htmlComparisons .= $htmlComparisonsInner;
		if($htmlSingleSourcesInner == '')
			$htmlSingleSources .= '<option value="" disabled="disabled">None</option>';
		else
			$htmlSingleSources .= $htmlSingleSourcesInner;
		
		$htmlSingleSources .= '</optgroup>';
		$htmlComparisons .= '</optgroup>';
		$returnData .= $htmlComparisons.$htmlSingleSources;
		return $returnData;
	}

	function getUserViewDynamicSourceCode($sourceId){
		global $db;
		global $date;
		$returnData = "";
		if($sourceId != ""){
			$getSourceInfoQuery = $db->query("SELECT quelle_abbreviation.abbreviation FROM quelle JOIN quelle_abbreviation ON quelle.user_view_quelle_abbreviation_id = quelle_abbreviation.abbreviation_id WHERE quelle.quelle_id = ".$sourceId);
			if($getSourceInfoQuery->num_rows > 0){
				$sourceInfoData = mysqli_fetch_assoc($getSourceInfoQuery);
				$sourceAbbreviation = (isset($sourceInfoData['abbreviation']) AND $sourceInfoData['abbreviation'] != "") ? trim($sourceInfoData['abbreviation']) : "";
				if($sourceAbbreviation != "")
					$returnData = $sourceAbbreviation;
			}
		}
		return $returnData;
	}

	// 30-06-2022
	// finding matched synonyms
	function findMatchedSynonyms($symptomString, &$globalStopWords = array(), &$availableSynonyms = array()){
		global $db;
		global $date;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Returns blank'
		);
		try{
			if($symptomString != "" AND !empty($availableSynonyms)){
				// $str = replaceTagsWithCustomtag($symptomString);
				$str = $symptomString;
				$cleanSymptomString = str_replace(array(".", ",",":","'",";","!","(",")","[","]","{","}","|", "\\", "/", "?", "<", ">", '*', 'Â°'),'', trim(strip_tags($str)));
				$stringArray = explode(" ", $cleanSymptomString);
				$stringArray = array_map('mb_strtolower', $stringArray);
				$compareableStrArray = array();
				foreach ($stringArray as $strKey => $strVal) {
					// if(!empty($globalStopWords)){
						if(!in_array($strVal, $globalStopWords))
							$compareableStrArray[] = $strVal;
					// }
				}
				$strFilteredWordsArr = array_filter($compareableStrArray,'longenough_for_synonym');
				$strFilteredWordsArr = (!empty($strFilteredWordsArr)) ? array_unique($strFilteredWordsArr) : $strFilteredWordsArr;
				$matchedWordsAndSynonyms = array();
				foreach ($strFilteredWordsArr as $wordKey => $symptomWordVal) {
					$tempWordArr = array();
					$tempWordArr[] = $symptomWordVal; 
					foreach ($availableSynonyms as $synoKey => $synoVal) {
						$synonymWordArr = array();
						$synonymStrictArr = array();
						$synonymPartial1Arr = array();
						$synonymPartial2Arr = array();
						$synonymGeneralArr = array();
						$synonymMinorArr = array();
						$synonymNNArr = array();
						// Word start
						if($synoVal['word'] != ""){
							$wordSynonyms = explode(',', $synoVal['word']);
							foreach ($wordSynonyms as $wordVal) {
								$wordSynonymsExploded = explode(' ', $wordVal);
								foreach ($wordSynonymsExploded as $explodedVal) {
									if(!in_array(trim($explodedVal), $synonymWordArr))
										$synonymWordArr[] = trim($explodedVal);
								}
							}
						}
						// finding fully Matched words
						$matchedSynonymWordArr = array_intersect( $tempWordArr, $synonymWordArr );
						$matchedSynonymWordArr = array_unique($matchedSynonymWordArr);
						if(!empty($matchedSynonymWordArr)){
							$matchedWordsAndSynonyms[$symptomWordVal] = arrangeMatchedWordAndSynonyms($symptomWordVal, $synoVal);
							continue 2;
						}
						// Word end
						// Strict synonym start
						if($synoVal['synonym'] != ""){
							$wordSynonyms = explode(',', $synoVal['synonym']);
							foreach ($wordSynonyms as $wordVal) {
								$wordSynonymsExploded = explode(' ', $wordVal);
								foreach ($wordSynonymsExploded as $explodedVal) {
									if(!in_array(trim($explodedVal), $synonymStrictArr))
										$synonymStrictArr[] = trim($explodedVal);
								}
							}
						}
						// finding fully Matched words
						$matchedSynonymWordArr = array_intersect( $tempWordArr, $synonymStrictArr );
						$matchedSynonymWordArr = array_unique($matchedSynonymWordArr);
						if(!empty($matchedSynonymWordArr)){
							$matchedWordsAndSynonyms[$symptomWordVal] = arrangeMatchedWordAndSynonyms($symptomWordVal, $synoVal);
							continue 2;
						}
						// Strict synonym end
						// Partial1 synonym start
						if($synoVal['cross_reference'] != ""){
							$wordSynonyms = explode(',', $synoVal['cross_reference']);
							foreach ($wordSynonyms as $wordVal) {
								$wordSynonymsExploded = explode(' ', $wordVal);
								foreach ($wordSynonymsExploded as $explodedVal) {
									if(!in_array(trim($explodedVal), $synonymPartial1Arr))
										$synonymPartial1Arr[] = trim($explodedVal);
								}
							}
						}
						// finding fully Matched words
						$matchedSynonymWordArr = array_intersect( $tempWordArr, $synonymPartial1Arr );
						$matchedSynonymWordArr = array_unique($matchedSynonymWordArr);
						if(!empty($matchedSynonymWordArr)){
							$matchedWordsAndSynonyms[$symptomWordVal] = arrangeMatchedWordAndSynonyms($symptomWordVal, $synoVal);
							continue 2;
						}
						// Partial1 synonym end
						// Partial2 synonym start
						if($synoVal['synonym_partial_2'] != ""){
							$wordSynonyms = explode(',', $synoVal['synonym_partial_2']);
							foreach ($wordSynonyms as $wordVal) {
								$wordSynonymsExploded = explode(' ', $wordVal);
								foreach ($wordSynonymsExploded as $explodedVal) {
									if(!in_array(trim($explodedVal), $synonymPartial2Arr))
										$synonymPartial2Arr[] = trim($explodedVal);
								}
							}
						}
						// finding fully Matched words
						$matchedSynonymWordArr = array_intersect( $tempWordArr, $synonymPartial2Arr );
						$matchedSynonymWordArr = array_unique($matchedSynonymWordArr);
						if(!empty($matchedSynonymWordArr)){
							$matchedWordsAndSynonyms[$symptomWordVal] = arrangeMatchedWordAndSynonyms($symptomWordVal, $synoVal);
							continue 2;
						}
						// Partial2 synonym end
						// General synonym start
						if($synoVal['generic_term'] != ""){
							$wordSynonyms = explode(',', $synoVal['generic_term']);
							foreach ($wordSynonyms as $wordVal) {
								$wordSynonymsExploded = explode(' ', $wordVal);
								foreach ($wordSynonymsExploded as $explodedVal) {
									if(!in_array(trim($explodedVal), $synonymGeneralArr))
										$synonymGeneralArr[] = trim($explodedVal);
								}
							}
						}
						// finding fully Matched words
						$matchedSynonymWordArr = array_intersect( $tempWordArr, $synonymGeneralArr );
						$matchedSynonymWordArr = array_unique($matchedSynonymWordArr);
						if(!empty($matchedSynonymWordArr)){
							$matchedWordsAndSynonyms[$symptomWordVal] = arrangeMatchedWordAndSynonyms($symptomWordVal, $synoVal);
							continue 2;
						}
						// General synonym end
						// Minor synonym start
						if($synoVal['sub_term'] != ""){
							$wordSynonyms = explode(',', $synoVal['sub_term']);
							foreach ($wordSynonyms as $wordVal) {
								$wordSynonymsExploded = explode(' ', $wordVal);
								foreach ($wordSynonymsExploded as $explodedVal) {
									if(!in_array(trim($explodedVal), $synonymMinorArr))
										$synonymMinorArr[] = trim($explodedVal);
								}
							}
						}
						// finding fully Matched words
						$matchedSynonymWordArr = array_intersect( $tempWordArr, $synonymMinorArr );
						$matchedSynonymWordArr = array_unique($matchedSynonymWordArr);
						if(!empty($matchedSynonymWordArr)){
							$matchedWordsAndSynonyms[$symptomWordVal] = arrangeMatchedWordAndSynonyms($symptomWordVal, $synoVal);
							continue 2;
						}
						// Minor synonym end
						// NN synonym start
						if($synoVal['synonym_nn'] != ""){
							$wordSynonyms = explode(',', $synoVal['synonym_nn']);
							foreach ($wordSynonyms as $wordVal) {
								$wordSynonymsExploded = explode(' ', $wordVal);
								foreach ($wordSynonymsExploded as $explodedVal) {
									if(!in_array(trim($explodedVal), $synonymNNArr))
										$synonymNNArr[] = trim($explodedVal);
								}
							}
						}
						// finding fully Matched words
						$matchedSynonymWordArr = array_intersect( $tempWordArr, $synonymNNArr );
						$matchedSynonymWordArr = array_unique($matchedSynonymWordArr);
						if(!empty($matchedSynonymWordArr)){
							$matchedWordsAndSynonyms[$symptomWordVal] = arrangeMatchedWordAndSynonyms($symptomWordVal, $synoVal);
							continue 2;
						}
						// NN synonym end
					}
					if(!isset($matchedWordsAndSynonyms[$symptomWordVal])){
						// Check for partial matches
						$partialMatchResult = chechkSynonymPartialMatchs($symptomWordVal, $availableSynonyms);
						if(isset($partialMatchResult[$symptomWordVal]) AND !empty($partialMatchResult[$symptomWordVal])){
							$matchedWordsAndSynonyms[$symptomWordVal] = $partialMatchResult[$symptomWordVal];
						}
					}
				}
				// print_r($matchedWordsAndSynonyms);
				$returnArr['status'] = true;
				$returnArr['return_data'] = (!empty($matchedWordsAndSynonyms)) ? array_unique_multidimensional($matchedWordsAndSynonyms) : array();
		    	$returnArr['message'] = "Success";
			}
		}catch (Exception $e) {
		    $returnArr['message'] = $e->getMessage();
		}

		return $returnArr;
	}

	function chechkSynonymPartialMatchs($word, &$availableSynonyms){
		$numberOfMatches = 0;
		$matchedPartOfTheWord = array();
		$matchedFullWord = array();
		$matchedWordsAndSynonyms = array();
		$initialWord = $word;

		foreach ($availableSynonyms as $synoKey => $synoVal) {
			$synonymWordArr = array();
			$synonymStrictArr = array();
			$synonymPartial1Arr = array();
			$synonymPartial2Arr = array();
			$synonymGeneralArr = array();
			$synonymMinorArr = array();
			$synonymNNArr = array();
			$matchedPartOfTheWord = array();
			$matchedFullWord = array();
			// Word start
			if($synoVal['word'] != ""){
				$wordSynonyms = explode(',', $synoVal['word']);
				foreach ($wordSynonyms as $wordVal) {
					$comparingWord = trim($wordVal);
					$comparingWordLen = mb_strlen(trim($wordVal));
					$matchedPart = "";
					for ($i=$comparingWordLen; $i <= mb_strlen($initialWord) ; $i++) { 
						if($comparingWordLen >= $i)
						{
							if(strtolower(mb_substr( $initialWord, 0, $i )) == strtolower(mb_substr( $comparingWord, 0, $i ))){
								$matchedPart = mb_substr( $initialWord, 0, $i );
							}
							else
								break;
						}
					}
					if($matchedPart != "" AND mb_strlen($matchedPart) > 3){
						if(!in_array($matchedPart, $matchedPartOfTheWord)){
							$matchedPartOfTheWord[] = $matchedPart;
							$matchedFullWord[] = trim($wordVal);
							$numberOfMatches = $numberOfMatches + 0.5;	
						}
					}
				}
			}
			// Word end
			if(!empty($matchedPartOfTheWord)){
				$matchedWordsAndSynonyms[$word] = arrangeMatchedWordAndSynonyms($word, $synoVal);
				continue;
			}
			// Strict synonym start
			if($synoVal['synonym'] != ""){
				$wordSynonyms = explode(',', $synoVal['synonym']);
				foreach ($wordSynonyms as $wordVal) {
					$comparingWord = trim($wordVal);
					$comparingWordLen = mb_strlen(trim($wordVal));
					$matchedPart = "";
					for ($i=$comparingWordLen; $i <= mb_strlen($initialWord) ; $i++) { 
						if($comparingWordLen >= $i)
						{
							if(strtolower(mb_substr( $initialWord, 0, $i )) == strtolower(mb_substr( $comparingWord, 0, $i ))){
								$matchedPart = mb_substr( $initialWord, 0, $i );
							}
							else
								break;
						}
					}
					if($matchedPart != "" AND mb_strlen($matchedPart) > 3){
						if(!in_array($matchedPart, $matchedPartOfTheWord)){
							$matchedPartOfTheWord[] = $matchedPart;
							$matchedFullWord[] = trim($wordVal);
							$numberOfMatches = $numberOfMatches + 0.5;	
						}
					}
				}
			}
			// Strict synonym end
			if(!empty($matchedPartOfTheWord)){
				$matchedWordsAndSynonyms[$word] = arrangeMatchedWordAndSynonyms($word, $synoVal);
				continue;
			}
			// Partial1 synonym start
			if($synoVal['cross_reference'] != ""){
				$wordSynonyms = explode(',', $synoVal['cross_reference']);
				foreach ($wordSynonyms as $wordVal) {
					$comparingWord = trim($wordVal);
					$comparingWordLen = mb_strlen(trim($wordVal));
					$matchedPart = "";
					for ($i=$comparingWordLen; $i <= mb_strlen($initialWord) ; $i++) { 
						if($comparingWordLen >= $i)
						{
							if(strtolower(mb_substr( $initialWord, 0, $i )) == strtolower(mb_substr( $comparingWord, 0, $i ))){
								$matchedPart = mb_substr( $initialWord, 0, $i );
							}
							else
								break;
						}
					}
					if($matchedPart != "" AND mb_strlen($matchedPart) > 3){
						if(!in_array($matchedPart, $matchedPartOfTheWord)){
							$matchedPartOfTheWord[] = $matchedPart;
							$matchedFullWord[] = trim($wordVal);
							$numberOfMatches = $numberOfMatches + 0.5;	
						}
					}
				}
			}
			// Partial1 synonym end
			if(!empty($matchedPartOfTheWord)){
				$matchedWordsAndSynonyms[$word] = arrangeMatchedWordAndSynonyms($word, $synoVal);
				continue;
			}
			// Partial2 synonym start
			if($synoVal['synonym_partial_2'] != ""){
				$wordSynonyms = explode(',', $synoVal['synonym_partial_2']);
				foreach ($wordSynonyms as $wordVal) {
					$comparingWord = trim($wordVal);
					$comparingWordLen = mb_strlen(trim($wordVal));
					$matchedPart = "";
					for ($i=$comparingWordLen; $i <= mb_strlen($initialWord) ; $i++) { 
						if($comparingWordLen >= $i)
						{
							if(strtolower(mb_substr( $initialWord, 0, $i )) == strtolower(mb_substr( $comparingWord, 0, $i ))){
								$matchedPart = mb_substr( $initialWord, 0, $i );
							}
							else
								break;
						}
					}
					if($matchedPart != "" AND mb_strlen($matchedPart) > 3){
						if(!in_array($matchedPart, $matchedPartOfTheWord)){
							$matchedPartOfTheWord[] = $matchedPart;
							$matchedFullWord[] = trim($wordVal);
							$numberOfMatches = $numberOfMatches + 0.5;	
						}
					}
				}
			}
			// Partial2 synonym end
			if(!empty($matchedPartOfTheWord)){
				$matchedWordsAndSynonyms[$word] = arrangeMatchedWordAndSynonyms($word, $synoVal);
				continue;
			}
			// General synonym start
			if($synoVal['generic_term'] != ""){
				$wordSynonyms = explode(',', $synoVal['generic_term']);
				foreach ($wordSynonyms as $wordVal) {
					$comparingWord = trim($wordVal);
					$comparingWordLen = mb_strlen(trim($wordVal));
					$matchedPart = "";
					for ($i=$comparingWordLen; $i <= mb_strlen($initialWord) ; $i++) { 
						if($comparingWordLen >= $i)
						{
							if(strtolower(mb_substr( $initialWord, 0, $i )) == strtolower(mb_substr( $comparingWord, 0, $i ))){
								$matchedPart = mb_substr( $initialWord, 0, $i );
							}
							else
								break;
						}
					}
					if($matchedPart != "" AND mb_strlen($matchedPart) > 3){
						if(!in_array($matchedPart, $matchedPartOfTheWord)){
							$matchedPartOfTheWord[] = $matchedPart;
							$matchedFullWord[] = trim($wordVal);
							$numberOfMatches = $numberOfMatches + 0.5;	
						}
					}
				}
			}
			// General synonym end
			if(!empty($matchedPartOfTheWord)){
				$matchedWordsAndSynonyms[$word] = arrangeMatchedWordAndSynonyms($word, $synoVal);
				continue;
			}
			// Minor synonym start
			if($synoVal['sub_term'] != ""){
				$wordSynonyms = explode(',', $synoVal['sub_term']);
				foreach ($wordSynonyms as $wordVal) {
					$comparingWord = trim($wordVal);
					$comparingWordLen = mb_strlen(trim($wordVal));
					$matchedPart = "";
					for ($i=$comparingWordLen; $i <= mb_strlen($initialWord) ; $i++) { 
						if($comparingWordLen >= $i)
						{
							if(strtolower(mb_substr( $initialWord, 0, $i )) == strtolower(mb_substr( $comparingWord, 0, $i ))){
								$matchedPart = mb_substr( $initialWord, 0, $i );
							}
							else
								break;
						}
					}
					if($matchedPart != "" AND mb_strlen($matchedPart) > 3){
						if(!in_array($matchedPart, $matchedPartOfTheWord)){
							$matchedPartOfTheWord[] = $matchedPart;
							$matchedFullWord[] = trim($wordVal);
							$numberOfMatches = $numberOfMatches + 0.5;	
						}
					}
				}
			}
			// Minor synonym end
			if(!empty($matchedPartOfTheWord)){
				$matchedWordsAndSynonyms[$word] = arrangeMatchedWordAndSynonyms($word, $synoVal);
				continue;
			}
			// NN synonym start
			if($synoVal['synonym_nn'] != ""){
				$wordSynonyms = explode(',', $synoVal['synonym_nn']);
				foreach ($wordSynonyms as $wordVal) {
					$comparingWord = trim($wordVal);
					$comparingWordLen = mb_strlen(trim($wordVal));
					$matchedPart = "";
					for ($i=$comparingWordLen; $i <= mb_strlen($initialWord) ; $i++) { 
						if($comparingWordLen >= $i)
						{
							if(strtolower(mb_substr( $initialWord, 0, $i )) == strtolower(mb_substr( $comparingWord, 0, $i ))){
								$matchedPart = mb_substr( $initialWord, 0, $i );
							}
							else
								break;
						}
					}
					if($matchedPart != "" AND mb_strlen($matchedPart) > 3){
						if(!in_array($matchedPart, $matchedPartOfTheWord)){
							$matchedPartOfTheWord[] = $matchedPart;
							$matchedFullWord[] = trim($wordVal);
							$numberOfMatches = $numberOfMatches + 0.5;	
						}
					}
				}
			}
			// NN synonym end
			if(!empty($matchedPartOfTheWord)){
				$matchedWordsAndSynonyms[$word] = arrangeMatchedWordAndSynonyms($word, $synoVal);
				continue;
			}
		}
		return $matchedWordsAndSynonyms;
	}

	function arrangeMatchedWordAndSynonyms($matchedWords, $synonymArray){
		$finalMatched = array(
			// 'matched_word' => $matchedWords, 
			'synonym_word' => $synonymArray['word'], 
			'synonym' => $synonymArray['synonym'], 
			'cross_reference' => $synonymArray['cross_reference'], 
			'synonym_partial_2' => $synonymArray['synonym_partial_2'], 
			'generic_term' => $synonymArray['generic_term'], 
			'sub_term' => $synonymArray['sub_term'], 
			'synonym_nn' => $synonymArray['synonym_nn']
		);
		return $finalMatched;
	}

	function arrangeSynonymDataToStore($matchedSynonymArr){
		$returnArr = array('synonym_word' => array(), 'synonym' => array(), 'cross_reference' => array(), 'synonym_partial_2' => array(), 'generic_term' => array(), 'sub_term' => array(), 'synonym_nn' => array());
		if(!empty($matchedSynonymArr)){
			$synonymWordArr = array();
			$synonymStrictArr = array();
			$synonymPartial1Arr = array();
			$synonymPartial2Arr = array();
			$synonymGeneralArr = array();
			$synonymMinorArr = array();
			$synonymNNArr = array();
			foreach ($matchedSynonymArr as $wordKey => $wordVal) {
				if($wordVal['synonym_word'] != "")
					$synonymWordArr[$wordKey] = $wordVal['synonym_word'];
				if($wordVal['synonym'] != "")
					$synonymStrictArr[$wordKey] = $wordVal['synonym'];
				if($wordVal['cross_reference'] != "")
					$synonymPartial1Arr[$wordKey] = $wordVal['cross_reference'];
				if($wordVal['synonym_partial_2'] != "")
					$synonymPartial2Arr[$wordKey] = $wordVal['synonym_partial_2'];
				if($wordVal['generic_term'] != "")
					$synonymGeneralArr[$wordKey] = $wordVal['generic_term'];
				if($wordVal['sub_term'] != "")
					$synonymMinorArr[$wordKey] = $wordVal['sub_term'];
				if($wordVal['synonym_nn'] != "")
					$synonymNNArr[$wordKey] = $wordVal['synonym_nn'];
			}
			$returnArr = array('synonym_word' => $synonymWordArr, 'synonym' => $synonymStrictArr, 'cross_reference' => $synonymPartial1Arr, 'synonym_partial_2' => $synonymPartial2Arr, 'generic_term' => $synonymGeneralArr, 'sub_term' => $synonymMinorArr, 'synonym_nn' => $synonymNNArr);
		}
		return $returnArr;
	}

	// array_unique function's multidimensional form
	function array_unique_multidimensional($input)
	{
	    $serialized = array_map('serialize', $input);
	    $unique = array_unique($serialized);
	    return array_intersect_key($input, $unique);
	}

	function getAllOrganizeSynonyms($synonymString){
		$returnArr = array();
		if($synonymString != ""){
			$synonymArr = unserialize($synonymString);
			foreach ($synonymArr as $key => $value) {
				array_push($returnArr, $key);
				$valueArr = explode(',', $value);
				$valueArr = (!empty($valueArr)) ? array_map('trim', $valueArr) : array();
				foreach ($valueArr as $val) {
					array_push($returnArr, $val);
				}
			}
		}
		$returnArr = array_unique($returnArr);
		return $returnArr;
	}

	function displayFormateOfSynonym($unSerializeString = null){
		$returnData = "";
		if($unSerializeString != ""){
			$isSerialized = @unserialize($unSerializeString);
			if ($isSerialized === false && $unSerializeString !== serialize(false)) {
				return $returnData;
			}
			$synonymArray = unserialize($unSerializeString);
			$tempString = "";
			foreach ($synonymArray as $key => $value) {
				$tempString .= $key.": ".$value."<br>";
			}
			$returnData = $tempString;
		}
		return $returnData;
	}

	// Function to make source symptoms up to date with latest synonyms
	function upToDateSourceSymptomSynonyms($quelleId, $arzneiId, $quelleImportMasterId){
		global $db;
		global $date;
		$returnArr = array(
			'status' => false,
			'return_data' => array(),
			'message' => 'Returns blank'
		);
		try {
			$db->begin_transaction();
			if($quelleId != "" AND $arzneiId != "" AND $quelleImportMasterId != "") {
				$getMasterTableInfo = mysqli_query($db, "SELECT is_symptoms_available_in_de, is_symptoms_available_in_en FROM quelle_import_master WHERE id = '".$quelleImportMasterId."'");
				if(mysqli_num_rows($getMasterTableInfo) > 0){
					$masterTableData = mysqli_fetch_assoc($getMasterTableInfo);
					$availableEnSynonyms = array();
					$availableDeSynonyms = array();
					$globalStopWords = getStopWords();
					$synonymEnResult = mysqli_query($db, "SELECT synonym_id, word, synonym, cross_reference, synonym_partial_2, generic_term, sub_term, synonym_nn FROM synonym_en");
					if(mysqli_num_rows($synonymEnResult) > 0){
						while($synonymEnRow = mysqli_fetch_array($synonymEnResult)){
							$synonymData = array();
							$synonymData['synonym_id'] = $synonymEnRow['synonym_id'];
							$synonymData['word'] = mb_strtolower($synonymEnRow['word']);
							$synonymData['synonym'] = mb_strtolower($synonymEnRow['synonym']);
							$synonymData['cross_reference'] = mb_strtolower($synonymEnRow['cross_reference']);
							$synonymData['synonym_partial_2'] = mb_strtolower($synonymEnRow['synonym_partial_2']);
							$synonymData['generic_term'] = mb_strtolower($synonymEnRow['generic_term']);
							$synonymData['sub_term'] = mb_strtolower($synonymEnRow['sub_term']);
							$synonymData['synonym_nn'] = mb_strtolower($synonymEnRow['synonym_nn']);
							$availableEnSynonyms[] = $synonymData;
						}
					}
					$synonymDeResult = mysqli_query($db, "SELECT synonym_id, word, synonym, cross_reference, synonym_partial_2, generic_term, sub_term, synonym_nn FROM synonym_de");
					if(mysqli_num_rows($synonymDeResult) > 0){
						while($synonymDeRow = mysqli_fetch_array($synonymDeResult)){
							$synonymData = array();
							$synonymData['synonym_id'] = $synonymDeRow['synonym_id'];
							$synonymData['word'] = mb_strtolower($synonymDeRow['word']);
							$synonymData['synonym'] = mb_strtolower($synonymDeRow['synonym']);
							$synonymData['cross_reference'] = mb_strtolower($synonymDeRow['cross_reference']);
							$synonymData['synonym_partial_2'] = mb_strtolower($synonymDeRow['synonym_partial_2']);
							$synonymData['generic_term'] = mb_strtolower($synonymDeRow['generic_term']);
							$synonymData['sub_term'] = mb_strtolower($synonymDeRow['sub_term']);
							$synonymData['synonym_nn'] = mb_strtolower($synonymDeRow['synonym_nn']);
							$availableDeSynonyms[] = $synonymData;
						}
					}
					$preUpdQuelleImportmasterQuery = "UPDATE quelle_import_master SET is_synonyms_up_to_date = 0 WHERE id = ".$quelleImportMasterId;
		        	$db->query($preUpdQuelleImportmasterQuery);

					$getComMasterTableInfo = mysqli_query($db, "SELECT table_name FROM pre_comparison_master_data WHERE quelle_id = '".$quelleId."'");
					if(mysqli_num_rows($getComMasterTableInfo) > 0){
						// Combined sources
						$comMasterTableData = mysqli_fetch_assoc($getComMasterTableInfo);
						$comparisonTableCheck = mysqli_query($db,"SHOW TABLES LIKE '".$comMasterTableData['table_name']."'");
						if(mysqli_num_rows($comparisonTableCheck) > 0){
							$symptomResult = mysqli_query($db,"SELECT id, symptom_id, searchable_text_de, searchable_text_en FROM ".$comMasterTableData['table_name']." GROUP BY symptom_id");
							if(mysqli_num_rows($symptomResult) > 0){
								while($symRow = mysqli_fetch_array($symptomResult)){
									if($masterTableData['is_symptoms_available_in_de'] == 1) {
										// Finding match synonyms START
										$matchedSynonyms = findMatchedSynonyms($symRow['searchable_text_de'], $globalStopWords, $availableDeSynonyms);
										$arrangedSynonymData = array();
										if((isset($matchedSynonyms['status']) AND $matchedSynonyms['status'] == true) AND (isset($matchedSynonyms['return_data']) AND !empty($matchedSynonyms['return_data']))){
											$arrangedSynonymData = arrangeSynonymDataToStore($matchedSynonyms['return_data']);
										}
										$data = array();
										$data['synonym_word'] = (isset($arrangedSynonymData['synonym_word']) AND !empty($arrangedSynonymData['synonym_word'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_word'])) : "";
										$data['synonym'] = (isset($arrangedSynonymData['synonym']) AND !empty($arrangedSynonymData['synonym'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym'])) : "";
										$data['cross_reference'] = (isset($arrangedSynonymData['cross_reference']) AND !empty($arrangedSynonymData['cross_reference'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['cross_reference'])) : "";
										$data['synonym_partial_2'] = (isset($arrangedSynonymData['synonym_partial_2']) AND !empty($arrangedSynonymData['synonym_partial_2'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_partial_2'])) : "";
										$data['generic_term'] = (isset($arrangedSynonymData['generic_term']) AND !empty($arrangedSynonymData['generic_term'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['generic_term'])) : "";
										$data['sub_term'] = (isset($arrangedSynonymData['sub_term']) AND !empty($arrangedSynonymData['sub_term'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['sub_term'])) : "";
										$data['synonym_nn'] = (isset($arrangedSynonymData['synonym_nn']) AND !empty($arrangedSynonymData['synonym_nn'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_nn'])) : "";
										// Finding match synonyms END

										$updSymptom = "UPDATE ".$comMasterTableData['table_name']." SET synonym_word = '".$data['synonym_word']."', synonym = '".$data['synonym']."', cross_reference = '".$data['cross_reference']."', synonym_partial_2 = '".$data['synonym_partial_2']."', generic_term = '".$data['generic_term']."', sub_term = '".$data['sub_term']."', synonym_nn = '".$data['synonym_nn']."' WHERE symptom_id = ".$symRow['symptom_id'];
		        						$db->query($updSymptom);
									} else if($masterTableData['is_symptoms_available_in_en'] == 1) {
										// Finding match synonyms START
										$matchedSynonyms = findMatchedSynonyms($symRow['searchable_text_en'], $globalStopWords, $availableEnSynonyms);
										$arrangedSynonymData = array();
										if((isset($matchedSynonyms['status']) AND $matchedSynonyms['status'] == true) AND (isset($matchedSynonyms['return_data']) AND !empty($matchedSynonyms['return_data']))){
											$arrangedSynonymData = arrangeSynonymDataToStore($matchedSynonyms['return_data']);
										}
										$data = array();
										$data['synonym_word'] = (isset($arrangedSynonymData['synonym_word']) AND !empty($arrangedSynonymData['synonym_word'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_word'])) : "";
										$data['synonym'] = (isset($arrangedSynonymData['synonym']) AND !empty($arrangedSynonymData['synonym'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym'])) : "";
										$data['cross_reference'] = (isset($arrangedSynonymData['cross_reference']) AND !empty($arrangedSynonymData['cross_reference'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['cross_reference'])) : "";
										$data['synonym_partial_2'] = (isset($arrangedSynonymData['synonym_partial_2']) AND !empty($arrangedSynonymData['synonym_partial_2'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_partial_2'])) : "";
										$data['generic_term'] = (isset($arrangedSynonymData['generic_term']) AND !empty($arrangedSynonymData['generic_term'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['generic_term'])) : "";
										$data['sub_term'] = (isset($arrangedSynonymData['sub_term']) AND !empty($arrangedSynonymData['sub_term'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['sub_term'])) : "";
										$data['synonym_nn'] = (isset($arrangedSynonymData['synonym_nn']) AND !empty($arrangedSynonymData['synonym_nn'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_nn'])) : "";
										// Finding match synonyms END

										$updSymptom = "UPDATE ".$comMasterTableData['table_name']." SET synonym_word = '".$data['synonym_word']."', synonym = '".$data['synonym']."', cross_reference = '".$data['cross_reference']."', synonym_partial_2 = '".$data['synonym_partial_2']."', generic_term = '".$data['generic_term']."', sub_term = '".$data['sub_term']."', synonym_nn = '".$data['synonym_nn']."' WHERE symptom_id = ".$symRow['symptom_id'];
		        						$db->query($updSymptom);
									}
								}
							}
						}
						$comparisonCompletedTableCheck = mysqli_query($db,"SHOW TABLES LIKE '".$comMasterTableData['table_name']."_completed'");
						if(mysqli_num_rows($comparisonCompletedTableCheck) > 0){
							$symptomResult = mysqli_query($db,"SELECT id, symptom_id, searchable_text_de, searchable_text_en FROM ".$comMasterTableData['table_name']."_completed GROUP BY symptom_id");
							if(mysqli_num_rows($symptomResult) > 0){
								while($symRow = mysqli_fetch_array($symptomResult)){
									if($masterTableData['is_symptoms_available_in_de'] == 1) {
										// Finding match synonyms START
										$matchedSynonyms = findMatchedSynonyms($symRow['searchable_text_de'], $globalStopWords, $availableDeSynonyms);
										$arrangedSynonymData = array();
										if((isset($matchedSynonyms['status']) AND $matchedSynonyms['status'] == true) AND (isset($matchedSynonyms['return_data']) AND !empty($matchedSynonyms['return_data']))){
											$arrangedSynonymData = arrangeSynonymDataToStore($matchedSynonyms['return_data']);
										}
										$data = array();
										$data['synonym_word'] = (isset($arrangedSynonymData['synonym_word']) AND !empty($arrangedSynonymData['synonym_word'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_word'])) : "";
										$data['synonym'] = (isset($arrangedSynonymData['synonym']) AND !empty($arrangedSynonymData['synonym'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym'])) : "";
										$data['cross_reference'] = (isset($arrangedSynonymData['cross_reference']) AND !empty($arrangedSynonymData['cross_reference'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['cross_reference'])) : "";
										$data['synonym_partial_2'] = (isset($arrangedSynonymData['synonym_partial_2']) AND !empty($arrangedSynonymData['synonym_partial_2'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_partial_2'])) : "";
										$data['generic_term'] = (isset($arrangedSynonymData['generic_term']) AND !empty($arrangedSynonymData['generic_term'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['generic_term'])) : "";
										$data['sub_term'] = (isset($arrangedSynonymData['sub_term']) AND !empty($arrangedSynonymData['sub_term'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['sub_term'])) : "";
										$data['synonym_nn'] = (isset($arrangedSynonymData['synonym_nn']) AND !empty($arrangedSynonymData['synonym_nn'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_nn'])) : "";
										// Finding match synonyms END

										$updSymptom = "UPDATE ".$comMasterTableData['table_name']."_completed SET synonym_word = '".$data['synonym_word']."', synonym = '".$data['synonym']."', cross_reference = '".$data['cross_reference']."', synonym_partial_2 = '".$data['synonym_partial_2']."', generic_term = '".$data['generic_term']."', sub_term = '".$data['sub_term']."', synonym_nn = '".$data['synonym_nn']."' WHERE symptom_id = ".$symRow['symptom_id'];
		        						$db->query($updSymptom);
									} else if($masterTableData['is_symptoms_available_in_en'] == 1) {
										// Finding match synonyms START
										$matchedSynonyms = findMatchedSynonyms($symRow['searchable_text_en'], $globalStopWords, $availableEnSynonyms);
										$arrangedSynonymData = array();
										if((isset($matchedSynonyms['status']) AND $matchedSynonyms['status'] == true) AND (isset($matchedSynonyms['return_data']) AND !empty($matchedSynonyms['return_data']))){
											$arrangedSynonymData = arrangeSynonymDataToStore($matchedSynonyms['return_data']);
										}
										$data = array();
										$data['synonym_word'] = (isset($arrangedSynonymData['synonym_word']) AND !empty($arrangedSynonymData['synonym_word'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_word'])) : "";
										$data['synonym'] = (isset($arrangedSynonymData['synonym']) AND !empty($arrangedSynonymData['synonym'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym'])) : "";
										$data['cross_reference'] = (isset($arrangedSynonymData['cross_reference']) AND !empty($arrangedSynonymData['cross_reference'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['cross_reference'])) : "";
										$data['synonym_partial_2'] = (isset($arrangedSynonymData['synonym_partial_2']) AND !empty($arrangedSynonymData['synonym_partial_2'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_partial_2'])) : "";
										$data['generic_term'] = (isset($arrangedSynonymData['generic_term']) AND !empty($arrangedSynonymData['generic_term'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['generic_term'])) : "";
										$data['sub_term'] = (isset($arrangedSynonymData['sub_term']) AND !empty($arrangedSynonymData['sub_term'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['sub_term'])) : "";
										$data['synonym_nn'] = (isset($arrangedSynonymData['synonym_nn']) AND !empty($arrangedSynonymData['synonym_nn'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_nn'])) : "";
										// Finding match synonyms END

										$updSymptom = "UPDATE ".$comMasterTableData['table_name']."_completed SET synonym_word = '".$data['synonym_word']."', synonym = '".$data['synonym']."', cross_reference = '".$data['cross_reference']."', synonym_partial_2 = '".$data['synonym_partial_2']."', generic_term = '".$data['generic_term']."', sub_term = '".$data['sub_term']."', synonym_nn = '".$data['synonym_nn']."' WHERE symptom_id = ".$symRow['symptom_id'];
		        						$db->query($updSymptom);
									}
								}
							}
						}
						$comparisonHighestMatchTableCheck = mysqli_query($db,"SHOW TABLES LIKE '".$comMasterTableData['table_name']."_highest_matches'");
						if(mysqli_num_rows($comparisonHighestMatchTableCheck) > 0){
							$symptomResult = mysqli_query($db,"SELECT id, symptom_id, searchable_text_de, searchable_text_en FROM ".$comMasterTableData['table_name']."_highest_matches GROUP BY symptom_id");
							if(mysqli_num_rows($symptomResult) > 0){
								while($symRow = mysqli_fetch_array($symptomResult)){
									if($masterTableData['is_symptoms_available_in_de'] == 1) {
										// Finding match synonyms START
										$matchedSynonyms = findMatchedSynonyms($symRow['searchable_text_de'], $globalStopWords, $availableDeSynonyms);
										$arrangedSynonymData = array();
										if((isset($matchedSynonyms['status']) AND $matchedSynonyms['status'] == true) AND (isset($matchedSynonyms['return_data']) AND !empty($matchedSynonyms['return_data']))){
											$arrangedSynonymData = arrangeSynonymDataToStore($matchedSynonyms['return_data']);
										}
										$data = array();
										$data['synonym_word'] = (isset($arrangedSynonymData['synonym_word']) AND !empty($arrangedSynonymData['synonym_word'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_word'])) : "";
										$data['synonym'] = (isset($arrangedSynonymData['synonym']) AND !empty($arrangedSynonymData['synonym'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym'])) : "";
										$data['cross_reference'] = (isset($arrangedSynonymData['cross_reference']) AND !empty($arrangedSynonymData['cross_reference'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['cross_reference'])) : "";
										$data['synonym_partial_2'] = (isset($arrangedSynonymData['synonym_partial_2']) AND !empty($arrangedSynonymData['synonym_partial_2'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_partial_2'])) : "";
										$data['generic_term'] = (isset($arrangedSynonymData['generic_term']) AND !empty($arrangedSynonymData['generic_term'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['generic_term'])) : "";
										$data['sub_term'] = (isset($arrangedSynonymData['sub_term']) AND !empty($arrangedSynonymData['sub_term'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['sub_term'])) : "";
										$data['synonym_nn'] = (isset($arrangedSynonymData['synonym_nn']) AND !empty($arrangedSynonymData['synonym_nn'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_nn'])) : "";
										// Finding match synonyms END

										$updSymptom = "UPDATE ".$comMasterTableData['table_name']."_highest_matches SET synonym_word = '".$data['synonym_word']."', synonym = '".$data['synonym']."', cross_reference = '".$data['cross_reference']."', synonym_partial_2 = '".$data['synonym_partial_2']."', generic_term = '".$data['generic_term']."', sub_term = '".$data['sub_term']."', synonym_nn = '".$data['synonym_nn']."' WHERE symptom_id = ".$symRow['symptom_id'];
		        						$db->query($updSymptom);
									} else if($masterTableData['is_symptoms_available_in_en'] == 1) {
										// Finding match synonyms START
										$matchedSynonyms = findMatchedSynonyms($symRow['searchable_text_en'], $globalStopWords, $availableEnSynonyms);
										$arrangedSynonymData = array();
										if((isset($matchedSynonyms['status']) AND $matchedSynonyms['status'] == true) AND (isset($matchedSynonyms['return_data']) AND !empty($matchedSynonyms['return_data']))){
											$arrangedSynonymData = arrangeSynonymDataToStore($matchedSynonyms['return_data']);
										}
										$data = array();
										$data['synonym_word'] = (isset($arrangedSynonymData['synonym_word']) AND !empty($arrangedSynonymData['synonym_word'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_word'])) : "";
										$data['synonym'] = (isset($arrangedSynonymData['synonym']) AND !empty($arrangedSynonymData['synonym'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym'])) : "";
										$data['cross_reference'] = (isset($arrangedSynonymData['cross_reference']) AND !empty($arrangedSynonymData['cross_reference'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['cross_reference'])) : "";
										$data['synonym_partial_2'] = (isset($arrangedSynonymData['synonym_partial_2']) AND !empty($arrangedSynonymData['synonym_partial_2'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_partial_2'])) : "";
										$data['generic_term'] = (isset($arrangedSynonymData['generic_term']) AND !empty($arrangedSynonymData['generic_term'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['generic_term'])) : "";
										$data['sub_term'] = (isset($arrangedSynonymData['sub_term']) AND !empty($arrangedSynonymData['sub_term'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['sub_term'])) : "";
										$data['synonym_nn'] = (isset($arrangedSynonymData['synonym_nn']) AND !empty($arrangedSynonymData['synonym_nn'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_nn'])) : "";
										// Finding match synonyms END

										$updSymptom = "UPDATE ".$comMasterTableData['table_name']."_highest_matches SET synonym_word = '".$data['synonym_word']."', synonym = '".$data['synonym']."', cross_reference = '".$data['cross_reference']."', synonym_partial_2 = '".$data['synonym_partial_2']."', generic_term = '".$data['generic_term']."', sub_term = '".$data['sub_term']."', synonym_nn = '".$data['synonym_nn']."' WHERE symptom_id = ".$symRow['symptom_id'];
		        						$db->query($updSymptom);
									}
								}
							}
						}
					} else {
						// Single sources
						$symptomResult = mysqli_query($db,"SELECT id, searchable_text_de, searchable_text_en FROM quelle_import_test WHERE master_id = '".$quelleImportMasterId."'");
						if(mysqli_num_rows($symptomResult) > 0){
							while($symRow = mysqli_fetch_array($symptomResult)){
								if($masterTableData['is_symptoms_available_in_de'] == 1) {
									// Finding match synonyms START
									$matchedSynonyms = findMatchedSynonyms($symRow['searchable_text_de'], $globalStopWords, $availableDeSynonyms);
									$arrangedSynonymData = array();
									if((isset($matchedSynonyms['status']) AND $matchedSynonyms['status'] == true) AND (isset($matchedSynonyms['return_data']) AND !empty($matchedSynonyms['return_data']))){
										$arrangedSynonymData = arrangeSynonymDataToStore($matchedSynonyms['return_data']);
									}
									$data = array();
									$data['synonym_word'] = (isset($arrangedSynonymData['synonym_word']) AND !empty($arrangedSynonymData['synonym_word'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_word'])) : "";
									$data['synonym'] = (isset($arrangedSynonymData['synonym']) AND !empty($arrangedSynonymData['synonym'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym'])) : "";
									$data['cross_reference'] = (isset($arrangedSynonymData['cross_reference']) AND !empty($arrangedSynonymData['cross_reference'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['cross_reference'])) : "";
									$data['synonym_partial_2'] = (isset($arrangedSynonymData['synonym_partial_2']) AND !empty($arrangedSynonymData['synonym_partial_2'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_partial_2'])) : "";
									$data['generic_term'] = (isset($arrangedSynonymData['generic_term']) AND !empty($arrangedSynonymData['generic_term'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['generic_term'])) : "";
									$data['sub_term'] = (isset($arrangedSynonymData['sub_term']) AND !empty($arrangedSynonymData['sub_term'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['sub_term'])) : "";
									$data['synonym_nn'] = (isset($arrangedSynonymData['synonym_nn']) AND !empty($arrangedSynonymData['synonym_nn'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_nn'])) : "";
									// Finding match synonyms END

									$updSymptom = "UPDATE quelle_import_test SET synonym_word = '".$data['synonym_word']."', synonym = '".$data['synonym']."', cross_reference = '".$data['cross_reference']."', synonym_partial_2 = '".$data['synonym_partial_2']."', generic_term = '".$data['generic_term']."', sub_term = '".$data['sub_term']."', synonym_nn = '".$data['synonym_nn']."' WHERE id = ".$symRow['id'];
	        						$db->query($updSymptom);
								} else if($masterTableData['is_symptoms_available_in_en'] == 1) {
									// Finding match synonyms START
									$matchedSynonyms = findMatchedSynonyms($symRow['searchable_text_en'], $globalStopWords, $availableEnSynonyms);
									$arrangedSynonymData = array();
									if((isset($matchedSynonyms['status']) AND $matchedSynonyms['status'] == true) AND (isset($matchedSynonyms['return_data']) AND !empty($matchedSynonyms['return_data']))){
										$arrangedSynonymData = arrangeSynonymDataToStore($matchedSynonyms['return_data']);
									}
									$data = array();
									$data['synonym_word'] = (isset($arrangedSynonymData['synonym_word']) AND !empty($arrangedSynonymData['synonym_word'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_word'])) : "";
									$data['synonym'] = (isset($arrangedSynonymData['synonym']) AND !empty($arrangedSynonymData['synonym'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym'])) : "";
									$data['cross_reference'] = (isset($arrangedSynonymData['cross_reference']) AND !empty($arrangedSynonymData['cross_reference'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['cross_reference'])) : "";
									$data['synonym_partial_2'] = (isset($arrangedSynonymData['synonym_partial_2']) AND !empty($arrangedSynonymData['synonym_partial_2'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_partial_2'])) : "";
									$data['generic_term'] = (isset($arrangedSynonymData['generic_term']) AND !empty($arrangedSynonymData['generic_term'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['generic_term'])) : "";
									$data['sub_term'] = (isset($arrangedSynonymData['sub_term']) AND !empty($arrangedSynonymData['sub_term'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['sub_term'])) : "";
									$data['synonym_nn'] = (isset($arrangedSynonymData['synonym_nn']) AND !empty($arrangedSynonymData['synonym_nn'])) ? mysqli_real_escape_string($db, serialize($arrangedSynonymData['synonym_nn'])) : "";
									// Finding match synonyms END

									$updSymptom = "UPDATE quelle_import_test SET synonym_word = '".$data['synonym_word']."', synonym = '".$data['synonym']."', cross_reference = '".$data['cross_reference']."', synonym_partial_2 = '".$data['synonym_partial_2']."', generic_term = '".$data['generic_term']."', sub_term = '".$data['sub_term']."', synonym_nn = '".$data['synonym_nn']."' WHERE id = ".$symRow['id'];
	        						$db->query($updSymptom);
								}
							}
						}
					}
		        	$successUpdQuelleImportmasterQuery = "UPDATE quelle_import_master SET is_synonyms_up_to_date = 1 WHERE id = ".$quelleImportMasterId;
		        	$db->query($successUpdQuelleImportmasterQuery);
				}
	        	$db->commit();
	        	$returnArr['status'] = true;
	        	$returnArr['message'] = "Updated successfully.";
			} else {
				$returnArr['message'] = "Required data not found.";
			}
		} catch (Exception $e) {
			$db->rollback();
		    $returnArr['message'] = $e->getMessage();
		}

		return $returnArr;
	}

	//rearrangement of symptoms in order when saving a comparison
	function rearrangeSymptomsInOrder($db,$comparisonTable,$savedConnectionsComparativeIdsArray,$dataPastedId,$swapComparingIdsArray,$swapInitialIdsArray){
		$error = array("Something is wrong","Error in initial ids","Error in comparing ids","Error in fetching comparing ids");
		$savedSortedIdsArray = array();
		$returnArray = array();
		$comparingQuelleInOrder = array();
		$comparingYearSelected = array();
		$comparingQuelleExplode = array();
		$comparisonTableExplode = array();
		$yearOfQuelleExplode = array();
		$comparingQuelleFinal = array();
		$modifiedArray = array();

		$comparisonTableExplode = explode("_", $comparisonTable);
		$initialQuelleIdExtracted = $comparisonTableExplode[3];
		$comparisonTableExplodeLength = count($comparisonTableExplode);
		$comparisonTableExplodeLengthModified = $comparisonTableExplodeLength - 2;
		for($i = $comparisonTableExplodeLengthModified; $i > 3 ; $i--){
			array_push($comparingQuelleInOrder, $comparisonTableExplode[$i]);
		}
		$comparingQuelleInOrderFinal = array_reverse($comparingQuelleInOrder);
		$error[0] = 0;

		//initials are inserted first
		$initialIdFetchResult = mysqli_query($db, "SELECT symptom_id FROM $comparisonTable WHERE `is_initial_symptom`='1'");
		if(mysqli_num_rows($initialIdFetchResult) > 0){
			$error[1] = 0;
			while($initialIdFetchRowResult = mysqli_fetch_array($initialIdFetchResult)){
				if(!in_array($initialIdFetchRowResult['symptom_id'], $savedConnectionsComparativeIdsArray)){
					array_push($savedSortedIdsArray,$initialIdFetchRowResult['symptom_id']); 	
					foreach($dataPastedId as $key){
						if($key['initial_symptom_id'] == $initialIdFetchRowResult['symptom_id'] && $key['is_earlier_connection']=='0'){
							array_push($savedSortedIdsArray,$key['comparing_symptom_id']); 	
						}
					}
				}
			}
		}
		//comparing year in order selected with the help of quelle id
		foreach($comparingQuelleInOrderFinal as $idOfQuelleInOrder){
			$comparingQuelleFetchQuery = "SELECT quelle_id, quelle_type_id, jahr, titel FROM `quelle` WHERE `quelle_id`= $idOfQuelleInOrder";
			$comparingQuelleFetchResult = mysqli_query($db,$comparingQuelleFetchQuery);
			if(mysqli_num_rows($comparingQuelleFetchResult) > 0){
				$error[3] = 0;
				while($comparingQuelleFetchRowResult = mysqli_fetch_array($comparingQuelleFetchResult)){
					if($comparingQuelleFetchRowResult['quelle_type_id'] != 3){
						array_push($comparingYearSelected,$comparingQuelleFetchRowResult['jahr']); 	
					}else{
						$comparingQuelleExplode = explode("_", $comparingQuelleFetchRowResult['titel']);
						$comparingQuelleExplodeLength = count($comparingQuelleExplode);
						for($i = 0; $i < $comparingQuelleExplodeLength ; $i++){
							$codeOfQuelle = "'".$comparingQuelleExplode[$i]."'";
							$yearOfQuelleExplode = explode(" ", $codeOfQuelle);
							$yearOfQuelleExplodeLength = count($yearOfQuelleExplode);
							$yearOfQuelleExplodeLengthModified = $yearOfQuelleExplodeLength - 1;
							$yearOfQuelle = $yearOfQuelleExplode[$yearOfQuelleExplodeLengthModified];
							$yearOfQuelle = str_replace("'","",$yearOfQuelle);
							array_push($comparingYearSelected,$yearOfQuelle); 	
						}
					}
				}
			}
		}

		//modified new
		foreach($swapInitialIdsArray as $swapInitialIds){
			array_push($modifiedArray,$swapInitialIds); 	
		}

		foreach($swapComparingIdsArray as $swapComparingIds){
			array_push($modifiedArray,$swapComparingIds); 	
		}

		//comparing ids are inserted next
		if(!empty($comparingYearSelected)){
			$error[2] = 0;
			foreach($comparingYearSelected as $year){
				$year = "'".$year."'";
				$comparisonTableIdFetchResult = mysqli_query($db, "SELECT symptom_id FROM $comparisonTable WHERE `quelle_jahr`=$year GROUP BY symptom_id");
				if(mysqli_num_rows($comparisonTableIdFetchResult) > 0){
					while($comparisonTableDataIdFetch = mysqli_fetch_array($comparisonTableIdFetchResult)){
						if(!in_array($comparisonTableDataIdFetch['symptom_id'], $savedConnectionsComparativeIdsArray)){
							if(!in_array($comparisonTableDataIdFetch['symptom_id'], $modifiedArray)){
								if(!in_array($comparisonTableDataIdFetch['symptom_id'], $savedSortedIdsArray)){
									array_push($savedSortedIdsArray,$comparisonTableDataIdFetch['symptom_id']);
								} 
							}
						}
					}
				}
			}
		}

		foreach($swapComparingIdsArray as $swapComparingIds){
			if(!in_array($swapComparingIds, $savedSortedIdsArray)){
				array_push($savedSortedIdsArray,$swapComparingIds); 	
			}
		}


		if(count(array_unique($error)) === 1){
			return $savedSortedIdsArray;
		}else{
			return $returnArray;
			
			//uncomment to debug error
			//return $error;
		}
	}

	//upation of the mark field in the comparison table
	function markingUpdation($db,$comparisonTableName,$markedValue,$initialSymptom){
		$connectionsTable = $comparisonTableName."_connections";
		$required = 1;
		$symptomUpdateQuery = "";
		$markedSymptomSearchResult = mysqli_query($db,"SELECT id, is_earlier_connection FROM $connectionsTable WHERE initial_symptom_id = $initialSymptom");
		if($markedValue == "1"){
			// if(mysqli_num_rows($markedSymptomSearchResult) > 1){
			// 	while($markedSymptomSearchData = mysqli_fetch_array($markedSymptomSearchResult)){
			// 		if($markedSymptomSearchData['is_earlier_connection'] == '0')
			// 			$required = 0;
			// 	}
			// }
		}else{
			if(mysqli_num_rows($markedSymptomSearchResult) > 0){
				$required = 0;
			}
		}
	    	

		if(($markedValue == "1" AND $required == 1) OR ($markedValue == "0" AND $required == 1)){
			$symptomUpdateQuery="UPDATE $comparisonTableName SET marked = NULLIF('".$markedValue."', '') WHERE symptom_id = '".$initialSymptom."' AND is_initial_symptom='1'";
			$returnResponse = $db->query($symptomUpdateQuery);
		}
		//return $symptomUpdateQuery;		
	}	

	//upation of the gen-ns field in the comparison table
	function genNsUpdation($db,$comparisonTableName,$gen_ns_val,$initialSymptom){
		$connectionsTable = $comparisonTableName."_connections";
		$required = 1;
		$genNsSearchresult = mysqli_query($db,"SELECT id FROM $connectionsTable WHERE initial_symptom_id = $initialSymptom");
		if($gen_ns_val == "1"){
			if(mysqli_num_rows($genNsSearchresult) > 1){
				$required = 0;
			}
		}else{
			if(mysqli_num_rows($genNsSearchresult) > 0){
				$required = 0;
			}
		}
	    	

		if(($gen_ns_val == "1" AND $required == 1) OR ($gen_ns_val == "0" AND $required == 1)){
			$symptomUpdateQuery="UPDATE $comparisonTableName SET gen_ns = NULLIF('".$gen_ns_val."', '') WHERE symptom_id = '".$initialSymptom."' AND is_initial_symptom='1'";
			$returnResponse = $db->query($symptomUpdateQuery);
		}		
	}

	//number of unmarked symptoms
	function unmarkedSymptoms($db, $comparisonTableName, $similarityRate, $update){
		$unmarkedSymptomsArray = array();
		$unmarkedSymptomsArrayFinal = array();
		$unmarkedSymptomsArrayFinalNumber = array();
		$connectionsTable = $comparisonTableName."_connections";
		$unmarkedInitialsCheckAllResult = mysqli_query($db, "SELECT symptom_id FROM $comparisonTableName  WHERE `is_initial_symptom`='1' AND `marked`='0'");
		if(mysqli_num_rows($unmarkedInitialsCheckAllResult) > 0){
			while($unmarkedInitialsCheckAllRow = mysqli_fetch_array($unmarkedInitialsCheckAllResult)){
				array_push($unmarkedSymptomsArray, $unmarkedInitialsCheckAllRow['symptom_id']);
			}
			if(!empty($unmarkedSymptomsArray)){
				foreach ($unmarkedSymptomsArray as $id){
					$query = "SELECT id FROM $comparisonTableName  WHERE `initial_symptom_id`= $id AND `matched_percentage` >= $similarityRate";
					$unmarkedComparativesCheckAllResult = mysqli_query($db, $query);
					if(mysqli_num_rows($unmarkedComparativesCheckAllResult) == 0){
						array_push($unmarkedSymptomsArrayFinal, $id);

						$unmarkedInitialsCheckInConnectionsResult = mysqli_query($db, "SELECT id, connection_type, is_earlier_connection FROM $connectionsTable  WHERE `comparing_symptom_id`= $id AND `is_earlier_connection` ='1'");
						if(mysqli_num_rows($unmarkedInitialsCheckInConnectionsResult) == 0){
							array_push($unmarkedSymptomsArrayFinalNumber, $id);
                        }else{
                            while($unmarkedInitialsCheckInConnectionsData = mysqli_fetch_array($unmarkedInitialsCheckInConnectionsResult)){
                                if($unmarkedInitialsCheckInConnectionsData['connection_type'] == 'PE'){
                                    array_push($unmarkedSymptomsArrayFinalNumber, $id);
                                }
                            }
						}
					}
				}
			}	
		}
		
		$markedValueInitial = '1';
		$totalUnmarkedNoComparatives = count($unmarkedSymptomsArrayFinalNumber);
		if($update == 1){
			if(!empty($unmarkedSymptomsArrayFinal)){
				foreach ($unmarkedSymptomsArrayFinal as $id){
					$symptomUpdateQuery="UPDATE $comparisonTableName SET marked = NULLIF('".$markedValueInitial."', '') WHERE symptom_id = '".$id."' AND is_initial_symptom='1'";
					$db->query($symptomUpdateQuery);
				}
			}
		}
		//return $unmarkedSymptomsArrayFinal;
		return $totalUnmarkedNoComparatives;
		//return $unmarkedSymptomsArrayFinalNumber;
	}

	//check if initial has other connection
	function checkInitialInConnectionForConnect($db, $comparisonTableName, $id){
		$returnVal = 0;
		$connectionsTable = $comparisonTableName."_connections";
		$query = "SELECT ns_connect FROM $connectionsTable  WHERE `initial_symptom_id`= $id AND ns_connect = '1'";
		$initialsCheckAllResult = mysqli_query($db, $query);
		//if non secure connection exists in the connections table and the number of connections are greater than 1, then we returnVal is 1 else 0
		if(mysqli_num_rows($initialsCheckAllResult) > 1){
			while($initialsCheckAllData = mysqli_fetch_array($initialsCheckAllResult)){
				if($initialsCheckAllData['ns_connect'] == '1'){
					$returnVal = 1;
				}
			}
		}
		return $returnVal;
	}

	//check if initial has other paste connection
	function checkInitialInConnectionForPaste($db, $comparisonTableName, $id){
		$returnVal = 0;
		$connectionsTable = $comparisonTableName."_connections";
		$query = "SELECT ns_paste FROM $connectionsTable  WHERE `initial_symptom_id`= $id AND ns_paste = '1'";
		$initialsCheckAllResult = mysqli_query($db, $query);
		//if non secure connection exists in the connections table and the number of connections are greater than 1, then we returnVal is 1 else 0
		if(mysqli_num_rows($initialsCheckAllResult) > 1){
			while($initialsCheckAllData = mysqli_fetch_array($initialsCheckAllResult)){
				if($initialsCheckAllData['ns_paste'] == '1'){
					$returnVal = 1;
				}
			}
		}
		return $returnVal;
	}

	//check if initial has other connection confirmation NS
	function checkInitialInConnectionForConnectConfirm($db, $comparisonTableName, $id){
		$returnVal = 0;
		$connectionsTable = $comparisonTableName."_connections";
		$query = "SELECT ns_connect FROM $connectionsTable  WHERE `initial_symptom_id`= $id";
		$initialsCheckAllResult = mysqli_query($db, $query);
		if(mysqli_num_rows($initialsCheckAllResult) > 1){
			while($initialsCheckAllData = mysqli_fetch_array($initialsCheckAllResult)){
				if($initialsCheckAllData['ns_connect'] == '1'){
					$returnVal = 1;
				}
			}
		}
		return $returnVal;
	}

	//check if initial has other paste connection confirmation NS
	function checkInitialInConnectionForPasteConfirm($db, $comparisonTableName, $id){
		$returnVal = 0;
		$connectionsTable = $comparisonTableName."_connections";
		$query = "SELECT ns_paste FROM $connectionsTable  WHERE `initial_symptom_id`= $id";
		$initialsCheckAllResult = mysqli_query($db, $query);
		if(mysqli_num_rows($initialsCheckAllResult) > 1){
			while($initialsCheckAllData = mysqli_fetch_array($initialsCheckAllResult)){
				if($initialsCheckAllData['ns_paste'] == '1'){
					$returnVal = 1;
				}
			}
		}
		return $returnVal;
	}

	//check connections of comparing symptoms in connection table
	function checkComparativeConnection($db, $comparisonTableName, $symptomId){
		$connectionFound = 1;
		$connectionTableName = $comparisonTableName."_connections";
		$query = "SELECT id FROM $connectionTableName  WHERE `comparing_symptom_id`= $symptomId";
		$initialsCheckAllResult = mysqli_query($db, $query);
		if(mysqli_num_rows($initialsCheckAllResult) > 1){
			$connectionFound = 0;
		}
		return $connectionFound;
	}

	//custom ns listing function
	function customNsListings($db,$comparisonTableName){
		//declaration
		$allConnectedInitialsArray = array();
		$connectionTypeArray = array();
		$nsConnectValueArray = array();
		$earlierConnectionValueArray = array();
		$countOfInitialsArray = array();
		$keyArray = array();
		$initialToBeDeleted = array();
		$allConnectedInitialsUniqueArray = array();
		$allConnectedInitialsSortedArray = array();
		$returnArray = array();
		if($comparisonTableName != ""){
			$connectionTableName = $comparisonTableName."_connections";
			$allConnectQuery = "SELECT initial_symptom_id, connection_type, ns_connect, is_earlier_connection FROM $connectionTableName";
			$allConnectQueryResult = mysqli_query($db, $allConnectQuery);
			if(mysqli_num_rows($allConnectQueryResult) > 0){
				while($allConnectQueryResultData = mysqli_fetch_array($allConnectQueryResult)){
					//first all info are saved in separate arrays
					array_push($allConnectedInitialsArray, $allConnectQueryResultData['initial_symptom_id']);
					array_push($connectionTypeArray, $allConnectQueryResultData['connection_type']);
					array_push($nsConnectValueArray, $allConnectQueryResultData['ns_connect']);
					array_push($earlierConnectionValueArray, $allConnectQueryResultData['is_earlier_connection']);
				}
			}
			if(!empty($allConnectedInitialsArray) && !empty($connectionTypeArray) && !empty($nsConnectValueArray) && !empty($earlierConnectionValueArray)){
				//Count of initial id occurences are taken
				$countOfInitialsArray = array_count_values($allConnectedInitialsArray);
				foreach ($countOfInitialsArray as $id => $value){
					//This is the case if initials have multiple connect connections with no ns. 
					if($value > 1){
						//multiple occurences keys are taken in an array
						$keyArray = array_keys($allConnectedInitialsArray, $id);
						//temporary array declation
						$modifiedArrayCheckingConnection = array();
						$modifiedArrayCheckingNs = array();
						$modifiedArrayCheckingSwapConnect = array();
						foreach($keyArray as $key){
							array_push($modifiedArrayCheckingConnection, $connectionTypeArray[$key]);
							array_push($modifiedArrayCheckingNs, $nsConnectValueArray[$key]);
							array_push($modifiedArrayCheckingSwapConnect, $connectionTypeArray[$key]);
						}
						//checking if multiple connect exist in an initial
						if(count(array_unique($modifiedArrayCheckingConnection)) == 1){
							if (in_array("connect", $modifiedArrayCheckingConnection)){
								if(count(array_unique($modifiedArrayCheckingNs)) == 1){
									//checking if no ns exist among them
									if (in_array("0", $modifiedArrayCheckingNs)){
										//if no ns exist, the initial id is saved in a array from deletion from all the initials array.
										array_push($initialToBeDeleted, $allConnectedInitialsArray[$keyArray[0]]);
									}
								}
							}
						}
						//checking if multiple swap exist in an initial
						if(count(array_unique($modifiedArrayCheckingConnection)) == 1){
							if (in_array("swap", $modifiedArrayCheckingConnection)){
								if(count(array_unique($modifiedArrayCheckingNs)) == 1){
									//checking if no ns exist among them
									if (in_array("0", $modifiedArrayCheckingNs)){
										//if no ns exist, the initial id is saved in a array from deletion from all the initials array.
										array_push($initialToBeDeleted, $allConnectedInitialsArray[$keyArray[0]]);
									}
								}
							}
						}
						//earlier swap and connect with no ns case
						if ((in_array("connect", $modifiedArrayCheckingSwapConnect)) && (in_array("swap", $modifiedArrayCheckingSwapConnect))){
							//checking if no ns exist among them
							if (in_array("0", $modifiedArrayCheckingNs)){
								//if no ns exist, the initial id is saved in a array from deletion from all the initials array.
								array_push($initialToBeDeleted, $allConnectedInitialsArray[$keyArray[0]]);
							}
						}
					}
					//This is the case if initials have single connect connection with no ns. 
					if($value == 1){
						//key is taken
						$keyArray = array_keys($allConnectedInitialsArray, $id);
						//check if connect
						if($connectionTypeArray[$keyArray[0]]=='connect'){
							//check if no ns
							if($nsConnectValueArray[$keyArray[0]]=='0'){
								//final push to array for the initial id to be deleted
								array_push($initialToBeDeleted, $allConnectedInitialsArray[$keyArray[0]]);

							}
						}
						//check if swap
						if($connectionTypeArray[$keyArray[0]]=='swap'){
							//check if no ns
							if($nsConnectValueArray[$keyArray[0]]=='0'){
								//final push to array for the initial id to be deleted
								array_push($initialToBeDeleted, $allConnectedInitialsArray[$keyArray[0]]);

							}
						}
						//check if earlier PE exist
						if($connectionTypeArray[$keyArray[0]]=='PE'){
							//check if no ns
							if($earlierConnectionValueArray[$keyArray[0]]=='1'){
								//final push to array for the initial id to be deleted
								array_push($initialToBeDeleted, $allConnectedInitialsArray[$keyArray[0]]);

							}
						}
					}
				}

				//array customization
				$allConnectedInitialsUniqueArray = array_unique($allConnectedInitialsArray);
				$allConnectedInitialsSortedArray = array_values($allConnectedInitialsUniqueArray);
				//final effective array
			    $returnArray = array_diff($allConnectedInitialsSortedArray,$initialToBeDeleted);
				$returnArray = array_values($returnArray);
			}	
		}
		return $returnArray;	
	}

		//zero comparatives below initial check
	function zeroComparativesCheck($db, $comparison_table, $id, $cutOff){
		$zeroComparativesValue = 0;
		$zeroComparativesCheck = "SELECT id FROM $comparison_table  WHERE `initial_symptom_id`= $id AND `matched_percentage` >= $cutOff AND is_excluded_in_comparison = 0";
		$zeroComparativesCheckResult = mysqli_query($db, $zeroComparativesCheck);
		if(mysqli_num_rows($zeroComparativesCheckResult) == 0){
			$zeroComparativesValue = 1;
		}
		return $zeroComparativesValue;
	}

	//marking initial listing function
	function markingInitialArray($db,$comparisonTableName,$cutOff){
		$allUnmarkedInitialsArray = array();
		if($comparisonTableName != ""){
			$allConnectQuery = "SELECT symptom_id FROM $comparisonTableName WHERE is_initial_symptom = '1' AND connection = '0' AND `marked`='0' AND is_excluded_in_comparison = 0";
			$allConnectQueryResult = mysqli_query($db, $allConnectQuery);
			if(mysqli_num_rows($allConnectQueryResult) > 0){
				while($allConnectQueryResultData = mysqli_fetch_array($allConnectQueryResult)){
					$value = $allConnectQueryResultData['symptom_id'];
					$zeroComparativesValue = zeroComparativesCheck($db, $comparisonTableName, $value, $cutOff);
					//inserting initials in arrays
					if($zeroComparativesValue == 0)
						array_push($allUnmarkedInitialsArray, $allConnectQueryResultData['symptom_id']);
				}
			}
		}
		return $allUnmarkedInitialsArray;	
	}

	//general ns initial listing function
	function generalNsArray($db,$comparisonTableName){
		$allGenNsInitialArray = array();
		if($comparisonTableName != ""){
			$allConnectQuery = "SELECT symptom_id FROM $comparisonTableName WHERE is_initial_symptom = '1' AND connection = '0' AND `gen_ns`='1' AND is_excluded_in_comparison = 0";
			$allConnectQueryResult = mysqli_query($db, $allConnectQuery);
			if(mysqli_num_rows($allConnectQueryResult) > 0){
				while($allConnectQueryResultData = mysqli_fetch_array($allConnectQueryResult)){
					$value = $allConnectQueryResultData['symptom_id'];
					//inserting initials in arrays
					array_push($allGenNsInitialArray, $allConnectQueryResultData['symptom_id']);
				}
			}
		}
		return $allGenNsInitialArray;	
	}

	//ns connect initial listing function
	function connectNsArray($db,$comparisonTableName){
		$allNsConnectArray = array();
		if($comparisonTableName != ""){
			$allConnectQuery = "SELECT symptom_id FROM $comparisonTableName WHERE is_initial_symptom = '1' AND connection = '0' AND `non_secure_connect`='1' AND is_excluded_in_comparison = 0";
			$allConnectQueryResult = mysqli_query($db, $allConnectQuery);
			if(mysqli_num_rows($allConnectQueryResult) > 0){
				while($allConnectQueryResultData = mysqli_fetch_array($allConnectQueryResult)){
					$value = $allConnectQueryResultData['symptom_id'];
					//inserting initials in arrays
					array_push($allNsConnectArray, $allConnectQueryResultData['symptom_id']);
				}
			}
		}
		return $allNsConnectArray;	
	}

	//ns paste initial listing function
	function pastetNsArray($db,$comparisonTableName){
		$allNsPasteArray = array();
		if($comparisonTableName != ""){
			$allConnectQuery = "SELECT symptom_id FROM $comparisonTableName WHERE is_initial_symptom = '1' AND connection = '0' AND `non_secure_paste`='1' AND is_excluded_in_comparison = 0";
			$allConnectQueryResult = mysqli_query($db, $allConnectQuery);
			if(mysqli_num_rows($allConnectQueryResult) > 0){
				while($allConnectQueryResultData = mysqli_fetch_array($allConnectQueryResult)){
					$value = $allConnectQueryResultData['symptom_id'];
					//inserting initials in arrays
					array_push($allNsPasteArray, $allConnectQueryResultData['symptom_id']);
				}
			}
		}
		return $allNsPasteArray;	
	}

	//different conditions for initial display
	function initialCustomListingModified($param, $db, $comparison_table, $page_start, $per_page_initial, $customized_array){
		$allInitialInfo = array();
		switch ($param) {
			case '1':{
				//declaration
				$displayInitialArray = array();
				$allInitialInfo = array();
				$totalCount = count($customized_array);
				//initial array handling
				$arrayCountLeft = $page_start;
				$arrayCountRight = $arrayCountLeft + $per_page_initial;
				//loop for initials sync with pagination
				for($i = $arrayCountLeft; $i<$arrayCountRight; $i++){
					if($i == $totalCount)
						break;
					array_push($displayInitialArray, $customized_array[$i]);
				}
				foreach ($displayInitialArray as $id){
					$savedResult = mysqli_query($db, "SELECT * FROM $comparison_table WHERE is_initial_symptom = '1' AND connection = '0' AND `marked`='0' AND is_excluded_in_comparison = 0 AND `symptom_id`=$id");

					if(mysqli_num_rows($savedResult) > 0){
						while($savedData = mysqli_fetch_array($savedResult)){
							array_push($allInitialInfo, $savedData);
						}
					}
				}
				break;
			}

			case '2':{
				//declaration
				$displayInitialArray = array();
				$allInitialInfo = array();
				$totalCount = count($customized_array);
				//initial array handling
				$arrayCountLeft = $page_start;
				$arrayCountRight = $arrayCountLeft + $per_page_initial;
				//loop for initials sync with pagination
				for($i = $arrayCountLeft; $i<$arrayCountRight; $i++){
					if($i == $totalCount)
						break;
					array_push($displayInitialArray, $customized_array[$i]);
				}
				foreach ($displayInitialArray as $id){
					$savedResult = mysqli_query($db, "SELECT * FROM $comparison_table WHERE is_initial_symptom = '1' AND connection = '0' AND `gen_ns`='1' AND is_excluded_in_comparison = 0 AND `symptom_id`=$id");

					if(mysqli_num_rows($savedResult) > 0){
						while($savedData = mysqli_fetch_array($savedResult)){
							array_push($allInitialInfo, $savedData);
						}
					}
				}
				break;
			}

			case '3':{
				//declaration
				$displayInitialArray = array();
				$allInitialInfo = array();
				$totalCount = count($customized_array);
				//initial array handling
				$arrayCountLeft = $page_start;
				$arrayCountRight = $arrayCountLeft + $per_page_initial;
				//loop for initials sync with pagination
				for($i = $arrayCountLeft; $i<$arrayCountRight; $i++){
					if($i == $totalCount)
						break;
					array_push($displayInitialArray, $customized_array[$i]);
				}
				foreach ($displayInitialArray as $id){
					$savedResult = mysqli_query($db, "SELECT * FROM $comparison_table WHERE is_initial_symptom = '1' AND connection = '0' AND `non_secure_connect`='1' AND is_excluded_in_comparison = 0 AND `symptom_id`=$id");

					if(mysqli_num_rows($savedResult) > 0){
						while($savedData = mysqli_fetch_array($savedResult)){
							array_push($allInitialInfo, $savedData);
						}
					}
				}
				break;
			}

			case '4':{
				//declaration
				$displayInitialArray = array();
				$allInitialInfo = array();
				$totalCount = count($customized_array);
				//initial array handling
				$arrayCountLeft = $page_start;
				$arrayCountRight = $arrayCountLeft + $per_page_initial;
				//loop for initials sync with pagination
				for($i = $arrayCountLeft; $i<$arrayCountRight; $i++){
					if($i == $totalCount)
						break;
					array_push($displayInitialArray, $customized_array[$i]);
				}
				foreach ($displayInitialArray as $id){
					$savedResult = mysqli_query($db, "SELECT * FROM $comparison_table WHERE is_initial_symptom = '1' AND connection = '0' AND `non_secure_paste`='1' AND is_excluded_in_comparison = 0 AND `symptom_id`=$id");

					if(mysqli_num_rows($savedResult) > 0){
						while($savedData = mysqli_fetch_array($savedResult)){
							array_push($allInitialInfo, $savedData);
						}
					}
				}
				break;
			}

			case '5':{
				//declaration
				$displayInitialArray = array();
				$allInitialInfo = array();
				$totalCount = count($customized_array);
				//initial array handling
				$arrayCountLeft = $page_start;
				$arrayCountRight = $arrayCountLeft + $per_page_initial;
				//loop for initials sync with pagination
				for($i = $arrayCountLeft; $i<$arrayCountRight; $i++){
					if($i == $totalCount)
						break;
					array_push($displayInitialArray, $customized_array[$i]);
				}
				foreach ($displayInitialArray as $id){
					$savedResult = mysqli_query($db, "SELECT * FROM $comparison_table WHERE is_initial_symptom = '1' AND connection = '0' AND is_excluded_in_comparison = 0 AND `symptom_id`=$id");

					if(mysqli_num_rows($savedResult) > 0){
						while($savedData = mysqli_fetch_array($savedResult)){
							array_push($allInitialInfo, $savedData);
						}
					}
				}
				break;
			}
			
			
			default:{
				$savedResult = mysqli_query($db, "SELECT * FROM $comparison_table WHERE is_initial_symptom = '1' AND connection = '0' AND is_excluded_in_comparison = 0 LIMIT $page_start, $per_page_initial");
				if(mysqli_num_rows($savedResult) > 0){
					while($savedData = mysqli_fetch_array($savedResult)){
						array_push($allInitialInfo, $savedData);
					}
				}
				break;
			}
		}
		return $allInitialInfo;
	}

	//get pre comparison id by comparison table name
	function updateDateOfModifiedSources($quelle_id, $is_compared_source){
		global $db;
		$endDate = date("Y-m-d H:i:s");

		//update quelle table
		$updateSourceData = "UPDATE quelle_import_master SET stand = NULLIF('".$endDate."', '') WHERE quelle_id = $quelle_id";
		$db->query($updateSourceData);
		// // //updating for compared sources
		// // if($is_compared_source){
		// // 	$endDate = date("Y-m-d H:i:s"); 
		// // 	//update pre comparison table
		// // 	$updateComparisonData = "UPDATE pre_comparison_master_data SET stand = NULLIF('".$endDate."', '') WHERE quelle_id = $quelle_id";
		// // 	$db->query($updateComparisonData);
		// // }
	}

	//get quelle id based on comparison table
	function getQuelleId($comparisonTableName){
		global $db;
		$quelle_id = 0;
		$quelleIdFetchQuery = mysqli_query($db, "SELECT quelle_id FROM pre_comparison_master_data WHERE `table_name`= '".$comparisonTableName."'");
        if(mysqli_num_rows($quelleIdFetchQuery) > 0){
            while($queryIdFetched = mysqli_fetch_array($quelleIdFetchQuery)){
				$quelle_id = $queryIdFetched["quelle_id"];
			}
		}
		return $quelle_id;
	}

	//editor initials update
	function updateLatestEditorInitials($editorInitials, $quelle_id, $section){
		global $db;
		//$section == 1 for comparison
		//$section == 2 for import
		if(!empty($editorInitials) && $editorInitials != ""){
			switch($section){
				case '1':{
					//update pre_comparison_master_data table
					$updateEditorInitialsData = "UPDATE pre_comparison_master_data SET editor_ini = NULLIF('".$editorInitials."', '') WHERE quelle_id = $quelle_id";
					$db->query($updateEditorInitialsData);
					break;
				}
				case '2':{
					//update quelle table
					$updateEditorInitialsData = "UPDATE quelle SET editor_ini = NULLIF('".$editorInitials."', '') WHERE quelle_id = $quelle_id";
					$db->query($updateEditorInitialsData);
					break;
				}
				default:{
					//nothing
					break;
				}
			}
		}
	}

	//connection business logic check
	function connectionBusinessLogicCheck($comparison_table_name, $connection_type, $initial_symptom_id, $comparing_symptom_id){
		global $db;
		$status = 'success';
		$message =  'ok';
		$casesArray = array();
		//$connectionsTable = $comparison_table_name;
		$returnTrue = 1;
		$connectionsTable = $comparison_table_name."_connections";
		try{
			switch($connection_type){
				case "connect":{
					//checking if initial has swap connection
					$checkIfInitialIsSwappedResult = mysqli_query($db,"SELECT connection_type FROM $connectionsTable WHERE initial_symptom_id = $initial_symptom_id AND is_earlier_connection = '0'");
					if(!$checkIfInitialIsSwappedResult){
						throw new Exception("Error in checking if initial has swap connection: ".$db->error);
					}
					if(mysqli_num_rows($checkIfInitialIsSwappedResult) > 0){
						while($checkIfInitialIsSwappedRow = mysqli_fetch_array($checkIfInitialIsSwappedResult)){
							//$runningInitialIsEarlierConnection = $checkIfInitialIsSwappedRow['is_earlier_connection'];
							$runningInitialConnectionType = $checkIfInitialIsSwappedRow['connection_type'];
							if($runningInitialConnectionType == 'swap' || $runningInitialConnectionType == 'swapCE'){
								//exit();
								$caseMsg = 'Case 1';
								array_push($casesArray, $caseMsg);
								$returnTrue = 0;
								break;
							}
						}
					}else{
						//checking if comparing has swap connection
						$checkIfComparingIsSwappedResult = mysqli_query($db,"SELECT connection_type FROM $connectionsTable WHERE initial_symptom_id = $comparing_symptom_id AND is_earlier_connection = '0'");
						if(!$checkIfComparingIsSwappedResult){
							throw new Exception("Error in checking if comparing has swap connection: ".$db->error);
						}
						if(mysqli_num_rows($checkIfComparingIsSwappedResult) > 0){
							while($checkIfComparingIsSwappedRow = mysqli_fetch_array($checkIfComparingIsSwappedResult)){
								$comparingConnectionType = $checkIfComparingIsSwappedRow['connection_type'];
								//checking also if comparing has paste/PE connection
								if($comparingConnectionType == 'swap' || $comparingConnectionType == 'swapCE'){
									$caseMsg = 'Case 2';
									array_push($casesArray, $caseMsg);
									$returnTrue = 0;
									break;
								}
							}
						}else{
							//checking if comparing has other connection
							$checkIfComparingHasOtherConnectionResult = mysqli_query($db,"SELECT connection_type FROM $connectionsTable WHERE comparing_symptom_id = $comparing_symptom_id AND is_earlier_connection = '0'");
							if(!$checkIfComparingHasOtherConnectionResult){
								throw new Exception("Error in checking if comparing has other connection: ".$db->error);
							}
							if(mysqli_num_rows($checkIfComparingHasOtherConnectionResult) > 0){
								while($checkIfComparingHasOtherConnectionRow = mysqli_fetch_array($checkIfComparingHasOtherConnectionResult)){
									$comparingConnectionType = $checkIfComparingHasOtherConnectionRow['connection_type'];
									//checking also if comparing has paste/PE connection
									if($comparingConnectionType == 'paste' || $comparingConnectionType == 'PE'){
										$caseMsg = 'Case 3';
										array_push($casesArray, $caseMsg);
										$returnTrue = 0;
										break;
									}
								}
							}
						}
					}	
				}break;
				case "CE":{
					//checking if initial has swap connection
					$checkIfInitialIsSwappedResult = mysqli_query($db,"SELECT connection_type FROM $connectionsTable WHERE initial_symptom_id = $initial_symptom_id AND is_earlier_connection = '0'");
					if(!$checkIfInitialIsSwappedResult){
						throw new Exception("Error in checking if initial has swap connection: ".$db->error);
					}
					if(mysqli_num_rows($checkIfInitialIsSwappedResult) > 0){
						while($checkIfInitialIsSwappedRow = mysqli_fetch_array($checkIfInitialIsSwappedResult)){
							//$runningInitialIsEarlierConnection = $checkIfInitialIsSwappedRow['is_earlier_connection'];
							$runningInitialConnectionType = $checkIfInitialIsSwappedRow['connection_type'];
							if($runningInitialConnectionType == 'swap' || $runningInitialConnectionType == 'swapCE' || $runningInitialConnectionType == 'CE'){
								//exit();
								$caseMsg = 'Case 1';
								array_push($casesArray, $caseMsg);
								$returnTrue = 0;
								break;
							}
						}
					}else{
						//checking if comparing has swap connection
						$checkIfComparingIsSwappedResult = mysqli_query($db,"SELECT connection_type FROM $connectionsTable WHERE initial_symptom_id = $comparing_symptom_id AND is_earlier_connection = '0'");
						if(!$checkIfComparingIsSwappedResult){
							throw new Exception("Error in checking if comparing has swap connection: ".$db->error);
						}
						if(mysqli_num_rows($checkIfComparingIsSwappedResult) > 0){
							while($checkIfComparingIsSwappedRow = mysqli_fetch_array($checkIfComparingIsSwappedResult)){
								$comparingConnectionType = $checkIfComparingIsSwappedRow['connection_type'];
								//checking also if comparing has paste/PE connection
								if($comparingConnectionType == 'swap' || $comparingConnectionType == 'swapCE'){
									$caseMsg = 'Case 2';
									array_push($casesArray, $caseMsg);
									$returnTrue = 0;
									break;
								}
							}
						}else{
							//checking if comparing has other connection
							$checkIfComparingHasOtherConnectionResult = mysqli_query($db,"SELECT connection_type FROM $connectionsTable WHERE comparing_symptom_id = $comparing_symptom_id AND is_earlier_connection = '0'");
							if(!$checkIfComparingHasOtherConnectionResult){
								throw new Exception("Error in checking if comparing has other connection: ".$db->error);
							}
							if(mysqli_num_rows($checkIfComparingHasOtherConnectionResult) > 0){
								while($checkIfComparingHasOtherConnectionRow = mysqli_fetch_array($checkIfComparingHasOtherConnectionResult)){
									$comparingConnectionType = $checkIfComparingHasOtherConnectionRow['connection_type'];
									//checking also if comparing has paste/PE connection
									//allowing multiple CE of comparative 
									if($comparingConnectionType == 'paste' || $comparingConnectionType == 'PE'){
										$caseMsg = 'Case 3';
										array_push($casesArray, $caseMsg);
										$returnTrue = 0;
										break;
									}
								}
							}
						}
					}
				}break;
				case "paste":{
					//checking if initial has swap connection
					$checkIfInitialIsSwappedResult = mysqli_query($db,"SELECT connection_type FROM $connectionsTable WHERE initial_symptom_id = $initial_symptom_id AND is_earlier_connection = '0'");
					if(!$checkIfInitialIsSwappedResult){
						throw new Exception("Error in checking if initial has swap connection: ".$db->error);
					}
					if(mysqli_num_rows($checkIfInitialIsSwappedResult) > 0){
						while($checkIfInitialIsSwappedRow = mysqli_fetch_array($checkIfInitialIsSwappedResult)){
							$runningInitialConnectionType = $checkIfInitialIsSwappedRow['connection_type'];
							if($runningInitialConnectionType == 'swap' || $runningInitialConnectionType == 'swapCE'){
								$caseMsg = 'Case 1';
								array_push($casesArray, $caseMsg);
								$returnTrue = 0;
								break;
							}
						}
					}else{
						//checking if comparing has swap connection
						$checkIfComparingIsSwappedResult = mysqli_query($db,"SELECT connection_type FROM $connectionsTable WHERE initial_symptom_id = $comparing_symptom_id AND is_earlier_connection = '0'");
						if(!$checkIfComparingIsSwappedResult){
							throw new Exception("Error in checking if comparing has swap connection: ".$db->error);
						}
						if(mysqli_num_rows($checkIfComparingIsSwappedResult) > 0){
							while($checkIfComparingIsSwappedRow = mysqli_fetch_array($checkIfComparingIsSwappedResult)){
								$comparingConnectionType = $checkIfComparingIsSwappedRow['connection_type'];
								//checking also if comparing has paste/PE connection
								if($comparingConnectionType == 'swap' || $comparingConnectionType == 'swapCE'){
									$caseMsg = 'Case 2';
									array_push($casesArray, $caseMsg);
									$returnTrue = 0;
									break;
								}
							}
						}else{
							//checking if comparing has other connection
							$checkIfComparingHasOtherConnectionResult = mysqli_query($db,"SELECT connection_type FROM $connectionsTable WHERE comparing_symptom_id = $comparing_symptom_id AND is_earlier_connection = '0'");
							if(!$checkIfComparingHasOtherConnectionResult){
								throw new Exception("Error in checking if comparing has other connection: ".$db->error);
							}
							if(mysqli_num_rows($checkIfComparingHasOtherConnectionResult) > 0){
								$caseMsg = 'Case 3';
								array_push($casesArray, $caseMsg);
								$returnTrue = 0;
								break;
							}
						}
					}
				}break;
				case "PE":{
					//checking if initial has swap connection
					$checkIfInitialIsSwappedResult = mysqli_query($db,"SELECT connection_type FROM $connectionsTable WHERE initial_symptom_id = $initial_symptom_id AND is_earlier_connection = '0'");
					if(!$checkIfInitialIsSwappedResult){
						throw new Exception("Error in checking if initial has swap connection: ".$db->error);
					}
					if(mysqli_num_rows($checkIfInitialIsSwappedResult) > 0){
						while($checkIfInitialIsSwappedRow = mysqli_fetch_array($checkIfInitialIsSwappedResult)){
							$runningInitialConnectionType = $checkIfInitialIsSwappedRow['connection_type'];
							if($runningInitialConnectionType == 'swap' || $runningInitialConnectionType == 'swapCE'){
								$caseMsg = 'Case 1';
								array_push($casesArray, $caseMsg);
								$returnTrue = 0;
								break;
							}
						}
					}else{
						//checking if comparing has swap connection
						$checkIfComparingIsSwappedResult = mysqli_query($db,"SELECT connection_type FROM $connectionsTable WHERE initial_symptom_id = $comparing_symptom_id AND is_earlier_connection = '0'");
						if(!$checkIfComparingIsSwappedResult){
							throw new Exception("Error in checking if comparing has swap connection: ".$db->error);
						}
						if(mysqli_num_rows($checkIfComparingIsSwappedResult) > 0){
							while($checkIfComparingIsSwappedRow = mysqli_fetch_array($checkIfComparingIsSwappedResult)){
								$comparingConnectionType = $checkIfComparingIsSwappedRow['connection_type'];
								//checking also if comparing has paste/PE connection
								if($comparingConnectionType == 'swap' || $comparingConnectionType == 'swapCE'){
									$caseMsg = 'Case 2';
									array_push($casesArray, $caseMsg);
									$returnTrue = 0;
									break;
								}
							}
						}else{
							//checking if comparing has other connection
							$checkIfComparingHasOtherConnectionResult = mysqli_query($db,"SELECT connection_type FROM $connectionsTable WHERE comparing_symptom_id = $comparing_symptom_id AND is_earlier_connection = '0'");
							if(!$checkIfComparingHasOtherConnectionResult){
								throw new Exception("Error in checking if comparing has other connection: ".$db->error);
							}
							if(mysqli_num_rows($checkIfComparingHasOtherConnectionResult) > 0){
								$caseMsg = 'Case 3';
								array_push($casesArray, $caseMsg);
								$returnTrue = 0;
								break;
							}
						}
					}
				}break;
				default:{
					//nothing
				}
			}
		}catch (Exception $e) {
			$status = 'error';
			$message =  $message = $e->getMessage();
		}
		return $returnTrue;
	}

	
	//get import setting of source
	function fetchSourceImportRule($quelle_id, $arznei_id){
		global $db;
		$returnVal = "";
		//selecting import rule
		$selectImportRule = $db->prepare("SELECT import_rule FROM quelle_import_master WHERE quelle_id = ? AND arznei_id = ?");
        $selectImportRule->bind_param("ii", $quelle_id, $arznei_id);
        $selectImportRule->execute();
        $selectImportRule->store_result();
        $selectImportRule->bind_result($selectedImportRule);
        $selectImportRule->fetch();
        if($selectImportRule->num_rows != 0){
            $returnVal = $selectedImportRule;
        }
		return $returnVal;
	}

	//Theta Î¸ (Diagnosis) operation on symptom string
	function thetaDiagnosisOperation($string){
		$returnArray = array();
		$replacementDiagnosisString = "";
		$originalDiagnosisString = "";
		$firstOccurenceOfTheta = 0;
		$string = trim($string);
		$firstOccurenceOfTheta = mb_strpos($string,'Î¸');
		
		//it should be kept in mind that the string parameter here is a string without any html tags i.e it is plain text.
		if($firstOccurenceOfTheta){
			$originalDiagnosisString = mb_substr($string, $firstOccurenceOfTheta);
			$originalDiagnosisString = strip_tags(trim($originalDiagnosisString));
			$replacementDiagnosisString = " <theta-normal>".$originalDiagnosisString."</theta-normal> ";
			$string = str_replace($originalDiagnosisString, "", $string);
		}
		$returnArray = array(
			"theta-string-part" => $replacementDiagnosisString,
			"theta-original-part" => $originalDiagnosisString,
			"line" => $string
		);
		return $returnArray;
	}

	//fetching of theta part from database
	function fetchThetaPart($input){
		$pattern = '/<theta-normal>(.*?)<\/theta-normal>/s';
		if (preg_match($pattern, $input, $matches)) {
			return $matches[1]; 
		}
		return '';
	}

	//theta symbol in italic
	function thetaInItalics($line){
		//adding the em tags for the theta part. This disintegrates the string format but works.
		$line = str_replace("Î¸", "<em>Î¸</em>", $line);
		return $line;
	}

	//charcater fix for comma and dot with regex pattern
	function redundantCharacterFixes($string){
		$string = removeBlankTags($string);
		//pattern to detect spaces between comma and dot
		//$pattern = '/,\s*\./';
		$pattern = '/,\s*[,.\s]*\./';
		// Replacing the matched pattern with a single dot
		$output_str = preg_replace($pattern, '.', $string);
		return $output_str;
	}

	//function to exclude the punctuation symbols from symptom string, thereby making it uneffective to gradings.
	function punctuationPositionFix($string){
		$string = stripslashes($string);
		//defining an array of punctuation symbols
		$punctuationSymbols = ["\.", '\,', ':', ';', '\?', '!', '\(', '\)', '\[', '\]', '\Î±', '\Î²'];
		$punctuationSymbolsRaw = ['.', ',', ':', ';', '?', '!', '(', ')', '[', ']','Î±','Î²'];
		//pattern with the specified punctuation symbols
		$patternPunctuation = '/(' . implode('|', $punctuationSymbols) . ')/';
		//$patternPunctuation = '/\s*(' . implode('|', $punctuationSymbols) . ')\s*/';
		//$patternPunctuation = '/(' . implode('|', array_map('preg_quote', $punctuationSymbols)) . ')/';
		//splitting the string into parts using the specified punctuation symbols and capture the delimiter
		$stringExploded = preg_split($patternPunctuation, $string, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);
	
		//patterns for tag identification
		$patternToFindAllClosedTags = '/<\/([a-z][a-z0-9]*)\b[^>]*>/i';
		$patternToFindAllOpenTags = '/<([a-z][a-z0-9]*)\b[^>]*>/i';
		$returnString = "";
		$returnArr = array();
		//print_r($stringExploded);
		for($key =0; $key<count($stringExploded); $key++){
			$stringPart = $stringExploded[$key];
			// for the first part
			if($key == 0 && in_array(trim($stringPart),$punctuationSymbolsRaw)){
				array_push($returnArr, $stringPart);
			}
			//if stringPart is only a punctuation then if the last char of the return array is not the same character as stringPart then insert in the return arr.
			$stringPartPrevious = trim(end($returnArr));
			//checking if the string part is in the punctuation arr and if the return arr has a valid element
			if($stringPartPrevious != "" && in_array(trim($stringPart),$punctuationSymbolsRaw)){
				//last character of the last element of the return arr is taken out
				$lastCharacterOfLastPart = mb_substr($stringPartPrevious, -1);
				//if the last character of the last element of the return arr is not the same as the stringPart then push the stringPart in the return arr.
				//so basically if two punctuations characters are present consequtively then the punctuation is not skipped and taken into consideration
				if(!($lastCharacterOfLastPart == trim($stringPart))){
					array_push($returnArr, $stringPart);
				}
				//inserting the last punctuation character in the return arr.
				// if(!isset($stringExploded[$key+1]) && in_array(trim($stringPart),$punctuationSymbolsRaw)){
				  
				//     // var_dump($lastCharacterOfLastPart);
				//     // var_dump($stringPart);
				//     if($lastCharacterOfLastPart != trim($stringPart)){
				//         echo PHP_EOL."+++++++ lastCharacterOfLastPart $lastCharacterOfLastPart stringPart $stringPart";
				//         array_push($returnArr, $stringPart);
				//         echo PHP_EOL."******";
				//         print_r($returnArr);
				//     }
				// }
			}
			
			if(!in_array(trim($stringPart),$punctuationSymbolsRaw)){
				$lastClosedTag = "";
				$lastOpenedTag  = "";
				$lastClosedTagPos  = null;
				$lastOpenedTagPos  = null;
				$lastOpenTagLength  = null;
				$lastCloseTagLength  = null;
				$lastClosedTagPosExists  = "not_exists";
				$lastOpenedTagPosExists  = "not_exists";
				$lastPositionOfString = strlen($stringPart) - 1;
				$punctuationCharacter = (isset($stringExploded[$key+1]) && in_array(trim($stringExploded[$key+1]),$punctuationSymbolsRaw))? $stringExploded[$key+1] : null;
				//step 1: finding all closed tags
				preg_match_all($patternToFindAllClosedTags, $stringPart, $matchesClosed, PREG_OFFSET_CAPTURE);
				if (!empty($matchesClosed[0])) {
					//iterating to the end of the matched array
					foreach ($matchesClosed[0] as $matchClose) {
						$lastClosedTag = $matchClose[0];
						$lastClosedTagPos = $matchClose[1];
						$lastClosedTagPosExists = "exists";
						$lastCloseTagLength = strlen($lastClosedTag);
						$lastClosedTagRaw = $lastClosedTag;
						$lastClosedTagRaw = str_replace("<","",$lastClosedTagRaw);
						$lastClosedTagRaw = str_replace(">","",$lastClosedTagRaw);
					}
				}
				//step 2: finding all open tags
				preg_match_all($patternToFindAllOpenTags, $stringPart, $matchesOpened, PREG_OFFSET_CAPTURE);
				if (!empty($matchesOpened[0])) {
					//iterating to the end of the matched array
					foreach ($matchesOpened[0] as $matchOpen) {
						$lastOpenedTag = $matchOpen[0];
						$lastOpenedTagPos = $matchOpen[1];
						$lastOpenedTagPosExists = "exists";
						$lastOpenTagLength = strlen($lastOpenedTag);
						$lastOpenedTagRaw = $lastOpenedTag;
						$lastOpenedTagRaw = str_replace("<","",$lastOpenedTagRaw);
						$lastOpenedTagRaw = str_replace(">","",$lastOpenedTagRaw);
					}
				}
				//step 3: checking all cases
				if($lastClosedTagPosExists == "exists" && $lastOpenedTagPosExists == "exists"){
					if(($lastPositionOfString - $lastClosedTagPos) < ($lastPositionOfString - $lastOpenedTagPos)){
						//if last tag is a closed tag, appending only the character at the end
						$stringExploded[$key] = $stringExploded[$key].$punctuationCharacter;
					}else{
						//if last tag is a opened tag, converting open tag to close tag and appending. Open tag is also added to the next part in the beginning
						$stringExploded[$key] = $stringExploded[$key]."</$lastOpenedTagRaw>$punctuationCharacter";
						//open tag is appended not to the next element as it is the punctuation character, but to its next element
						$workingKey = $key;
						while($workingKey < count($stringExploded)){
							if(isset($stringExploded[$workingKey+1]) && !in_array(trim($stringExploded[$workingKey+1]),$punctuationSymbolsRaw)){
								$stringExploded[$workingKey+1] = "<$lastOpenedTagRaw>".$stringExploded[$workingKey+1];
								break;
							}
							$workingKey++;
						}
					}
				}else if($lastClosedTagPosExists == "not_exists" && $lastOpenedTagPosExists == "exists"){
					$stringExploded[$key] = $stringExploded[$key]."</$lastOpenedTagRaw>$punctuationCharacter";
					//open tag is appended not to the next element as it is the punctuation character, but to its next element
					$workingKey = $key;
					while($workingKey < count($stringExploded)){
						if(isset($stringExploded[$workingKey+1]) && !in_array(trim($stringExploded[$workingKey+1]),$punctuationSymbolsRaw)){
							$stringExploded[$workingKey+1] = "<$lastOpenedTagRaw>".$stringExploded[$workingKey+1];
							break;
						}
						$workingKey++;
					}
				}else if($lastClosedTagPosExists == "exists" && $lastOpenedTagPosExists == "not_exists"){
					$lastClosedTagRaw = str_replace("/","",$lastClosedTagRaw);
					$stringExploded[$key] = "<$lastClosedTagRaw>".$stringExploded[$key];
				}else{
					$stringExploded[$key] = $stringExploded[$key]."$punctuationCharacter";
				}
				array_push($returnArr, $stringExploded[$key]);
			}
		}
		//converting the array back to string
		$returnString = implode("",$returnArr);
		return $returnString;
	}

	//source type of the books or the Symptomherkunft in Symptom Type Menu Setting Point
	function fetchSourceTypeModified($symptom_id, $original_quelle_id, $symptomEndIdentify){
        global $db;
        $sourceType = "";
        //fetching the results from if the book or source already has source type like primary, secondary assigned to it
        $originalQuelleRes = mysqli_query($db,"SELECT Q.source_type FROM quelle as Q WHERE Q.quelle_id = '".$original_quelle_id."'");
        if(mysqli_num_rows($originalQuelleRes) > 0){
            $originalQuelleRow = mysqli_fetch_assoc($originalQuelleRes);
            $sourceType = $originalQuelleRow['source_type'];
        }

        $querySympTypeInfo = mysqli_query($db,"SELECT * FROM quelle_symptom_settings WHERE quelle_id =$original_quelle_id");
        if(mysqli_num_rows($querySympTypeInfo) > 0){
            $rowSympTypeInfo = mysqli_fetch_assoc($querySympTypeInfo);
            $sourceType = (isset($rowSympTypeInfo['symptom_type_for_whole_origin']) AND $rowSympTypeInfo['symptom_type_for_whole_origin'] != "") ? $rowSympTypeInfo['symptom_type_for_whole_origin'] : "";
            if($symptomEndIdentify != ""){
                if($symptomEndIdentify == "Î±"){
                    $sourceType = (isset($rowSympTypeInfo['symptom_with_singlet_origin']) AND $rowSympTypeInfo['symptom_with_singlet_origin'] != "") ? $rowSympTypeInfo['symptom_with_singlet_origin'] : $rowSympTypeInfo['symptom_type_for_whole_origin'];
                }
                if($symptomEndIdentify == "Î²"){
                    $sourceType = (isset($rowSympTypeInfo['symptom_with_doublet_origin']) AND $rowSympTypeInfo['symptom_with_doublet_origin'] != "") ? $rowSympTypeInfo['symptom_with_doublet_origin'] : $rowSympTypeInfo['symptom_type_for_whole_origin'];
                }
                if($symptomEndIdentify == "endwithdegree"){
                    $sourceType = (isset($rowSympTypeInfo['symptom_with_degree_origin']) AND $rowSympTypeInfo['symptom_with_degree_origin'] != "") ? $rowSympTypeInfo['symptom_with_degree_origin'] : $rowSympTypeInfo['symptom_type_for_whole_origin'];
                }
            }
        }

		$rowSympTypeInfo['symptom_type_for_whole_origin'] = (isset($rowSympTypeInfo['symptom_type_for_whole_origin']) AND $rowSympTypeInfo['symptom_type_for_whole_origin'] != "") ? $rowSympTypeInfo['symptom_type_for_whole_origin'] : "";

        //checking if symptom has prover with it
        $symptomHavingProverResult = mysqli_query($db, "SELECT symptom_id FROM symptom_pruefer WHERE symptom_id = ".$symptom_id."");
        if(mysqli_num_rows($symptomHavingProverResult) > 0){
            $sourceType = (isset($rowSympTypeInfo['symptoms_with_provers_origin']) AND $rowSympTypeInfo['symptoms_with_provers_origin'] != "") ? $rowSympTypeInfo['symptoms_with_provers_origin'] : $rowSympTypeInfo['symptom_type_for_whole_origin'];
        }
        //checking if symptom has reference linked with it
        $symptomHavingReferenceResult = mysqli_query($db, "SELECT symptom_id, reference_id FROM symptom_reference WHERE symptom_id = '".$symptom_id."'");
        if(mysqli_num_rows($symptomHavingReferenceResult) > 0){
            $symptomHavingReferenceRow = mysqli_fetch_assoc($symptomHavingReferenceResult);
            $referenceIDOfSymptom = $symptomHavingReferenceRow['reference_id'];
            $sourceType = (isset($rowSympTypeInfo['symptoms_with_reference_origin']) AND $rowSympTypeInfo['symptoms_with_reference_origin'] != "") ? $rowSympTypeInfo['symptoms_with_reference_origin'] : $rowSympTypeInfo['symptom_type_for_whole_origin'];
            
            //Symptom with Archiv f. d. homÃ¶op. Heilk. V. III as reference, or [A.f.d.H.] behind the symptom.
            //[A.f.d.H.] will be recognized in the import process if the reference is already present in the database, or it needs confirmation in the questioning process
            $customReferenceResult = mysqli_query($db, "SELECT `reference_id` FROM `reference` WHERE `reference_id` = $referenceIDOfSymptom AND `full_reference` LIKE '% V. III%'");
            if(mysqli_num_rows($customReferenceResult) > 0){
                $sourceType = (isset($rowSympTypeInfo['symptom_with_A_f_d_H_origin']) AND $rowSympTypeInfo['symptom_with_A_f_d_H_origin'] != "") ? $rowSympTypeInfo['symptom_with_A_f_d_H_origin'] : $rowSympTypeInfo['symptom_type_for_whole_origin'];
            }
        }
		$sourceType= ucfirst(str_replace("_"," ",$sourceType));
		return $sourceType;
        
    }

	//symptom type fetch function in Symptom Type Menu Setting Point
	function fetchSymptomTypeModified($symptom_id, $original_quelle_id, $extractedSymptomPartsArrBasedOnCustomTags){
        global $db;
        $symptomType = "";
        $querySympTypeInfo = mysqli_query($db,"SELECT * FROM quelle_symptom_settings WHERE quelle_id =$original_quelle_id");
        if($querySympTypeInfo && mysqli_num_rows($querySympTypeInfo) > 0){
            $rowSympTypeInfo = mysqli_fetch_assoc($querySympTypeInfo);
			if(!empty($extractedSymptomPartsArrBasedOnCustomTags)){
				if(!empty($extractedSymptomPartsArrBasedOnCustomTags['asterisk_parts']) || !empty($extractedSymptomPartsArrBasedOnCustomTags['non_asterisk_parts'])){
					$symptomType = (isset($rowSympTypeInfo['symptom_type_for_whole']) AND $rowSympTypeInfo['symptom_type_for_whole'] != "") ? ucfirst($rowSympTypeInfo['symptom_type_for_whole']) : "";
				}
				if(!empty($extractedSymptomPartsArrBasedOnCustomTags['degree_parts'])){
                    $symptomTypeDegree = (isset($rowSympTypeInfo['symptom_with_degree']) AND $rowSympTypeInfo['symptom_with_degree'] != "") ? ucfirst($rowSympTypeInfo['symptom_with_degree']) : "";
					$symptomType = ($symptomType != "" )? $symptomType." , ".$symptomTypeDegree: $symptomTypeDegree;
				}
                if($extractedSymptomPartsArrBasedOnCustomTags['single_t_exist']){
                    $symptomType = (isset($rowSympTypeInfo['symptom_with_singlet']) AND $rowSympTypeInfo['symptom_with_singlet'] != "") ? ucfirst($rowSympTypeInfo['symptom_with_singlet']) : "";
                }
				if($extractedSymptomPartsArrBasedOnCustomTags['double_t_exist']){
                    $symptomType = (isset($rowSympTypeInfo['symptom_with_doublet']) AND $rowSympTypeInfo['symptom_with_doublet'] != "") ? ucfirst($rowSympTypeInfo['symptom_with_doublet']) : "";
                }
                if(!empty($extractedSymptomPartsArrBasedOnCustomTags['endwithdegree_parts'])){
                    $symptomType = (isset($rowSympTypeInfo['symptom_with_degree']) AND $rowSympTypeInfo['symptom_with_degree'] != "") ? ucfirst($rowSympTypeInfo['symptom_with_degree']) : "";
                }
            }
        }
        //checking if symptom has prover with it
        $symptomHavingProverResult = mysqli_query($db, "SELECT symptom_id FROM symptom_pruefer WHERE symptom_id = ".$symptom_id."");
        if($symptomHavingProverResult && mysqli_num_rows($symptomHavingProverResult) > 0){
            $symptomType = (isset($rowSympTypeInfo['symptoms_with_provers']) AND $rowSympTypeInfo['symptoms_with_provers'] != "") ? $rowSympTypeInfo['symptoms_with_provers'] : $symptomType;
        }
        //checking if symptom has reference linked with it
        $symptomHavingReferenceResult = mysqli_query($db, "SELECT symptom_id, reference_id FROM symptom_reference WHERE symptom_id = '".$symptom_id."'");
        if($symptomHavingReferenceResult && mysqli_num_rows($symptomHavingReferenceResult) > 0){
            $symptomHavingReferenceRow = mysqli_fetch_assoc($symptomHavingReferenceResult);
            $referenceIDOfSymptom = $symptomHavingReferenceRow['reference_id'];
            $symptomType = (isset($rowSympTypeInfo['symptoms_with_reference']) AND $rowSympTypeInfo['symptoms_with_reference'] != "") ? $rowSympTypeInfo['symptoms_with_reference'] : $symptomType;
            
            //Symptom with Archiv f. d. homÃ¶op. Heilk. V. III as reference, or [A.f.d.H.] behind the symptom.
            //[A.f.d.H.] will be recognized in the import process if the reference is already present in the database, or it needs confirmation in the questioning process
            $customReferenceResult = mysqli_query($db, "SELECT `reference_id` FROM `reference` WHERE `reference_id` = $referenceIDOfSymptom AND `full_reference` LIKE '% V. III%'");
            if(mysqli_num_rows($customReferenceResult) > 0){
                $symptomType = (isset($rowSympTypeInfo['symptom_with_A_f_d_H']) AND $rowSympTypeInfo['symptom_with_A_f_d_H'] != "") ? $rowSympTypeInfo['symptom_with_A_f_d_H'] : $symptomType;
            }
        }

		//symptom type specificallly for a symptom
        $symptomTypeResult = mysqli_query($db, "SELECT symptom_type FROM symptom_type_setting WHERE symptom_id = '".$symptom_id."'");
        if($symptomTypeResult && mysqli_num_rows($symptomTypeResult) > 0){
            $symptomTypeRow = mysqli_fetch_assoc($symptomTypeResult);
            $symptomType = (isset($symptomTypeRow['symptom_type']) and $symptomTypeRow['symptom_type'] != "") ? $symptomTypeRow['symptom_type'] : $symptomType;
        }
        return $symptomType;
    }

	//this function checks if a string has single t , double t or ends with a degree
    function symptomEndIdentifyCheckForAlphaBetaAndT($originalStringToCheck){
        $symptomEndIdentify = "";
        if(mb_strpos ( $originalStringToCheck, 'Î±' ) !== false){
            $symptomEndIdentify = "Î±";
        }

        if(mb_strpos ( $originalStringToCheck, 'Î²' ) !== false){
            $symptomEndIdentify = "Î²";
        }
        return $symptomEndIdentify;
    }

	//get pre comparison id of a comparison based on the table name
	function getPreCompId($comparisonTableName){
		global $db;
		$preCompId = 0;
		$preCompFetchQuery = mysqli_query($db, "SELECT id FROM pre_comparison_master_data WHERE `table_name`= '".$comparisonTableName."'");
        if(mysqli_num_rows($preCompFetchQuery) > 0){
            while($preCompIdFetched = mysqli_fetch_array($preCompFetchQuery)){
				$preCompId = $preCompIdFetched["id"];
			}
		}
		return $preCompId;
	}

	//get pre comparison id individual symptom 
	function getPreCompIdOfIndividualConnection($connectionTable, $initialSymptomId, $comparingSymptomId){
		global $db;
		$preCompId = 0;
		$preCompFetchQuery = mysqli_query($db, "SELECT pre_comp_id FROM $connectionTable WHERE `initial_symptom_id`= $initialSymptomId AND comparing_symptom_id = $comparingSymptomId");
        if(mysqli_num_rows($preCompFetchQuery) > 0){
            while($preCompIdFetched = mysqli_fetch_array($preCompFetchQuery)){
				$preCompId = $preCompIdFetched["pre_comp_id"];
			}
		}
		return $preCompId;
	}

	function checkIsDeletingConnectionInCurrentComparison($preCompId, $initialSymptomId, $comparativeSymptomId, $comparisonTableName){
		global $db;
		$returnData= 1;
		$returnArr = array(
			'currentPreCompId' => 0,
			'isDeletingConnectionInCurrentComparison' => $returnData,
			'is_step_child' => 0
		);
		if($preCompId != "" && $initialSymptomId != "" && $comparativeSymptomId != "" && $comparisonTableName != ""){
			$symptomConnectionCollectionQuery = mysqli_query($db, "SELECT pre_comp_id, step_child FROM ".$comparisonTableName."_connections WHERE `initial_symptom_id` = $initialSymptomId AND comparing_symptom_id = $comparativeSymptomId AND (connection_type = 'CE' OR connection_type = 'swap' OR connection_type = 'swapCE') ORDER BY id DESC LIMIT 1");
			if(mysqli_num_rows($symptomConnectionCollectionQuery) > 0){
				$symptomConnectionData = mysqli_fetch_assoc($symptomConnectionCollectionQuery);
				$currentPreCompId = (isset($symptomConnectionData['pre_comp_id']) AND $symptomConnectionData['pre_comp_id'] != "") ? $symptomConnectionData['pre_comp_id'] : 0;
				if($currentPreCompId != $preCompId)
					$returnData = 0;
				$stepChild = (isset($symptomConnectionData['step_child']) AND $symptomConnectionData['step_child'] != "") ? $symptomConnectionData['step_child'] : 0;
				
				$returnArr = array(
					'currentPreCompId' => $currentPreCompId,
					'isDeletingConnectionInCurrentComparison' => $returnData,
					'is_step_child' => $stepChild
				);
			}
		}
		return $returnArr;
	}

	function getPreCompIdWhileDisconnectingCESwapSwapCE($comparisonTableName, $initialSymptomId, $comparativeSymptomId){
		global $db;
		$returnArr = array(
			'pre_comp_id' => 0,
			'table_name' => ""
		);
		if($initialSymptomId != "" && $comparisonTableName != ""){
			$symptomConnectionCollectionQuery = mysqli_query($db, "SELECT pre_comp_id FROM ".$comparisonTableName."_connections WHERE `initial_symptom_id` = $initialSymptomId AND (connection_type = 'CE' OR connection_type = 'swap' OR connection_type = 'swapCE') AND (initial_symptom_id = $initialSymptomId AND comparing_symptom_id != $comparativeSymptomId) AND step_child = 0 ORDER BY id DESC LIMIT 1");
			if(mysqli_num_rows($symptomConnectionCollectionQuery) > 0){
				$symptomConnectionData = mysqli_fetch_assoc($symptomConnectionCollectionQuery);
				$preCompId = (isset($symptomConnectionData['pre_comp_id']) AND $symptomConnectionData['pre_comp_id'] != "") ? $symptomConnectionData['pre_comp_id'] : 0;
				if($preCompId){
					$preCompFetchQuery = mysqli_query($db, "SELECT table_name FROM pre_comparison_master_data WHERE `id`= $preCompId");
					if(mysqli_num_rows($preCompFetchQuery) > 0){
						$tableNameData = mysqli_fetch_assoc($preCompFetchQuery);
						$tableName = (isset($tableNameData['table_name']) AND $tableNameData['table_name'] != "") ? $tableNameData['table_name'] : "";
					}
					$returnArr['pre_comp_id'] = $preCompId;
					$returnArr['table_name'] = (isset($tableName) AND $tableName != "") ? $tableName : "";
				}
			}
		}
		return $returnArr;
	}

	function updateInitialSymptomWhileDisconnectingCESwapSwapCE($initialSymptomId, $fetchedPreCompId, $currentComparisonTable){
		global $db;
		if($initialSymptomId != "" && $fetchedPreCompId != "" && $currentComparisonTable != ""){
			$preCompFetchQuery = mysqli_query($db, "SELECT table_name FROM pre_comparison_master_data WHERE `id`= $fetchedPreCompId");
			if(mysqli_num_rows($preCompFetchQuery) > 0){
				$tableNameData = mysqli_fetch_assoc($preCompFetchQuery);
				$tableName = isset($tableNameData['table_name']) ? $tableNameData['table_name']."_completed" : "";
				if($tableName != ""){
					$checkComparisonTable = mysqli_query($db,"SHOW TABLES LIKE '".$tableName."'");
					if(mysqli_num_rows($checkComparisonTable) > 0){
						$symptomFetchFetchQuery = mysqli_query($db, "SELECT is_final_version_available, final_version_imported_form_de, final_version_imported_form_en, final_version_de, final_version_en, Beschreibung_de, Beschreibung_en, BeschreibungOriginal_de, BeschreibungOriginal_en, BeschreibungFull_de, BeschreibungFull_en, BeschreibungPlain_de, BeschreibungPlain_en, searchable_text_de, searchable_text_en, swap, swap_value_imported_form_de, swap_value_imported_form_en, swap_value_de, swap_value_en, swap_ce, swap_value_ce_imported_form_de, swap_value_ce_imported_form_en, swap_value_ce_de, swap_value_ce_en FROM $tableName WHERE `symptom_id`= $initialSymptomId");
						if(mysqli_num_rows($symptomFetchFetchQuery) > 0){
							$tableData = mysqli_fetch_assoc($symptomFetchFetchQuery);
							$checkCurrentComparisonTable = mysqli_query($db,"SHOW TABLES LIKE '".$currentComparisonTable."'");
							if(mysqli_num_rows($checkCurrentComparisonTable) > 0){
								$data['final_version_imported_form_de'] = ( isset($tableData['final_version_imported_form_de']) AND $tableData['final_version_imported_form_de'] != "" ) ? mysqli_real_escape_string($db, $tableData['final_version_imported_form_de']) : "";
								$data['final_version_imported_form_en'] = ( isset($tableData['final_version_imported_form_en']) AND $tableData['final_version_imported_form_en'] != "" ) ? mysqli_real_escape_string($db, $tableData['final_version_imported_form_en']) : "";
								$data['final_version_de'] = ( isset($tableData['final_version_de']) AND $tableData['final_version_de'] != "" ) ? mysqli_real_escape_string($db, $tableData['final_version_de']) : "";
								$data['final_version_en'] = ( isset($tableData['final_version_en']) AND $tableData['final_version_en'] != "" ) ? mysqli_real_escape_string($db, $tableData['final_version_en']) : "";
								$data['Beschreibung_de'] = ( isset($tableData['Beschreibung_de']) AND $tableData['Beschreibung_de'] != "" ) ? mysqli_real_escape_string($db, $tableData['Beschreibung_de']) : "";
								$data['Beschreibung_en'] = ( isset($tableData['Beschreibung_en']) AND $tableData['Beschreibung_en'] != "" ) ? mysqli_real_escape_string($db, $tableData['Beschreibung_en']) : "";
								$data['BeschreibungOriginal_de'] = ( isset($tableData['BeschreibungOriginal_de']) AND $tableData['BeschreibungOriginal_de'] != "" ) ? mysqli_real_escape_string($db, $tableData['BeschreibungOriginal_de']) : "";
								$data['BeschreibungOriginal_en'] = ( isset($tableData['BeschreibungOriginal_en']) AND $tableData['BeschreibungOriginal_en'] != "" ) ? mysqli_real_escape_string($db, $tableData['BeschreibungOriginal_en']) : "";
								$data['BeschreibungFull_de'] = ( isset($tableData['BeschreibungFull_de']) AND $tableData['BeschreibungFull_de'] != "" ) ? mysqli_real_escape_string($db, $tableData['BeschreibungFull_de']) : "";
								$data['BeschreibungFull_en'] = ( isset($tableData['BeschreibungFull_en']) AND $tableData['BeschreibungFull_en'] != "" ) ? mysqli_real_escape_string($db, $tableData['BeschreibungFull_en']) : "";
								$data['BeschreibungPlain_de'] = ( isset($tableData['BeschreibungPlain_de']) AND $tableData['BeschreibungPlain_de'] != "" ) ? mysqli_real_escape_string($db, $tableData['BeschreibungPlain_de']) : "";
								$data['BeschreibungPlain_en'] = ( isset($tableData['BeschreibungPlain_en']) AND $tableData['BeschreibungPlain_en'] != "" ) ? mysqli_real_escape_string($db, $tableData['BeschreibungPlain_en']) : "";
								$data['searchable_text_de'] = ( isset($tableData['searchable_text_de']) AND $tableData['searchable_text_de'] != "" ) ? mysqli_real_escape_string($db, $tableData['searchable_text_de']) : "";
								$data['searchable_text_en'] = ( isset($tableData['searchable_text_en']) AND $tableData['searchable_text_en'] != "" ) ? mysqli_real_escape_string($db, $tableData['searchable_text_en']) : "";
								$data['swap'] = ( isset($tableData['swap']) AND $tableData['swap'] != "" ) ? mysqli_real_escape_string($db, $tableData['swap']) : 0;
								$data['swap_value_imported_form_de'] = ( isset($tableData['swap_value_imported_form_de']) AND $tableData['swap_value_imported_form_de'] != "" ) ? mysqli_real_escape_string($db, $tableData['swap_value_imported_form_de']) : "";
								$data['swap_value_imported_form_en'] = ( isset($tableData['swap_value_imported_form_en']) AND $tableData['swap_value_imported_form_en'] != "" ) ? mysqli_real_escape_string($db, $tableData['swap_value_imported_form_en']) : "";
								$data['swap_value_de'] = ( isset($tableData['swap_value_de']) AND $tableData['swap_value_de'] != "" ) ? mysqli_real_escape_string($db, $tableData['swap_value_de']) : "";
								$data['swap_value_en'] = ( isset($tableData['swap_value_en']) AND $tableData['swap_value_en'] != "" ) ? mysqli_real_escape_string($db, $tableData['swap_value_en']) : "";
								$data['swap_ce'] = ( isset($tableData['swap_ce']) AND $tableData['swap_ce'] != "" ) ? mysqli_real_escape_string($db, $tableData['swap_ce']) : 0;
								$data['swap_value_ce_imported_form_de'] = ( isset($tableData['swap_value_ce_imported_form_de']) AND $tableData['swap_value_ce_imported_form_de'] != "" ) ? mysqli_real_escape_string($db, $tableData['swap_value_ce_imported_form_de']) : "";
								$data['swap_value_ce_imported_form_en'] = ( isset($tableData['swap_value_ce_imported_form_en']) AND $tableData['swap_value_ce_imported_form_en'] != "" ) ? mysqli_real_escape_string($db, $tableData['swap_value_ce_imported_form_en']) : "";
								$data['swap_value_ce_de'] = ( isset($tableData['swap_value_ce_de']) AND $tableData['swap_value_ce_de'] != "" ) ? mysqli_real_escape_string($db, $tableData['swap_value_ce_de']) : "";
								$data['swap_value_ce_en'] = ( isset($tableData['swap_value_ce_en']) AND $tableData['swap_value_ce_en'] != "" ) ? mysqli_real_escape_string($db, $tableData['swap_value_ce_en']) : "";
								$data['is_final_version_available'] = ( isset($tableData['is_final_version_available']) AND $tableData['is_final_version_available'] != "" ) ? mysqli_real_escape_string($db, $tableData['is_final_version_available']) : 0;

								$updateCurrentComparisonTableQuery="UPDATE $currentComparisonTable SET final_version_imported_form_de = NULLIF('".$data['final_version_imported_form_de']."', ''), final_version_imported_form_en = NULLIF('".$data['final_version_imported_form_en']."', ''), final_version_de = NULLIF('".$data['final_version_de']."', ''), final_version_en = NULLIF('".$data['final_version_en']."', ''), Beschreibung_de = NULLIF('".$data['Beschreibung_de']."', ''), Beschreibung_en = NULLIF('".$data['Beschreibung_en']."', ''), BeschreibungOriginal_de = NULLIF('".$data['BeschreibungOriginal_de']."', ''), BeschreibungOriginal_en = NULLIF('".$data['BeschreibungOriginal_en']."', ''), BeschreibungFull_de = NULLIF('".$data['BeschreibungFull_de']."', ''), BeschreibungFull_en = NULLIF('".$data['BeschreibungFull_en']."', ''), BeschreibungPlain_de = NULLIF('".$data['BeschreibungPlain_de']."', ''), BeschreibungPlain_en = NULLIF('".$data['BeschreibungPlain_en']."', ''), searchable_text_de = NULLIF('".$data['searchable_text_de']."', ''), searchable_text_en = NULLIF('".$data['searchable_text_en']."', ''), swap = NULLIF('".$data['swap']."', ''), swap_value_imported_form_de = NULLIF('".$data['swap_value_imported_form_de']."', ''), swap_value_imported_form_en = NULLIF('".$data['swap_value_imported_form_en']."', ''), swap_value_de = NULLIF('".$data['swap_value_de']."', ''), swap_value_en = NULLIF('".$data['swap_value_en']."', ''), swap_ce = NULLIF('".$data['swap_ce']."', ''), swap_value_ce_imported_form_de = NULLIF('".$data['swap_value_ce_imported_form_de']."', ''),swap_value_ce_imported_form_en = NULLIF('".$data['swap_value_ce_imported_form_en']."', ''), swap_value_ce_de = NULLIF('".$data['swap_value_ce_de']."', ''), swap_value_ce_en = NULLIF('".$data['swap_value_ce_en']."', ''), is_final_version_available = NULLIF('".$data['is_final_version_available']."', '') WHERE symptom_id = '".$initialSymptomId."'";
								$db->query($updateCurrentComparisonTableQuery);
							}
						}
					}
				}
			}
		}
	}

	function checkIfIdenticalSymptomPairs($initialSymptom, $comparativeSymptom){
		$initialSymptomStripped = strip_tags($initialSymptom, '<b><i><strong><em><u><sup><span><bdi>');
		$comparativeSymptomStripped = strip_tags($comparativeSymptom, '<b><i><strong><em><u><sup><span><bdi>');
	
		if($initialSymptomStripped == $comparativeSymptomStripped)
			return true;
		else
			return false;
	}

	//This function is executed when manual connections are don, skipping the automatic connection process when comparison is completed and is used by the editor for the first time
	function deleteTemporaryConnectionTable($comparisonConnectionsTableName){
		global $db;
		$comparisonTableName = str_replace("_connections","",$comparisonConnectionsTableName);
		$tempConnectionTable = "temp_".$comparisonConnectionsTableName;
		$checkTempTableQuery = mysqli_query($db, "SHOW TABLES LIKE '".$tempConnectionTable."'");
		if(mysqli_num_rows($checkTempTableQuery) != 0){
			$dropTempConnectionTableQuery = "DROP TABLE ".$tempConnectionTable;
			$db->query($dropTempConnectionTableQuery);
		}
		$updateConnectionProcessFlagQuery = "UPDATE pre_comparison_master_data SET editor_connection_process = 0 WHERE table_name = '$comparisonTableName'";
		$db->query($updateConnectionProcessFlagQuery);
	}

	//function to check if symptom is previously connected symptom
	function checkIfPreviuousConnection($comparisonConnectionTable, $symptomId){
		global $db;
		$checkIfPreviosConnectionQuery = mysqli_query($db, "SELECT id FROM $comparisonConnectionTable WHERE `comparing_symptom_id`= $symptomId OR `initial_symptom_id` = $symptomId AND `is_earlier_connection` = '1' ");
		return mysqli_num_rows($checkIfPreviosConnectionQuery) > 0;
	}

	//function to update the last visited page of automatic connections in the user_activites table.
	function updateUserActivity($updateInputArray){
		global $db;
		$userId = $updateInputArray['user_id'];
		$automaticListPageNo = $updateInputArray['automatic_list_page_no'];
		$automaticConnectionPercentage = $updateInputArray['automatic_connection_percentage'];
		$updateUserActivityQuery="UPDATE user_activities SET automatic_list_page_no = '".$automaticListPageNo."', automatic_connection_percentage = $automaticConnectionPercentage WHERE user_id = '".$userId."'";
		return $db->query($updateUserActivityQuery);
	}

	//function to fetch user activities
	function fetchUserActivity($userId){
		global $db;
		$status = "";
		$message = "";
		$fetchedData = array();
		try{
			$fetchUserActivity = mysqli_query($db, "SELECT * FROM user_activities  WHERE user_id = '".$userId."'");
			if(!(mysqli_num_rows($fetchUserActivity) > 0)){
				throw new Exception("Error in fetching user activity details: ".$db->error);
			}
			$fetchedData = mysqli_fetch_assoc($fetchUserActivity);
			$status = "success";
			$message = "done";
		}catch (Exception $e){
			$status = 'error';
			$message =  $message = $e->getMessage();
		}
		return array(
			"fetched_data_arr" =>$fetchedData,
			"status" =>$status,
			"message" =>$message 
		);
	}

	//function to check if temporary connections tables exists
	function checkTemporaryConnectionTable($comparisonTableName){
		global $db;
		$tempConnectionTable = "temp_".$comparisonTableName."_connections";
		$checkTempTableQuery = mysqli_query($db, "SHOW TABLES LIKE '".$tempConnectionTable."'");
		return (mysqli_num_rows($checkTempTableQuery) != 0) ? true: false;
	}

	//check if automatic connection process is ongoing
	function checkIfAutomaticConnectionProcessOn($comid){
		global $db;
		$checkIfAutomaticConnectionProcessOnQuery = mysqli_query($db,"SELECT editor_connection_process FROM pre_comparison_master_data  WHERE id = $comid AND editor_connection_process = 1");
		if(mysqli_num_rows($checkIfAutomaticConnectionProcessOnQuery)>0){
			$tableData = mysqli_fetch_assoc($checkIfAutomaticConnectionProcessOnQuery);
			return ($tableData["editor_connection_process"]==1) ? true: false;
		}
		
	}

	//function to check symptom string parts for asterisk, degree and non asterisk degree
	function symptomStringExtractPartsBasedOnCustomTag($input) {
		$result = [
			'degree_parts' => [],
			'asterisk_parts' => [],
			'non_asterisk_parts' => [],
			'endwithdegree_parts' => [],
			'single_t_exist' => false,
			'double_t_exist' => false
		];
	
		// Pattern for each type
		$patterns = [
			//removing the html custom tag degree-at-end
			'degree_parts' => '/<degree-(?!at-end)[^>]+>.*?<\/degree-[^>]+>/',
			'asterisk_parts' => '/<asterisk-[^>]+>.*?<\/asterisk-[^>]+>/',
			'non_asterisk_parts' => '/<non-asterisk-[^>]+>.*?<\/non-asterisk-[^>]+>/',
			'endwithdegree_parts' => '/<endwithdegree-[^>]+>.*?<\/endwithdegree-[^>]+>/'
		];
	
		// Matching the patterns
		foreach ($patterns as $key => $pattern) {
			preg_match_all($pattern, $input, $matches);
			$result[$key] = $matches[0];
		}
		
		// check for alpha (single t) beta (double t) symbols
		if(mb_strpos ( $input, 'Î±' ) !== false){
			$result['single_t_exist'] = true;
        }

        if(mb_strpos ( $input, 'Î²' ) !== false){
            $result['double_t_exist'] = true;
        }
		return $result;
	}

?>